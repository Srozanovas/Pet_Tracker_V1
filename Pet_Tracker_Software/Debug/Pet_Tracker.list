
Pet_Tracker.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005f88  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003e4  08006118  08006118  00016118  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080064fc  080064fc  00020188  2**0
                  CONTENTS
  4 .ARM          00000000  080064fc  080064fc  00020188  2**0
                  CONTENTS
  5 .preinit_array 00000000  080064fc  080064fc  00020188  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080064fc  080064fc  000164fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006500  08006500  00016500  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000188  20000000  08006504  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001bfc  20000188  0800668c  00020188  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001d84  0800668c  00021d84  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020188  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000201b8  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001fffb  00000000  00000000  000201fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000043e8  00000000  00000000  000401f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001ae8  00000000  00000000  000445e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000014f8  00000000  00000000  000460c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002454b  00000000  00000000  000475c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00020642  00000000  00000000  0006bb0b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e2c62  00000000  00000000  0008c14d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000741c  00000000  00000000  0016edb0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007a  00000000  00000000  001761cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000188 	.word	0x20000188
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006100 	.word	0x08006100

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000018c 	.word	0x2000018c
 80001cc:	08006100 	.word	0x08006100

080001d0 <GPIO_Driver_Init>:
    };
/*______________________________________DEFINES, CONSTANTS, VARIABLES_____________________________________*/



bool GPIO_Driver_Init (eGpioPin_t gpio_pin) {  //GPIO PIN INITIALIZATION
 80001d0:	b580      	push	{r7, lr}
 80001d2:	b08c      	sub	sp, #48	; 0x30
 80001d4:	af00      	add	r7, sp, #0
 80001d6:	4603      	mov	r3, r0
 80001d8:	71fb      	strb	r3, [r7, #7]

    //UNDEFINED PIN 

    if (gpio_pin >= eGpioPinLast) {
 80001da:	79fb      	ldrb	r3, [r7, #7]
 80001dc:	2b1a      	cmp	r3, #26
 80001de:	d901      	bls.n	80001e4 <GPIO_Driver_Init+0x14>
        return false;
 80001e0:	2300      	movs	r3, #0
 80001e2:	e0ef      	b.n	80003c4 <GPIO_Driver_Init+0x1f4>
    }

    GPIO_InitTypeDef gpio_init_struct = {0};
 80001e4:	f107 031c 	add.w	r3, r7, #28
 80001e8:	2200      	movs	r2, #0
 80001ea:	601a      	str	r2, [r3, #0]
 80001ec:	605a      	str	r2, [r3, #4]
 80001ee:	609a      	str	r2, [r3, #8]
 80001f0:	60da      	str	r2, [r3, #12]
 80001f2:	611a      	str	r2, [r3, #16]

    if (rtc_clock_enabled&RTC_H_CLOCK_ENABLED==0){
        __HAL_RCC_GPIOH_CLK_ENABLE();
        rtc_clock_enabled&=RTC_H_CLOCK_ENABLED;      
    }
    switch ((int)(gpio_desc_lut[gpio_pin].port)){
 80001f4:	79fa      	ldrb	r2, [r7, #7]
 80001f6:	4975      	ldr	r1, [pc, #468]	; (80003cc <GPIO_Driver_Init+0x1fc>)
 80001f8:	4613      	mov	r3, r2
 80001fa:	00db      	lsls	r3, r3, #3
 80001fc:	1a9b      	subs	r3, r3, r2
 80001fe:	009b      	lsls	r3, r3, #2
 8000200:	440b      	add	r3, r1
 8000202:	681b      	ldr	r3, [r3, #0]
 8000204:	4a72      	ldr	r2, [pc, #456]	; (80003d0 <GPIO_Driver_Init+0x200>)
 8000206:	4293      	cmp	r3, r2
 8000208:	d03d      	beq.n	8000286 <GPIO_Driver_Init+0xb6>
 800020a:	4a71      	ldr	r2, [pc, #452]	; (80003d0 <GPIO_Driver_Init+0x200>)
 800020c:	4293      	cmp	r3, r2
 800020e:	dc54      	bgt.n	80002ba <GPIO_Driver_Init+0xea>
 8000210:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000214:	d003      	beq.n	800021e <GPIO_Driver_Init+0x4e>
 8000216:	4a6f      	ldr	r2, [pc, #444]	; (80003d4 <GPIO_Driver_Init+0x204>)
 8000218:	4293      	cmp	r3, r2
 800021a:	d01a      	beq.n	8000252 <GPIO_Driver_Init+0x82>
 800021c:	e04d      	b.n	80002ba <GPIO_Driver_Init+0xea>
        case (int)(GPIOA):{
            if ((rtc_clock_enabled&RTC_A_CLOCK_ENABLED)==0){
 800021e:	4b6e      	ldr	r3, [pc, #440]	; (80003d8 <GPIO_Driver_Init+0x208>)
 8000220:	781b      	ldrb	r3, [r3, #0]
 8000222:	f003 0301 	and.w	r3, r3, #1
 8000226:	2b00      	cmp	r3, #0
 8000228:	d149      	bne.n	80002be <GPIO_Driver_Init+0xee>
                 __HAL_RCC_GPIOA_CLK_ENABLE();
 800022a:	4b6c      	ldr	r3, [pc, #432]	; (80003dc <GPIO_Driver_Init+0x20c>)
 800022c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800022e:	4a6b      	ldr	r2, [pc, #428]	; (80003dc <GPIO_Driver_Init+0x20c>)
 8000230:	f043 0301 	orr.w	r3, r3, #1
 8000234:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000236:	4b69      	ldr	r3, [pc, #420]	; (80003dc <GPIO_Driver_Init+0x20c>)
 8000238:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800023a:	f003 0301 	and.w	r3, r3, #1
 800023e:	617b      	str	r3, [r7, #20]
 8000240:	697b      	ldr	r3, [r7, #20]
                rtc_clock_enabled|=RTC_A_CLOCK_ENABLED;      
 8000242:	4b65      	ldr	r3, [pc, #404]	; (80003d8 <GPIO_Driver_Init+0x208>)
 8000244:	781b      	ldrb	r3, [r3, #0]
 8000246:	f043 0301 	orr.w	r3, r3, #1
 800024a:	b2da      	uxtb	r2, r3
 800024c:	4b62      	ldr	r3, [pc, #392]	; (80003d8 <GPIO_Driver_Init+0x208>)
 800024e:	701a      	strb	r2, [r3, #0]
            } 
            break;
 8000250:	e035      	b.n	80002be <GPIO_Driver_Init+0xee>
        }
        case (int)(GPIOB):{
            if ((rtc_clock_enabled&RTC_B_CLOCK_ENABLED)==0){
 8000252:	4b61      	ldr	r3, [pc, #388]	; (80003d8 <GPIO_Driver_Init+0x208>)
 8000254:	781b      	ldrb	r3, [r3, #0]
 8000256:	f003 0302 	and.w	r3, r3, #2
 800025a:	2b00      	cmp	r3, #0
 800025c:	d131      	bne.n	80002c2 <GPIO_Driver_Init+0xf2>
                 __HAL_RCC_GPIOB_CLK_ENABLE();
 800025e:	4b5f      	ldr	r3, [pc, #380]	; (80003dc <GPIO_Driver_Init+0x20c>)
 8000260:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000262:	4a5e      	ldr	r2, [pc, #376]	; (80003dc <GPIO_Driver_Init+0x20c>)
 8000264:	f043 0302 	orr.w	r3, r3, #2
 8000268:	64d3      	str	r3, [r2, #76]	; 0x4c
 800026a:	4b5c      	ldr	r3, [pc, #368]	; (80003dc <GPIO_Driver_Init+0x20c>)
 800026c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800026e:	f003 0302 	and.w	r3, r3, #2
 8000272:	613b      	str	r3, [r7, #16]
 8000274:	693b      	ldr	r3, [r7, #16]
                rtc_clock_enabled|=RTC_B_CLOCK_ENABLED;      
 8000276:	4b58      	ldr	r3, [pc, #352]	; (80003d8 <GPIO_Driver_Init+0x208>)
 8000278:	781b      	ldrb	r3, [r3, #0]
 800027a:	f043 0302 	orr.w	r3, r3, #2
 800027e:	b2da      	uxtb	r2, r3
 8000280:	4b55      	ldr	r3, [pc, #340]	; (80003d8 <GPIO_Driver_Init+0x208>)
 8000282:	701a      	strb	r2, [r3, #0]
            } 
            break;
 8000284:	e01d      	b.n	80002c2 <GPIO_Driver_Init+0xf2>
        }
        case (int)(GPIOC):{
            if ((rtc_clock_enabled&RTC_C_CLOCK_ENABLED)==0){
 8000286:	4b54      	ldr	r3, [pc, #336]	; (80003d8 <GPIO_Driver_Init+0x208>)
 8000288:	781b      	ldrb	r3, [r3, #0]
 800028a:	f003 0304 	and.w	r3, r3, #4
 800028e:	2b00      	cmp	r3, #0
 8000290:	d119      	bne.n	80002c6 <GPIO_Driver_Init+0xf6>
                 __HAL_RCC_GPIOC_CLK_ENABLE();
 8000292:	4b52      	ldr	r3, [pc, #328]	; (80003dc <GPIO_Driver_Init+0x20c>)
 8000294:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000296:	4a51      	ldr	r2, [pc, #324]	; (80003dc <GPIO_Driver_Init+0x20c>)
 8000298:	f043 0304 	orr.w	r3, r3, #4
 800029c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800029e:	4b4f      	ldr	r3, [pc, #316]	; (80003dc <GPIO_Driver_Init+0x20c>)
 80002a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80002a2:	f003 0304 	and.w	r3, r3, #4
 80002a6:	60fb      	str	r3, [r7, #12]
 80002a8:	68fb      	ldr	r3, [r7, #12]
                rtc_clock_enabled|=RTC_C_CLOCK_ENABLED;      
 80002aa:	4b4b      	ldr	r3, [pc, #300]	; (80003d8 <GPIO_Driver_Init+0x208>)
 80002ac:	781b      	ldrb	r3, [r3, #0]
 80002ae:	f043 0304 	orr.w	r3, r3, #4
 80002b2:	b2da      	uxtb	r2, r3
 80002b4:	4b48      	ldr	r3, [pc, #288]	; (80003d8 <GPIO_Driver_Init+0x208>)
 80002b6:	701a      	strb	r2, [r3, #0]
            } 
            break;
 80002b8:	e005      	b.n	80002c6 <GPIO_Driver_Init+0xf6>
        }
        default: return false;                 
 80002ba:	2300      	movs	r3, #0
 80002bc:	e082      	b.n	80003c4 <GPIO_Driver_Init+0x1f4>
            break;
 80002be:	bf00      	nop
 80002c0:	e002      	b.n	80002c8 <GPIO_Driver_Init+0xf8>
            break;
 80002c2:	bf00      	nop
 80002c4:	e000      	b.n	80002c8 <GPIO_Driver_Init+0xf8>
            break;
 80002c6:	bf00      	nop
    }

    //GPIO STRUCT FORMATION

    HAL_GPIO_WritePin(gpio_desc_lut[gpio_pin].port, gpio_desc_lut[gpio_pin].pin, GPIO_PIN_RESET);
 80002c8:	79fa      	ldrb	r2, [r7, #7]
 80002ca:	4940      	ldr	r1, [pc, #256]	; (80003cc <GPIO_Driver_Init+0x1fc>)
 80002cc:	4613      	mov	r3, r2
 80002ce:	00db      	lsls	r3, r3, #3
 80002d0:	1a9b      	subs	r3, r3, r2
 80002d2:	009b      	lsls	r3, r3, #2
 80002d4:	440b      	add	r3, r1
 80002d6:	6818      	ldr	r0, [r3, #0]
 80002d8:	79fa      	ldrb	r2, [r7, #7]
 80002da:	493c      	ldr	r1, [pc, #240]	; (80003cc <GPIO_Driver_Init+0x1fc>)
 80002dc:	4613      	mov	r3, r2
 80002de:	00db      	lsls	r3, r3, #3
 80002e0:	1a9b      	subs	r3, r3, r2
 80002e2:	009b      	lsls	r3, r3, #2
 80002e4:	440b      	add	r3, r1
 80002e6:	3304      	adds	r3, #4
 80002e8:	681b      	ldr	r3, [r3, #0]
 80002ea:	b29b      	uxth	r3, r3
 80002ec:	2200      	movs	r2, #0
 80002ee:	4619      	mov	r1, r3
 80002f0:	f000 feb8 	bl	8001064 <HAL_GPIO_WritePin>
    gpio_init_struct.Pin = gpio_desc_lut[gpio_pin].pin;
 80002f4:	79fa      	ldrb	r2, [r7, #7]
 80002f6:	4935      	ldr	r1, [pc, #212]	; (80003cc <GPIO_Driver_Init+0x1fc>)
 80002f8:	4613      	mov	r3, r2
 80002fa:	00db      	lsls	r3, r3, #3
 80002fc:	1a9b      	subs	r3, r3, r2
 80002fe:	009b      	lsls	r3, r3, #2
 8000300:	440b      	add	r3, r1
 8000302:	3304      	adds	r3, #4
 8000304:	681b      	ldr	r3, [r3, #0]
 8000306:	61fb      	str	r3, [r7, #28]
    gpio_init_struct.Mode = gpio_desc_lut[gpio_pin].mode;
 8000308:	79fa      	ldrb	r2, [r7, #7]
 800030a:	4930      	ldr	r1, [pc, #192]	; (80003cc <GPIO_Driver_Init+0x1fc>)
 800030c:	4613      	mov	r3, r2
 800030e:	00db      	lsls	r3, r3, #3
 8000310:	1a9b      	subs	r3, r3, r2
 8000312:	009b      	lsls	r3, r3, #2
 8000314:	440b      	add	r3, r1
 8000316:	3308      	adds	r3, #8
 8000318:	681b      	ldr	r3, [r3, #0]
 800031a:	623b      	str	r3, [r7, #32]
    gpio_init_struct.Speed = gpio_desc_lut[gpio_pin].speed;
 800031c:	79fa      	ldrb	r2, [r7, #7]
 800031e:	492b      	ldr	r1, [pc, #172]	; (80003cc <GPIO_Driver_Init+0x1fc>)
 8000320:	4613      	mov	r3, r2
 8000322:	00db      	lsls	r3, r3, #3
 8000324:	1a9b      	subs	r3, r3, r2
 8000326:	009b      	lsls	r3, r3, #2
 8000328:	440b      	add	r3, r1
 800032a:	330c      	adds	r3, #12
 800032c:	681b      	ldr	r3, [r3, #0]
 800032e:	62bb      	str	r3, [r7, #40]	; 0x28
    gpio_init_struct.Pull = gpio_desc_lut[gpio_pin].pull;
 8000330:	79fa      	ldrb	r2, [r7, #7]
 8000332:	4926      	ldr	r1, [pc, #152]	; (80003cc <GPIO_Driver_Init+0x1fc>)
 8000334:	4613      	mov	r3, r2
 8000336:	00db      	lsls	r3, r3, #3
 8000338:	1a9b      	subs	r3, r3, r2
 800033a:	009b      	lsls	r3, r3, #2
 800033c:	440b      	add	r3, r1
 800033e:	3310      	adds	r3, #16
 8000340:	681b      	ldr	r3, [r3, #0]
 8000342:	627b      	str	r3, [r7, #36]	; 0x24
    gpio_init_struct.Alternate = gpio_desc_lut[gpio_pin].alternate;
 8000344:	79fa      	ldrb	r2, [r7, #7]
 8000346:	4921      	ldr	r1, [pc, #132]	; (80003cc <GPIO_Driver_Init+0x1fc>)
 8000348:	4613      	mov	r3, r2
 800034a:	00db      	lsls	r3, r3, #3
 800034c:	1a9b      	subs	r3, r3, r2
 800034e:	009b      	lsls	r3, r3, #2
 8000350:	440b      	add	r3, r1
 8000352:	3314      	adds	r3, #20
 8000354:	681b      	ldr	r3, [r3, #0]
 8000356:	62fb      	str	r3, [r7, #44]	; 0x2c
    
    HAL_GPIO_Init(gpio_desc_lut[gpio_pin].port, &gpio_init_struct);
 8000358:	79fa      	ldrb	r2, [r7, #7]
 800035a:	491c      	ldr	r1, [pc, #112]	; (80003cc <GPIO_Driver_Init+0x1fc>)
 800035c:	4613      	mov	r3, r2
 800035e:	00db      	lsls	r3, r3, #3
 8000360:	1a9b      	subs	r3, r3, r2
 8000362:	009b      	lsls	r3, r3, #2
 8000364:	440b      	add	r3, r1
 8000366:	681b      	ldr	r3, [r3, #0]
 8000368:	f107 021c 	add.w	r2, r7, #28
 800036c:	4611      	mov	r1, r2
 800036e:	4618      	mov	r0, r3
 8000370:	f000 fcfe 	bl	8000d70 <HAL_GPIO_Init>

    //INTERUPT ENABLE 
    if (gpio_desc_lut[gpio_pin].interupt_enable == true){
 8000374:	79fa      	ldrb	r2, [r7, #7]
 8000376:	4915      	ldr	r1, [pc, #84]	; (80003cc <GPIO_Driver_Init+0x1fc>)
 8000378:	4613      	mov	r3, r2
 800037a:	00db      	lsls	r3, r3, #3
 800037c:	1a9b      	subs	r3, r3, r2
 800037e:	009b      	lsls	r3, r3, #2
 8000380:	440b      	add	r3, r1
 8000382:	3318      	adds	r3, #24
 8000384:	781b      	ldrb	r3, [r3, #0]
 8000386:	2b00      	cmp	r3, #0
 8000388:	d01b      	beq.n	80003c2 <GPIO_Driver_Init+0x1f2>
        HAL_NVIC_SetPriority(gpio_desc_lut[gpio_pin].interupt, 5, 0);
 800038a:	79fa      	ldrb	r2, [r7, #7]
 800038c:	490f      	ldr	r1, [pc, #60]	; (80003cc <GPIO_Driver_Init+0x1fc>)
 800038e:	4613      	mov	r3, r2
 8000390:	00db      	lsls	r3, r3, #3
 8000392:	1a9b      	subs	r3, r3, r2
 8000394:	009b      	lsls	r3, r3, #2
 8000396:	440b      	add	r3, r1
 8000398:	3319      	adds	r3, #25
 800039a:	f993 3000 	ldrsb.w	r3, [r3]
 800039e:	2200      	movs	r2, #0
 80003a0:	2105      	movs	r1, #5
 80003a2:	4618      	mov	r0, r3
 80003a4:	f000 fc3a 	bl	8000c1c <HAL_NVIC_SetPriority>
        HAL_NVIC_EnableIRQ(gpio_desc_lut[gpio_pin].interupt);
 80003a8:	79fa      	ldrb	r2, [r7, #7]
 80003aa:	4908      	ldr	r1, [pc, #32]	; (80003cc <GPIO_Driver_Init+0x1fc>)
 80003ac:	4613      	mov	r3, r2
 80003ae:	00db      	lsls	r3, r3, #3
 80003b0:	1a9b      	subs	r3, r3, r2
 80003b2:	009b      	lsls	r3, r3, #2
 80003b4:	440b      	add	r3, r1
 80003b6:	3319      	adds	r3, #25
 80003b8:	f993 3000 	ldrsb.w	r3, [r3]
 80003bc:	4618      	mov	r0, r3
 80003be:	f000 fc49 	bl	8000c54 <HAL_NVIC_EnableIRQ>
    }
    
    return true;
 80003c2:	2301      	movs	r3, #1
}
 80003c4:	4618      	mov	r0, r3
 80003c6:	3730      	adds	r7, #48	; 0x30
 80003c8:	46bd      	mov	sp, r7
 80003ca:	bd80      	pop	{r7, pc}
 80003cc:	0800613c 	.word	0x0800613c
 80003d0:	48000800 	.word	0x48000800
 80003d4:	48000400 	.word	0x48000400
 80003d8:	200001a4 	.word	0x200001a4
 80003dc:	40021000 	.word	0x40021000

080003e0 <GPIO_Driver_InitAll>:
        default:                *pin_status = ePinNaN; return false;
    }
    return true;
}

bool GPIO_Driver_InitAll (void) {   //INIT ALL PINS
 80003e0:	b580      	push	{r7, lr}
 80003e2:	b082      	sub	sp, #8
 80003e4:	af00      	add	r7, sp, #0
    eGpioAllPin_t all_good = eGpioAllPinsOK;
 80003e6:	2300      	movs	r3, #0
 80003e8:	71fb      	strb	r3, [r7, #7]
    for (eGpioPin_t pin = eGpioPinFirst; pin < eGpioPinLast; pin++) {
 80003ea:	2300      	movs	r3, #0
 80003ec:	71bb      	strb	r3, [r7, #6]
 80003ee:	e00e      	b.n	800040e <GPIO_Driver_InitAll+0x2e>
        if (GPIO_Driver_Init(pin) == false) {
 80003f0:	79bb      	ldrb	r3, [r7, #6]
 80003f2:	4618      	mov	r0, r3
 80003f4:	f7ff feec 	bl	80001d0 <GPIO_Driver_Init>
 80003f8:	4603      	mov	r3, r0
 80003fa:	f083 0301 	eor.w	r3, r3, #1
 80003fe:	b2db      	uxtb	r3, r3
 8000400:	2b00      	cmp	r3, #0
 8000402:	d001      	beq.n	8000408 <GPIO_Driver_InitAll+0x28>
            all_good = eGpioAllPinsNotOk;
 8000404:	2301      	movs	r3, #1
 8000406:	71fb      	strb	r3, [r7, #7]
    for (eGpioPin_t pin = eGpioPinFirst; pin < eGpioPinLast; pin++) {
 8000408:	79bb      	ldrb	r3, [r7, #6]
 800040a:	3301      	adds	r3, #1
 800040c:	71bb      	strb	r3, [r7, #6]
 800040e:	79bb      	ldrb	r3, [r7, #6]
 8000410:	2b1a      	cmp	r3, #26
 8000412:	d9ed      	bls.n	80003f0 <GPIO_Driver_InitAll+0x10>
        }
    }
    if (all_good == eGpioAllPinsNotOk) {
 8000414:	79fb      	ldrb	r3, [r7, #7]
 8000416:	2b01      	cmp	r3, #1
 8000418:	d101      	bne.n	800041e <GPIO_Driver_InitAll+0x3e>
        return false;
 800041a:	2300      	movs	r3, #0
 800041c:	e000      	b.n	8000420 <GPIO_Driver_InitAll+0x40>
    }
    return true;
 800041e:	2301      	movs	r3, #1
}
 8000420:	4618      	mov	r0, r3
 8000422:	3708      	adds	r7, #8
 8000424:	46bd      	mov	sp, r7
 8000426:	bd80      	pop	{r7, pc}

08000428 <EXTI1_IRQHandler>:


/*____________________INTERUPT HANDLERS_______________________________________*/

void EXTI1_IRQHandler(void)
{
 8000428:	b580      	push	{r7, lr}
 800042a:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 800042c:	2002      	movs	r0, #2
 800042e:	f000 fe31 	bl	8001094 <HAL_GPIO_EXTI_IRQHandler>
 8000432:	bf00      	nop
 8000434:	bd80      	pop	{r7, pc}
	...

08000438 <I2C_Driver_Init>:


/*_______________________________DEFINES, VARIABLES, CONSTANTS__________________________________________________________________*/


bool I2C_Driver_Init(eI2C_t i2c_name) { //INITIALIZATION OF I2C 
 8000438:	b580      	push	{r7, lr}
 800043a:	b082      	sub	sp, #8
 800043c:	af00      	add	r7, sp, #0
 800043e:	4603      	mov	r3, r0
 8000440:	71fb      	strb	r3, [r7, #7]
    if (i2c_name >= eI2CLast){
 8000442:	79fb      	ldrb	r3, [r7, #7]
 8000444:	2b01      	cmp	r3, #1
 8000446:	d901      	bls.n	800044c <I2C_Driver_Init+0x14>
        return false;
 8000448:	2300      	movs	r3, #0
 800044a:	e0ca      	b.n	80005e2 <I2C_Driver_Init+0x1aa>
    }
    if (I2C_Low_Level_Init(i2c_name) == false){ 
 800044c:	79fb      	ldrb	r3, [r7, #7]
 800044e:	4618      	mov	r0, r3
 8000450:	f000 f8d0 	bl	80005f4 <I2C_Low_Level_Init>
 8000454:	4603      	mov	r3, r0
 8000456:	f083 0301 	eor.w	r3, r3, #1
 800045a:	b2db      	uxtb	r3, r3
 800045c:	2b00      	cmp	r3, #0
 800045e:	d001      	beq.n	8000464 <I2C_Driver_Init+0x2c>
        return false; 
 8000460:	2300      	movs	r3, #0
 8000462:	e0be      	b.n	80005e2 <I2C_Driver_Init+0x1aa>
    }
    i2c_desc_lut_dynamic[i2c_name].i2c_handle.Instance = i2c_desc_lut[i2c_name].instance; 
 8000464:	79fa      	ldrb	r2, [r7, #7]
 8000466:	79f9      	ldrb	r1, [r7, #7]
 8000468:	4860      	ldr	r0, [pc, #384]	; (80005ec <I2C_Driver_Init+0x1b4>)
 800046a:	4613      	mov	r3, r2
 800046c:	005b      	lsls	r3, r3, #1
 800046e:	4413      	add	r3, r2
 8000470:	011b      	lsls	r3, r3, #4
 8000472:	4403      	add	r3, r0
 8000474:	681a      	ldr	r2, [r3, #0]
 8000476:	485e      	ldr	r0, [pc, #376]	; (80005f0 <I2C_Driver_Init+0x1b8>)
 8000478:	2354      	movs	r3, #84	; 0x54
 800047a:	fb01 f303 	mul.w	r3, r1, r3
 800047e:	4403      	add	r3, r0
 8000480:	601a      	str	r2, [r3, #0]
    i2c_desc_lut_dynamic[i2c_name].i2c_handle.Init.Timing = i2c_desc_lut[i2c_name].timing; 
 8000482:	79fa      	ldrb	r2, [r7, #7]
 8000484:	79f9      	ldrb	r1, [r7, #7]
 8000486:	4859      	ldr	r0, [pc, #356]	; (80005ec <I2C_Driver_Init+0x1b4>)
 8000488:	4613      	mov	r3, r2
 800048a:	005b      	lsls	r3, r3, #1
 800048c:	4413      	add	r3, r2
 800048e:	011b      	lsls	r3, r3, #4
 8000490:	4403      	add	r3, r0
 8000492:	3304      	adds	r3, #4
 8000494:	681a      	ldr	r2, [r3, #0]
 8000496:	4856      	ldr	r0, [pc, #344]	; (80005f0 <I2C_Driver_Init+0x1b8>)
 8000498:	2354      	movs	r3, #84	; 0x54
 800049a:	fb01 f303 	mul.w	r3, r1, r3
 800049e:	4403      	add	r3, r0
 80004a0:	3304      	adds	r3, #4
 80004a2:	601a      	str	r2, [r3, #0]
    i2c_desc_lut_dynamic[i2c_name].i2c_handle.Init.OwnAddress1 = i2c_desc_lut[i2c_name].own_adress1; 
 80004a4:	79fa      	ldrb	r2, [r7, #7]
 80004a6:	79f9      	ldrb	r1, [r7, #7]
 80004a8:	4850      	ldr	r0, [pc, #320]	; (80005ec <I2C_Driver_Init+0x1b4>)
 80004aa:	4613      	mov	r3, r2
 80004ac:	005b      	lsls	r3, r3, #1
 80004ae:	4413      	add	r3, r2
 80004b0:	011b      	lsls	r3, r3, #4
 80004b2:	4403      	add	r3, r0
 80004b4:	3310      	adds	r3, #16
 80004b6:	681a      	ldr	r2, [r3, #0]
 80004b8:	484d      	ldr	r0, [pc, #308]	; (80005f0 <I2C_Driver_Init+0x1b8>)
 80004ba:	2354      	movs	r3, #84	; 0x54
 80004bc:	fb01 f303 	mul.w	r3, r1, r3
 80004c0:	4403      	add	r3, r0
 80004c2:	3308      	adds	r3, #8
 80004c4:	601a      	str	r2, [r3, #0]
    i2c_desc_lut_dynamic[i2c_name].i2c_handle.Init.DualAddressMode = i2c_desc_lut[i2c_name].dual_adress_mode; 
 80004c6:	79fa      	ldrb	r2, [r7, #7]
 80004c8:	79f9      	ldrb	r1, [r7, #7]
 80004ca:	4848      	ldr	r0, [pc, #288]	; (80005ec <I2C_Driver_Init+0x1b4>)
 80004cc:	4613      	mov	r3, r2
 80004ce:	005b      	lsls	r3, r3, #1
 80004d0:	4413      	add	r3, r2
 80004d2:	011b      	lsls	r3, r3, #4
 80004d4:	4403      	add	r3, r0
 80004d6:	3320      	adds	r3, #32
 80004d8:	681a      	ldr	r2, [r3, #0]
 80004da:	4845      	ldr	r0, [pc, #276]	; (80005f0 <I2C_Driver_Init+0x1b8>)
 80004dc:	2354      	movs	r3, #84	; 0x54
 80004de:	fb01 f303 	mul.w	r3, r1, r3
 80004e2:	4403      	add	r3, r0
 80004e4:	3310      	adds	r3, #16
 80004e6:	601a      	str	r2, [r3, #0]
    i2c_desc_lut_dynamic[i2c_name].i2c_handle.Init.OwnAddress2 = i2c_desc_lut[i2c_name].own_adress2;
 80004e8:	79fa      	ldrb	r2, [r7, #7]
 80004ea:	79f9      	ldrb	r1, [r7, #7]
 80004ec:	483f      	ldr	r0, [pc, #252]	; (80005ec <I2C_Driver_Init+0x1b4>)
 80004ee:	4613      	mov	r3, r2
 80004f0:	005b      	lsls	r3, r3, #1
 80004f2:	4413      	add	r3, r2
 80004f4:	011b      	lsls	r3, r3, #4
 80004f6:	4403      	add	r3, r0
 80004f8:	3314      	adds	r3, #20
 80004fa:	681a      	ldr	r2, [r3, #0]
 80004fc:	483c      	ldr	r0, [pc, #240]	; (80005f0 <I2C_Driver_Init+0x1b8>)
 80004fe:	2354      	movs	r3, #84	; 0x54
 8000500:	fb01 f303 	mul.w	r3, r1, r3
 8000504:	4403      	add	r3, r0
 8000506:	3314      	adds	r3, #20
 8000508:	601a      	str	r2, [r3, #0]
    i2c_desc_lut_dynamic[i2c_name].i2c_handle.Init.OwnAddress2Masks = i2c_desc_lut[i2c_name].own_adress2_masks;  
 800050a:	79fa      	ldrb	r2, [r7, #7]
 800050c:	79f9      	ldrb	r1, [r7, #7]
 800050e:	4837      	ldr	r0, [pc, #220]	; (80005ec <I2C_Driver_Init+0x1b4>)
 8000510:	4613      	mov	r3, r2
 8000512:	005b      	lsls	r3, r3, #1
 8000514:	4413      	add	r3, r2
 8000516:	011b      	lsls	r3, r3, #4
 8000518:	4403      	add	r3, r0
 800051a:	3318      	adds	r3, #24
 800051c:	681a      	ldr	r2, [r3, #0]
 800051e:	4834      	ldr	r0, [pc, #208]	; (80005f0 <I2C_Driver_Init+0x1b8>)
 8000520:	2354      	movs	r3, #84	; 0x54
 8000522:	fb01 f303 	mul.w	r3, r1, r3
 8000526:	4403      	add	r3, r0
 8000528:	3318      	adds	r3, #24
 800052a:	601a      	str	r2, [r3, #0]
    i2c_desc_lut_dynamic[i2c_name].i2c_handle.Init.GeneralCallMode = i2c_desc_lut[i2c_name].general_call_mode;
 800052c:	79fa      	ldrb	r2, [r7, #7]
 800052e:	79f9      	ldrb	r1, [r7, #7]
 8000530:	482e      	ldr	r0, [pc, #184]	; (80005ec <I2C_Driver_Init+0x1b4>)
 8000532:	4613      	mov	r3, r2
 8000534:	005b      	lsls	r3, r3, #1
 8000536:	4413      	add	r3, r2
 8000538:	011b      	lsls	r3, r3, #4
 800053a:	4403      	add	r3, r0
 800053c:	3324      	adds	r3, #36	; 0x24
 800053e:	681a      	ldr	r2, [r3, #0]
 8000540:	482b      	ldr	r0, [pc, #172]	; (80005f0 <I2C_Driver_Init+0x1b8>)
 8000542:	2354      	movs	r3, #84	; 0x54
 8000544:	fb01 f303 	mul.w	r3, r1, r3
 8000548:	4403      	add	r3, r0
 800054a:	331c      	adds	r3, #28
 800054c:	601a      	str	r2, [r3, #0]
    i2c_desc_lut_dynamic[i2c_name].i2c_handle.Init.NoStretchMode = i2c_desc_lut[i2c_name].no_stretch_mode;
 800054e:	79fa      	ldrb	r2, [r7, #7]
 8000550:	79f9      	ldrb	r1, [r7, #7]
 8000552:	4826      	ldr	r0, [pc, #152]	; (80005ec <I2C_Driver_Init+0x1b4>)
 8000554:	4613      	mov	r3, r2
 8000556:	005b      	lsls	r3, r3, #1
 8000558:	4413      	add	r3, r2
 800055a:	011b      	lsls	r3, r3, #4
 800055c:	4403      	add	r3, r0
 800055e:	3328      	adds	r3, #40	; 0x28
 8000560:	681a      	ldr	r2, [r3, #0]
 8000562:	4823      	ldr	r0, [pc, #140]	; (80005f0 <I2C_Driver_Init+0x1b8>)
 8000564:	2354      	movs	r3, #84	; 0x54
 8000566:	fb01 f303 	mul.w	r3, r1, r3
 800056a:	4403      	add	r3, r0
 800056c:	3320      	adds	r3, #32
 800056e:	601a      	str	r2, [r3, #0]
    if (
        (HAL_I2C_Init(&i2c_desc_lut_dynamic[i2c_name].i2c_handle) != HAL_OK)
 8000570:	79fb      	ldrb	r3, [r7, #7]
 8000572:	2254      	movs	r2, #84	; 0x54
 8000574:	fb02 f303 	mul.w	r3, r2, r3
 8000578:	4a1d      	ldr	r2, [pc, #116]	; (80005f0 <I2C_Driver_Init+0x1b8>)
 800057a:	4413      	add	r3, r2
 800057c:	4618      	mov	r0, r3
 800057e:	f000 fdac 	bl	80010da <HAL_I2C_Init>
 8000582:	4603      	mov	r3, r0
    if (
 8000584:	2b00      	cmp	r3, #0
 8000586:	d129      	bne.n	80005dc <I2C_Driver_Init+0x1a4>
        ||(HAL_I2CEx_ConfigAnalogFilter(&i2c_desc_lut_dynamic[i2c_name].i2c_handle, i2c_desc_lut[i2c_name].analog_filter) != HAL_OK)
 8000588:	79fb      	ldrb	r3, [r7, #7]
 800058a:	2254      	movs	r2, #84	; 0x54
 800058c:	fb02 f303 	mul.w	r3, r2, r3
 8000590:	4a17      	ldr	r2, [pc, #92]	; (80005f0 <I2C_Driver_Init+0x1b8>)
 8000592:	1898      	adds	r0, r3, r2
 8000594:	79fa      	ldrb	r2, [r7, #7]
 8000596:	4915      	ldr	r1, [pc, #84]	; (80005ec <I2C_Driver_Init+0x1b4>)
 8000598:	4613      	mov	r3, r2
 800059a:	005b      	lsls	r3, r3, #1
 800059c:	4413      	add	r3, r2
 800059e:	011b      	lsls	r3, r3, #4
 80005a0:	440b      	add	r3, r1
 80005a2:	3308      	adds	r3, #8
 80005a4:	681b      	ldr	r3, [r3, #0]
 80005a6:	4619      	mov	r1, r3
 80005a8:	f000 fe4a 	bl	8001240 <HAL_I2CEx_ConfigAnalogFilter>
 80005ac:	4603      	mov	r3, r0
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	d114      	bne.n	80005dc <I2C_Driver_Init+0x1a4>
        ||(HAL_I2CEx_ConfigDigitalFilter(&i2c_desc_lut_dynamic[i2c_name].i2c_handle, i2c_desc_lut[i2c_name].digital_filter) != HAL_OK)
 80005b2:	79fb      	ldrb	r3, [r7, #7]
 80005b4:	2254      	movs	r2, #84	; 0x54
 80005b6:	fb02 f303 	mul.w	r3, r2, r3
 80005ba:	4a0d      	ldr	r2, [pc, #52]	; (80005f0 <I2C_Driver_Init+0x1b8>)
 80005bc:	1898      	adds	r0, r3, r2
 80005be:	79fa      	ldrb	r2, [r7, #7]
 80005c0:	490a      	ldr	r1, [pc, #40]	; (80005ec <I2C_Driver_Init+0x1b4>)
 80005c2:	4613      	mov	r3, r2
 80005c4:	005b      	lsls	r3, r3, #1
 80005c6:	4413      	add	r3, r2
 80005c8:	011b      	lsls	r3, r3, #4
 80005ca:	440b      	add	r3, r1
 80005cc:	330c      	adds	r3, #12
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	4619      	mov	r1, r3
 80005d2:	f000 fe80 	bl	80012d6 <HAL_I2CEx_ConfigDigitalFilter>
 80005d6:	4603      	mov	r3, r0
 80005d8:	2b00      	cmp	r3, #0
 80005da:	d001      	beq.n	80005e0 <I2C_Driver_Init+0x1a8>
    )  Error_Handler();
 80005dc:	f000 f934 	bl	8000848 <Error_Handler>
    
    return true; 
 80005e0:	2301      	movs	r3, #1


}
 80005e2:	4618      	mov	r0, r3
 80005e4:	3708      	adds	r7, #8
 80005e6:	46bd      	mov	sp, r7
 80005e8:	bd80      	pop	{r7, pc}
 80005ea:	bf00      	nop
 80005ec:	08006430 	.word	0x08006430
 80005f0:	200001a8 	.word	0x200001a8

080005f4 <I2C_Low_Level_Init>:


bool I2C_Low_Level_Init(eI2C_t i2c_name){ //GPIO, CLOCK, INTERUPT INITIALIZATION OF I2C 
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b09c      	sub	sp, #112	; 0x70
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	4603      	mov	r3, r0
 80005fc:	71fb      	strb	r3, [r7, #7]
    if (GPIO_Driver_Init(i2c_desc_lut[i2c_name].sda_pin) != true){
 80005fe:	79fa      	ldrb	r2, [r7, #7]
 8000600:	493c      	ldr	r1, [pc, #240]	; (80006f4 <I2C_Low_Level_Init+0x100>)
 8000602:	4613      	mov	r3, r2
 8000604:	005b      	lsls	r3, r3, #1
 8000606:	4413      	add	r3, r2
 8000608:	011b      	lsls	r3, r3, #4
 800060a:	440b      	add	r3, r1
 800060c:	332d      	adds	r3, #45	; 0x2d
 800060e:	781b      	ldrb	r3, [r3, #0]
 8000610:	4618      	mov	r0, r3
 8000612:	f7ff fddd 	bl	80001d0 <GPIO_Driver_Init>
 8000616:	4603      	mov	r3, r0
 8000618:	f083 0301 	eor.w	r3, r3, #1
 800061c:	b2db      	uxtb	r3, r3
 800061e:	2b00      	cmp	r3, #0
 8000620:	d001      	beq.n	8000626 <I2C_Low_Level_Init+0x32>
        return false;
 8000622:	2300      	movs	r3, #0
 8000624:	e061      	b.n	80006ea <I2C_Low_Level_Init+0xf6>
    }
    if (GPIO_Driver_Init(i2c_desc_lut[i2c_name].scl_pin) != true) {
 8000626:	79fa      	ldrb	r2, [r7, #7]
 8000628:	4932      	ldr	r1, [pc, #200]	; (80006f4 <I2C_Low_Level_Init+0x100>)
 800062a:	4613      	mov	r3, r2
 800062c:	005b      	lsls	r3, r3, #1
 800062e:	4413      	add	r3, r2
 8000630:	011b      	lsls	r3, r3, #4
 8000632:	440b      	add	r3, r1
 8000634:	332c      	adds	r3, #44	; 0x2c
 8000636:	781b      	ldrb	r3, [r3, #0]
 8000638:	4618      	mov	r0, r3
 800063a:	f7ff fdc9 	bl	80001d0 <GPIO_Driver_Init>
 800063e:	4603      	mov	r3, r0
 8000640:	f083 0301 	eor.w	r3, r3, #1
 8000644:	b2db      	uxtb	r3, r3
 8000646:	2b00      	cmp	r3, #0
 8000648:	d001      	beq.n	800064e <I2C_Low_Level_Init+0x5a>
        return false;
 800064a:	2300      	movs	r3, #0
 800064c:	e04d      	b.n	80006ea <I2C_Low_Level_Init+0xf6>
    }
    RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800064e:	f107 0310 	add.w	r3, r7, #16
 8000652:	2260      	movs	r2, #96	; 0x60
 8000654:	2100      	movs	r1, #0
 8000656:	4618      	mov	r0, r3
 8000658:	f005 fc74 	bl	8005f44 <memset>
    if(i2c_name == eI2CEeprom) {
 800065c:	79fb      	ldrb	r3, [r7, #7]
 800065e:	2b01      	cmp	r3, #1
 8000660:	d123      	bne.n	80006aa <I2C_Low_Level_Init+0xb6>
        PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000662:	2340      	movs	r3, #64	; 0x40
 8000664:	613b      	str	r3, [r7, #16]
        PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000666:	2300      	movs	r3, #0
 8000668:	643b      	str	r3, [r7, #64]	; 0x40
        if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 800066a:	f107 0310 	add.w	r3, r7, #16
 800066e:	4618      	mov	r0, r3
 8000670:	f001 fd34 	bl	80020dc <HAL_RCCEx_PeriphCLKConfig>
 8000674:	4603      	mov	r3, r0
 8000676:	2b00      	cmp	r3, #0
 8000678:	d001      	beq.n	800067e <I2C_Low_Level_Init+0x8a>
            Error_Handler();
 800067a:	f000 f8e5 	bl	8000848 <Error_Handler>
        }
        __HAL_RCC_I2C1_CLK_ENABLE();
 800067e:	4b1e      	ldr	r3, [pc, #120]	; (80006f8 <I2C_Low_Level_Init+0x104>)
 8000680:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000682:	4a1d      	ldr	r2, [pc, #116]	; (80006f8 <I2C_Low_Level_Init+0x104>)
 8000684:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000688:	6593      	str	r3, [r2, #88]	; 0x58
 800068a:	4b1b      	ldr	r3, [pc, #108]	; (80006f8 <I2C_Low_Level_Init+0x104>)
 800068c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800068e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000692:	60fb      	str	r3, [r7, #12]
 8000694:	68fb      	ldr	r3, [r7, #12]
        HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 8000696:	2200      	movs	r2, #0
 8000698:	2105      	movs	r1, #5
 800069a:	201f      	movs	r0, #31
 800069c:	f000 fabe 	bl	8000c1c <HAL_NVIC_SetPriority>
        HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80006a0:	201f      	movs	r0, #31
 80006a2:	f000 fad7 	bl	8000c54 <HAL_NVIC_EnableIRQ>
        return true; 
 80006a6:	2301      	movs	r3, #1
 80006a8:	e01f      	b.n	80006ea <I2C_Low_Level_Init+0xf6>
    }
    if(i2c_name == eI2CAcce) {
 80006aa:	79fb      	ldrb	r3, [r7, #7]
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d11b      	bne.n	80006e8 <I2C_Low_Level_Init+0xf4>
        PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80006b0:	2380      	movs	r3, #128	; 0x80
 80006b2:	613b      	str	r3, [r7, #16]
        PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80006b4:	2300      	movs	r3, #0
 80006b6:	647b      	str	r3, [r7, #68]	; 0x44
        if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 80006b8:	f107 0310 	add.w	r3, r7, #16
 80006bc:	4618      	mov	r0, r3
 80006be:	f001 fd0d 	bl	80020dc <HAL_RCCEx_PeriphCLKConfig>
 80006c2:	4603      	mov	r3, r0
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d001      	beq.n	80006cc <I2C_Low_Level_Init+0xd8>
            Error_Handler();
 80006c8:	f000 f8be 	bl	8000848 <Error_Handler>
        }
        __HAL_RCC_I2C2_CLK_ENABLE();
 80006cc:	4b0a      	ldr	r3, [pc, #40]	; (80006f8 <I2C_Low_Level_Init+0x104>)
 80006ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80006d0:	4a09      	ldr	r2, [pc, #36]	; (80006f8 <I2C_Low_Level_Init+0x104>)
 80006d2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80006d6:	6593      	str	r3, [r2, #88]	; 0x58
 80006d8:	4b07      	ldr	r3, [pc, #28]	; (80006f8 <I2C_Low_Level_Init+0x104>)
 80006da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80006dc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80006e0:	60bb      	str	r3, [r7, #8]
 80006e2:	68bb      	ldr	r3, [r7, #8]
        return true; 
 80006e4:	2301      	movs	r3, #1
 80006e6:	e000      	b.n	80006ea <I2C_Low_Level_Init+0xf6>
    }
    return false; 
 80006e8:	2300      	movs	r3, #0
} 
 80006ea:	4618      	mov	r0, r3
 80006ec:	3770      	adds	r7, #112	; 0x70
 80006ee:	46bd      	mov	sp, r7
 80006f0:	bd80      	pop	{r7, pc}
 80006f2:	bf00      	nop
 80006f4:	08006430 	.word	0x08006430
 80006f8:	40021000 	.word	0x40021000

080006fc <I2C1_EV_IRQHandler>:
void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c){ 
    __NOP();
}


void I2C1_EV_IRQHandler(void){
 80006fc:	b580      	push	{r7, lr}
 80006fe:	af00      	add	r7, sp, #0
  HAL_I2C_EV_IRQHandler(&i2c_desc_lut_dynamic[eI2CEeprom].i2c_handle);
 8000700:	4802      	ldr	r0, [pc, #8]	; (800070c <I2C1_EV_IRQHandler+0x10>)
 8000702:	f000 fd83 	bl	800120c <HAL_I2C_EV_IRQHandler>
}
 8000706:	bf00      	nop
 8000708:	bd80      	pop	{r7, pc}
 800070a:	bf00      	nop
 800070c:	200001fc 	.word	0x200001fc

08000710 <I2C2_EV_IRQHandler>:


void I2C2_EV_IRQHandler(void){
 8000710:	b580      	push	{r7, lr}
 8000712:	af00      	add	r7, sp, #0
    HAL_I2C_EV_IRQHandler(&i2c_desc_lut_dynamic[eI2CEeprom].i2c_handle);
 8000714:	4802      	ldr	r0, [pc, #8]	; (8000720 <I2C2_EV_IRQHandler+0x10>)
 8000716:	f000 fd79 	bl	800120c <HAL_I2C_EV_IRQHandler>
}
 800071a:	bf00      	nop
 800071c:	bd80      	pop	{r7, pc}
 800071e:	bf00      	nop
 8000720:	200001fc 	.word	0x200001fc

08000724 <USART2_IRQHandler>:


/*_________________________INTERUPT HANDLERS______________________________________*/

void USART2_IRQHandler(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	af00      	add	r7, sp, #0
  HAL_UART_IRQHandler(&uart_desc_lut_dynamic[eUartDebug].uart_handle);
 8000728:	4802      	ldr	r0, [pc, #8]	; (8000734 <USART2_IRQHandler+0x10>)
 800072a:	f002 fa93 	bl	8002c54 <HAL_UART_IRQHandler>
}
 800072e:	bf00      	nop
 8000730:	bd80      	pop	{r7, pc}
 8000732:	bf00      	nop
 8000734:	20000000 	.word	0x20000000

08000738 <USART1_IRQHandler>:
void USART1_IRQHandler(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	af00      	add	r7, sp, #0
  HAL_UART_IRQHandler(&uart_desc_lut_dynamic[eUartModem].uart_handle);
 800073c:	4802      	ldr	r0, [pc, #8]	; (8000748 <USART1_IRQHandler+0x10>)
 800073e:	f002 fa89 	bl	8002c54 <HAL_UART_IRQHandler>
}
 8000742:	bf00      	nop
 8000744:	bd80      	pop	{r7, pc}
 8000746:	bf00      	nop
 8000748:	20000094 	.word	0x20000094

0800074c <main>:


void SystemClock_Config(void);
void StartDefaultTask(void *argument);
int main(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	af00      	add	r7, sp, #0
  HAL_Init();
 8000750:	f000 f973 	bl	8000a3a <HAL_Init>
  SystemClock_Config();
 8000754:	f000 f818 	bl	8000788 <SystemClock_Config>

  if(GPIO_Driver_InitAll() != true){
 8000758:	f7ff fe42 	bl	80003e0 <GPIO_Driver_InitAll>
  }
  if(I2C_Driver_Init(eI2CEeprom) != true){
 800075c:	2001      	movs	r0, #1
 800075e:	f7ff fe6b 	bl	8000438 <I2C_Driver_Init>
  }

  osKernelInitialize();
 8000762:	f002 fe6b 	bl	800343c <osKernelInitialize>
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000766:	4a05      	ldr	r2, [pc, #20]	; (800077c <main+0x30>)
 8000768:	2100      	movs	r1, #0
 800076a:	4805      	ldr	r0, [pc, #20]	; (8000780 <main+0x34>)
 800076c:	f002 feb0 	bl	80034d0 <osThreadNew>
 8000770:	4603      	mov	r3, r0
 8000772:	4a04      	ldr	r2, [pc, #16]	; (8000784 <main+0x38>)
 8000774:	6013      	str	r3, [r2, #0]
  osKernelStart();
 8000776:	f002 fe85 	bl	8003484 <osKernelStart>
  
  while (1){}
 800077a:	e7fe      	b.n	800077a <main+0x2e>
 800077c:	08006490 	.word	0x08006490
 8000780:	08000813 	.word	0x08000813
 8000784:	20000250 	.word	0x20000250

08000788 <SystemClock_Config>:

}


void SystemClock_Config(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b096      	sub	sp, #88	; 0x58
 800078c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800078e:	f107 0314 	add.w	r3, r7, #20
 8000792:	2244      	movs	r2, #68	; 0x44
 8000794:	2100      	movs	r1, #0
 8000796:	4618      	mov	r0, r3
 8000798:	f005 fbd4 	bl	8005f44 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800079c:	463b      	mov	r3, r7
 800079e:	2200      	movs	r2, #0
 80007a0:	601a      	str	r2, [r3, #0]
 80007a2:	605a      	str	r2, [r3, #4]
 80007a4:	609a      	str	r2, [r3, #8]
 80007a6:	60da      	str	r2, [r3, #12]
 80007a8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80007aa:	f44f 7000 	mov.w	r0, #512	; 0x200
 80007ae:	f000 fded 	bl	800138c <HAL_PWREx_ControlVoltageScaling>
 80007b2:	4603      	mov	r3, r0
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d001      	beq.n	80007bc <SystemClock_Config+0x34>
  {
    Error_Handler();
 80007b8:	f000 f846 	bl	8000848 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80007bc:	2301      	movs	r3, #1
 80007be:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80007c0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80007c4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80007c6:	2300      	movs	r3, #0
 80007c8:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007ca:	f107 0314 	add.w	r3, r7, #20
 80007ce:	4618      	mov	r0, r3
 80007d0:	f000 fe32 	bl	8001438 <HAL_RCC_OscConfig>
 80007d4:	4603      	mov	r3, r0
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d001      	beq.n	80007de <SystemClock_Config+0x56>
  {
    Error_Handler();
 80007da:	f000 f835 	bl	8000848 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007de:	230f      	movs	r3, #15
 80007e0:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 80007e2:	2302      	movs	r3, #2
 80007e4:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007e6:	2300      	movs	r3, #0
 80007e8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80007ea:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 80007ee:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 80007f0:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 80007f4:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80007f6:	463b      	mov	r3, r7
 80007f8:	2100      	movs	r1, #0
 80007fa:	4618      	mov	r0, r3
 80007fc:	f001 fa30 	bl	8001c60 <HAL_RCC_ClockConfig>
 8000800:	4603      	mov	r3, r0
 8000802:	2b00      	cmp	r3, #0
 8000804:	d001      	beq.n	800080a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000806:	f000 f81f 	bl	8000848 <Error_Handler>
  }
}
 800080a:	bf00      	nop
 800080c:	3758      	adds	r7, #88	; 0x58
 800080e:	46bd      	mov	sp, r7
 8000810:	bd80      	pop	{r7, pc}

08000812 <StartDefaultTask>:


void StartDefaultTask(void *argument)
{
 8000812:	b580      	push	{r7, lr}
 8000814:	b082      	sub	sp, #8
 8000816:	af00      	add	r7, sp, #0
 8000818:	6078      	str	r0, [r7, #4]
	for(;;){
    osDelay(500);
 800081a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800081e:	f002 fee9 	bl	80035f4 <osDelay>
 8000822:	e7fa      	b.n	800081a <StartDefaultTask+0x8>

08000824 <HAL_TIM_PeriodElapsedCallback>:
  }
}


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b082      	sub	sp, #8
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]
  
  if (htim->Instance == TIM1) {
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	4a04      	ldr	r2, [pc, #16]	; (8000844 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000832:	4293      	cmp	r3, r2
 8000834:	d101      	bne.n	800083a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000836:	f000 f919 	bl	8000a6c <HAL_IncTick>
  }
 
}
 800083a:	bf00      	nop
 800083c:	3708      	adds	r7, #8
 800083e:	46bd      	mov	sp, r7
 8000840:	bd80      	pop	{r7, pc}
 8000842:	bf00      	nop
 8000844:	40012c00 	.word	0x40012c00

08000848 <Error_Handler>:

void Error_Handler(void)
{
 8000848:	b480      	push	{r7}
 800084a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800084c:	b672      	cpsid	i
}
 800084e:	bf00      	nop
  __disable_irq();
  while (1){}
 8000850:	e7fe      	b.n	8000850 <Error_Handler+0x8>
	...

08000854 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b082      	sub	sp, #8
 8000858:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800085a:	4b11      	ldr	r3, [pc, #68]	; (80008a0 <HAL_MspInit+0x4c>)
 800085c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800085e:	4a10      	ldr	r2, [pc, #64]	; (80008a0 <HAL_MspInit+0x4c>)
 8000860:	f043 0301 	orr.w	r3, r3, #1
 8000864:	6613      	str	r3, [r2, #96]	; 0x60
 8000866:	4b0e      	ldr	r3, [pc, #56]	; (80008a0 <HAL_MspInit+0x4c>)
 8000868:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800086a:	f003 0301 	and.w	r3, r3, #1
 800086e:	607b      	str	r3, [r7, #4]
 8000870:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000872:	4b0b      	ldr	r3, [pc, #44]	; (80008a0 <HAL_MspInit+0x4c>)
 8000874:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000876:	4a0a      	ldr	r2, [pc, #40]	; (80008a0 <HAL_MspInit+0x4c>)
 8000878:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800087c:	6593      	str	r3, [r2, #88]	; 0x58
 800087e:	4b08      	ldr	r3, [pc, #32]	; (80008a0 <HAL_MspInit+0x4c>)
 8000880:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000882:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000886:	603b      	str	r3, [r7, #0]
 8000888:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800088a:	2200      	movs	r2, #0
 800088c:	210f      	movs	r1, #15
 800088e:	f06f 0001 	mvn.w	r0, #1
 8000892:	f000 f9c3 	bl	8000c1c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000896:	bf00      	nop
 8000898:	3708      	adds	r7, #8
 800089a:	46bd      	mov	sp, r7
 800089c:	bd80      	pop	{r7, pc}
 800089e:	bf00      	nop
 80008a0:	40021000 	.word	0x40021000

080008a4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b08c      	sub	sp, #48	; 0x30
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 80008ac:	2300      	movs	r3, #0
 80008ae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80008b2:	4b2f      	ldr	r3, [pc, #188]	; (8000970 <HAL_InitTick+0xcc>)
 80008b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008b6:	4a2e      	ldr	r2, [pc, #184]	; (8000970 <HAL_InitTick+0xcc>)
 80008b8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80008bc:	6613      	str	r3, [r2, #96]	; 0x60
 80008be:	4b2c      	ldr	r3, [pc, #176]	; (8000970 <HAL_InitTick+0xcc>)
 80008c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008c2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80008c6:	60bb      	str	r3, [r7, #8]
 80008c8:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80008ca:	f107 020c 	add.w	r2, r7, #12
 80008ce:	f107 0310 	add.w	r3, r7, #16
 80008d2:	4611      	mov	r1, r2
 80008d4:	4618      	mov	r0, r3
 80008d6:	f001 fb6f 	bl	8001fb8 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 80008da:	f001 fb57 	bl	8001f8c <HAL_RCC_GetPCLK2Freq>
 80008de:	4603      	mov	r3, r0
 80008e0:	005b      	lsls	r3, r3, #1
 80008e2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80008e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80008e6:	4a23      	ldr	r2, [pc, #140]	; (8000974 <HAL_InitTick+0xd0>)
 80008e8:	fba2 2303 	umull	r2, r3, r2, r3
 80008ec:	0c9b      	lsrs	r3, r3, #18
 80008ee:	3b01      	subs	r3, #1
 80008f0:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80008f2:	4b21      	ldr	r3, [pc, #132]	; (8000978 <HAL_InitTick+0xd4>)
 80008f4:	4a21      	ldr	r2, [pc, #132]	; (800097c <HAL_InitTick+0xd8>)
 80008f6:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80008f8:	4b1f      	ldr	r3, [pc, #124]	; (8000978 <HAL_InitTick+0xd4>)
 80008fa:	f240 32e7 	movw	r2, #999	; 0x3e7
 80008fe:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000900:	4a1d      	ldr	r2, [pc, #116]	; (8000978 <HAL_InitTick+0xd4>)
 8000902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000904:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000906:	4b1c      	ldr	r3, [pc, #112]	; (8000978 <HAL_InitTick+0xd4>)
 8000908:	2200      	movs	r2, #0
 800090a:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800090c:	4b1a      	ldr	r3, [pc, #104]	; (8000978 <HAL_InitTick+0xd4>)
 800090e:	2200      	movs	r2, #0
 8000910:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000912:	4b19      	ldr	r3, [pc, #100]	; (8000978 <HAL_InitTick+0xd4>)
 8000914:	2200      	movs	r2, #0
 8000916:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000918:	4817      	ldr	r0, [pc, #92]	; (8000978 <HAL_InitTick+0xd4>)
 800091a:	f001 ff1b 	bl	8002754 <HAL_TIM_Base_Init>
 800091e:	4603      	mov	r3, r0
 8000920:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8000924:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000928:	2b00      	cmp	r3, #0
 800092a:	d11b      	bne.n	8000964 <HAL_InitTick+0xc0>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 800092c:	4812      	ldr	r0, [pc, #72]	; (8000978 <HAL_InitTick+0xd4>)
 800092e:	f001 ff73 	bl	8002818 <HAL_TIM_Base_Start_IT>
 8000932:	4603      	mov	r3, r0
 8000934:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8000938:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800093c:	2b00      	cmp	r3, #0
 800093e:	d111      	bne.n	8000964 <HAL_InitTick+0xc0>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000940:	2019      	movs	r0, #25
 8000942:	f000 f987 	bl	8000c54 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	2b0f      	cmp	r3, #15
 800094a:	d808      	bhi.n	800095e <HAL_InitTick+0xba>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 800094c:	2200      	movs	r2, #0
 800094e:	6879      	ldr	r1, [r7, #4]
 8000950:	2019      	movs	r0, #25
 8000952:	f000 f963 	bl	8000c1c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000956:	4a0a      	ldr	r2, [pc, #40]	; (8000980 <HAL_InitTick+0xdc>)
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	6013      	str	r3, [r2, #0]
 800095c:	e002      	b.n	8000964 <HAL_InitTick+0xc0>
      }
      else
      {
        status = HAL_ERROR;
 800095e:	2301      	movs	r3, #1
 8000960:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000964:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8000968:	4618      	mov	r0, r3
 800096a:	3730      	adds	r7, #48	; 0x30
 800096c:	46bd      	mov	sp, r7
 800096e:	bd80      	pop	{r7, pc}
 8000970:	40021000 	.word	0x40021000
 8000974:	431bde83 	.word	0x431bde83
 8000978:	20000254 	.word	0x20000254
 800097c:	40012c00 	.word	0x40012c00
 8000980:	2000012c 	.word	0x2000012c

08000984 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000984:	b480      	push	{r7}
 8000986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000988:	e7fe      	b.n	8000988 <NMI_Handler+0x4>

0800098a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800098a:	b480      	push	{r7}
 800098c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800098e:	e7fe      	b.n	800098e <HardFault_Handler+0x4>

08000990 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000990:	b480      	push	{r7}
 8000992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000994:	e7fe      	b.n	8000994 <MemManage_Handler+0x4>

08000996 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000996:	b480      	push	{r7}
 8000998:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800099a:	e7fe      	b.n	800099a <BusFault_Handler+0x4>

0800099c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800099c:	b480      	push	{r7}
 800099e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009a0:	e7fe      	b.n	80009a0 <UsageFault_Handler+0x4>

080009a2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009a2:	b480      	push	{r7}
 80009a4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009a6:	bf00      	nop
 80009a8:	46bd      	mov	sp, r7
 80009aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ae:	4770      	bx	lr

080009b0 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80009b4:	4802      	ldr	r0, [pc, #8]	; (80009c0 <TIM1_UP_TIM16_IRQHandler+0x10>)
 80009b6:	f001 ff83 	bl	80028c0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80009ba:	bf00      	nop
 80009bc:	bd80      	pop	{r7, pc}
 80009be:	bf00      	nop
 80009c0:	20000254 	.word	0x20000254

080009c4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80009c4:	b480      	push	{r7}
 80009c6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80009c8:	4b06      	ldr	r3, [pc, #24]	; (80009e4 <SystemInit+0x20>)
 80009ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80009ce:	4a05      	ldr	r2, [pc, #20]	; (80009e4 <SystemInit+0x20>)
 80009d0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80009d4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80009d8:	bf00      	nop
 80009da:	46bd      	mov	sp, r7
 80009dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e0:	4770      	bx	lr
 80009e2:	bf00      	nop
 80009e4:	e000ed00 	.word	0xe000ed00

080009e8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80009e8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a20 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80009ec:	f7ff ffea 	bl	80009c4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80009f0:	480c      	ldr	r0, [pc, #48]	; (8000a24 <LoopForever+0x6>)
  ldr r1, =_edata
 80009f2:	490d      	ldr	r1, [pc, #52]	; (8000a28 <LoopForever+0xa>)
  ldr r2, =_sidata
 80009f4:	4a0d      	ldr	r2, [pc, #52]	; (8000a2c <LoopForever+0xe>)
  movs r3, #0
 80009f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009f8:	e002      	b.n	8000a00 <LoopCopyDataInit>

080009fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009fe:	3304      	adds	r3, #4

08000a00 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a00:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a02:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a04:	d3f9      	bcc.n	80009fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a06:	4a0a      	ldr	r2, [pc, #40]	; (8000a30 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a08:	4c0a      	ldr	r4, [pc, #40]	; (8000a34 <LoopForever+0x16>)
  movs r3, #0
 8000a0a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a0c:	e001      	b.n	8000a12 <LoopFillZerobss>

08000a0e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a0e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a10:	3204      	adds	r2, #4

08000a12 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a12:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a14:	d3fb      	bcc.n	8000a0e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000a16:	f005 faf3 	bl	8006000 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000a1a:	f7ff fe97 	bl	800074c <main>

08000a1e <LoopForever>:

LoopForever:
    b LoopForever
 8000a1e:	e7fe      	b.n	8000a1e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000a20:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000a24:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a28:	20000188 	.word	0x20000188
  ldr r2, =_sidata
 8000a2c:	08006504 	.word	0x08006504
  ldr r2, =_sbss
 8000a30:	20000188 	.word	0x20000188
  ldr r4, =_ebss
 8000a34:	20001d84 	.word	0x20001d84

08000a38 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000a38:	e7fe      	b.n	8000a38 <ADC1_IRQHandler>

08000a3a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a3a:	b580      	push	{r7, lr}
 8000a3c:	b082      	sub	sp, #8
 8000a3e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000a40:	2300      	movs	r3, #0
 8000a42:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a44:	2003      	movs	r0, #3
 8000a46:	f000 f8de 	bl	8000c06 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000a4a:	200f      	movs	r0, #15
 8000a4c:	f7ff ff2a 	bl	80008a4 <HAL_InitTick>
 8000a50:	4603      	mov	r3, r0
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d002      	beq.n	8000a5c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000a56:	2301      	movs	r3, #1
 8000a58:	71fb      	strb	r3, [r7, #7]
 8000a5a:	e001      	b.n	8000a60 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000a5c:	f7ff fefa 	bl	8000854 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000a60:	79fb      	ldrb	r3, [r7, #7]
}
 8000a62:	4618      	mov	r0, r3
 8000a64:	3708      	adds	r7, #8
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bd80      	pop	{r7, pc}
	...

08000a6c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000a70:	4b06      	ldr	r3, [pc, #24]	; (8000a8c <HAL_IncTick+0x20>)
 8000a72:	781b      	ldrb	r3, [r3, #0]
 8000a74:	461a      	mov	r2, r3
 8000a76:	4b06      	ldr	r3, [pc, #24]	; (8000a90 <HAL_IncTick+0x24>)
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	4413      	add	r3, r2
 8000a7c:	4a04      	ldr	r2, [pc, #16]	; (8000a90 <HAL_IncTick+0x24>)
 8000a7e:	6013      	str	r3, [r2, #0]
}
 8000a80:	bf00      	nop
 8000a82:	46bd      	mov	sp, r7
 8000a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a88:	4770      	bx	lr
 8000a8a:	bf00      	nop
 8000a8c:	20000130 	.word	0x20000130
 8000a90:	200002a0 	.word	0x200002a0

08000a94 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a94:	b480      	push	{r7}
 8000a96:	af00      	add	r7, sp, #0
  return uwTick;
 8000a98:	4b03      	ldr	r3, [pc, #12]	; (8000aa8 <HAL_GetTick+0x14>)
 8000a9a:	681b      	ldr	r3, [r3, #0]
}
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop
 8000aa8:	200002a0 	.word	0x200002a0

08000aac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000aac:	b480      	push	{r7}
 8000aae:	b085      	sub	sp, #20
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	f003 0307 	and.w	r3, r3, #7
 8000aba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000abc:	4b0c      	ldr	r3, [pc, #48]	; (8000af0 <__NVIC_SetPriorityGrouping+0x44>)
 8000abe:	68db      	ldr	r3, [r3, #12]
 8000ac0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ac2:	68ba      	ldr	r2, [r7, #8]
 8000ac4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ac8:	4013      	ands	r3, r2
 8000aca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000acc:	68fb      	ldr	r3, [r7, #12]
 8000ace:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ad0:	68bb      	ldr	r3, [r7, #8]
 8000ad2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ad4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ad8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000adc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ade:	4a04      	ldr	r2, [pc, #16]	; (8000af0 <__NVIC_SetPriorityGrouping+0x44>)
 8000ae0:	68bb      	ldr	r3, [r7, #8]
 8000ae2:	60d3      	str	r3, [r2, #12]
}
 8000ae4:	bf00      	nop
 8000ae6:	3714      	adds	r7, #20
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aee:	4770      	bx	lr
 8000af0:	e000ed00 	.word	0xe000ed00

08000af4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000af4:	b480      	push	{r7}
 8000af6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000af8:	4b04      	ldr	r3, [pc, #16]	; (8000b0c <__NVIC_GetPriorityGrouping+0x18>)
 8000afa:	68db      	ldr	r3, [r3, #12]
 8000afc:	0a1b      	lsrs	r3, r3, #8
 8000afe:	f003 0307 	and.w	r3, r3, #7
}
 8000b02:	4618      	mov	r0, r3
 8000b04:	46bd      	mov	sp, r7
 8000b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0a:	4770      	bx	lr
 8000b0c:	e000ed00 	.word	0xe000ed00

08000b10 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b10:	b480      	push	{r7}
 8000b12:	b083      	sub	sp, #12
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	4603      	mov	r3, r0
 8000b18:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	db0b      	blt.n	8000b3a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b22:	79fb      	ldrb	r3, [r7, #7]
 8000b24:	f003 021f 	and.w	r2, r3, #31
 8000b28:	4907      	ldr	r1, [pc, #28]	; (8000b48 <__NVIC_EnableIRQ+0x38>)
 8000b2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b2e:	095b      	lsrs	r3, r3, #5
 8000b30:	2001      	movs	r0, #1
 8000b32:	fa00 f202 	lsl.w	r2, r0, r2
 8000b36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000b3a:	bf00      	nop
 8000b3c:	370c      	adds	r7, #12
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b44:	4770      	bx	lr
 8000b46:	bf00      	nop
 8000b48:	e000e100 	.word	0xe000e100

08000b4c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	b083      	sub	sp, #12
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	4603      	mov	r3, r0
 8000b54:	6039      	str	r1, [r7, #0]
 8000b56:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	db0a      	blt.n	8000b76 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b60:	683b      	ldr	r3, [r7, #0]
 8000b62:	b2da      	uxtb	r2, r3
 8000b64:	490c      	ldr	r1, [pc, #48]	; (8000b98 <__NVIC_SetPriority+0x4c>)
 8000b66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b6a:	0112      	lsls	r2, r2, #4
 8000b6c:	b2d2      	uxtb	r2, r2
 8000b6e:	440b      	add	r3, r1
 8000b70:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b74:	e00a      	b.n	8000b8c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b76:	683b      	ldr	r3, [r7, #0]
 8000b78:	b2da      	uxtb	r2, r3
 8000b7a:	4908      	ldr	r1, [pc, #32]	; (8000b9c <__NVIC_SetPriority+0x50>)
 8000b7c:	79fb      	ldrb	r3, [r7, #7]
 8000b7e:	f003 030f 	and.w	r3, r3, #15
 8000b82:	3b04      	subs	r3, #4
 8000b84:	0112      	lsls	r2, r2, #4
 8000b86:	b2d2      	uxtb	r2, r2
 8000b88:	440b      	add	r3, r1
 8000b8a:	761a      	strb	r2, [r3, #24]
}
 8000b8c:	bf00      	nop
 8000b8e:	370c      	adds	r7, #12
 8000b90:	46bd      	mov	sp, r7
 8000b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b96:	4770      	bx	lr
 8000b98:	e000e100 	.word	0xe000e100
 8000b9c:	e000ed00 	.word	0xe000ed00

08000ba0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	b089      	sub	sp, #36	; 0x24
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	60f8      	str	r0, [r7, #12]
 8000ba8:	60b9      	str	r1, [r7, #8]
 8000baa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000bac:	68fb      	ldr	r3, [r7, #12]
 8000bae:	f003 0307 	and.w	r3, r3, #7
 8000bb2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000bb4:	69fb      	ldr	r3, [r7, #28]
 8000bb6:	f1c3 0307 	rsb	r3, r3, #7
 8000bba:	2b04      	cmp	r3, #4
 8000bbc:	bf28      	it	cs
 8000bbe:	2304      	movcs	r3, #4
 8000bc0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bc2:	69fb      	ldr	r3, [r7, #28]
 8000bc4:	3304      	adds	r3, #4
 8000bc6:	2b06      	cmp	r3, #6
 8000bc8:	d902      	bls.n	8000bd0 <NVIC_EncodePriority+0x30>
 8000bca:	69fb      	ldr	r3, [r7, #28]
 8000bcc:	3b03      	subs	r3, #3
 8000bce:	e000      	b.n	8000bd2 <NVIC_EncodePriority+0x32>
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bd4:	f04f 32ff 	mov.w	r2, #4294967295
 8000bd8:	69bb      	ldr	r3, [r7, #24]
 8000bda:	fa02 f303 	lsl.w	r3, r2, r3
 8000bde:	43da      	mvns	r2, r3
 8000be0:	68bb      	ldr	r3, [r7, #8]
 8000be2:	401a      	ands	r2, r3
 8000be4:	697b      	ldr	r3, [r7, #20]
 8000be6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000be8:	f04f 31ff 	mov.w	r1, #4294967295
 8000bec:	697b      	ldr	r3, [r7, #20]
 8000bee:	fa01 f303 	lsl.w	r3, r1, r3
 8000bf2:	43d9      	mvns	r1, r3
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bf8:	4313      	orrs	r3, r2
         );
}
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	3724      	adds	r7, #36	; 0x24
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c04:	4770      	bx	lr

08000c06 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c06:	b580      	push	{r7, lr}
 8000c08:	b082      	sub	sp, #8
 8000c0a:	af00      	add	r7, sp, #0
 8000c0c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c0e:	6878      	ldr	r0, [r7, #4]
 8000c10:	f7ff ff4c 	bl	8000aac <__NVIC_SetPriorityGrouping>
}
 8000c14:	bf00      	nop
 8000c16:	3708      	adds	r7, #8
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	bd80      	pop	{r7, pc}

08000c1c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b086      	sub	sp, #24
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	4603      	mov	r3, r0
 8000c24:	60b9      	str	r1, [r7, #8]
 8000c26:	607a      	str	r2, [r7, #4]
 8000c28:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000c2e:	f7ff ff61 	bl	8000af4 <__NVIC_GetPriorityGrouping>
 8000c32:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c34:	687a      	ldr	r2, [r7, #4]
 8000c36:	68b9      	ldr	r1, [r7, #8]
 8000c38:	6978      	ldr	r0, [r7, #20]
 8000c3a:	f7ff ffb1 	bl	8000ba0 <NVIC_EncodePriority>
 8000c3e:	4602      	mov	r2, r0
 8000c40:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c44:	4611      	mov	r1, r2
 8000c46:	4618      	mov	r0, r3
 8000c48:	f7ff ff80 	bl	8000b4c <__NVIC_SetPriority>
}
 8000c4c:	bf00      	nop
 8000c4e:	3718      	adds	r7, #24
 8000c50:	46bd      	mov	sp, r7
 8000c52:	bd80      	pop	{r7, pc}

08000c54 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b082      	sub	sp, #8
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c62:	4618      	mov	r0, r3
 8000c64:	f7ff ff54 	bl	8000b10 <__NVIC_EnableIRQ>
}
 8000c68:	bf00      	nop
 8000c6a:	3708      	adds	r7, #8
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	bd80      	pop	{r7, pc}

08000c70 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000c70:	b480      	push	{r7}
 8000c72:	b085      	sub	sp, #20
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000c82:	b2db      	uxtb	r3, r3
 8000c84:	2b02      	cmp	r3, #2
 8000c86:	d008      	beq.n	8000c9a <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	2204      	movs	r2, #4
 8000c8c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	2200      	movs	r2, #0
 8000c92:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000c96:	2301      	movs	r3, #1
 8000c98:	e022      	b.n	8000ce0 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	681a      	ldr	r2, [r3, #0]
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	f022 020e 	bic.w	r2, r2, #14
 8000ca8:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	681a      	ldr	r2, [r3, #0]
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	f022 0201 	bic.w	r2, r2, #1
 8000cb8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cbe:	f003 021c 	and.w	r2, r3, #28
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cc6:	2101      	movs	r1, #1
 8000cc8:	fa01 f202 	lsl.w	r2, r1, r2
 8000ccc:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	2201      	movs	r2, #1
 8000cd2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	2200      	movs	r2, #0
 8000cda:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8000cde:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	3714      	adds	r7, #20
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cea:	4770      	bx	lr

08000cec <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b084      	sub	sp, #16
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000cfe:	b2db      	uxtb	r3, r3
 8000d00:	2b02      	cmp	r3, #2
 8000d02:	d005      	beq.n	8000d10 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	2204      	movs	r2, #4
 8000d08:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8000d0a:	2301      	movs	r3, #1
 8000d0c:	73fb      	strb	r3, [r7, #15]
 8000d0e:	e029      	b.n	8000d64 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	681a      	ldr	r2, [r3, #0]
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	f022 020e 	bic.w	r2, r2, #14
 8000d1e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	681a      	ldr	r2, [r3, #0]
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	f022 0201 	bic.w	r2, r2, #1
 8000d2e:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d34:	f003 021c 	and.w	r2, r3, #28
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d3c:	2101      	movs	r1, #1
 8000d3e:	fa01 f202 	lsl.w	r2, r1, r2
 8000d42:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	2201      	movs	r2, #1
 8000d48:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	2200      	movs	r2, #0
 8000d50:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d003      	beq.n	8000d64 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000d60:	6878      	ldr	r0, [r7, #4]
 8000d62:	4798      	blx	r3
    }
  }
  return status;
 8000d64:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d66:	4618      	mov	r0, r3
 8000d68:	3710      	adds	r7, #16
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bd80      	pop	{r7, pc}
	...

08000d70 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d70:	b480      	push	{r7}
 8000d72:	b087      	sub	sp, #28
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
 8000d78:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d7e:	e154      	b.n	800102a <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000d80:	683b      	ldr	r3, [r7, #0]
 8000d82:	681a      	ldr	r2, [r3, #0]
 8000d84:	2101      	movs	r1, #1
 8000d86:	697b      	ldr	r3, [r7, #20]
 8000d88:	fa01 f303 	lsl.w	r3, r1, r3
 8000d8c:	4013      	ands	r3, r2
 8000d8e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000d90:	68fb      	ldr	r3, [r7, #12]
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	f000 8146 	beq.w	8001024 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000d98:	683b      	ldr	r3, [r7, #0]
 8000d9a:	685b      	ldr	r3, [r3, #4]
 8000d9c:	f003 0303 	and.w	r3, r3, #3
 8000da0:	2b01      	cmp	r3, #1
 8000da2:	d005      	beq.n	8000db0 <HAL_GPIO_Init+0x40>
 8000da4:	683b      	ldr	r3, [r7, #0]
 8000da6:	685b      	ldr	r3, [r3, #4]
 8000da8:	f003 0303 	and.w	r3, r3, #3
 8000dac:	2b02      	cmp	r3, #2
 8000dae:	d130      	bne.n	8000e12 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	689b      	ldr	r3, [r3, #8]
 8000db4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000db6:	697b      	ldr	r3, [r7, #20]
 8000db8:	005b      	lsls	r3, r3, #1
 8000dba:	2203      	movs	r2, #3
 8000dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc0:	43db      	mvns	r3, r3
 8000dc2:	693a      	ldr	r2, [r7, #16]
 8000dc4:	4013      	ands	r3, r2
 8000dc6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000dc8:	683b      	ldr	r3, [r7, #0]
 8000dca:	68da      	ldr	r2, [r3, #12]
 8000dcc:	697b      	ldr	r3, [r7, #20]
 8000dce:	005b      	lsls	r3, r3, #1
 8000dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd4:	693a      	ldr	r2, [r7, #16]
 8000dd6:	4313      	orrs	r3, r2
 8000dd8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	693a      	ldr	r2, [r7, #16]
 8000dde:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	685b      	ldr	r3, [r3, #4]
 8000de4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000de6:	2201      	movs	r2, #1
 8000de8:	697b      	ldr	r3, [r7, #20]
 8000dea:	fa02 f303 	lsl.w	r3, r2, r3
 8000dee:	43db      	mvns	r3, r3
 8000df0:	693a      	ldr	r2, [r7, #16]
 8000df2:	4013      	ands	r3, r2
 8000df4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000df6:	683b      	ldr	r3, [r7, #0]
 8000df8:	685b      	ldr	r3, [r3, #4]
 8000dfa:	091b      	lsrs	r3, r3, #4
 8000dfc:	f003 0201 	and.w	r2, r3, #1
 8000e00:	697b      	ldr	r3, [r7, #20]
 8000e02:	fa02 f303 	lsl.w	r3, r2, r3
 8000e06:	693a      	ldr	r2, [r7, #16]
 8000e08:	4313      	orrs	r3, r2
 8000e0a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	693a      	ldr	r2, [r7, #16]
 8000e10:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e12:	683b      	ldr	r3, [r7, #0]
 8000e14:	685b      	ldr	r3, [r3, #4]
 8000e16:	f003 0303 	and.w	r3, r3, #3
 8000e1a:	2b03      	cmp	r3, #3
 8000e1c:	d017      	beq.n	8000e4e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	68db      	ldr	r3, [r3, #12]
 8000e22:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000e24:	697b      	ldr	r3, [r7, #20]
 8000e26:	005b      	lsls	r3, r3, #1
 8000e28:	2203      	movs	r2, #3
 8000e2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e2e:	43db      	mvns	r3, r3
 8000e30:	693a      	ldr	r2, [r7, #16]
 8000e32:	4013      	ands	r3, r2
 8000e34:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e36:	683b      	ldr	r3, [r7, #0]
 8000e38:	689a      	ldr	r2, [r3, #8]
 8000e3a:	697b      	ldr	r3, [r7, #20]
 8000e3c:	005b      	lsls	r3, r3, #1
 8000e3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e42:	693a      	ldr	r2, [r7, #16]
 8000e44:	4313      	orrs	r3, r2
 8000e46:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	693a      	ldr	r2, [r7, #16]
 8000e4c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e4e:	683b      	ldr	r3, [r7, #0]
 8000e50:	685b      	ldr	r3, [r3, #4]
 8000e52:	f003 0303 	and.w	r3, r3, #3
 8000e56:	2b02      	cmp	r3, #2
 8000e58:	d123      	bne.n	8000ea2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000e5a:	697b      	ldr	r3, [r7, #20]
 8000e5c:	08da      	lsrs	r2, r3, #3
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	3208      	adds	r2, #8
 8000e62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e66:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000e68:	697b      	ldr	r3, [r7, #20]
 8000e6a:	f003 0307 	and.w	r3, r3, #7
 8000e6e:	009b      	lsls	r3, r3, #2
 8000e70:	220f      	movs	r2, #15
 8000e72:	fa02 f303 	lsl.w	r3, r2, r3
 8000e76:	43db      	mvns	r3, r3
 8000e78:	693a      	ldr	r2, [r7, #16]
 8000e7a:	4013      	ands	r3, r2
 8000e7c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000e7e:	683b      	ldr	r3, [r7, #0]
 8000e80:	691a      	ldr	r2, [r3, #16]
 8000e82:	697b      	ldr	r3, [r7, #20]
 8000e84:	f003 0307 	and.w	r3, r3, #7
 8000e88:	009b      	lsls	r3, r3, #2
 8000e8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e8e:	693a      	ldr	r2, [r7, #16]
 8000e90:	4313      	orrs	r3, r2
 8000e92:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000e94:	697b      	ldr	r3, [r7, #20]
 8000e96:	08da      	lsrs	r2, r3, #3
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	3208      	adds	r2, #8
 8000e9c:	6939      	ldr	r1, [r7, #16]
 8000e9e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000ea8:	697b      	ldr	r3, [r7, #20]
 8000eaa:	005b      	lsls	r3, r3, #1
 8000eac:	2203      	movs	r2, #3
 8000eae:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb2:	43db      	mvns	r3, r3
 8000eb4:	693a      	ldr	r2, [r7, #16]
 8000eb6:	4013      	ands	r3, r2
 8000eb8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000eba:	683b      	ldr	r3, [r7, #0]
 8000ebc:	685b      	ldr	r3, [r3, #4]
 8000ebe:	f003 0203 	and.w	r2, r3, #3
 8000ec2:	697b      	ldr	r3, [r7, #20]
 8000ec4:	005b      	lsls	r3, r3, #1
 8000ec6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eca:	693a      	ldr	r2, [r7, #16]
 8000ecc:	4313      	orrs	r3, r2
 8000ece:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	693a      	ldr	r2, [r7, #16]
 8000ed4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000ed6:	683b      	ldr	r3, [r7, #0]
 8000ed8:	685b      	ldr	r3, [r3, #4]
 8000eda:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	f000 80a0 	beq.w	8001024 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ee4:	4b58      	ldr	r3, [pc, #352]	; (8001048 <HAL_GPIO_Init+0x2d8>)
 8000ee6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ee8:	4a57      	ldr	r2, [pc, #348]	; (8001048 <HAL_GPIO_Init+0x2d8>)
 8000eea:	f043 0301 	orr.w	r3, r3, #1
 8000eee:	6613      	str	r3, [r2, #96]	; 0x60
 8000ef0:	4b55      	ldr	r3, [pc, #340]	; (8001048 <HAL_GPIO_Init+0x2d8>)
 8000ef2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ef4:	f003 0301 	and.w	r3, r3, #1
 8000ef8:	60bb      	str	r3, [r7, #8]
 8000efa:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000efc:	4a53      	ldr	r2, [pc, #332]	; (800104c <HAL_GPIO_Init+0x2dc>)
 8000efe:	697b      	ldr	r3, [r7, #20]
 8000f00:	089b      	lsrs	r3, r3, #2
 8000f02:	3302      	adds	r3, #2
 8000f04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f08:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000f0a:	697b      	ldr	r3, [r7, #20]
 8000f0c:	f003 0303 	and.w	r3, r3, #3
 8000f10:	009b      	lsls	r3, r3, #2
 8000f12:	220f      	movs	r2, #15
 8000f14:	fa02 f303 	lsl.w	r3, r2, r3
 8000f18:	43db      	mvns	r3, r3
 8000f1a:	693a      	ldr	r2, [r7, #16]
 8000f1c:	4013      	ands	r3, r2
 8000f1e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000f26:	d019      	beq.n	8000f5c <HAL_GPIO_Init+0x1ec>
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	4a49      	ldr	r2, [pc, #292]	; (8001050 <HAL_GPIO_Init+0x2e0>)
 8000f2c:	4293      	cmp	r3, r2
 8000f2e:	d013      	beq.n	8000f58 <HAL_GPIO_Init+0x1e8>
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	4a48      	ldr	r2, [pc, #288]	; (8001054 <HAL_GPIO_Init+0x2e4>)
 8000f34:	4293      	cmp	r3, r2
 8000f36:	d00d      	beq.n	8000f54 <HAL_GPIO_Init+0x1e4>
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	4a47      	ldr	r2, [pc, #284]	; (8001058 <HAL_GPIO_Init+0x2e8>)
 8000f3c:	4293      	cmp	r3, r2
 8000f3e:	d007      	beq.n	8000f50 <HAL_GPIO_Init+0x1e0>
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	4a46      	ldr	r2, [pc, #280]	; (800105c <HAL_GPIO_Init+0x2ec>)
 8000f44:	4293      	cmp	r3, r2
 8000f46:	d101      	bne.n	8000f4c <HAL_GPIO_Init+0x1dc>
 8000f48:	2304      	movs	r3, #4
 8000f4a:	e008      	b.n	8000f5e <HAL_GPIO_Init+0x1ee>
 8000f4c:	2307      	movs	r3, #7
 8000f4e:	e006      	b.n	8000f5e <HAL_GPIO_Init+0x1ee>
 8000f50:	2303      	movs	r3, #3
 8000f52:	e004      	b.n	8000f5e <HAL_GPIO_Init+0x1ee>
 8000f54:	2302      	movs	r3, #2
 8000f56:	e002      	b.n	8000f5e <HAL_GPIO_Init+0x1ee>
 8000f58:	2301      	movs	r3, #1
 8000f5a:	e000      	b.n	8000f5e <HAL_GPIO_Init+0x1ee>
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	697a      	ldr	r2, [r7, #20]
 8000f60:	f002 0203 	and.w	r2, r2, #3
 8000f64:	0092      	lsls	r2, r2, #2
 8000f66:	4093      	lsls	r3, r2
 8000f68:	693a      	ldr	r2, [r7, #16]
 8000f6a:	4313      	orrs	r3, r2
 8000f6c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000f6e:	4937      	ldr	r1, [pc, #220]	; (800104c <HAL_GPIO_Init+0x2dc>)
 8000f70:	697b      	ldr	r3, [r7, #20]
 8000f72:	089b      	lsrs	r3, r3, #2
 8000f74:	3302      	adds	r3, #2
 8000f76:	693a      	ldr	r2, [r7, #16]
 8000f78:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000f7c:	4b38      	ldr	r3, [pc, #224]	; (8001060 <HAL_GPIO_Init+0x2f0>)
 8000f7e:	689b      	ldr	r3, [r3, #8]
 8000f80:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f82:	68fb      	ldr	r3, [r7, #12]
 8000f84:	43db      	mvns	r3, r3
 8000f86:	693a      	ldr	r2, [r7, #16]
 8000f88:	4013      	ands	r3, r2
 8000f8a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000f8c:	683b      	ldr	r3, [r7, #0]
 8000f8e:	685b      	ldr	r3, [r3, #4]
 8000f90:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d003      	beq.n	8000fa0 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8000f98:	693a      	ldr	r2, [r7, #16]
 8000f9a:	68fb      	ldr	r3, [r7, #12]
 8000f9c:	4313      	orrs	r3, r2
 8000f9e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000fa0:	4a2f      	ldr	r2, [pc, #188]	; (8001060 <HAL_GPIO_Init+0x2f0>)
 8000fa2:	693b      	ldr	r3, [r7, #16]
 8000fa4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000fa6:	4b2e      	ldr	r3, [pc, #184]	; (8001060 <HAL_GPIO_Init+0x2f0>)
 8000fa8:	68db      	ldr	r3, [r3, #12]
 8000faa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	43db      	mvns	r3, r3
 8000fb0:	693a      	ldr	r2, [r7, #16]
 8000fb2:	4013      	ands	r3, r2
 8000fb4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000fb6:	683b      	ldr	r3, [r7, #0]
 8000fb8:	685b      	ldr	r3, [r3, #4]
 8000fba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d003      	beq.n	8000fca <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8000fc2:	693a      	ldr	r2, [r7, #16]
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	4313      	orrs	r3, r2
 8000fc8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000fca:	4a25      	ldr	r2, [pc, #148]	; (8001060 <HAL_GPIO_Init+0x2f0>)
 8000fcc:	693b      	ldr	r3, [r7, #16]
 8000fce:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000fd0:	4b23      	ldr	r3, [pc, #140]	; (8001060 <HAL_GPIO_Init+0x2f0>)
 8000fd2:	685b      	ldr	r3, [r3, #4]
 8000fd4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	43db      	mvns	r3, r3
 8000fda:	693a      	ldr	r2, [r7, #16]
 8000fdc:	4013      	ands	r3, r2
 8000fde:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000fe0:	683b      	ldr	r3, [r7, #0]
 8000fe2:	685b      	ldr	r3, [r3, #4]
 8000fe4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d003      	beq.n	8000ff4 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8000fec:	693a      	ldr	r2, [r7, #16]
 8000fee:	68fb      	ldr	r3, [r7, #12]
 8000ff0:	4313      	orrs	r3, r2
 8000ff2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000ff4:	4a1a      	ldr	r2, [pc, #104]	; (8001060 <HAL_GPIO_Init+0x2f0>)
 8000ff6:	693b      	ldr	r3, [r7, #16]
 8000ff8:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8000ffa:	4b19      	ldr	r3, [pc, #100]	; (8001060 <HAL_GPIO_Init+0x2f0>)
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	43db      	mvns	r3, r3
 8001004:	693a      	ldr	r2, [r7, #16]
 8001006:	4013      	ands	r3, r2
 8001008:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800100a:	683b      	ldr	r3, [r7, #0]
 800100c:	685b      	ldr	r3, [r3, #4]
 800100e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001012:	2b00      	cmp	r3, #0
 8001014:	d003      	beq.n	800101e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001016:	693a      	ldr	r2, [r7, #16]
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	4313      	orrs	r3, r2
 800101c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800101e:	4a10      	ldr	r2, [pc, #64]	; (8001060 <HAL_GPIO_Init+0x2f0>)
 8001020:	693b      	ldr	r3, [r7, #16]
 8001022:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001024:	697b      	ldr	r3, [r7, #20]
 8001026:	3301      	adds	r3, #1
 8001028:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800102a:	683b      	ldr	r3, [r7, #0]
 800102c:	681a      	ldr	r2, [r3, #0]
 800102e:	697b      	ldr	r3, [r7, #20]
 8001030:	fa22 f303 	lsr.w	r3, r2, r3
 8001034:	2b00      	cmp	r3, #0
 8001036:	f47f aea3 	bne.w	8000d80 <HAL_GPIO_Init+0x10>
  }
}
 800103a:	bf00      	nop
 800103c:	bf00      	nop
 800103e:	371c      	adds	r7, #28
 8001040:	46bd      	mov	sp, r7
 8001042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001046:	4770      	bx	lr
 8001048:	40021000 	.word	0x40021000
 800104c:	40010000 	.word	0x40010000
 8001050:	48000400 	.word	0x48000400
 8001054:	48000800 	.word	0x48000800
 8001058:	48000c00 	.word	0x48000c00
 800105c:	48001000 	.word	0x48001000
 8001060:	40010400 	.word	0x40010400

08001064 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001064:	b480      	push	{r7}
 8001066:	b083      	sub	sp, #12
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
 800106c:	460b      	mov	r3, r1
 800106e:	807b      	strh	r3, [r7, #2]
 8001070:	4613      	mov	r3, r2
 8001072:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001074:	787b      	ldrb	r3, [r7, #1]
 8001076:	2b00      	cmp	r3, #0
 8001078:	d003      	beq.n	8001082 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800107a:	887a      	ldrh	r2, [r7, #2]
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001080:	e002      	b.n	8001088 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001082:	887a      	ldrh	r2, [r7, #2]
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001088:	bf00      	nop
 800108a:	370c      	adds	r7, #12
 800108c:	46bd      	mov	sp, r7
 800108e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001092:	4770      	bx	lr

08001094 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b082      	sub	sp, #8
 8001098:	af00      	add	r7, sp, #0
 800109a:	4603      	mov	r3, r0
 800109c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800109e:	4b08      	ldr	r3, [pc, #32]	; (80010c0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80010a0:	695a      	ldr	r2, [r3, #20]
 80010a2:	88fb      	ldrh	r3, [r7, #6]
 80010a4:	4013      	ands	r3, r2
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d006      	beq.n	80010b8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80010aa:	4a05      	ldr	r2, [pc, #20]	; (80010c0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80010ac:	88fb      	ldrh	r3, [r7, #6]
 80010ae:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80010b0:	88fb      	ldrh	r3, [r7, #6]
 80010b2:	4618      	mov	r0, r3
 80010b4:	f000 f806 	bl	80010c4 <HAL_GPIO_EXTI_Callback>
  }
}
 80010b8:	bf00      	nop
 80010ba:	3708      	adds	r7, #8
 80010bc:	46bd      	mov	sp, r7
 80010be:	bd80      	pop	{r7, pc}
 80010c0:	40010400 	.word	0x40010400

080010c4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80010c4:	b480      	push	{r7}
 80010c6:	b083      	sub	sp, #12
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	4603      	mov	r3, r0
 80010cc:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80010ce:	bf00      	nop
 80010d0:	370c      	adds	r7, #12
 80010d2:	46bd      	mov	sp, r7
 80010d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d8:	4770      	bx	lr

080010da <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80010da:	b580      	push	{r7, lr}
 80010dc:	b082      	sub	sp, #8
 80010de:	af00      	add	r7, sp, #0
 80010e0:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d101      	bne.n	80010ec <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80010e8:	2301      	movs	r3, #1
 80010ea:	e081      	b.n	80011f0 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80010f2:	b2db      	uxtb	r3, r3
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d106      	bne.n	8001106 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	2200      	movs	r2, #0
 80010fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001100:	6878      	ldr	r0, [r7, #4]
 8001102:	f000 f879 	bl	80011f8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	2224      	movs	r2, #36	; 0x24
 800110a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	681a      	ldr	r2, [r3, #0]
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	f022 0201 	bic.w	r2, r2, #1
 800111c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	685a      	ldr	r2, [r3, #4]
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800112a:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	689a      	ldr	r2, [r3, #8]
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800113a:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	68db      	ldr	r3, [r3, #12]
 8001140:	2b01      	cmp	r3, #1
 8001142:	d107      	bne.n	8001154 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	689a      	ldr	r2, [r3, #8]
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001150:	609a      	str	r2, [r3, #8]
 8001152:	e006      	b.n	8001162 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	689a      	ldr	r2, [r3, #8]
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001160:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	68db      	ldr	r3, [r3, #12]
 8001166:	2b02      	cmp	r3, #2
 8001168:	d104      	bne.n	8001174 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001172:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	685b      	ldr	r3, [r3, #4]
 800117a:	687a      	ldr	r2, [r7, #4]
 800117c:	6812      	ldr	r2, [r2, #0]
 800117e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001182:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001186:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	68da      	ldr	r2, [r3, #12]
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001196:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	691a      	ldr	r2, [r3, #16]
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	695b      	ldr	r3, [r3, #20]
 80011a0:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	699b      	ldr	r3, [r3, #24]
 80011a8:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	430a      	orrs	r2, r1
 80011b0:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	69d9      	ldr	r1, [r3, #28]
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	6a1a      	ldr	r2, [r3, #32]
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	430a      	orrs	r2, r1
 80011c0:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	681a      	ldr	r2, [r3, #0]
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	f042 0201 	orr.w	r2, r2, #1
 80011d0:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	2200      	movs	r2, #0
 80011d6:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	2220      	movs	r2, #32
 80011dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	2200      	movs	r2, #0
 80011e4:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	2200      	movs	r2, #0
 80011ea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80011ee:	2300      	movs	r3, #0
}
 80011f0:	4618      	mov	r0, r3
 80011f2:	3708      	adds	r7, #8
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bd80      	pop	{r7, pc}

080011f8 <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 80011f8:	b480      	push	{r7}
 80011fa:	b083      	sub	sp, #12
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 8001200:	bf00      	nop
 8001202:	370c      	adds	r7, #12
 8001204:	46bd      	mov	sp, r7
 8001206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120a:	4770      	bx	lr

0800120c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b084      	sub	sp, #16
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	699b      	ldr	r3, [r3, #24]
 800121a:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001228:	2b00      	cmp	r3, #0
 800122a:	d005      	beq.n	8001238 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001230:	68ba      	ldr	r2, [r7, #8]
 8001232:	68f9      	ldr	r1, [r7, #12]
 8001234:	6878      	ldr	r0, [r7, #4]
 8001236:	4798      	blx	r3
  }
}
 8001238:	bf00      	nop
 800123a:	3710      	adds	r7, #16
 800123c:	46bd      	mov	sp, r7
 800123e:	bd80      	pop	{r7, pc}

08001240 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001240:	b480      	push	{r7}
 8001242:	b083      	sub	sp, #12
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
 8001248:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001250:	b2db      	uxtb	r3, r3
 8001252:	2b20      	cmp	r3, #32
 8001254:	d138      	bne.n	80012c8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800125c:	2b01      	cmp	r3, #1
 800125e:	d101      	bne.n	8001264 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001260:	2302      	movs	r3, #2
 8001262:	e032      	b.n	80012ca <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	2201      	movs	r2, #1
 8001268:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	2224      	movs	r2, #36	; 0x24
 8001270:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	681a      	ldr	r2, [r3, #0]
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	f022 0201 	bic.w	r2, r2, #1
 8001282:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	681a      	ldr	r2, [r3, #0]
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001292:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	6819      	ldr	r1, [r3, #0]
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	683a      	ldr	r2, [r7, #0]
 80012a0:	430a      	orrs	r2, r1
 80012a2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	681a      	ldr	r2, [r3, #0]
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	f042 0201 	orr.w	r2, r2, #1
 80012b2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	2220      	movs	r2, #32
 80012b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	2200      	movs	r2, #0
 80012c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80012c4:	2300      	movs	r3, #0
 80012c6:	e000      	b.n	80012ca <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80012c8:	2302      	movs	r3, #2
  }
}
 80012ca:	4618      	mov	r0, r3
 80012cc:	370c      	adds	r7, #12
 80012ce:	46bd      	mov	sp, r7
 80012d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d4:	4770      	bx	lr

080012d6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80012d6:	b480      	push	{r7}
 80012d8:	b085      	sub	sp, #20
 80012da:	af00      	add	r7, sp, #0
 80012dc:	6078      	str	r0, [r7, #4]
 80012de:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80012e6:	b2db      	uxtb	r3, r3
 80012e8:	2b20      	cmp	r3, #32
 80012ea:	d139      	bne.n	8001360 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80012f2:	2b01      	cmp	r3, #1
 80012f4:	d101      	bne.n	80012fa <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80012f6:	2302      	movs	r3, #2
 80012f8:	e033      	b.n	8001362 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	2201      	movs	r2, #1
 80012fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	2224      	movs	r2, #36	; 0x24
 8001306:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	681a      	ldr	r2, [r3, #0]
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	f022 0201 	bic.w	r2, r2, #1
 8001318:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001328:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800132a:	683b      	ldr	r3, [r7, #0]
 800132c:	021b      	lsls	r3, r3, #8
 800132e:	68fa      	ldr	r2, [r7, #12]
 8001330:	4313      	orrs	r3, r2
 8001332:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	68fa      	ldr	r2, [r7, #12]
 800133a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	681a      	ldr	r2, [r3, #0]
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	f042 0201 	orr.w	r2, r2, #1
 800134a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	2220      	movs	r2, #32
 8001350:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	2200      	movs	r2, #0
 8001358:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800135c:	2300      	movs	r3, #0
 800135e:	e000      	b.n	8001362 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001360:	2302      	movs	r3, #2
  }
}
 8001362:	4618      	mov	r0, r3
 8001364:	3714      	adds	r7, #20
 8001366:	46bd      	mov	sp, r7
 8001368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136c:	4770      	bx	lr
	...

08001370 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001370:	b480      	push	{r7}
 8001372:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001374:	4b04      	ldr	r3, [pc, #16]	; (8001388 <HAL_PWREx_GetVoltageRange+0x18>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800137c:	4618      	mov	r0, r3
 800137e:	46bd      	mov	sp, r7
 8001380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001384:	4770      	bx	lr
 8001386:	bf00      	nop
 8001388:	40007000 	.word	0x40007000

0800138c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800138c:	b480      	push	{r7}
 800138e:	b085      	sub	sp, #20
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800139a:	d130      	bne.n	80013fe <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800139c:	4b23      	ldr	r3, [pc, #140]	; (800142c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80013a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80013a8:	d038      	beq.n	800141c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80013aa:	4b20      	ldr	r3, [pc, #128]	; (800142c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80013b2:	4a1e      	ldr	r2, [pc, #120]	; (800142c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80013b4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80013b8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80013ba:	4b1d      	ldr	r3, [pc, #116]	; (8001430 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	2232      	movs	r2, #50	; 0x32
 80013c0:	fb02 f303 	mul.w	r3, r2, r3
 80013c4:	4a1b      	ldr	r2, [pc, #108]	; (8001434 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80013c6:	fba2 2303 	umull	r2, r3, r2, r3
 80013ca:	0c9b      	lsrs	r3, r3, #18
 80013cc:	3301      	adds	r3, #1
 80013ce:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80013d0:	e002      	b.n	80013d8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	3b01      	subs	r3, #1
 80013d6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80013d8:	4b14      	ldr	r3, [pc, #80]	; (800142c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80013da:	695b      	ldr	r3, [r3, #20]
 80013dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80013e4:	d102      	bne.n	80013ec <HAL_PWREx_ControlVoltageScaling+0x60>
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d1f2      	bne.n	80013d2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80013ec:	4b0f      	ldr	r3, [pc, #60]	; (800142c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80013ee:	695b      	ldr	r3, [r3, #20]
 80013f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80013f8:	d110      	bne.n	800141c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80013fa:	2303      	movs	r3, #3
 80013fc:	e00f      	b.n	800141e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80013fe:	4b0b      	ldr	r3, [pc, #44]	; (800142c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001406:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800140a:	d007      	beq.n	800141c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800140c:	4b07      	ldr	r3, [pc, #28]	; (800142c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001414:	4a05      	ldr	r2, [pc, #20]	; (800142c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001416:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800141a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800141c:	2300      	movs	r3, #0
}
 800141e:	4618      	mov	r0, r3
 8001420:	3714      	adds	r7, #20
 8001422:	46bd      	mov	sp, r7
 8001424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001428:	4770      	bx	lr
 800142a:	bf00      	nop
 800142c:	40007000 	.word	0x40007000
 8001430:	20000128 	.word	0x20000128
 8001434:	431bde83 	.word	0x431bde83

08001438 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b088      	sub	sp, #32
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	2b00      	cmp	r3, #0
 8001444:	d102      	bne.n	800144c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001446:	2301      	movs	r3, #1
 8001448:	f000 bc02 	b.w	8001c50 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800144c:	4b96      	ldr	r3, [pc, #600]	; (80016a8 <HAL_RCC_OscConfig+0x270>)
 800144e:	689b      	ldr	r3, [r3, #8]
 8001450:	f003 030c 	and.w	r3, r3, #12
 8001454:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001456:	4b94      	ldr	r3, [pc, #592]	; (80016a8 <HAL_RCC_OscConfig+0x270>)
 8001458:	68db      	ldr	r3, [r3, #12]
 800145a:	f003 0303 	and.w	r3, r3, #3
 800145e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	f003 0310 	and.w	r3, r3, #16
 8001468:	2b00      	cmp	r3, #0
 800146a:	f000 80e4 	beq.w	8001636 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800146e:	69bb      	ldr	r3, [r7, #24]
 8001470:	2b00      	cmp	r3, #0
 8001472:	d007      	beq.n	8001484 <HAL_RCC_OscConfig+0x4c>
 8001474:	69bb      	ldr	r3, [r7, #24]
 8001476:	2b0c      	cmp	r3, #12
 8001478:	f040 808b 	bne.w	8001592 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800147c:	697b      	ldr	r3, [r7, #20]
 800147e:	2b01      	cmp	r3, #1
 8001480:	f040 8087 	bne.w	8001592 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001484:	4b88      	ldr	r3, [pc, #544]	; (80016a8 <HAL_RCC_OscConfig+0x270>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	f003 0302 	and.w	r3, r3, #2
 800148c:	2b00      	cmp	r3, #0
 800148e:	d005      	beq.n	800149c <HAL_RCC_OscConfig+0x64>
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	699b      	ldr	r3, [r3, #24]
 8001494:	2b00      	cmp	r3, #0
 8001496:	d101      	bne.n	800149c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001498:	2301      	movs	r3, #1
 800149a:	e3d9      	b.n	8001c50 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	6a1a      	ldr	r2, [r3, #32]
 80014a0:	4b81      	ldr	r3, [pc, #516]	; (80016a8 <HAL_RCC_OscConfig+0x270>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	f003 0308 	and.w	r3, r3, #8
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d004      	beq.n	80014b6 <HAL_RCC_OscConfig+0x7e>
 80014ac:	4b7e      	ldr	r3, [pc, #504]	; (80016a8 <HAL_RCC_OscConfig+0x270>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80014b4:	e005      	b.n	80014c2 <HAL_RCC_OscConfig+0x8a>
 80014b6:	4b7c      	ldr	r3, [pc, #496]	; (80016a8 <HAL_RCC_OscConfig+0x270>)
 80014b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80014bc:	091b      	lsrs	r3, r3, #4
 80014be:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80014c2:	4293      	cmp	r3, r2
 80014c4:	d223      	bcs.n	800150e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	6a1b      	ldr	r3, [r3, #32]
 80014ca:	4618      	mov	r0, r3
 80014cc:	f000 fda6 	bl	800201c <RCC_SetFlashLatencyFromMSIRange>
 80014d0:	4603      	mov	r3, r0
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d001      	beq.n	80014da <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80014d6:	2301      	movs	r3, #1
 80014d8:	e3ba      	b.n	8001c50 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80014da:	4b73      	ldr	r3, [pc, #460]	; (80016a8 <HAL_RCC_OscConfig+0x270>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	4a72      	ldr	r2, [pc, #456]	; (80016a8 <HAL_RCC_OscConfig+0x270>)
 80014e0:	f043 0308 	orr.w	r3, r3, #8
 80014e4:	6013      	str	r3, [r2, #0]
 80014e6:	4b70      	ldr	r3, [pc, #448]	; (80016a8 <HAL_RCC_OscConfig+0x270>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	6a1b      	ldr	r3, [r3, #32]
 80014f2:	496d      	ldr	r1, [pc, #436]	; (80016a8 <HAL_RCC_OscConfig+0x270>)
 80014f4:	4313      	orrs	r3, r2
 80014f6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80014f8:	4b6b      	ldr	r3, [pc, #428]	; (80016a8 <HAL_RCC_OscConfig+0x270>)
 80014fa:	685b      	ldr	r3, [r3, #4]
 80014fc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	69db      	ldr	r3, [r3, #28]
 8001504:	021b      	lsls	r3, r3, #8
 8001506:	4968      	ldr	r1, [pc, #416]	; (80016a8 <HAL_RCC_OscConfig+0x270>)
 8001508:	4313      	orrs	r3, r2
 800150a:	604b      	str	r3, [r1, #4]
 800150c:	e025      	b.n	800155a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800150e:	4b66      	ldr	r3, [pc, #408]	; (80016a8 <HAL_RCC_OscConfig+0x270>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	4a65      	ldr	r2, [pc, #404]	; (80016a8 <HAL_RCC_OscConfig+0x270>)
 8001514:	f043 0308 	orr.w	r3, r3, #8
 8001518:	6013      	str	r3, [r2, #0]
 800151a:	4b63      	ldr	r3, [pc, #396]	; (80016a8 <HAL_RCC_OscConfig+0x270>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	6a1b      	ldr	r3, [r3, #32]
 8001526:	4960      	ldr	r1, [pc, #384]	; (80016a8 <HAL_RCC_OscConfig+0x270>)
 8001528:	4313      	orrs	r3, r2
 800152a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800152c:	4b5e      	ldr	r3, [pc, #376]	; (80016a8 <HAL_RCC_OscConfig+0x270>)
 800152e:	685b      	ldr	r3, [r3, #4]
 8001530:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	69db      	ldr	r3, [r3, #28]
 8001538:	021b      	lsls	r3, r3, #8
 800153a:	495b      	ldr	r1, [pc, #364]	; (80016a8 <HAL_RCC_OscConfig+0x270>)
 800153c:	4313      	orrs	r3, r2
 800153e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001540:	69bb      	ldr	r3, [r7, #24]
 8001542:	2b00      	cmp	r3, #0
 8001544:	d109      	bne.n	800155a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	6a1b      	ldr	r3, [r3, #32]
 800154a:	4618      	mov	r0, r3
 800154c:	f000 fd66 	bl	800201c <RCC_SetFlashLatencyFromMSIRange>
 8001550:	4603      	mov	r3, r0
 8001552:	2b00      	cmp	r3, #0
 8001554:	d001      	beq.n	800155a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8001556:	2301      	movs	r3, #1
 8001558:	e37a      	b.n	8001c50 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800155a:	f000 fc81 	bl	8001e60 <HAL_RCC_GetSysClockFreq>
 800155e:	4602      	mov	r2, r0
 8001560:	4b51      	ldr	r3, [pc, #324]	; (80016a8 <HAL_RCC_OscConfig+0x270>)
 8001562:	689b      	ldr	r3, [r3, #8]
 8001564:	091b      	lsrs	r3, r3, #4
 8001566:	f003 030f 	and.w	r3, r3, #15
 800156a:	4950      	ldr	r1, [pc, #320]	; (80016ac <HAL_RCC_OscConfig+0x274>)
 800156c:	5ccb      	ldrb	r3, [r1, r3]
 800156e:	f003 031f 	and.w	r3, r3, #31
 8001572:	fa22 f303 	lsr.w	r3, r2, r3
 8001576:	4a4e      	ldr	r2, [pc, #312]	; (80016b0 <HAL_RCC_OscConfig+0x278>)
 8001578:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800157a:	4b4e      	ldr	r3, [pc, #312]	; (80016b4 <HAL_RCC_OscConfig+0x27c>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	4618      	mov	r0, r3
 8001580:	f7ff f990 	bl	80008a4 <HAL_InitTick>
 8001584:	4603      	mov	r3, r0
 8001586:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001588:	7bfb      	ldrb	r3, [r7, #15]
 800158a:	2b00      	cmp	r3, #0
 800158c:	d052      	beq.n	8001634 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800158e:	7bfb      	ldrb	r3, [r7, #15]
 8001590:	e35e      	b.n	8001c50 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	699b      	ldr	r3, [r3, #24]
 8001596:	2b00      	cmp	r3, #0
 8001598:	d032      	beq.n	8001600 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800159a:	4b43      	ldr	r3, [pc, #268]	; (80016a8 <HAL_RCC_OscConfig+0x270>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	4a42      	ldr	r2, [pc, #264]	; (80016a8 <HAL_RCC_OscConfig+0x270>)
 80015a0:	f043 0301 	orr.w	r3, r3, #1
 80015a4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80015a6:	f7ff fa75 	bl	8000a94 <HAL_GetTick>
 80015aa:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80015ac:	e008      	b.n	80015c0 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80015ae:	f7ff fa71 	bl	8000a94 <HAL_GetTick>
 80015b2:	4602      	mov	r2, r0
 80015b4:	693b      	ldr	r3, [r7, #16]
 80015b6:	1ad3      	subs	r3, r2, r3
 80015b8:	2b02      	cmp	r3, #2
 80015ba:	d901      	bls.n	80015c0 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80015bc:	2303      	movs	r3, #3
 80015be:	e347      	b.n	8001c50 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80015c0:	4b39      	ldr	r3, [pc, #228]	; (80016a8 <HAL_RCC_OscConfig+0x270>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f003 0302 	and.w	r3, r3, #2
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d0f0      	beq.n	80015ae <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80015cc:	4b36      	ldr	r3, [pc, #216]	; (80016a8 <HAL_RCC_OscConfig+0x270>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	4a35      	ldr	r2, [pc, #212]	; (80016a8 <HAL_RCC_OscConfig+0x270>)
 80015d2:	f043 0308 	orr.w	r3, r3, #8
 80015d6:	6013      	str	r3, [r2, #0]
 80015d8:	4b33      	ldr	r3, [pc, #204]	; (80016a8 <HAL_RCC_OscConfig+0x270>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	6a1b      	ldr	r3, [r3, #32]
 80015e4:	4930      	ldr	r1, [pc, #192]	; (80016a8 <HAL_RCC_OscConfig+0x270>)
 80015e6:	4313      	orrs	r3, r2
 80015e8:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80015ea:	4b2f      	ldr	r3, [pc, #188]	; (80016a8 <HAL_RCC_OscConfig+0x270>)
 80015ec:	685b      	ldr	r3, [r3, #4]
 80015ee:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	69db      	ldr	r3, [r3, #28]
 80015f6:	021b      	lsls	r3, r3, #8
 80015f8:	492b      	ldr	r1, [pc, #172]	; (80016a8 <HAL_RCC_OscConfig+0x270>)
 80015fa:	4313      	orrs	r3, r2
 80015fc:	604b      	str	r3, [r1, #4]
 80015fe:	e01a      	b.n	8001636 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001600:	4b29      	ldr	r3, [pc, #164]	; (80016a8 <HAL_RCC_OscConfig+0x270>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	4a28      	ldr	r2, [pc, #160]	; (80016a8 <HAL_RCC_OscConfig+0x270>)
 8001606:	f023 0301 	bic.w	r3, r3, #1
 800160a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800160c:	f7ff fa42 	bl	8000a94 <HAL_GetTick>
 8001610:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001612:	e008      	b.n	8001626 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001614:	f7ff fa3e 	bl	8000a94 <HAL_GetTick>
 8001618:	4602      	mov	r2, r0
 800161a:	693b      	ldr	r3, [r7, #16]
 800161c:	1ad3      	subs	r3, r2, r3
 800161e:	2b02      	cmp	r3, #2
 8001620:	d901      	bls.n	8001626 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8001622:	2303      	movs	r3, #3
 8001624:	e314      	b.n	8001c50 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001626:	4b20      	ldr	r3, [pc, #128]	; (80016a8 <HAL_RCC_OscConfig+0x270>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f003 0302 	and.w	r3, r3, #2
 800162e:	2b00      	cmp	r3, #0
 8001630:	d1f0      	bne.n	8001614 <HAL_RCC_OscConfig+0x1dc>
 8001632:	e000      	b.n	8001636 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001634:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f003 0301 	and.w	r3, r3, #1
 800163e:	2b00      	cmp	r3, #0
 8001640:	d073      	beq.n	800172a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001642:	69bb      	ldr	r3, [r7, #24]
 8001644:	2b08      	cmp	r3, #8
 8001646:	d005      	beq.n	8001654 <HAL_RCC_OscConfig+0x21c>
 8001648:	69bb      	ldr	r3, [r7, #24]
 800164a:	2b0c      	cmp	r3, #12
 800164c:	d10e      	bne.n	800166c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800164e:	697b      	ldr	r3, [r7, #20]
 8001650:	2b03      	cmp	r3, #3
 8001652:	d10b      	bne.n	800166c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001654:	4b14      	ldr	r3, [pc, #80]	; (80016a8 <HAL_RCC_OscConfig+0x270>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800165c:	2b00      	cmp	r3, #0
 800165e:	d063      	beq.n	8001728 <HAL_RCC_OscConfig+0x2f0>
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	685b      	ldr	r3, [r3, #4]
 8001664:	2b00      	cmp	r3, #0
 8001666:	d15f      	bne.n	8001728 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001668:	2301      	movs	r3, #1
 800166a:	e2f1      	b.n	8001c50 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	685b      	ldr	r3, [r3, #4]
 8001670:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001674:	d106      	bne.n	8001684 <HAL_RCC_OscConfig+0x24c>
 8001676:	4b0c      	ldr	r3, [pc, #48]	; (80016a8 <HAL_RCC_OscConfig+0x270>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	4a0b      	ldr	r2, [pc, #44]	; (80016a8 <HAL_RCC_OscConfig+0x270>)
 800167c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001680:	6013      	str	r3, [r2, #0]
 8001682:	e025      	b.n	80016d0 <HAL_RCC_OscConfig+0x298>
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	685b      	ldr	r3, [r3, #4]
 8001688:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800168c:	d114      	bne.n	80016b8 <HAL_RCC_OscConfig+0x280>
 800168e:	4b06      	ldr	r3, [pc, #24]	; (80016a8 <HAL_RCC_OscConfig+0x270>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	4a05      	ldr	r2, [pc, #20]	; (80016a8 <HAL_RCC_OscConfig+0x270>)
 8001694:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001698:	6013      	str	r3, [r2, #0]
 800169a:	4b03      	ldr	r3, [pc, #12]	; (80016a8 <HAL_RCC_OscConfig+0x270>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	4a02      	ldr	r2, [pc, #8]	; (80016a8 <HAL_RCC_OscConfig+0x270>)
 80016a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016a4:	6013      	str	r3, [r2, #0]
 80016a6:	e013      	b.n	80016d0 <HAL_RCC_OscConfig+0x298>
 80016a8:	40021000 	.word	0x40021000
 80016ac:	080064b4 	.word	0x080064b4
 80016b0:	20000128 	.word	0x20000128
 80016b4:	2000012c 	.word	0x2000012c
 80016b8:	4ba0      	ldr	r3, [pc, #640]	; (800193c <HAL_RCC_OscConfig+0x504>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	4a9f      	ldr	r2, [pc, #636]	; (800193c <HAL_RCC_OscConfig+0x504>)
 80016be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80016c2:	6013      	str	r3, [r2, #0]
 80016c4:	4b9d      	ldr	r3, [pc, #628]	; (800193c <HAL_RCC_OscConfig+0x504>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	4a9c      	ldr	r2, [pc, #624]	; (800193c <HAL_RCC_OscConfig+0x504>)
 80016ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80016ce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	685b      	ldr	r3, [r3, #4]
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d013      	beq.n	8001700 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016d8:	f7ff f9dc 	bl	8000a94 <HAL_GetTick>
 80016dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80016de:	e008      	b.n	80016f2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016e0:	f7ff f9d8 	bl	8000a94 <HAL_GetTick>
 80016e4:	4602      	mov	r2, r0
 80016e6:	693b      	ldr	r3, [r7, #16]
 80016e8:	1ad3      	subs	r3, r2, r3
 80016ea:	2b64      	cmp	r3, #100	; 0x64
 80016ec:	d901      	bls.n	80016f2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80016ee:	2303      	movs	r3, #3
 80016f0:	e2ae      	b.n	8001c50 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80016f2:	4b92      	ldr	r3, [pc, #584]	; (800193c <HAL_RCC_OscConfig+0x504>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d0f0      	beq.n	80016e0 <HAL_RCC_OscConfig+0x2a8>
 80016fe:	e014      	b.n	800172a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001700:	f7ff f9c8 	bl	8000a94 <HAL_GetTick>
 8001704:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001706:	e008      	b.n	800171a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001708:	f7ff f9c4 	bl	8000a94 <HAL_GetTick>
 800170c:	4602      	mov	r2, r0
 800170e:	693b      	ldr	r3, [r7, #16]
 8001710:	1ad3      	subs	r3, r2, r3
 8001712:	2b64      	cmp	r3, #100	; 0x64
 8001714:	d901      	bls.n	800171a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001716:	2303      	movs	r3, #3
 8001718:	e29a      	b.n	8001c50 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800171a:	4b88      	ldr	r3, [pc, #544]	; (800193c <HAL_RCC_OscConfig+0x504>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001722:	2b00      	cmp	r3, #0
 8001724:	d1f0      	bne.n	8001708 <HAL_RCC_OscConfig+0x2d0>
 8001726:	e000      	b.n	800172a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001728:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f003 0302 	and.w	r3, r3, #2
 8001732:	2b00      	cmp	r3, #0
 8001734:	d060      	beq.n	80017f8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001736:	69bb      	ldr	r3, [r7, #24]
 8001738:	2b04      	cmp	r3, #4
 800173a:	d005      	beq.n	8001748 <HAL_RCC_OscConfig+0x310>
 800173c:	69bb      	ldr	r3, [r7, #24]
 800173e:	2b0c      	cmp	r3, #12
 8001740:	d119      	bne.n	8001776 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001742:	697b      	ldr	r3, [r7, #20]
 8001744:	2b02      	cmp	r3, #2
 8001746:	d116      	bne.n	8001776 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001748:	4b7c      	ldr	r3, [pc, #496]	; (800193c <HAL_RCC_OscConfig+0x504>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001750:	2b00      	cmp	r3, #0
 8001752:	d005      	beq.n	8001760 <HAL_RCC_OscConfig+0x328>
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	68db      	ldr	r3, [r3, #12]
 8001758:	2b00      	cmp	r3, #0
 800175a:	d101      	bne.n	8001760 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800175c:	2301      	movs	r3, #1
 800175e:	e277      	b.n	8001c50 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001760:	4b76      	ldr	r3, [pc, #472]	; (800193c <HAL_RCC_OscConfig+0x504>)
 8001762:	685b      	ldr	r3, [r3, #4]
 8001764:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	691b      	ldr	r3, [r3, #16]
 800176c:	061b      	lsls	r3, r3, #24
 800176e:	4973      	ldr	r1, [pc, #460]	; (800193c <HAL_RCC_OscConfig+0x504>)
 8001770:	4313      	orrs	r3, r2
 8001772:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001774:	e040      	b.n	80017f8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	68db      	ldr	r3, [r3, #12]
 800177a:	2b00      	cmp	r3, #0
 800177c:	d023      	beq.n	80017c6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800177e:	4b6f      	ldr	r3, [pc, #444]	; (800193c <HAL_RCC_OscConfig+0x504>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	4a6e      	ldr	r2, [pc, #440]	; (800193c <HAL_RCC_OscConfig+0x504>)
 8001784:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001788:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800178a:	f7ff f983 	bl	8000a94 <HAL_GetTick>
 800178e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001790:	e008      	b.n	80017a4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001792:	f7ff f97f 	bl	8000a94 <HAL_GetTick>
 8001796:	4602      	mov	r2, r0
 8001798:	693b      	ldr	r3, [r7, #16]
 800179a:	1ad3      	subs	r3, r2, r3
 800179c:	2b02      	cmp	r3, #2
 800179e:	d901      	bls.n	80017a4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80017a0:	2303      	movs	r3, #3
 80017a2:	e255      	b.n	8001c50 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80017a4:	4b65      	ldr	r3, [pc, #404]	; (800193c <HAL_RCC_OscConfig+0x504>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d0f0      	beq.n	8001792 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017b0:	4b62      	ldr	r3, [pc, #392]	; (800193c <HAL_RCC_OscConfig+0x504>)
 80017b2:	685b      	ldr	r3, [r3, #4]
 80017b4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	691b      	ldr	r3, [r3, #16]
 80017bc:	061b      	lsls	r3, r3, #24
 80017be:	495f      	ldr	r1, [pc, #380]	; (800193c <HAL_RCC_OscConfig+0x504>)
 80017c0:	4313      	orrs	r3, r2
 80017c2:	604b      	str	r3, [r1, #4]
 80017c4:	e018      	b.n	80017f8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80017c6:	4b5d      	ldr	r3, [pc, #372]	; (800193c <HAL_RCC_OscConfig+0x504>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	4a5c      	ldr	r2, [pc, #368]	; (800193c <HAL_RCC_OscConfig+0x504>)
 80017cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80017d0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017d2:	f7ff f95f 	bl	8000a94 <HAL_GetTick>
 80017d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80017d8:	e008      	b.n	80017ec <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017da:	f7ff f95b 	bl	8000a94 <HAL_GetTick>
 80017de:	4602      	mov	r2, r0
 80017e0:	693b      	ldr	r3, [r7, #16]
 80017e2:	1ad3      	subs	r3, r2, r3
 80017e4:	2b02      	cmp	r3, #2
 80017e6:	d901      	bls.n	80017ec <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80017e8:	2303      	movs	r3, #3
 80017ea:	e231      	b.n	8001c50 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80017ec:	4b53      	ldr	r3, [pc, #332]	; (800193c <HAL_RCC_OscConfig+0x504>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d1f0      	bne.n	80017da <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f003 0308 	and.w	r3, r3, #8
 8001800:	2b00      	cmp	r3, #0
 8001802:	d03c      	beq.n	800187e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	695b      	ldr	r3, [r3, #20]
 8001808:	2b00      	cmp	r3, #0
 800180a:	d01c      	beq.n	8001846 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800180c:	4b4b      	ldr	r3, [pc, #300]	; (800193c <HAL_RCC_OscConfig+0x504>)
 800180e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001812:	4a4a      	ldr	r2, [pc, #296]	; (800193c <HAL_RCC_OscConfig+0x504>)
 8001814:	f043 0301 	orr.w	r3, r3, #1
 8001818:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800181c:	f7ff f93a 	bl	8000a94 <HAL_GetTick>
 8001820:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001822:	e008      	b.n	8001836 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001824:	f7ff f936 	bl	8000a94 <HAL_GetTick>
 8001828:	4602      	mov	r2, r0
 800182a:	693b      	ldr	r3, [r7, #16]
 800182c:	1ad3      	subs	r3, r2, r3
 800182e:	2b02      	cmp	r3, #2
 8001830:	d901      	bls.n	8001836 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001832:	2303      	movs	r3, #3
 8001834:	e20c      	b.n	8001c50 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001836:	4b41      	ldr	r3, [pc, #260]	; (800193c <HAL_RCC_OscConfig+0x504>)
 8001838:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800183c:	f003 0302 	and.w	r3, r3, #2
 8001840:	2b00      	cmp	r3, #0
 8001842:	d0ef      	beq.n	8001824 <HAL_RCC_OscConfig+0x3ec>
 8001844:	e01b      	b.n	800187e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001846:	4b3d      	ldr	r3, [pc, #244]	; (800193c <HAL_RCC_OscConfig+0x504>)
 8001848:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800184c:	4a3b      	ldr	r2, [pc, #236]	; (800193c <HAL_RCC_OscConfig+0x504>)
 800184e:	f023 0301 	bic.w	r3, r3, #1
 8001852:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001856:	f7ff f91d 	bl	8000a94 <HAL_GetTick>
 800185a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800185c:	e008      	b.n	8001870 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800185e:	f7ff f919 	bl	8000a94 <HAL_GetTick>
 8001862:	4602      	mov	r2, r0
 8001864:	693b      	ldr	r3, [r7, #16]
 8001866:	1ad3      	subs	r3, r2, r3
 8001868:	2b02      	cmp	r3, #2
 800186a:	d901      	bls.n	8001870 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800186c:	2303      	movs	r3, #3
 800186e:	e1ef      	b.n	8001c50 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001870:	4b32      	ldr	r3, [pc, #200]	; (800193c <HAL_RCC_OscConfig+0x504>)
 8001872:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001876:	f003 0302 	and.w	r3, r3, #2
 800187a:	2b00      	cmp	r3, #0
 800187c:	d1ef      	bne.n	800185e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f003 0304 	and.w	r3, r3, #4
 8001886:	2b00      	cmp	r3, #0
 8001888:	f000 80a6 	beq.w	80019d8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800188c:	2300      	movs	r3, #0
 800188e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001890:	4b2a      	ldr	r3, [pc, #168]	; (800193c <HAL_RCC_OscConfig+0x504>)
 8001892:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001894:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001898:	2b00      	cmp	r3, #0
 800189a:	d10d      	bne.n	80018b8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800189c:	4b27      	ldr	r3, [pc, #156]	; (800193c <HAL_RCC_OscConfig+0x504>)
 800189e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018a0:	4a26      	ldr	r2, [pc, #152]	; (800193c <HAL_RCC_OscConfig+0x504>)
 80018a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018a6:	6593      	str	r3, [r2, #88]	; 0x58
 80018a8:	4b24      	ldr	r3, [pc, #144]	; (800193c <HAL_RCC_OscConfig+0x504>)
 80018aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018b0:	60bb      	str	r3, [r7, #8]
 80018b2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80018b4:	2301      	movs	r3, #1
 80018b6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80018b8:	4b21      	ldr	r3, [pc, #132]	; (8001940 <HAL_RCC_OscConfig+0x508>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d118      	bne.n	80018f6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80018c4:	4b1e      	ldr	r3, [pc, #120]	; (8001940 <HAL_RCC_OscConfig+0x508>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	4a1d      	ldr	r2, [pc, #116]	; (8001940 <HAL_RCC_OscConfig+0x508>)
 80018ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018ce:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80018d0:	f7ff f8e0 	bl	8000a94 <HAL_GetTick>
 80018d4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80018d6:	e008      	b.n	80018ea <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80018d8:	f7ff f8dc 	bl	8000a94 <HAL_GetTick>
 80018dc:	4602      	mov	r2, r0
 80018de:	693b      	ldr	r3, [r7, #16]
 80018e0:	1ad3      	subs	r3, r2, r3
 80018e2:	2b02      	cmp	r3, #2
 80018e4:	d901      	bls.n	80018ea <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80018e6:	2303      	movs	r3, #3
 80018e8:	e1b2      	b.n	8001c50 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80018ea:	4b15      	ldr	r3, [pc, #84]	; (8001940 <HAL_RCC_OscConfig+0x508>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d0f0      	beq.n	80018d8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	689b      	ldr	r3, [r3, #8]
 80018fa:	2b01      	cmp	r3, #1
 80018fc:	d108      	bne.n	8001910 <HAL_RCC_OscConfig+0x4d8>
 80018fe:	4b0f      	ldr	r3, [pc, #60]	; (800193c <HAL_RCC_OscConfig+0x504>)
 8001900:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001904:	4a0d      	ldr	r2, [pc, #52]	; (800193c <HAL_RCC_OscConfig+0x504>)
 8001906:	f043 0301 	orr.w	r3, r3, #1
 800190a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800190e:	e029      	b.n	8001964 <HAL_RCC_OscConfig+0x52c>
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	689b      	ldr	r3, [r3, #8]
 8001914:	2b05      	cmp	r3, #5
 8001916:	d115      	bne.n	8001944 <HAL_RCC_OscConfig+0x50c>
 8001918:	4b08      	ldr	r3, [pc, #32]	; (800193c <HAL_RCC_OscConfig+0x504>)
 800191a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800191e:	4a07      	ldr	r2, [pc, #28]	; (800193c <HAL_RCC_OscConfig+0x504>)
 8001920:	f043 0304 	orr.w	r3, r3, #4
 8001924:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001928:	4b04      	ldr	r3, [pc, #16]	; (800193c <HAL_RCC_OscConfig+0x504>)
 800192a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800192e:	4a03      	ldr	r2, [pc, #12]	; (800193c <HAL_RCC_OscConfig+0x504>)
 8001930:	f043 0301 	orr.w	r3, r3, #1
 8001934:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001938:	e014      	b.n	8001964 <HAL_RCC_OscConfig+0x52c>
 800193a:	bf00      	nop
 800193c:	40021000 	.word	0x40021000
 8001940:	40007000 	.word	0x40007000
 8001944:	4b9a      	ldr	r3, [pc, #616]	; (8001bb0 <HAL_RCC_OscConfig+0x778>)
 8001946:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800194a:	4a99      	ldr	r2, [pc, #612]	; (8001bb0 <HAL_RCC_OscConfig+0x778>)
 800194c:	f023 0301 	bic.w	r3, r3, #1
 8001950:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001954:	4b96      	ldr	r3, [pc, #600]	; (8001bb0 <HAL_RCC_OscConfig+0x778>)
 8001956:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800195a:	4a95      	ldr	r2, [pc, #596]	; (8001bb0 <HAL_RCC_OscConfig+0x778>)
 800195c:	f023 0304 	bic.w	r3, r3, #4
 8001960:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	689b      	ldr	r3, [r3, #8]
 8001968:	2b00      	cmp	r3, #0
 800196a:	d016      	beq.n	800199a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800196c:	f7ff f892 	bl	8000a94 <HAL_GetTick>
 8001970:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001972:	e00a      	b.n	800198a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001974:	f7ff f88e 	bl	8000a94 <HAL_GetTick>
 8001978:	4602      	mov	r2, r0
 800197a:	693b      	ldr	r3, [r7, #16]
 800197c:	1ad3      	subs	r3, r2, r3
 800197e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001982:	4293      	cmp	r3, r2
 8001984:	d901      	bls.n	800198a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001986:	2303      	movs	r3, #3
 8001988:	e162      	b.n	8001c50 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800198a:	4b89      	ldr	r3, [pc, #548]	; (8001bb0 <HAL_RCC_OscConfig+0x778>)
 800198c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001990:	f003 0302 	and.w	r3, r3, #2
 8001994:	2b00      	cmp	r3, #0
 8001996:	d0ed      	beq.n	8001974 <HAL_RCC_OscConfig+0x53c>
 8001998:	e015      	b.n	80019c6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800199a:	f7ff f87b 	bl	8000a94 <HAL_GetTick>
 800199e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80019a0:	e00a      	b.n	80019b8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019a2:	f7ff f877 	bl	8000a94 <HAL_GetTick>
 80019a6:	4602      	mov	r2, r0
 80019a8:	693b      	ldr	r3, [r7, #16]
 80019aa:	1ad3      	subs	r3, r2, r3
 80019ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80019b0:	4293      	cmp	r3, r2
 80019b2:	d901      	bls.n	80019b8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80019b4:	2303      	movs	r3, #3
 80019b6:	e14b      	b.n	8001c50 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80019b8:	4b7d      	ldr	r3, [pc, #500]	; (8001bb0 <HAL_RCC_OscConfig+0x778>)
 80019ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019be:	f003 0302 	and.w	r3, r3, #2
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d1ed      	bne.n	80019a2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80019c6:	7ffb      	ldrb	r3, [r7, #31]
 80019c8:	2b01      	cmp	r3, #1
 80019ca:	d105      	bne.n	80019d8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80019cc:	4b78      	ldr	r3, [pc, #480]	; (8001bb0 <HAL_RCC_OscConfig+0x778>)
 80019ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019d0:	4a77      	ldr	r2, [pc, #476]	; (8001bb0 <HAL_RCC_OscConfig+0x778>)
 80019d2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80019d6:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f003 0320 	and.w	r3, r3, #32
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d03c      	beq.n	8001a5e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d01c      	beq.n	8001a26 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80019ec:	4b70      	ldr	r3, [pc, #448]	; (8001bb0 <HAL_RCC_OscConfig+0x778>)
 80019ee:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80019f2:	4a6f      	ldr	r2, [pc, #444]	; (8001bb0 <HAL_RCC_OscConfig+0x778>)
 80019f4:	f043 0301 	orr.w	r3, r3, #1
 80019f8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019fc:	f7ff f84a 	bl	8000a94 <HAL_GetTick>
 8001a00:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001a02:	e008      	b.n	8001a16 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001a04:	f7ff f846 	bl	8000a94 <HAL_GetTick>
 8001a08:	4602      	mov	r2, r0
 8001a0a:	693b      	ldr	r3, [r7, #16]
 8001a0c:	1ad3      	subs	r3, r2, r3
 8001a0e:	2b02      	cmp	r3, #2
 8001a10:	d901      	bls.n	8001a16 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8001a12:	2303      	movs	r3, #3
 8001a14:	e11c      	b.n	8001c50 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001a16:	4b66      	ldr	r3, [pc, #408]	; (8001bb0 <HAL_RCC_OscConfig+0x778>)
 8001a18:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001a1c:	f003 0302 	and.w	r3, r3, #2
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d0ef      	beq.n	8001a04 <HAL_RCC_OscConfig+0x5cc>
 8001a24:	e01b      	b.n	8001a5e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001a26:	4b62      	ldr	r3, [pc, #392]	; (8001bb0 <HAL_RCC_OscConfig+0x778>)
 8001a28:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001a2c:	4a60      	ldr	r2, [pc, #384]	; (8001bb0 <HAL_RCC_OscConfig+0x778>)
 8001a2e:	f023 0301 	bic.w	r3, r3, #1
 8001a32:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a36:	f7ff f82d 	bl	8000a94 <HAL_GetTick>
 8001a3a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001a3c:	e008      	b.n	8001a50 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001a3e:	f7ff f829 	bl	8000a94 <HAL_GetTick>
 8001a42:	4602      	mov	r2, r0
 8001a44:	693b      	ldr	r3, [r7, #16]
 8001a46:	1ad3      	subs	r3, r2, r3
 8001a48:	2b02      	cmp	r3, #2
 8001a4a:	d901      	bls.n	8001a50 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8001a4c:	2303      	movs	r3, #3
 8001a4e:	e0ff      	b.n	8001c50 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001a50:	4b57      	ldr	r3, [pc, #348]	; (8001bb0 <HAL_RCC_OscConfig+0x778>)
 8001a52:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001a56:	f003 0302 	and.w	r3, r3, #2
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d1ef      	bne.n	8001a3e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	f000 80f3 	beq.w	8001c4e <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a6c:	2b02      	cmp	r3, #2
 8001a6e:	f040 80c9 	bne.w	8001c04 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001a72:	4b4f      	ldr	r3, [pc, #316]	; (8001bb0 <HAL_RCC_OscConfig+0x778>)
 8001a74:	68db      	ldr	r3, [r3, #12]
 8001a76:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a78:	697b      	ldr	r3, [r7, #20]
 8001a7a:	f003 0203 	and.w	r2, r3, #3
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a82:	429a      	cmp	r2, r3
 8001a84:	d12c      	bne.n	8001ae0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001a86:	697b      	ldr	r3, [r7, #20]
 8001a88:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a90:	3b01      	subs	r3, #1
 8001a92:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a94:	429a      	cmp	r2, r3
 8001a96:	d123      	bne.n	8001ae0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001a98:	697b      	ldr	r3, [r7, #20]
 8001a9a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001aa2:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001aa4:	429a      	cmp	r2, r3
 8001aa6:	d11b      	bne.n	8001ae0 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001aa8:	697b      	ldr	r3, [r7, #20]
 8001aaa:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ab2:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001ab4:	429a      	cmp	r2, r3
 8001ab6:	d113      	bne.n	8001ae0 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001ab8:	697b      	ldr	r3, [r7, #20]
 8001aba:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ac2:	085b      	lsrs	r3, r3, #1
 8001ac4:	3b01      	subs	r3, #1
 8001ac6:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001ac8:	429a      	cmp	r2, r3
 8001aca:	d109      	bne.n	8001ae0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001acc:	697b      	ldr	r3, [r7, #20]
 8001ace:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ad6:	085b      	lsrs	r3, r3, #1
 8001ad8:	3b01      	subs	r3, #1
 8001ada:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001adc:	429a      	cmp	r2, r3
 8001ade:	d06b      	beq.n	8001bb8 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001ae0:	69bb      	ldr	r3, [r7, #24]
 8001ae2:	2b0c      	cmp	r3, #12
 8001ae4:	d062      	beq.n	8001bac <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001ae6:	4b32      	ldr	r3, [pc, #200]	; (8001bb0 <HAL_RCC_OscConfig+0x778>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d001      	beq.n	8001af6 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8001af2:	2301      	movs	r3, #1
 8001af4:	e0ac      	b.n	8001c50 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001af6:	4b2e      	ldr	r3, [pc, #184]	; (8001bb0 <HAL_RCC_OscConfig+0x778>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	4a2d      	ldr	r2, [pc, #180]	; (8001bb0 <HAL_RCC_OscConfig+0x778>)
 8001afc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001b00:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001b02:	f7fe ffc7 	bl	8000a94 <HAL_GetTick>
 8001b06:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b08:	e008      	b.n	8001b1c <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b0a:	f7fe ffc3 	bl	8000a94 <HAL_GetTick>
 8001b0e:	4602      	mov	r2, r0
 8001b10:	693b      	ldr	r3, [r7, #16]
 8001b12:	1ad3      	subs	r3, r2, r3
 8001b14:	2b02      	cmp	r3, #2
 8001b16:	d901      	bls.n	8001b1c <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8001b18:	2303      	movs	r3, #3
 8001b1a:	e099      	b.n	8001c50 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b1c:	4b24      	ldr	r3, [pc, #144]	; (8001bb0 <HAL_RCC_OscConfig+0x778>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d1f0      	bne.n	8001b0a <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b28:	4b21      	ldr	r3, [pc, #132]	; (8001bb0 <HAL_RCC_OscConfig+0x778>)
 8001b2a:	68da      	ldr	r2, [r3, #12]
 8001b2c:	4b21      	ldr	r3, [pc, #132]	; (8001bb4 <HAL_RCC_OscConfig+0x77c>)
 8001b2e:	4013      	ands	r3, r2
 8001b30:	687a      	ldr	r2, [r7, #4]
 8001b32:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001b34:	687a      	ldr	r2, [r7, #4]
 8001b36:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001b38:	3a01      	subs	r2, #1
 8001b3a:	0112      	lsls	r2, r2, #4
 8001b3c:	4311      	orrs	r1, r2
 8001b3e:	687a      	ldr	r2, [r7, #4]
 8001b40:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001b42:	0212      	lsls	r2, r2, #8
 8001b44:	4311      	orrs	r1, r2
 8001b46:	687a      	ldr	r2, [r7, #4]
 8001b48:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001b4a:	0852      	lsrs	r2, r2, #1
 8001b4c:	3a01      	subs	r2, #1
 8001b4e:	0552      	lsls	r2, r2, #21
 8001b50:	4311      	orrs	r1, r2
 8001b52:	687a      	ldr	r2, [r7, #4]
 8001b54:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001b56:	0852      	lsrs	r2, r2, #1
 8001b58:	3a01      	subs	r2, #1
 8001b5a:	0652      	lsls	r2, r2, #25
 8001b5c:	4311      	orrs	r1, r2
 8001b5e:	687a      	ldr	r2, [r7, #4]
 8001b60:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001b62:	06d2      	lsls	r2, r2, #27
 8001b64:	430a      	orrs	r2, r1
 8001b66:	4912      	ldr	r1, [pc, #72]	; (8001bb0 <HAL_RCC_OscConfig+0x778>)
 8001b68:	4313      	orrs	r3, r2
 8001b6a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001b6c:	4b10      	ldr	r3, [pc, #64]	; (8001bb0 <HAL_RCC_OscConfig+0x778>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	4a0f      	ldr	r2, [pc, #60]	; (8001bb0 <HAL_RCC_OscConfig+0x778>)
 8001b72:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001b76:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001b78:	4b0d      	ldr	r3, [pc, #52]	; (8001bb0 <HAL_RCC_OscConfig+0x778>)
 8001b7a:	68db      	ldr	r3, [r3, #12]
 8001b7c:	4a0c      	ldr	r2, [pc, #48]	; (8001bb0 <HAL_RCC_OscConfig+0x778>)
 8001b7e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001b82:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001b84:	f7fe ff86 	bl	8000a94 <HAL_GetTick>
 8001b88:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b8a:	e008      	b.n	8001b9e <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b8c:	f7fe ff82 	bl	8000a94 <HAL_GetTick>
 8001b90:	4602      	mov	r2, r0
 8001b92:	693b      	ldr	r3, [r7, #16]
 8001b94:	1ad3      	subs	r3, r2, r3
 8001b96:	2b02      	cmp	r3, #2
 8001b98:	d901      	bls.n	8001b9e <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8001b9a:	2303      	movs	r3, #3
 8001b9c:	e058      	b.n	8001c50 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b9e:	4b04      	ldr	r3, [pc, #16]	; (8001bb0 <HAL_RCC_OscConfig+0x778>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d0f0      	beq.n	8001b8c <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001baa:	e050      	b.n	8001c4e <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001bac:	2301      	movs	r3, #1
 8001bae:	e04f      	b.n	8001c50 <HAL_RCC_OscConfig+0x818>
 8001bb0:	40021000 	.word	0x40021000
 8001bb4:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001bb8:	4b27      	ldr	r3, [pc, #156]	; (8001c58 <HAL_RCC_OscConfig+0x820>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d144      	bne.n	8001c4e <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001bc4:	4b24      	ldr	r3, [pc, #144]	; (8001c58 <HAL_RCC_OscConfig+0x820>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	4a23      	ldr	r2, [pc, #140]	; (8001c58 <HAL_RCC_OscConfig+0x820>)
 8001bca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001bce:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001bd0:	4b21      	ldr	r3, [pc, #132]	; (8001c58 <HAL_RCC_OscConfig+0x820>)
 8001bd2:	68db      	ldr	r3, [r3, #12]
 8001bd4:	4a20      	ldr	r2, [pc, #128]	; (8001c58 <HAL_RCC_OscConfig+0x820>)
 8001bd6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001bda:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001bdc:	f7fe ff5a 	bl	8000a94 <HAL_GetTick>
 8001be0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001be2:	e008      	b.n	8001bf6 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001be4:	f7fe ff56 	bl	8000a94 <HAL_GetTick>
 8001be8:	4602      	mov	r2, r0
 8001bea:	693b      	ldr	r3, [r7, #16]
 8001bec:	1ad3      	subs	r3, r2, r3
 8001bee:	2b02      	cmp	r3, #2
 8001bf0:	d901      	bls.n	8001bf6 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8001bf2:	2303      	movs	r3, #3
 8001bf4:	e02c      	b.n	8001c50 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001bf6:	4b18      	ldr	r3, [pc, #96]	; (8001c58 <HAL_RCC_OscConfig+0x820>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d0f0      	beq.n	8001be4 <HAL_RCC_OscConfig+0x7ac>
 8001c02:	e024      	b.n	8001c4e <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001c04:	69bb      	ldr	r3, [r7, #24]
 8001c06:	2b0c      	cmp	r3, #12
 8001c08:	d01f      	beq.n	8001c4a <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c0a:	4b13      	ldr	r3, [pc, #76]	; (8001c58 <HAL_RCC_OscConfig+0x820>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	4a12      	ldr	r2, [pc, #72]	; (8001c58 <HAL_RCC_OscConfig+0x820>)
 8001c10:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001c14:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c16:	f7fe ff3d 	bl	8000a94 <HAL_GetTick>
 8001c1a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c1c:	e008      	b.n	8001c30 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c1e:	f7fe ff39 	bl	8000a94 <HAL_GetTick>
 8001c22:	4602      	mov	r2, r0
 8001c24:	693b      	ldr	r3, [r7, #16]
 8001c26:	1ad3      	subs	r3, r2, r3
 8001c28:	2b02      	cmp	r3, #2
 8001c2a:	d901      	bls.n	8001c30 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8001c2c:	2303      	movs	r3, #3
 8001c2e:	e00f      	b.n	8001c50 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c30:	4b09      	ldr	r3, [pc, #36]	; (8001c58 <HAL_RCC_OscConfig+0x820>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d1f0      	bne.n	8001c1e <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8001c3c:	4b06      	ldr	r3, [pc, #24]	; (8001c58 <HAL_RCC_OscConfig+0x820>)
 8001c3e:	68da      	ldr	r2, [r3, #12]
 8001c40:	4905      	ldr	r1, [pc, #20]	; (8001c58 <HAL_RCC_OscConfig+0x820>)
 8001c42:	4b06      	ldr	r3, [pc, #24]	; (8001c5c <HAL_RCC_OscConfig+0x824>)
 8001c44:	4013      	ands	r3, r2
 8001c46:	60cb      	str	r3, [r1, #12]
 8001c48:	e001      	b.n	8001c4e <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	e000      	b.n	8001c50 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8001c4e:	2300      	movs	r3, #0
}
 8001c50:	4618      	mov	r0, r3
 8001c52:	3720      	adds	r7, #32
 8001c54:	46bd      	mov	sp, r7
 8001c56:	bd80      	pop	{r7, pc}
 8001c58:	40021000 	.word	0x40021000
 8001c5c:	feeefffc 	.word	0xfeeefffc

08001c60 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b084      	sub	sp, #16
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
 8001c68:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d101      	bne.n	8001c74 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c70:	2301      	movs	r3, #1
 8001c72:	e0e7      	b.n	8001e44 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001c74:	4b75      	ldr	r3, [pc, #468]	; (8001e4c <HAL_RCC_ClockConfig+0x1ec>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f003 0307 	and.w	r3, r3, #7
 8001c7c:	683a      	ldr	r2, [r7, #0]
 8001c7e:	429a      	cmp	r2, r3
 8001c80:	d910      	bls.n	8001ca4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c82:	4b72      	ldr	r3, [pc, #456]	; (8001e4c <HAL_RCC_ClockConfig+0x1ec>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f023 0207 	bic.w	r2, r3, #7
 8001c8a:	4970      	ldr	r1, [pc, #448]	; (8001e4c <HAL_RCC_ClockConfig+0x1ec>)
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	4313      	orrs	r3, r2
 8001c90:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c92:	4b6e      	ldr	r3, [pc, #440]	; (8001e4c <HAL_RCC_ClockConfig+0x1ec>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f003 0307 	and.w	r3, r3, #7
 8001c9a:	683a      	ldr	r2, [r7, #0]
 8001c9c:	429a      	cmp	r2, r3
 8001c9e:	d001      	beq.n	8001ca4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001ca0:	2301      	movs	r3, #1
 8001ca2:	e0cf      	b.n	8001e44 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f003 0302 	and.w	r3, r3, #2
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d010      	beq.n	8001cd2 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	689a      	ldr	r2, [r3, #8]
 8001cb4:	4b66      	ldr	r3, [pc, #408]	; (8001e50 <HAL_RCC_ClockConfig+0x1f0>)
 8001cb6:	689b      	ldr	r3, [r3, #8]
 8001cb8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001cbc:	429a      	cmp	r2, r3
 8001cbe:	d908      	bls.n	8001cd2 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001cc0:	4b63      	ldr	r3, [pc, #396]	; (8001e50 <HAL_RCC_ClockConfig+0x1f0>)
 8001cc2:	689b      	ldr	r3, [r3, #8]
 8001cc4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	689b      	ldr	r3, [r3, #8]
 8001ccc:	4960      	ldr	r1, [pc, #384]	; (8001e50 <HAL_RCC_ClockConfig+0x1f0>)
 8001cce:	4313      	orrs	r3, r2
 8001cd0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f003 0301 	and.w	r3, r3, #1
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d04c      	beq.n	8001d78 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	685b      	ldr	r3, [r3, #4]
 8001ce2:	2b03      	cmp	r3, #3
 8001ce4:	d107      	bne.n	8001cf6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ce6:	4b5a      	ldr	r3, [pc, #360]	; (8001e50 <HAL_RCC_ClockConfig+0x1f0>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d121      	bne.n	8001d36 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001cf2:	2301      	movs	r3, #1
 8001cf4:	e0a6      	b.n	8001e44 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	685b      	ldr	r3, [r3, #4]
 8001cfa:	2b02      	cmp	r3, #2
 8001cfc:	d107      	bne.n	8001d0e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001cfe:	4b54      	ldr	r3, [pc, #336]	; (8001e50 <HAL_RCC_ClockConfig+0x1f0>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d115      	bne.n	8001d36 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001d0a:	2301      	movs	r3, #1
 8001d0c:	e09a      	b.n	8001e44 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	685b      	ldr	r3, [r3, #4]
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d107      	bne.n	8001d26 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001d16:	4b4e      	ldr	r3, [pc, #312]	; (8001e50 <HAL_RCC_ClockConfig+0x1f0>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f003 0302 	and.w	r3, r3, #2
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d109      	bne.n	8001d36 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001d22:	2301      	movs	r3, #1
 8001d24:	e08e      	b.n	8001e44 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d26:	4b4a      	ldr	r3, [pc, #296]	; (8001e50 <HAL_RCC_ClockConfig+0x1f0>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d101      	bne.n	8001d36 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001d32:	2301      	movs	r3, #1
 8001d34:	e086      	b.n	8001e44 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001d36:	4b46      	ldr	r3, [pc, #280]	; (8001e50 <HAL_RCC_ClockConfig+0x1f0>)
 8001d38:	689b      	ldr	r3, [r3, #8]
 8001d3a:	f023 0203 	bic.w	r2, r3, #3
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	685b      	ldr	r3, [r3, #4]
 8001d42:	4943      	ldr	r1, [pc, #268]	; (8001e50 <HAL_RCC_ClockConfig+0x1f0>)
 8001d44:	4313      	orrs	r3, r2
 8001d46:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001d48:	f7fe fea4 	bl	8000a94 <HAL_GetTick>
 8001d4c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d4e:	e00a      	b.n	8001d66 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d50:	f7fe fea0 	bl	8000a94 <HAL_GetTick>
 8001d54:	4602      	mov	r2, r0
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	1ad3      	subs	r3, r2, r3
 8001d5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d5e:	4293      	cmp	r3, r2
 8001d60:	d901      	bls.n	8001d66 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001d62:	2303      	movs	r3, #3
 8001d64:	e06e      	b.n	8001e44 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d66:	4b3a      	ldr	r3, [pc, #232]	; (8001e50 <HAL_RCC_ClockConfig+0x1f0>)
 8001d68:	689b      	ldr	r3, [r3, #8]
 8001d6a:	f003 020c 	and.w	r2, r3, #12
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	685b      	ldr	r3, [r3, #4]
 8001d72:	009b      	lsls	r3, r3, #2
 8001d74:	429a      	cmp	r2, r3
 8001d76:	d1eb      	bne.n	8001d50 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f003 0302 	and.w	r3, r3, #2
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d010      	beq.n	8001da6 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	689a      	ldr	r2, [r3, #8]
 8001d88:	4b31      	ldr	r3, [pc, #196]	; (8001e50 <HAL_RCC_ClockConfig+0x1f0>)
 8001d8a:	689b      	ldr	r3, [r3, #8]
 8001d8c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001d90:	429a      	cmp	r2, r3
 8001d92:	d208      	bcs.n	8001da6 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d94:	4b2e      	ldr	r3, [pc, #184]	; (8001e50 <HAL_RCC_ClockConfig+0x1f0>)
 8001d96:	689b      	ldr	r3, [r3, #8]
 8001d98:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	689b      	ldr	r3, [r3, #8]
 8001da0:	492b      	ldr	r1, [pc, #172]	; (8001e50 <HAL_RCC_ClockConfig+0x1f0>)
 8001da2:	4313      	orrs	r3, r2
 8001da4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001da6:	4b29      	ldr	r3, [pc, #164]	; (8001e4c <HAL_RCC_ClockConfig+0x1ec>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f003 0307 	and.w	r3, r3, #7
 8001dae:	683a      	ldr	r2, [r7, #0]
 8001db0:	429a      	cmp	r2, r3
 8001db2:	d210      	bcs.n	8001dd6 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001db4:	4b25      	ldr	r3, [pc, #148]	; (8001e4c <HAL_RCC_ClockConfig+0x1ec>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f023 0207 	bic.w	r2, r3, #7
 8001dbc:	4923      	ldr	r1, [pc, #140]	; (8001e4c <HAL_RCC_ClockConfig+0x1ec>)
 8001dbe:	683b      	ldr	r3, [r7, #0]
 8001dc0:	4313      	orrs	r3, r2
 8001dc2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001dc4:	4b21      	ldr	r3, [pc, #132]	; (8001e4c <HAL_RCC_ClockConfig+0x1ec>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f003 0307 	and.w	r3, r3, #7
 8001dcc:	683a      	ldr	r2, [r7, #0]
 8001dce:	429a      	cmp	r2, r3
 8001dd0:	d001      	beq.n	8001dd6 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	e036      	b.n	8001e44 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f003 0304 	and.w	r3, r3, #4
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d008      	beq.n	8001df4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001de2:	4b1b      	ldr	r3, [pc, #108]	; (8001e50 <HAL_RCC_ClockConfig+0x1f0>)
 8001de4:	689b      	ldr	r3, [r3, #8]
 8001de6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	68db      	ldr	r3, [r3, #12]
 8001dee:	4918      	ldr	r1, [pc, #96]	; (8001e50 <HAL_RCC_ClockConfig+0x1f0>)
 8001df0:	4313      	orrs	r3, r2
 8001df2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f003 0308 	and.w	r3, r3, #8
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d009      	beq.n	8001e14 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001e00:	4b13      	ldr	r3, [pc, #76]	; (8001e50 <HAL_RCC_ClockConfig+0x1f0>)
 8001e02:	689b      	ldr	r3, [r3, #8]
 8001e04:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	691b      	ldr	r3, [r3, #16]
 8001e0c:	00db      	lsls	r3, r3, #3
 8001e0e:	4910      	ldr	r1, [pc, #64]	; (8001e50 <HAL_RCC_ClockConfig+0x1f0>)
 8001e10:	4313      	orrs	r3, r2
 8001e12:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001e14:	f000 f824 	bl	8001e60 <HAL_RCC_GetSysClockFreq>
 8001e18:	4602      	mov	r2, r0
 8001e1a:	4b0d      	ldr	r3, [pc, #52]	; (8001e50 <HAL_RCC_ClockConfig+0x1f0>)
 8001e1c:	689b      	ldr	r3, [r3, #8]
 8001e1e:	091b      	lsrs	r3, r3, #4
 8001e20:	f003 030f 	and.w	r3, r3, #15
 8001e24:	490b      	ldr	r1, [pc, #44]	; (8001e54 <HAL_RCC_ClockConfig+0x1f4>)
 8001e26:	5ccb      	ldrb	r3, [r1, r3]
 8001e28:	f003 031f 	and.w	r3, r3, #31
 8001e2c:	fa22 f303 	lsr.w	r3, r2, r3
 8001e30:	4a09      	ldr	r2, [pc, #36]	; (8001e58 <HAL_RCC_ClockConfig+0x1f8>)
 8001e32:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001e34:	4b09      	ldr	r3, [pc, #36]	; (8001e5c <HAL_RCC_ClockConfig+0x1fc>)
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	4618      	mov	r0, r3
 8001e3a:	f7fe fd33 	bl	80008a4 <HAL_InitTick>
 8001e3e:	4603      	mov	r3, r0
 8001e40:	72fb      	strb	r3, [r7, #11]

  return status;
 8001e42:	7afb      	ldrb	r3, [r7, #11]
}
 8001e44:	4618      	mov	r0, r3
 8001e46:	3710      	adds	r7, #16
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	bd80      	pop	{r7, pc}
 8001e4c:	40022000 	.word	0x40022000
 8001e50:	40021000 	.word	0x40021000
 8001e54:	080064b4 	.word	0x080064b4
 8001e58:	20000128 	.word	0x20000128
 8001e5c:	2000012c 	.word	0x2000012c

08001e60 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e60:	b480      	push	{r7}
 8001e62:	b089      	sub	sp, #36	; 0x24
 8001e64:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001e66:	2300      	movs	r3, #0
 8001e68:	61fb      	str	r3, [r7, #28]
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001e6e:	4b3e      	ldr	r3, [pc, #248]	; (8001f68 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e70:	689b      	ldr	r3, [r3, #8]
 8001e72:	f003 030c 	and.w	r3, r3, #12
 8001e76:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001e78:	4b3b      	ldr	r3, [pc, #236]	; (8001f68 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e7a:	68db      	ldr	r3, [r3, #12]
 8001e7c:	f003 0303 	and.w	r3, r3, #3
 8001e80:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001e82:	693b      	ldr	r3, [r7, #16]
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d005      	beq.n	8001e94 <HAL_RCC_GetSysClockFreq+0x34>
 8001e88:	693b      	ldr	r3, [r7, #16]
 8001e8a:	2b0c      	cmp	r3, #12
 8001e8c:	d121      	bne.n	8001ed2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	2b01      	cmp	r3, #1
 8001e92:	d11e      	bne.n	8001ed2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001e94:	4b34      	ldr	r3, [pc, #208]	; (8001f68 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f003 0308 	and.w	r3, r3, #8
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d107      	bne.n	8001eb0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001ea0:	4b31      	ldr	r3, [pc, #196]	; (8001f68 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ea2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ea6:	0a1b      	lsrs	r3, r3, #8
 8001ea8:	f003 030f 	and.w	r3, r3, #15
 8001eac:	61fb      	str	r3, [r7, #28]
 8001eae:	e005      	b.n	8001ebc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001eb0:	4b2d      	ldr	r3, [pc, #180]	; (8001f68 <HAL_RCC_GetSysClockFreq+0x108>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	091b      	lsrs	r3, r3, #4
 8001eb6:	f003 030f 	and.w	r3, r3, #15
 8001eba:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001ebc:	4a2b      	ldr	r2, [pc, #172]	; (8001f6c <HAL_RCC_GetSysClockFreq+0x10c>)
 8001ebe:	69fb      	ldr	r3, [r7, #28]
 8001ec0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ec4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001ec6:	693b      	ldr	r3, [r7, #16]
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d10d      	bne.n	8001ee8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001ecc:	69fb      	ldr	r3, [r7, #28]
 8001ece:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001ed0:	e00a      	b.n	8001ee8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001ed2:	693b      	ldr	r3, [r7, #16]
 8001ed4:	2b04      	cmp	r3, #4
 8001ed6:	d102      	bne.n	8001ede <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001ed8:	4b25      	ldr	r3, [pc, #148]	; (8001f70 <HAL_RCC_GetSysClockFreq+0x110>)
 8001eda:	61bb      	str	r3, [r7, #24]
 8001edc:	e004      	b.n	8001ee8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001ede:	693b      	ldr	r3, [r7, #16]
 8001ee0:	2b08      	cmp	r3, #8
 8001ee2:	d101      	bne.n	8001ee8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001ee4:	4b22      	ldr	r3, [pc, #136]	; (8001f70 <HAL_RCC_GetSysClockFreq+0x110>)
 8001ee6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001ee8:	693b      	ldr	r3, [r7, #16]
 8001eea:	2b0c      	cmp	r3, #12
 8001eec:	d134      	bne.n	8001f58 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001eee:	4b1e      	ldr	r3, [pc, #120]	; (8001f68 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ef0:	68db      	ldr	r3, [r3, #12]
 8001ef2:	f003 0303 	and.w	r3, r3, #3
 8001ef6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001ef8:	68bb      	ldr	r3, [r7, #8]
 8001efa:	2b02      	cmp	r3, #2
 8001efc:	d003      	beq.n	8001f06 <HAL_RCC_GetSysClockFreq+0xa6>
 8001efe:	68bb      	ldr	r3, [r7, #8]
 8001f00:	2b03      	cmp	r3, #3
 8001f02:	d003      	beq.n	8001f0c <HAL_RCC_GetSysClockFreq+0xac>
 8001f04:	e005      	b.n	8001f12 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001f06:	4b1a      	ldr	r3, [pc, #104]	; (8001f70 <HAL_RCC_GetSysClockFreq+0x110>)
 8001f08:	617b      	str	r3, [r7, #20]
      break;
 8001f0a:	e005      	b.n	8001f18 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001f0c:	4b18      	ldr	r3, [pc, #96]	; (8001f70 <HAL_RCC_GetSysClockFreq+0x110>)
 8001f0e:	617b      	str	r3, [r7, #20]
      break;
 8001f10:	e002      	b.n	8001f18 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001f12:	69fb      	ldr	r3, [r7, #28]
 8001f14:	617b      	str	r3, [r7, #20]
      break;
 8001f16:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001f18:	4b13      	ldr	r3, [pc, #76]	; (8001f68 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f1a:	68db      	ldr	r3, [r3, #12]
 8001f1c:	091b      	lsrs	r3, r3, #4
 8001f1e:	f003 0307 	and.w	r3, r3, #7
 8001f22:	3301      	adds	r3, #1
 8001f24:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001f26:	4b10      	ldr	r3, [pc, #64]	; (8001f68 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f28:	68db      	ldr	r3, [r3, #12]
 8001f2a:	0a1b      	lsrs	r3, r3, #8
 8001f2c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001f30:	697a      	ldr	r2, [r7, #20]
 8001f32:	fb03 f202 	mul.w	r2, r3, r2
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f3c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001f3e:	4b0a      	ldr	r3, [pc, #40]	; (8001f68 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f40:	68db      	ldr	r3, [r3, #12]
 8001f42:	0e5b      	lsrs	r3, r3, #25
 8001f44:	f003 0303 	and.w	r3, r3, #3
 8001f48:	3301      	adds	r3, #1
 8001f4a:	005b      	lsls	r3, r3, #1
 8001f4c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001f4e:	697a      	ldr	r2, [r7, #20]
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f56:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001f58:	69bb      	ldr	r3, [r7, #24]
}
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	3724      	adds	r7, #36	; 0x24
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f64:	4770      	bx	lr
 8001f66:	bf00      	nop
 8001f68:	40021000 	.word	0x40021000
 8001f6c:	080064cc 	.word	0x080064cc
 8001f70:	00f42400 	.word	0x00f42400

08001f74 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001f74:	b480      	push	{r7}
 8001f76:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001f78:	4b03      	ldr	r3, [pc, #12]	; (8001f88 <HAL_RCC_GetHCLKFreq+0x14>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
}
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f84:	4770      	bx	lr
 8001f86:	bf00      	nop
 8001f88:	20000128 	.word	0x20000128

08001f8c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001f90:	f7ff fff0 	bl	8001f74 <HAL_RCC_GetHCLKFreq>
 8001f94:	4602      	mov	r2, r0
 8001f96:	4b06      	ldr	r3, [pc, #24]	; (8001fb0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001f98:	689b      	ldr	r3, [r3, #8]
 8001f9a:	0adb      	lsrs	r3, r3, #11
 8001f9c:	f003 0307 	and.w	r3, r3, #7
 8001fa0:	4904      	ldr	r1, [pc, #16]	; (8001fb4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001fa2:	5ccb      	ldrb	r3, [r1, r3]
 8001fa4:	f003 031f 	and.w	r3, r3, #31
 8001fa8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001fac:	4618      	mov	r0, r3
 8001fae:	bd80      	pop	{r7, pc}
 8001fb0:	40021000 	.word	0x40021000
 8001fb4:	080064c4 	.word	0x080064c4

08001fb8 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	b083      	sub	sp, #12
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
 8001fc0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	220f      	movs	r2, #15
 8001fc6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8001fc8:	4b12      	ldr	r3, [pc, #72]	; (8002014 <HAL_RCC_GetClockConfig+0x5c>)
 8001fca:	689b      	ldr	r3, [r3, #8]
 8001fcc:	f003 0203 	and.w	r2, r3, #3
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8001fd4:	4b0f      	ldr	r3, [pc, #60]	; (8002014 <HAL_RCC_GetClockConfig+0x5c>)
 8001fd6:	689b      	ldr	r3, [r3, #8]
 8001fd8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8001fe0:	4b0c      	ldr	r3, [pc, #48]	; (8002014 <HAL_RCC_GetClockConfig+0x5c>)
 8001fe2:	689b      	ldr	r3, [r3, #8]
 8001fe4:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8001fec:	4b09      	ldr	r3, [pc, #36]	; (8002014 <HAL_RCC_GetClockConfig+0x5c>)
 8001fee:	689b      	ldr	r3, [r3, #8]
 8001ff0:	08db      	lsrs	r3, r3, #3
 8001ff2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8001ffa:	4b07      	ldr	r3, [pc, #28]	; (8002018 <HAL_RCC_GetClockConfig+0x60>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f003 0207 	and.w	r2, r3, #7
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	601a      	str	r2, [r3, #0]
}
 8002006:	bf00      	nop
 8002008:	370c      	adds	r7, #12
 800200a:	46bd      	mov	sp, r7
 800200c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002010:	4770      	bx	lr
 8002012:	bf00      	nop
 8002014:	40021000 	.word	0x40021000
 8002018:	40022000 	.word	0x40022000

0800201c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b086      	sub	sp, #24
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002024:	2300      	movs	r3, #0
 8002026:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002028:	4b2a      	ldr	r3, [pc, #168]	; (80020d4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800202a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800202c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002030:	2b00      	cmp	r3, #0
 8002032:	d003      	beq.n	800203c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002034:	f7ff f99c 	bl	8001370 <HAL_PWREx_GetVoltageRange>
 8002038:	6178      	str	r0, [r7, #20]
 800203a:	e014      	b.n	8002066 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800203c:	4b25      	ldr	r3, [pc, #148]	; (80020d4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800203e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002040:	4a24      	ldr	r2, [pc, #144]	; (80020d4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002042:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002046:	6593      	str	r3, [r2, #88]	; 0x58
 8002048:	4b22      	ldr	r3, [pc, #136]	; (80020d4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800204a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800204c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002050:	60fb      	str	r3, [r7, #12]
 8002052:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002054:	f7ff f98c 	bl	8001370 <HAL_PWREx_GetVoltageRange>
 8002058:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800205a:	4b1e      	ldr	r3, [pc, #120]	; (80020d4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800205c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800205e:	4a1d      	ldr	r2, [pc, #116]	; (80020d4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002060:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002064:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002066:	697b      	ldr	r3, [r7, #20]
 8002068:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800206c:	d10b      	bne.n	8002086 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	2b80      	cmp	r3, #128	; 0x80
 8002072:	d919      	bls.n	80020a8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	2ba0      	cmp	r3, #160	; 0xa0
 8002078:	d902      	bls.n	8002080 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800207a:	2302      	movs	r3, #2
 800207c:	613b      	str	r3, [r7, #16]
 800207e:	e013      	b.n	80020a8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002080:	2301      	movs	r3, #1
 8002082:	613b      	str	r3, [r7, #16]
 8002084:	e010      	b.n	80020a8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	2b80      	cmp	r3, #128	; 0x80
 800208a:	d902      	bls.n	8002092 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800208c:	2303      	movs	r3, #3
 800208e:	613b      	str	r3, [r7, #16]
 8002090:	e00a      	b.n	80020a8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	2b80      	cmp	r3, #128	; 0x80
 8002096:	d102      	bne.n	800209e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002098:	2302      	movs	r3, #2
 800209a:	613b      	str	r3, [r7, #16]
 800209c:	e004      	b.n	80020a8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	2b70      	cmp	r3, #112	; 0x70
 80020a2:	d101      	bne.n	80020a8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80020a4:	2301      	movs	r3, #1
 80020a6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80020a8:	4b0b      	ldr	r3, [pc, #44]	; (80020d8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f023 0207 	bic.w	r2, r3, #7
 80020b0:	4909      	ldr	r1, [pc, #36]	; (80020d8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80020b2:	693b      	ldr	r3, [r7, #16]
 80020b4:	4313      	orrs	r3, r2
 80020b6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80020b8:	4b07      	ldr	r3, [pc, #28]	; (80020d8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f003 0307 	and.w	r3, r3, #7
 80020c0:	693a      	ldr	r2, [r7, #16]
 80020c2:	429a      	cmp	r2, r3
 80020c4:	d001      	beq.n	80020ca <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80020c6:	2301      	movs	r3, #1
 80020c8:	e000      	b.n	80020cc <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80020ca:	2300      	movs	r3, #0
}
 80020cc:	4618      	mov	r0, r3
 80020ce:	3718      	adds	r7, #24
 80020d0:	46bd      	mov	sp, r7
 80020d2:	bd80      	pop	{r7, pc}
 80020d4:	40021000 	.word	0x40021000
 80020d8:	40022000 	.word	0x40022000

080020dc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b086      	sub	sp, #24
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80020e4:	2300      	movs	r3, #0
 80020e6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80020e8:	2300      	movs	r3, #0
 80020ea:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d031      	beq.n	800215c <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020fc:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002100:	d01a      	beq.n	8002138 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8002102:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002106:	d814      	bhi.n	8002132 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8002108:	2b00      	cmp	r3, #0
 800210a:	d009      	beq.n	8002120 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800210c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002110:	d10f      	bne.n	8002132 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8002112:	4b5d      	ldr	r3, [pc, #372]	; (8002288 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002114:	68db      	ldr	r3, [r3, #12]
 8002116:	4a5c      	ldr	r2, [pc, #368]	; (8002288 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002118:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800211c:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800211e:	e00c      	b.n	800213a <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	3304      	adds	r3, #4
 8002124:	2100      	movs	r1, #0
 8002126:	4618      	mov	r0, r3
 8002128:	f000 fa22 	bl	8002570 <RCCEx_PLLSAI1_Config>
 800212c:	4603      	mov	r3, r0
 800212e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002130:	e003      	b.n	800213a <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002132:	2301      	movs	r3, #1
 8002134:	74fb      	strb	r3, [r7, #19]
      break;
 8002136:	e000      	b.n	800213a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8002138:	bf00      	nop
    }

    if(ret == HAL_OK)
 800213a:	7cfb      	ldrb	r3, [r7, #19]
 800213c:	2b00      	cmp	r3, #0
 800213e:	d10b      	bne.n	8002158 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002140:	4b51      	ldr	r3, [pc, #324]	; (8002288 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002142:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002146:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800214e:	494e      	ldr	r1, [pc, #312]	; (8002288 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002150:	4313      	orrs	r3, r2
 8002152:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002156:	e001      	b.n	800215c <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002158:	7cfb      	ldrb	r3, [r7, #19]
 800215a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002164:	2b00      	cmp	r3, #0
 8002166:	f000 809e 	beq.w	80022a6 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 800216a:	2300      	movs	r3, #0
 800216c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800216e:	4b46      	ldr	r3, [pc, #280]	; (8002288 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002170:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002172:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002176:	2b00      	cmp	r3, #0
 8002178:	d101      	bne.n	800217e <HAL_RCCEx_PeriphCLKConfig+0xa2>
 800217a:	2301      	movs	r3, #1
 800217c:	e000      	b.n	8002180 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 800217e:	2300      	movs	r3, #0
 8002180:	2b00      	cmp	r3, #0
 8002182:	d00d      	beq.n	80021a0 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002184:	4b40      	ldr	r3, [pc, #256]	; (8002288 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002186:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002188:	4a3f      	ldr	r2, [pc, #252]	; (8002288 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800218a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800218e:	6593      	str	r3, [r2, #88]	; 0x58
 8002190:	4b3d      	ldr	r3, [pc, #244]	; (8002288 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002192:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002194:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002198:	60bb      	str	r3, [r7, #8]
 800219a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800219c:	2301      	movs	r3, #1
 800219e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80021a0:	4b3a      	ldr	r3, [pc, #232]	; (800228c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	4a39      	ldr	r2, [pc, #228]	; (800228c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80021a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021aa:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80021ac:	f7fe fc72 	bl	8000a94 <HAL_GetTick>
 80021b0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80021b2:	e009      	b.n	80021c8 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021b4:	f7fe fc6e 	bl	8000a94 <HAL_GetTick>
 80021b8:	4602      	mov	r2, r0
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	1ad3      	subs	r3, r2, r3
 80021be:	2b02      	cmp	r3, #2
 80021c0:	d902      	bls.n	80021c8 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 80021c2:	2303      	movs	r3, #3
 80021c4:	74fb      	strb	r3, [r7, #19]
        break;
 80021c6:	e005      	b.n	80021d4 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80021c8:	4b30      	ldr	r3, [pc, #192]	; (800228c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d0ef      	beq.n	80021b4 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 80021d4:	7cfb      	ldrb	r3, [r7, #19]
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d15a      	bne.n	8002290 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80021da:	4b2b      	ldr	r3, [pc, #172]	; (8002288 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80021dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021e0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80021e4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80021e6:	697b      	ldr	r3, [r7, #20]
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d01e      	beq.n	800222a <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021f0:	697a      	ldr	r2, [r7, #20]
 80021f2:	429a      	cmp	r2, r3
 80021f4:	d019      	beq.n	800222a <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80021f6:	4b24      	ldr	r3, [pc, #144]	; (8002288 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80021f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002200:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002202:	4b21      	ldr	r3, [pc, #132]	; (8002288 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002204:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002208:	4a1f      	ldr	r2, [pc, #124]	; (8002288 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800220a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800220e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002212:	4b1d      	ldr	r3, [pc, #116]	; (8002288 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002214:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002218:	4a1b      	ldr	r2, [pc, #108]	; (8002288 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800221a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800221e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002222:	4a19      	ldr	r2, [pc, #100]	; (8002288 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002224:	697b      	ldr	r3, [r7, #20]
 8002226:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800222a:	697b      	ldr	r3, [r7, #20]
 800222c:	f003 0301 	and.w	r3, r3, #1
 8002230:	2b00      	cmp	r3, #0
 8002232:	d016      	beq.n	8002262 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002234:	f7fe fc2e 	bl	8000a94 <HAL_GetTick>
 8002238:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800223a:	e00b      	b.n	8002254 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800223c:	f7fe fc2a 	bl	8000a94 <HAL_GetTick>
 8002240:	4602      	mov	r2, r0
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	1ad3      	subs	r3, r2, r3
 8002246:	f241 3288 	movw	r2, #5000	; 0x1388
 800224a:	4293      	cmp	r3, r2
 800224c:	d902      	bls.n	8002254 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 800224e:	2303      	movs	r3, #3
 8002250:	74fb      	strb	r3, [r7, #19]
            break;
 8002252:	e006      	b.n	8002262 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002254:	4b0c      	ldr	r3, [pc, #48]	; (8002288 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002256:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800225a:	f003 0302 	and.w	r3, r3, #2
 800225e:	2b00      	cmp	r3, #0
 8002260:	d0ec      	beq.n	800223c <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8002262:	7cfb      	ldrb	r3, [r7, #19]
 8002264:	2b00      	cmp	r3, #0
 8002266:	d10b      	bne.n	8002280 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002268:	4b07      	ldr	r3, [pc, #28]	; (8002288 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800226a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800226e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002276:	4904      	ldr	r1, [pc, #16]	; (8002288 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002278:	4313      	orrs	r3, r2
 800227a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800227e:	e009      	b.n	8002294 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002280:	7cfb      	ldrb	r3, [r7, #19]
 8002282:	74bb      	strb	r3, [r7, #18]
 8002284:	e006      	b.n	8002294 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8002286:	bf00      	nop
 8002288:	40021000 	.word	0x40021000
 800228c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002290:	7cfb      	ldrb	r3, [r7, #19]
 8002292:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002294:	7c7b      	ldrb	r3, [r7, #17]
 8002296:	2b01      	cmp	r3, #1
 8002298:	d105      	bne.n	80022a6 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800229a:	4b8d      	ldr	r3, [pc, #564]	; (80024d0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800229c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800229e:	4a8c      	ldr	r2, [pc, #560]	; (80024d0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80022a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80022a4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f003 0301 	and.w	r3, r3, #1
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d00a      	beq.n	80022c8 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80022b2:	4b87      	ldr	r3, [pc, #540]	; (80024d0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80022b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022b8:	f023 0203 	bic.w	r2, r3, #3
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	6a1b      	ldr	r3, [r3, #32]
 80022c0:	4983      	ldr	r1, [pc, #524]	; (80024d0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80022c2:	4313      	orrs	r3, r2
 80022c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f003 0302 	and.w	r3, r3, #2
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d00a      	beq.n	80022ea <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80022d4:	4b7e      	ldr	r3, [pc, #504]	; (80024d0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80022d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022da:	f023 020c 	bic.w	r2, r3, #12
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022e2:	497b      	ldr	r1, [pc, #492]	; (80024d0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80022e4:	4313      	orrs	r3, r2
 80022e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f003 0304 	and.w	r3, r3, #4
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d00a      	beq.n	800230c <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80022f6:	4b76      	ldr	r3, [pc, #472]	; (80024d0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80022f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022fc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002304:	4972      	ldr	r1, [pc, #456]	; (80024d0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002306:	4313      	orrs	r3, r2
 8002308:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f003 0320 	and.w	r3, r3, #32
 8002314:	2b00      	cmp	r3, #0
 8002316:	d00a      	beq.n	800232e <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002318:	4b6d      	ldr	r3, [pc, #436]	; (80024d0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800231a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800231e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002326:	496a      	ldr	r1, [pc, #424]	; (80024d0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002328:	4313      	orrs	r3, r2
 800232a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002336:	2b00      	cmp	r3, #0
 8002338:	d00a      	beq.n	8002350 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800233a:	4b65      	ldr	r3, [pc, #404]	; (80024d0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800233c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002340:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002348:	4961      	ldr	r1, [pc, #388]	; (80024d0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800234a:	4313      	orrs	r3, r2
 800234c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002358:	2b00      	cmp	r3, #0
 800235a:	d00a      	beq.n	8002372 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800235c:	4b5c      	ldr	r3, [pc, #368]	; (80024d0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800235e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002362:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800236a:	4959      	ldr	r1, [pc, #356]	; (80024d0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800236c:	4313      	orrs	r3, r2
 800236e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800237a:	2b00      	cmp	r3, #0
 800237c:	d00a      	beq.n	8002394 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800237e:	4b54      	ldr	r3, [pc, #336]	; (80024d0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002380:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002384:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800238c:	4950      	ldr	r1, [pc, #320]	; (80024d0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800238e:	4313      	orrs	r3, r2
 8002390:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800239c:	2b00      	cmp	r3, #0
 800239e:	d00a      	beq.n	80023b6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80023a0:	4b4b      	ldr	r3, [pc, #300]	; (80024d0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80023a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023a6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023ae:	4948      	ldr	r1, [pc, #288]	; (80024d0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80023b0:	4313      	orrs	r3, r2
 80023b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d00a      	beq.n	80023d8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80023c2:	4b43      	ldr	r3, [pc, #268]	; (80024d0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80023c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023c8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023d0:	493f      	ldr	r1, [pc, #252]	; (80024d0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80023d2:	4313      	orrs	r3, r2
 80023d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d028      	beq.n	8002436 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80023e4:	4b3a      	ldr	r3, [pc, #232]	; (80024d0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80023e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023ea:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80023f2:	4937      	ldr	r1, [pc, #220]	; (80024d0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80023f4:	4313      	orrs	r3, r2
 80023f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80023fe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002402:	d106      	bne.n	8002412 <HAL_RCCEx_PeriphCLKConfig+0x336>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002404:	4b32      	ldr	r3, [pc, #200]	; (80024d0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002406:	68db      	ldr	r3, [r3, #12]
 8002408:	4a31      	ldr	r2, [pc, #196]	; (80024d0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800240a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800240e:	60d3      	str	r3, [r2, #12]
 8002410:	e011      	b.n	8002436 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002416:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800241a:	d10c      	bne.n	8002436 <HAL_RCCEx_PeriphCLKConfig+0x35a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	3304      	adds	r3, #4
 8002420:	2101      	movs	r1, #1
 8002422:	4618      	mov	r0, r3
 8002424:	f000 f8a4 	bl	8002570 <RCCEx_PLLSAI1_Config>
 8002428:	4603      	mov	r3, r0
 800242a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800242c:	7cfb      	ldrb	r3, [r7, #19]
 800242e:	2b00      	cmp	r3, #0
 8002430:	d001      	beq.n	8002436 <HAL_RCCEx_PeriphCLKConfig+0x35a>
        {
          /* set overall return value */
          status = ret;
 8002432:	7cfb      	ldrb	r3, [r7, #19]
 8002434:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800243e:	2b00      	cmp	r3, #0
 8002440:	d028      	beq.n	8002494 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002442:	4b23      	ldr	r3, [pc, #140]	; (80024d0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002444:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002448:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002450:	491f      	ldr	r1, [pc, #124]	; (80024d0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002452:	4313      	orrs	r3, r2
 8002454:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800245c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002460:	d106      	bne.n	8002470 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002462:	4b1b      	ldr	r3, [pc, #108]	; (80024d0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002464:	68db      	ldr	r3, [r3, #12]
 8002466:	4a1a      	ldr	r2, [pc, #104]	; (80024d0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002468:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800246c:	60d3      	str	r3, [r2, #12]
 800246e:	e011      	b.n	8002494 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002474:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002478:	d10c      	bne.n	8002494 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	3304      	adds	r3, #4
 800247e:	2101      	movs	r1, #1
 8002480:	4618      	mov	r0, r3
 8002482:	f000 f875 	bl	8002570 <RCCEx_PLLSAI1_Config>
 8002486:	4603      	mov	r3, r0
 8002488:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800248a:	7cfb      	ldrb	r3, [r7, #19]
 800248c:	2b00      	cmp	r3, #0
 800248e:	d001      	beq.n	8002494 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 8002490:	7cfb      	ldrb	r3, [r7, #19]
 8002492:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800249c:	2b00      	cmp	r3, #0
 800249e:	d02b      	beq.n	80024f8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80024a0:	4b0b      	ldr	r3, [pc, #44]	; (80024d0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80024a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024a6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80024ae:	4908      	ldr	r1, [pc, #32]	; (80024d0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80024b0:	4313      	orrs	r3, r2
 80024b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80024ba:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80024be:	d109      	bne.n	80024d4 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80024c0:	4b03      	ldr	r3, [pc, #12]	; (80024d0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80024c2:	68db      	ldr	r3, [r3, #12]
 80024c4:	4a02      	ldr	r2, [pc, #8]	; (80024d0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80024c6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80024ca:	60d3      	str	r3, [r2, #12]
 80024cc:	e014      	b.n	80024f8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 80024ce:	bf00      	nop
 80024d0:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80024d8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80024dc:	d10c      	bne.n	80024f8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	3304      	adds	r3, #4
 80024e2:	2101      	movs	r1, #1
 80024e4:	4618      	mov	r0, r3
 80024e6:	f000 f843 	bl	8002570 <RCCEx_PLLSAI1_Config>
 80024ea:	4603      	mov	r3, r0
 80024ec:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80024ee:	7cfb      	ldrb	r3, [r7, #19]
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d001      	beq.n	80024f8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      {
        /* set overall return value */
        status = ret;
 80024f4:	7cfb      	ldrb	r3, [r7, #19]
 80024f6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002500:	2b00      	cmp	r3, #0
 8002502:	d01c      	beq.n	800253e <HAL_RCCEx_PeriphCLKConfig+0x462>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002504:	4b19      	ldr	r3, [pc, #100]	; (800256c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002506:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800250a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002512:	4916      	ldr	r1, [pc, #88]	; (800256c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002514:	4313      	orrs	r3, r2
 8002516:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800251e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002522:	d10c      	bne.n	800253e <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	3304      	adds	r3, #4
 8002528:	2102      	movs	r1, #2
 800252a:	4618      	mov	r0, r3
 800252c:	f000 f820 	bl	8002570 <RCCEx_PLLSAI1_Config>
 8002530:	4603      	mov	r3, r0
 8002532:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002534:	7cfb      	ldrb	r3, [r7, #19]
 8002536:	2b00      	cmp	r3, #0
 8002538:	d001      	beq.n	800253e <HAL_RCCEx_PeriphCLKConfig+0x462>
      {
        /* set overall return value */
        status = ret;
 800253a:	7cfb      	ldrb	r3, [r7, #19]
 800253c:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002546:	2b00      	cmp	r3, #0
 8002548:	d00a      	beq.n	8002560 <HAL_RCCEx_PeriphCLKConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800254a:	4b08      	ldr	r3, [pc, #32]	; (800256c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800254c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002550:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002558:	4904      	ldr	r1, [pc, #16]	; (800256c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800255a:	4313      	orrs	r3, r2
 800255c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002560:	7cbb      	ldrb	r3, [r7, #18]
}
 8002562:	4618      	mov	r0, r3
 8002564:	3718      	adds	r7, #24
 8002566:	46bd      	mov	sp, r7
 8002568:	bd80      	pop	{r7, pc}
 800256a:	bf00      	nop
 800256c:	40021000 	.word	0x40021000

08002570 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	b084      	sub	sp, #16
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
 8002578:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800257a:	2300      	movs	r3, #0
 800257c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800257e:	4b74      	ldr	r3, [pc, #464]	; (8002750 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002580:	68db      	ldr	r3, [r3, #12]
 8002582:	f003 0303 	and.w	r3, r3, #3
 8002586:	2b00      	cmp	r3, #0
 8002588:	d018      	beq.n	80025bc <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800258a:	4b71      	ldr	r3, [pc, #452]	; (8002750 <RCCEx_PLLSAI1_Config+0x1e0>)
 800258c:	68db      	ldr	r3, [r3, #12]
 800258e:	f003 0203 	and.w	r2, r3, #3
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	429a      	cmp	r2, r3
 8002598:	d10d      	bne.n	80025b6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
       ||
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d009      	beq.n	80025b6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80025a2:	4b6b      	ldr	r3, [pc, #428]	; (8002750 <RCCEx_PLLSAI1_Config+0x1e0>)
 80025a4:	68db      	ldr	r3, [r3, #12]
 80025a6:	091b      	lsrs	r3, r3, #4
 80025a8:	f003 0307 	and.w	r3, r3, #7
 80025ac:	1c5a      	adds	r2, r3, #1
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	685b      	ldr	r3, [r3, #4]
       ||
 80025b2:	429a      	cmp	r2, r3
 80025b4:	d047      	beq.n	8002646 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80025b6:	2301      	movs	r3, #1
 80025b8:	73fb      	strb	r3, [r7, #15]
 80025ba:	e044      	b.n	8002646 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	2b03      	cmp	r3, #3
 80025c2:	d018      	beq.n	80025f6 <RCCEx_PLLSAI1_Config+0x86>
 80025c4:	2b03      	cmp	r3, #3
 80025c6:	d825      	bhi.n	8002614 <RCCEx_PLLSAI1_Config+0xa4>
 80025c8:	2b01      	cmp	r3, #1
 80025ca:	d002      	beq.n	80025d2 <RCCEx_PLLSAI1_Config+0x62>
 80025cc:	2b02      	cmp	r3, #2
 80025ce:	d009      	beq.n	80025e4 <RCCEx_PLLSAI1_Config+0x74>
 80025d0:	e020      	b.n	8002614 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80025d2:	4b5f      	ldr	r3, [pc, #380]	; (8002750 <RCCEx_PLLSAI1_Config+0x1e0>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f003 0302 	and.w	r3, r3, #2
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d11d      	bne.n	800261a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80025de:	2301      	movs	r3, #1
 80025e0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80025e2:	e01a      	b.n	800261a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80025e4:	4b5a      	ldr	r3, [pc, #360]	; (8002750 <RCCEx_PLLSAI1_Config+0x1e0>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d116      	bne.n	800261e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80025f0:	2301      	movs	r3, #1
 80025f2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80025f4:	e013      	b.n	800261e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80025f6:	4b56      	ldr	r3, [pc, #344]	; (8002750 <RCCEx_PLLSAI1_Config+0x1e0>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d10f      	bne.n	8002622 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002602:	4b53      	ldr	r3, [pc, #332]	; (8002750 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800260a:	2b00      	cmp	r3, #0
 800260c:	d109      	bne.n	8002622 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800260e:	2301      	movs	r3, #1
 8002610:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002612:	e006      	b.n	8002622 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002614:	2301      	movs	r3, #1
 8002616:	73fb      	strb	r3, [r7, #15]
      break;
 8002618:	e004      	b.n	8002624 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800261a:	bf00      	nop
 800261c:	e002      	b.n	8002624 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800261e:	bf00      	nop
 8002620:	e000      	b.n	8002624 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002622:	bf00      	nop
    }

    if(status == HAL_OK)
 8002624:	7bfb      	ldrb	r3, [r7, #15]
 8002626:	2b00      	cmp	r3, #0
 8002628:	d10d      	bne.n	8002646 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800262a:	4b49      	ldr	r3, [pc, #292]	; (8002750 <RCCEx_PLLSAI1_Config+0x1e0>)
 800262c:	68db      	ldr	r3, [r3, #12]
 800262e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6819      	ldr	r1, [r3, #0]
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	685b      	ldr	r3, [r3, #4]
 800263a:	3b01      	subs	r3, #1
 800263c:	011b      	lsls	r3, r3, #4
 800263e:	430b      	orrs	r3, r1
 8002640:	4943      	ldr	r1, [pc, #268]	; (8002750 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002642:	4313      	orrs	r3, r2
 8002644:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002646:	7bfb      	ldrb	r3, [r7, #15]
 8002648:	2b00      	cmp	r3, #0
 800264a:	d17c      	bne.n	8002746 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800264c:	4b40      	ldr	r3, [pc, #256]	; (8002750 <RCCEx_PLLSAI1_Config+0x1e0>)
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	4a3f      	ldr	r2, [pc, #252]	; (8002750 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002652:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002656:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002658:	f7fe fa1c 	bl	8000a94 <HAL_GetTick>
 800265c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800265e:	e009      	b.n	8002674 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002660:	f7fe fa18 	bl	8000a94 <HAL_GetTick>
 8002664:	4602      	mov	r2, r0
 8002666:	68bb      	ldr	r3, [r7, #8]
 8002668:	1ad3      	subs	r3, r2, r3
 800266a:	2b02      	cmp	r3, #2
 800266c:	d902      	bls.n	8002674 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800266e:	2303      	movs	r3, #3
 8002670:	73fb      	strb	r3, [r7, #15]
        break;
 8002672:	e005      	b.n	8002680 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002674:	4b36      	ldr	r3, [pc, #216]	; (8002750 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800267c:	2b00      	cmp	r3, #0
 800267e:	d1ef      	bne.n	8002660 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002680:	7bfb      	ldrb	r3, [r7, #15]
 8002682:	2b00      	cmp	r3, #0
 8002684:	d15f      	bne.n	8002746 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	2b00      	cmp	r3, #0
 800268a:	d110      	bne.n	80026ae <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800268c:	4b30      	ldr	r3, [pc, #192]	; (8002750 <RCCEx_PLLSAI1_Config+0x1e0>)
 800268e:	691b      	ldr	r3, [r3, #16]
 8002690:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8002694:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002698:	687a      	ldr	r2, [r7, #4]
 800269a:	6892      	ldr	r2, [r2, #8]
 800269c:	0211      	lsls	r1, r2, #8
 800269e:	687a      	ldr	r2, [r7, #4]
 80026a0:	68d2      	ldr	r2, [r2, #12]
 80026a2:	06d2      	lsls	r2, r2, #27
 80026a4:	430a      	orrs	r2, r1
 80026a6:	492a      	ldr	r1, [pc, #168]	; (8002750 <RCCEx_PLLSAI1_Config+0x1e0>)
 80026a8:	4313      	orrs	r3, r2
 80026aa:	610b      	str	r3, [r1, #16]
 80026ac:	e027      	b.n	80026fe <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	2b01      	cmp	r3, #1
 80026b2:	d112      	bne.n	80026da <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80026b4:	4b26      	ldr	r3, [pc, #152]	; (8002750 <RCCEx_PLLSAI1_Config+0x1e0>)
 80026b6:	691b      	ldr	r3, [r3, #16]
 80026b8:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80026bc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80026c0:	687a      	ldr	r2, [r7, #4]
 80026c2:	6892      	ldr	r2, [r2, #8]
 80026c4:	0211      	lsls	r1, r2, #8
 80026c6:	687a      	ldr	r2, [r7, #4]
 80026c8:	6912      	ldr	r2, [r2, #16]
 80026ca:	0852      	lsrs	r2, r2, #1
 80026cc:	3a01      	subs	r2, #1
 80026ce:	0552      	lsls	r2, r2, #21
 80026d0:	430a      	orrs	r2, r1
 80026d2:	491f      	ldr	r1, [pc, #124]	; (8002750 <RCCEx_PLLSAI1_Config+0x1e0>)
 80026d4:	4313      	orrs	r3, r2
 80026d6:	610b      	str	r3, [r1, #16]
 80026d8:	e011      	b.n	80026fe <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80026da:	4b1d      	ldr	r3, [pc, #116]	; (8002750 <RCCEx_PLLSAI1_Config+0x1e0>)
 80026dc:	691b      	ldr	r3, [r3, #16]
 80026de:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80026e2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80026e6:	687a      	ldr	r2, [r7, #4]
 80026e8:	6892      	ldr	r2, [r2, #8]
 80026ea:	0211      	lsls	r1, r2, #8
 80026ec:	687a      	ldr	r2, [r7, #4]
 80026ee:	6952      	ldr	r2, [r2, #20]
 80026f0:	0852      	lsrs	r2, r2, #1
 80026f2:	3a01      	subs	r2, #1
 80026f4:	0652      	lsls	r2, r2, #25
 80026f6:	430a      	orrs	r2, r1
 80026f8:	4915      	ldr	r1, [pc, #84]	; (8002750 <RCCEx_PLLSAI1_Config+0x1e0>)
 80026fa:	4313      	orrs	r3, r2
 80026fc:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80026fe:	4b14      	ldr	r3, [pc, #80]	; (8002750 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	4a13      	ldr	r2, [pc, #76]	; (8002750 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002704:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002708:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800270a:	f7fe f9c3 	bl	8000a94 <HAL_GetTick>
 800270e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002710:	e009      	b.n	8002726 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002712:	f7fe f9bf 	bl	8000a94 <HAL_GetTick>
 8002716:	4602      	mov	r2, r0
 8002718:	68bb      	ldr	r3, [r7, #8]
 800271a:	1ad3      	subs	r3, r2, r3
 800271c:	2b02      	cmp	r3, #2
 800271e:	d902      	bls.n	8002726 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8002720:	2303      	movs	r3, #3
 8002722:	73fb      	strb	r3, [r7, #15]
          break;
 8002724:	e005      	b.n	8002732 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002726:	4b0a      	ldr	r3, [pc, #40]	; (8002750 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800272e:	2b00      	cmp	r3, #0
 8002730:	d0ef      	beq.n	8002712 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8002732:	7bfb      	ldrb	r3, [r7, #15]
 8002734:	2b00      	cmp	r3, #0
 8002736:	d106      	bne.n	8002746 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002738:	4b05      	ldr	r3, [pc, #20]	; (8002750 <RCCEx_PLLSAI1_Config+0x1e0>)
 800273a:	691a      	ldr	r2, [r3, #16]
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	699b      	ldr	r3, [r3, #24]
 8002740:	4903      	ldr	r1, [pc, #12]	; (8002750 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002742:	4313      	orrs	r3, r2
 8002744:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002746:	7bfb      	ldrb	r3, [r7, #15]
}
 8002748:	4618      	mov	r0, r3
 800274a:	3710      	adds	r7, #16
 800274c:	46bd      	mov	sp, r7
 800274e:	bd80      	pop	{r7, pc}
 8002750:	40021000 	.word	0x40021000

08002754 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	b082      	sub	sp, #8
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	2b00      	cmp	r3, #0
 8002760:	d101      	bne.n	8002766 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002762:	2301      	movs	r3, #1
 8002764:	e049      	b.n	80027fa <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800276c:	b2db      	uxtb	r3, r3
 800276e:	2b00      	cmp	r3, #0
 8002770:	d106      	bne.n	8002780 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	2200      	movs	r2, #0
 8002776:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800277a:	6878      	ldr	r0, [r7, #4]
 800277c:	f000 f841 	bl	8002802 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	2202      	movs	r2, #2
 8002784:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681a      	ldr	r2, [r3, #0]
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	3304      	adds	r3, #4
 8002790:	4619      	mov	r1, r3
 8002792:	4610      	mov	r0, r2
 8002794:	f000 f9dc 	bl	8002b50 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2201      	movs	r2, #1
 800279c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2201      	movs	r2, #1
 80027a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	2201      	movs	r2, #1
 80027ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	2201      	movs	r2, #1
 80027b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2201      	movs	r2, #1
 80027bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	2201      	movs	r2, #1
 80027c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	2201      	movs	r2, #1
 80027cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2201      	movs	r2, #1
 80027d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2201      	movs	r2, #1
 80027dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2201      	movs	r2, #1
 80027e4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	2201      	movs	r2, #1
 80027ec:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	2201      	movs	r2, #1
 80027f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80027f8:	2300      	movs	r3, #0
}
 80027fa:	4618      	mov	r0, r3
 80027fc:	3708      	adds	r7, #8
 80027fe:	46bd      	mov	sp, r7
 8002800:	bd80      	pop	{r7, pc}

08002802 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002802:	b480      	push	{r7}
 8002804:	b083      	sub	sp, #12
 8002806:	af00      	add	r7, sp, #0
 8002808:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800280a:	bf00      	nop
 800280c:	370c      	adds	r7, #12
 800280e:	46bd      	mov	sp, r7
 8002810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002814:	4770      	bx	lr
	...

08002818 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002818:	b480      	push	{r7}
 800281a:	b085      	sub	sp, #20
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002826:	b2db      	uxtb	r3, r3
 8002828:	2b01      	cmp	r3, #1
 800282a:	d001      	beq.n	8002830 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800282c:	2301      	movs	r3, #1
 800282e:	e03b      	b.n	80028a8 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2202      	movs	r2, #2
 8002834:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	68da      	ldr	r2, [r3, #12]
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f042 0201 	orr.w	r2, r2, #1
 8002846:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	4a19      	ldr	r2, [pc, #100]	; (80028b4 <HAL_TIM_Base_Start_IT+0x9c>)
 800284e:	4293      	cmp	r3, r2
 8002850:	d009      	beq.n	8002866 <HAL_TIM_Base_Start_IT+0x4e>
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800285a:	d004      	beq.n	8002866 <HAL_TIM_Base_Start_IT+0x4e>
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	4a15      	ldr	r2, [pc, #84]	; (80028b8 <HAL_TIM_Base_Start_IT+0xa0>)
 8002862:	4293      	cmp	r3, r2
 8002864:	d115      	bne.n	8002892 <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	689a      	ldr	r2, [r3, #8]
 800286c:	4b13      	ldr	r3, [pc, #76]	; (80028bc <HAL_TIM_Base_Start_IT+0xa4>)
 800286e:	4013      	ands	r3, r2
 8002870:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	2b06      	cmp	r3, #6
 8002876:	d015      	beq.n	80028a4 <HAL_TIM_Base_Start_IT+0x8c>
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800287e:	d011      	beq.n	80028a4 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	681a      	ldr	r2, [r3, #0]
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f042 0201 	orr.w	r2, r2, #1
 800288e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002890:	e008      	b.n	80028a4 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	681a      	ldr	r2, [r3, #0]
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f042 0201 	orr.w	r2, r2, #1
 80028a0:	601a      	str	r2, [r3, #0]
 80028a2:	e000      	b.n	80028a6 <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80028a4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80028a6:	2300      	movs	r3, #0
}
 80028a8:	4618      	mov	r0, r3
 80028aa:	3714      	adds	r7, #20
 80028ac:	46bd      	mov	sp, r7
 80028ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b2:	4770      	bx	lr
 80028b4:	40012c00 	.word	0x40012c00
 80028b8:	40014000 	.word	0x40014000
 80028bc:	00010007 	.word	0x00010007

080028c0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b082      	sub	sp, #8
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	691b      	ldr	r3, [r3, #16]
 80028ce:	f003 0302 	and.w	r3, r3, #2
 80028d2:	2b02      	cmp	r3, #2
 80028d4:	d122      	bne.n	800291c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	68db      	ldr	r3, [r3, #12]
 80028dc:	f003 0302 	and.w	r3, r3, #2
 80028e0:	2b02      	cmp	r3, #2
 80028e2:	d11b      	bne.n	800291c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f06f 0202 	mvn.w	r2, #2
 80028ec:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	2201      	movs	r2, #1
 80028f2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	699b      	ldr	r3, [r3, #24]
 80028fa:	f003 0303 	and.w	r3, r3, #3
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d003      	beq.n	800290a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002902:	6878      	ldr	r0, [r7, #4]
 8002904:	f000 f905 	bl	8002b12 <HAL_TIM_IC_CaptureCallback>
 8002908:	e005      	b.n	8002916 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800290a:	6878      	ldr	r0, [r7, #4]
 800290c:	f000 f8f7 	bl	8002afe <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002910:	6878      	ldr	r0, [r7, #4]
 8002912:	f000 f908 	bl	8002b26 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	2200      	movs	r2, #0
 800291a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	691b      	ldr	r3, [r3, #16]
 8002922:	f003 0304 	and.w	r3, r3, #4
 8002926:	2b04      	cmp	r3, #4
 8002928:	d122      	bne.n	8002970 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	68db      	ldr	r3, [r3, #12]
 8002930:	f003 0304 	and.w	r3, r3, #4
 8002934:	2b04      	cmp	r3, #4
 8002936:	d11b      	bne.n	8002970 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f06f 0204 	mvn.w	r2, #4
 8002940:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	2202      	movs	r2, #2
 8002946:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	699b      	ldr	r3, [r3, #24]
 800294e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002952:	2b00      	cmp	r3, #0
 8002954:	d003      	beq.n	800295e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002956:	6878      	ldr	r0, [r7, #4]
 8002958:	f000 f8db 	bl	8002b12 <HAL_TIM_IC_CaptureCallback>
 800295c:	e005      	b.n	800296a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800295e:	6878      	ldr	r0, [r7, #4]
 8002960:	f000 f8cd 	bl	8002afe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002964:	6878      	ldr	r0, [r7, #4]
 8002966:	f000 f8de 	bl	8002b26 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	2200      	movs	r2, #0
 800296e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	691b      	ldr	r3, [r3, #16]
 8002976:	f003 0308 	and.w	r3, r3, #8
 800297a:	2b08      	cmp	r3, #8
 800297c:	d122      	bne.n	80029c4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	68db      	ldr	r3, [r3, #12]
 8002984:	f003 0308 	and.w	r3, r3, #8
 8002988:	2b08      	cmp	r3, #8
 800298a:	d11b      	bne.n	80029c4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f06f 0208 	mvn.w	r2, #8
 8002994:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	2204      	movs	r2, #4
 800299a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	69db      	ldr	r3, [r3, #28]
 80029a2:	f003 0303 	and.w	r3, r3, #3
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d003      	beq.n	80029b2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80029aa:	6878      	ldr	r0, [r7, #4]
 80029ac:	f000 f8b1 	bl	8002b12 <HAL_TIM_IC_CaptureCallback>
 80029b0:	e005      	b.n	80029be <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80029b2:	6878      	ldr	r0, [r7, #4]
 80029b4:	f000 f8a3 	bl	8002afe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029b8:	6878      	ldr	r0, [r7, #4]
 80029ba:	f000 f8b4 	bl	8002b26 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	2200      	movs	r2, #0
 80029c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	691b      	ldr	r3, [r3, #16]
 80029ca:	f003 0310 	and.w	r3, r3, #16
 80029ce:	2b10      	cmp	r3, #16
 80029d0:	d122      	bne.n	8002a18 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	68db      	ldr	r3, [r3, #12]
 80029d8:	f003 0310 	and.w	r3, r3, #16
 80029dc:	2b10      	cmp	r3, #16
 80029de:	d11b      	bne.n	8002a18 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f06f 0210 	mvn.w	r2, #16
 80029e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	2208      	movs	r2, #8
 80029ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	69db      	ldr	r3, [r3, #28]
 80029f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d003      	beq.n	8002a06 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80029fe:	6878      	ldr	r0, [r7, #4]
 8002a00:	f000 f887 	bl	8002b12 <HAL_TIM_IC_CaptureCallback>
 8002a04:	e005      	b.n	8002a12 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a06:	6878      	ldr	r0, [r7, #4]
 8002a08:	f000 f879 	bl	8002afe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a0c:	6878      	ldr	r0, [r7, #4]
 8002a0e:	f000 f88a 	bl	8002b26 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	2200      	movs	r2, #0
 8002a16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	691b      	ldr	r3, [r3, #16]
 8002a1e:	f003 0301 	and.w	r3, r3, #1
 8002a22:	2b01      	cmp	r3, #1
 8002a24:	d10e      	bne.n	8002a44 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	68db      	ldr	r3, [r3, #12]
 8002a2c:	f003 0301 	and.w	r3, r3, #1
 8002a30:	2b01      	cmp	r3, #1
 8002a32:	d107      	bne.n	8002a44 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f06f 0201 	mvn.w	r2, #1
 8002a3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002a3e:	6878      	ldr	r0, [r7, #4]
 8002a40:	f7fd fef0 	bl	8000824 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	691b      	ldr	r3, [r3, #16]
 8002a4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a4e:	2b80      	cmp	r3, #128	; 0x80
 8002a50:	d10e      	bne.n	8002a70 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	68db      	ldr	r3, [r3, #12]
 8002a58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a5c:	2b80      	cmp	r3, #128	; 0x80
 8002a5e:	d107      	bne.n	8002a70 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002a68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002a6a:	6878      	ldr	r0, [r7, #4]
 8002a6c:	f000 f8de 	bl	8002c2c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	691b      	ldr	r3, [r3, #16]
 8002a76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a7a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a7e:	d10e      	bne.n	8002a9e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	68db      	ldr	r3, [r3, #12]
 8002a86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a8a:	2b80      	cmp	r3, #128	; 0x80
 8002a8c:	d107      	bne.n	8002a9e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002a96:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002a98:	6878      	ldr	r0, [r7, #4]
 8002a9a:	f000 f8d1 	bl	8002c40 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	691b      	ldr	r3, [r3, #16]
 8002aa4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002aa8:	2b40      	cmp	r3, #64	; 0x40
 8002aaa:	d10e      	bne.n	8002aca <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	68db      	ldr	r3, [r3, #12]
 8002ab2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ab6:	2b40      	cmp	r3, #64	; 0x40
 8002ab8:	d107      	bne.n	8002aca <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002ac2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002ac4:	6878      	ldr	r0, [r7, #4]
 8002ac6:	f000 f838 	bl	8002b3a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	691b      	ldr	r3, [r3, #16]
 8002ad0:	f003 0320 	and.w	r3, r3, #32
 8002ad4:	2b20      	cmp	r3, #32
 8002ad6:	d10e      	bne.n	8002af6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	68db      	ldr	r3, [r3, #12]
 8002ade:	f003 0320 	and.w	r3, r3, #32
 8002ae2:	2b20      	cmp	r3, #32
 8002ae4:	d107      	bne.n	8002af6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f06f 0220 	mvn.w	r2, #32
 8002aee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002af0:	6878      	ldr	r0, [r7, #4]
 8002af2:	f000 f891 	bl	8002c18 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002af6:	bf00      	nop
 8002af8:	3708      	adds	r7, #8
 8002afa:	46bd      	mov	sp, r7
 8002afc:	bd80      	pop	{r7, pc}

08002afe <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002afe:	b480      	push	{r7}
 8002b00:	b083      	sub	sp, #12
 8002b02:	af00      	add	r7, sp, #0
 8002b04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002b06:	bf00      	nop
 8002b08:	370c      	adds	r7, #12
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b10:	4770      	bx	lr

08002b12 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002b12:	b480      	push	{r7}
 8002b14:	b083      	sub	sp, #12
 8002b16:	af00      	add	r7, sp, #0
 8002b18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002b1a:	bf00      	nop
 8002b1c:	370c      	adds	r7, #12
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b24:	4770      	bx	lr

08002b26 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002b26:	b480      	push	{r7}
 8002b28:	b083      	sub	sp, #12
 8002b2a:	af00      	add	r7, sp, #0
 8002b2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002b2e:	bf00      	nop
 8002b30:	370c      	adds	r7, #12
 8002b32:	46bd      	mov	sp, r7
 8002b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b38:	4770      	bx	lr

08002b3a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002b3a:	b480      	push	{r7}
 8002b3c:	b083      	sub	sp, #12
 8002b3e:	af00      	add	r7, sp, #0
 8002b40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002b42:	bf00      	nop
 8002b44:	370c      	adds	r7, #12
 8002b46:	46bd      	mov	sp, r7
 8002b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4c:	4770      	bx	lr
	...

08002b50 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002b50:	b480      	push	{r7}
 8002b52:	b085      	sub	sp, #20
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
 8002b58:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	4a2a      	ldr	r2, [pc, #168]	; (8002c0c <TIM_Base_SetConfig+0xbc>)
 8002b64:	4293      	cmp	r3, r2
 8002b66:	d003      	beq.n	8002b70 <TIM_Base_SetConfig+0x20>
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b6e:	d108      	bne.n	8002b82 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b76:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	685b      	ldr	r3, [r3, #4]
 8002b7c:	68fa      	ldr	r2, [r7, #12]
 8002b7e:	4313      	orrs	r3, r2
 8002b80:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	4a21      	ldr	r2, [pc, #132]	; (8002c0c <TIM_Base_SetConfig+0xbc>)
 8002b86:	4293      	cmp	r3, r2
 8002b88:	d00b      	beq.n	8002ba2 <TIM_Base_SetConfig+0x52>
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b90:	d007      	beq.n	8002ba2 <TIM_Base_SetConfig+0x52>
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	4a1e      	ldr	r2, [pc, #120]	; (8002c10 <TIM_Base_SetConfig+0xc0>)
 8002b96:	4293      	cmp	r3, r2
 8002b98:	d003      	beq.n	8002ba2 <TIM_Base_SetConfig+0x52>
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	4a1d      	ldr	r2, [pc, #116]	; (8002c14 <TIM_Base_SetConfig+0xc4>)
 8002b9e:	4293      	cmp	r3, r2
 8002ba0:	d108      	bne.n	8002bb4 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ba8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	68db      	ldr	r3, [r3, #12]
 8002bae:	68fa      	ldr	r2, [r7, #12]
 8002bb0:	4313      	orrs	r3, r2
 8002bb2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002bba:	683b      	ldr	r3, [r7, #0]
 8002bbc:	695b      	ldr	r3, [r3, #20]
 8002bbe:	4313      	orrs	r3, r2
 8002bc0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	68fa      	ldr	r2, [r7, #12]
 8002bc6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	689a      	ldr	r2, [r3, #8]
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	681a      	ldr	r2, [r3, #0]
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	4a0c      	ldr	r2, [pc, #48]	; (8002c0c <TIM_Base_SetConfig+0xbc>)
 8002bdc:	4293      	cmp	r3, r2
 8002bde:	d007      	beq.n	8002bf0 <TIM_Base_SetConfig+0xa0>
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	4a0b      	ldr	r2, [pc, #44]	; (8002c10 <TIM_Base_SetConfig+0xc0>)
 8002be4:	4293      	cmp	r3, r2
 8002be6:	d003      	beq.n	8002bf0 <TIM_Base_SetConfig+0xa0>
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	4a0a      	ldr	r2, [pc, #40]	; (8002c14 <TIM_Base_SetConfig+0xc4>)
 8002bec:	4293      	cmp	r3, r2
 8002bee:	d103      	bne.n	8002bf8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	691a      	ldr	r2, [r3, #16]
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	2201      	movs	r2, #1
 8002bfc:	615a      	str	r2, [r3, #20]
}
 8002bfe:	bf00      	nop
 8002c00:	3714      	adds	r7, #20
 8002c02:	46bd      	mov	sp, r7
 8002c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c08:	4770      	bx	lr
 8002c0a:	bf00      	nop
 8002c0c:	40012c00 	.word	0x40012c00
 8002c10:	40014000 	.word	0x40014000
 8002c14:	40014400 	.word	0x40014400

08002c18 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002c18:	b480      	push	{r7}
 8002c1a:	b083      	sub	sp, #12
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002c20:	bf00      	nop
 8002c22:	370c      	adds	r7, #12
 8002c24:	46bd      	mov	sp, r7
 8002c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2a:	4770      	bx	lr

08002c2c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002c2c:	b480      	push	{r7}
 8002c2e:	b083      	sub	sp, #12
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002c34:	bf00      	nop
 8002c36:	370c      	adds	r7, #12
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3e:	4770      	bx	lr

08002c40 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002c40:	b480      	push	{r7}
 8002c42:	b083      	sub	sp, #12
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002c48:	bf00      	nop
 8002c4a:	370c      	adds	r7, #12
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c52:	4770      	bx	lr

08002c54 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b0ba      	sub	sp, #232	; 0xe8
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	69db      	ldr	r3, [r3, #28]
 8002c62:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	689b      	ldr	r3, [r3, #8]
 8002c76:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002c7a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8002c7e:	f640 030f 	movw	r3, #2063	; 0x80f
 8002c82:	4013      	ands	r3, r2
 8002c84:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8002c88:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d115      	bne.n	8002cbc <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002c90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c94:	f003 0320 	and.w	r3, r3, #32
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d00f      	beq.n	8002cbc <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002c9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002ca0:	f003 0320 	and.w	r3, r3, #32
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d009      	beq.n	8002cbc <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	f000 82a6 	beq.w	80031fe <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002cb6:	6878      	ldr	r0, [r7, #4]
 8002cb8:	4798      	blx	r3
      }
      return;
 8002cba:	e2a0      	b.n	80031fe <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8002cbc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	f000 8117 	beq.w	8002ef4 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8002cc6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002cca:	f003 0301 	and.w	r3, r3, #1
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d106      	bne.n	8002ce0 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8002cd2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8002cd6:	4b85      	ldr	r3, [pc, #532]	; (8002eec <HAL_UART_IRQHandler+0x298>)
 8002cd8:	4013      	ands	r3, r2
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	f000 810a 	beq.w	8002ef4 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002ce0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ce4:	f003 0301 	and.w	r3, r3, #1
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d011      	beq.n	8002d10 <HAL_UART_IRQHandler+0xbc>
 8002cec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002cf0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d00b      	beq.n	8002d10 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	2201      	movs	r2, #1
 8002cfe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002d06:	f043 0201 	orr.w	r2, r3, #1
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002d10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d14:	f003 0302 	and.w	r3, r3, #2
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d011      	beq.n	8002d40 <HAL_UART_IRQHandler+0xec>
 8002d1c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002d20:	f003 0301 	and.w	r3, r3, #1
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d00b      	beq.n	8002d40 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	2202      	movs	r2, #2
 8002d2e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002d36:	f043 0204 	orr.w	r2, r3, #4
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002d40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d44:	f003 0304 	and.w	r3, r3, #4
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d011      	beq.n	8002d70 <HAL_UART_IRQHandler+0x11c>
 8002d4c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002d50:	f003 0301 	and.w	r3, r3, #1
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d00b      	beq.n	8002d70 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	2204      	movs	r2, #4
 8002d5e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002d66:	f043 0202 	orr.w	r2, r3, #2
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002d70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d74:	f003 0308 	and.w	r3, r3, #8
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d017      	beq.n	8002dac <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002d7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002d80:	f003 0320 	and.w	r3, r3, #32
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d105      	bne.n	8002d94 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8002d88:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002d8c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d00b      	beq.n	8002dac <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	2208      	movs	r2, #8
 8002d9a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002da2:	f043 0208 	orr.w	r2, r3, #8
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002dac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002db0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d012      	beq.n	8002dde <HAL_UART_IRQHandler+0x18a>
 8002db8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002dbc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d00c      	beq.n	8002dde <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002dcc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002dd4:	f043 0220 	orr.w	r2, r3, #32
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	f000 820c 	beq.w	8003202 <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8002dea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002dee:	f003 0320 	and.w	r3, r3, #32
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d00d      	beq.n	8002e12 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002df6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002dfa:	f003 0320 	and.w	r3, r3, #32
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d007      	beq.n	8002e12 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d003      	beq.n	8002e12 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002e0e:	6878      	ldr	r0, [r7, #4]
 8002e10:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002e18:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	689b      	ldr	r3, [r3, #8]
 8002e22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e26:	2b40      	cmp	r3, #64	; 0x40
 8002e28:	d005      	beq.n	8002e36 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002e2a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002e2e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d04f      	beq.n	8002ed6 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002e36:	6878      	ldr	r0, [r7, #4]
 8002e38:	f000 fa0e 	bl	8003258 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	689b      	ldr	r3, [r3, #8]
 8002e42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e46:	2b40      	cmp	r3, #64	; 0x40
 8002e48:	d141      	bne.n	8002ece <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	3308      	adds	r3, #8
 8002e50:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e54:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002e58:	e853 3f00 	ldrex	r3, [r3]
 8002e5c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002e60:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002e64:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002e68:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	3308      	adds	r3, #8
 8002e72:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002e76:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002e7a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e7e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002e82:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002e86:	e841 2300 	strex	r3, r2, [r1]
 8002e8a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002e8e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d1d9      	bne.n	8002e4a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d013      	beq.n	8002ec6 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ea2:	4a13      	ldr	r2, [pc, #76]	; (8002ef0 <HAL_UART_IRQHandler+0x29c>)
 8002ea4:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002eaa:	4618      	mov	r0, r3
 8002eac:	f7fd ff1e 	bl	8000cec <HAL_DMA_Abort_IT>
 8002eb0:	4603      	mov	r3, r0
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d017      	beq.n	8002ee6 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002eba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ebc:	687a      	ldr	r2, [r7, #4]
 8002ebe:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8002ec0:	4610      	mov	r0, r2
 8002ec2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ec4:	e00f      	b.n	8002ee6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002ec6:	6878      	ldr	r0, [r7, #4]
 8002ec8:	f000 f9b0 	bl	800322c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ecc:	e00b      	b.n	8002ee6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002ece:	6878      	ldr	r0, [r7, #4]
 8002ed0:	f000 f9ac 	bl	800322c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ed4:	e007      	b.n	8002ee6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002ed6:	6878      	ldr	r0, [r7, #4]
 8002ed8:	f000 f9a8 	bl	800322c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2200      	movs	r2, #0
 8002ee0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8002ee4:	e18d      	b.n	8003202 <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ee6:	bf00      	nop
    return;
 8002ee8:	e18b      	b.n	8003202 <HAL_UART_IRQHandler+0x5ae>
 8002eea:	bf00      	nop
 8002eec:	04000120 	.word	0x04000120
 8002ef0:	0800331f 	.word	0x0800331f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ef8:	2b01      	cmp	r3, #1
 8002efa:	f040 8146 	bne.w	800318a <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002efe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f02:	f003 0310 	and.w	r3, r3, #16
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	f000 813f 	beq.w	800318a <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002f0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002f10:	f003 0310 	and.w	r3, r3, #16
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	f000 8138 	beq.w	800318a <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	2210      	movs	r2, #16
 8002f20:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	689b      	ldr	r3, [r3, #8]
 8002f28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f2c:	2b40      	cmp	r3, #64	; 0x40
 8002f2e:	f040 80b4 	bne.w	800309a <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	685b      	ldr	r3, [r3, #4]
 8002f3a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002f3e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	f000 815f 	beq.w	8003206 <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8002f4e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002f52:	429a      	cmp	r2, r3
 8002f54:	f080 8157 	bcs.w	8003206 <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002f5e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f003 0320 	and.w	r3, r3, #32
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	f040 8085 	bne.w	800307e <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f7c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002f80:	e853 3f00 	ldrex	r3, [r3]
 8002f84:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002f88:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002f8c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002f90:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	461a      	mov	r2, r3
 8002f9a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002f9e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002fa2:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fa6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002faa:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002fae:	e841 2300 	strex	r3, r2, [r1]
 8002fb2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002fb6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d1da      	bne.n	8002f74 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	3308      	adds	r3, #8
 8002fc4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fc6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002fc8:	e853 3f00 	ldrex	r3, [r3]
 8002fcc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002fce:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002fd0:	f023 0301 	bic.w	r3, r3, #1
 8002fd4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	3308      	adds	r3, #8
 8002fde:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002fe2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002fe6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fe8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002fea:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002fee:	e841 2300 	strex	r3, r2, [r1]
 8002ff2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002ff4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d1e1      	bne.n	8002fbe <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	3308      	adds	r3, #8
 8003000:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003002:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003004:	e853 3f00 	ldrex	r3, [r3]
 8003008:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800300a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800300c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003010:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	3308      	adds	r3, #8
 800301a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800301e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003020:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003022:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003024:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003026:	e841 2300 	strex	r3, r2, [r1]
 800302a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800302c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800302e:	2b00      	cmp	r3, #0
 8003030:	d1e3      	bne.n	8002ffa <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	2220      	movs	r2, #32
 8003036:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2200      	movs	r2, #0
 800303c:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003044:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003046:	e853 3f00 	ldrex	r3, [r3]
 800304a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800304c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800304e:	f023 0310 	bic.w	r3, r3, #16
 8003052:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	461a      	mov	r2, r3
 800305c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003060:	65bb      	str	r3, [r7, #88]	; 0x58
 8003062:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003064:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003066:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003068:	e841 2300 	strex	r3, r2, [r1]
 800306c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800306e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003070:	2b00      	cmp	r3, #0
 8003072:	d1e4      	bne.n	800303e <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003078:	4618      	mov	r0, r3
 800307a:	f7fd fdf9 	bl	8000c70 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800308a:	b29b      	uxth	r3, r3
 800308c:	1ad3      	subs	r3, r2, r3
 800308e:	b29b      	uxth	r3, r3
 8003090:	4619      	mov	r1, r3
 8003092:	6878      	ldr	r0, [r7, #4]
 8003094:	f000 f8d4 	bl	8003240 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003098:	e0b5      	b.n	8003206 <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80030a6:	b29b      	uxth	r3, r3
 80030a8:	1ad3      	subs	r3, r2, r3
 80030aa:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80030b4:	b29b      	uxth	r3, r3
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	f000 80a7 	beq.w	800320a <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 80030bc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	f000 80a2 	beq.w	800320a <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030ce:	e853 3f00 	ldrex	r3, [r3]
 80030d2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80030d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030d6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80030da:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	461a      	mov	r2, r3
 80030e4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80030e8:	647b      	str	r3, [r7, #68]	; 0x44
 80030ea:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030ec:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80030ee:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80030f0:	e841 2300 	strex	r3, r2, [r1]
 80030f4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80030f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d1e4      	bne.n	80030c6 <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	3308      	adds	r3, #8
 8003102:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003106:	e853 3f00 	ldrex	r3, [r3]
 800310a:	623b      	str	r3, [r7, #32]
   return(result);
 800310c:	6a3b      	ldr	r3, [r7, #32]
 800310e:	f023 0301 	bic.w	r3, r3, #1
 8003112:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	3308      	adds	r3, #8
 800311c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003120:	633a      	str	r2, [r7, #48]	; 0x30
 8003122:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003124:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003126:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003128:	e841 2300 	strex	r3, r2, [r1]
 800312c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800312e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003130:	2b00      	cmp	r3, #0
 8003132:	d1e3      	bne.n	80030fc <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2220      	movs	r2, #32
 8003138:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	2200      	movs	r2, #0
 800313e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2200      	movs	r2, #0
 8003144:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800314c:	693b      	ldr	r3, [r7, #16]
 800314e:	e853 3f00 	ldrex	r3, [r3]
 8003152:	60fb      	str	r3, [r7, #12]
   return(result);
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	f023 0310 	bic.w	r3, r3, #16
 800315a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	461a      	mov	r2, r3
 8003164:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003168:	61fb      	str	r3, [r7, #28]
 800316a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800316c:	69b9      	ldr	r1, [r7, #24]
 800316e:	69fa      	ldr	r2, [r7, #28]
 8003170:	e841 2300 	strex	r3, r2, [r1]
 8003174:	617b      	str	r3, [r7, #20]
   return(result);
 8003176:	697b      	ldr	r3, [r7, #20]
 8003178:	2b00      	cmp	r3, #0
 800317a:	d1e4      	bne.n	8003146 <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800317c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003180:	4619      	mov	r1, r3
 8003182:	6878      	ldr	r0, [r7, #4]
 8003184:	f000 f85c 	bl	8003240 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003188:	e03f      	b.n	800320a <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800318a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800318e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003192:	2b00      	cmp	r3, #0
 8003194:	d00e      	beq.n	80031b4 <HAL_UART_IRQHandler+0x560>
 8003196:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800319a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d008      	beq.n	80031b4 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80031aa:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80031ac:	6878      	ldr	r0, [r7, #4]
 80031ae:	f000 f8f6 	bl	800339e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80031b2:	e02d      	b.n	8003210 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 80031b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80031b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d00e      	beq.n	80031de <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80031c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80031c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d008      	beq.n	80031de <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d01c      	beq.n	800320e <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80031d8:	6878      	ldr	r0, [r7, #4]
 80031da:	4798      	blx	r3
    }
    return;
 80031dc:	e017      	b.n	800320e <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80031de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80031e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d012      	beq.n	8003210 <HAL_UART_IRQHandler+0x5bc>
 80031ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80031ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d00c      	beq.n	8003210 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 80031f6:	6878      	ldr	r0, [r7, #4]
 80031f8:	f000 f8a7 	bl	800334a <UART_EndTransmit_IT>
    return;
 80031fc:	e008      	b.n	8003210 <HAL_UART_IRQHandler+0x5bc>
      return;
 80031fe:	bf00      	nop
 8003200:	e006      	b.n	8003210 <HAL_UART_IRQHandler+0x5bc>
    return;
 8003202:	bf00      	nop
 8003204:	e004      	b.n	8003210 <HAL_UART_IRQHandler+0x5bc>
      return;
 8003206:	bf00      	nop
 8003208:	e002      	b.n	8003210 <HAL_UART_IRQHandler+0x5bc>
      return;
 800320a:	bf00      	nop
 800320c:	e000      	b.n	8003210 <HAL_UART_IRQHandler+0x5bc>
    return;
 800320e:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8003210:	37e8      	adds	r7, #232	; 0xe8
 8003212:	46bd      	mov	sp, r7
 8003214:	bd80      	pop	{r7, pc}
 8003216:	bf00      	nop

08003218 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003218:	b480      	push	{r7}
 800321a:	b083      	sub	sp, #12
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003220:	bf00      	nop
 8003222:	370c      	adds	r7, #12
 8003224:	46bd      	mov	sp, r7
 8003226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322a:	4770      	bx	lr

0800322c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800322c:	b480      	push	{r7}
 800322e:	b083      	sub	sp, #12
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003234:	bf00      	nop
 8003236:	370c      	adds	r7, #12
 8003238:	46bd      	mov	sp, r7
 800323a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323e:	4770      	bx	lr

08003240 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003240:	b480      	push	{r7}
 8003242:	b083      	sub	sp, #12
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
 8003248:	460b      	mov	r3, r1
 800324a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800324c:	bf00      	nop
 800324e:	370c      	adds	r7, #12
 8003250:	46bd      	mov	sp, r7
 8003252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003256:	4770      	bx	lr

08003258 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003258:	b480      	push	{r7}
 800325a:	b095      	sub	sp, #84	; 0x54
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003266:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003268:	e853 3f00 	ldrex	r3, [r3]
 800326c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800326e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003270:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003274:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	461a      	mov	r2, r3
 800327c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800327e:	643b      	str	r3, [r7, #64]	; 0x40
 8003280:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003282:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003284:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003286:	e841 2300 	strex	r3, r2, [r1]
 800328a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800328c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800328e:	2b00      	cmp	r3, #0
 8003290:	d1e6      	bne.n	8003260 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	3308      	adds	r3, #8
 8003298:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800329a:	6a3b      	ldr	r3, [r7, #32]
 800329c:	e853 3f00 	ldrex	r3, [r3]
 80032a0:	61fb      	str	r3, [r7, #28]
   return(result);
 80032a2:	69fb      	ldr	r3, [r7, #28]
 80032a4:	f023 0301 	bic.w	r3, r3, #1
 80032a8:	64bb      	str	r3, [r7, #72]	; 0x48
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	3308      	adds	r3, #8
 80032b0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80032b2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80032b4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032b6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80032b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80032ba:	e841 2300 	strex	r3, r2, [r1]
 80032be:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80032c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d1e5      	bne.n	8003292 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80032ca:	2b01      	cmp	r3, #1
 80032cc:	d118      	bne.n	8003300 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	e853 3f00 	ldrex	r3, [r3]
 80032da:	60bb      	str	r3, [r7, #8]
   return(result);
 80032dc:	68bb      	ldr	r3, [r7, #8]
 80032de:	f023 0310 	bic.w	r3, r3, #16
 80032e2:	647b      	str	r3, [r7, #68]	; 0x44
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	461a      	mov	r2, r3
 80032ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80032ec:	61bb      	str	r3, [r7, #24]
 80032ee:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032f0:	6979      	ldr	r1, [r7, #20]
 80032f2:	69ba      	ldr	r2, [r7, #24]
 80032f4:	e841 2300 	strex	r3, r2, [r1]
 80032f8:	613b      	str	r3, [r7, #16]
   return(result);
 80032fa:	693b      	ldr	r3, [r7, #16]
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d1e6      	bne.n	80032ce <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2220      	movs	r2, #32
 8003304:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	2200      	movs	r2, #0
 800330a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2200      	movs	r2, #0
 8003310:	665a      	str	r2, [r3, #100]	; 0x64
}
 8003312:	bf00      	nop
 8003314:	3754      	adds	r7, #84	; 0x54
 8003316:	46bd      	mov	sp, r7
 8003318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331c:	4770      	bx	lr

0800331e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800331e:	b580      	push	{r7, lr}
 8003320:	b084      	sub	sp, #16
 8003322:	af00      	add	r7, sp, #0
 8003324:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800332a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	2200      	movs	r2, #0
 8003330:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	2200      	movs	r2, #0
 8003338:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800333c:	68f8      	ldr	r0, [r7, #12]
 800333e:	f7ff ff75 	bl	800322c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003342:	bf00      	nop
 8003344:	3710      	adds	r7, #16
 8003346:	46bd      	mov	sp, r7
 8003348:	bd80      	pop	{r7, pc}

0800334a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800334a:	b580      	push	{r7, lr}
 800334c:	b088      	sub	sp, #32
 800334e:	af00      	add	r7, sp, #0
 8003350:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	e853 3f00 	ldrex	r3, [r3]
 800335e:	60bb      	str	r3, [r7, #8]
   return(result);
 8003360:	68bb      	ldr	r3, [r7, #8]
 8003362:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003366:	61fb      	str	r3, [r7, #28]
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	461a      	mov	r2, r3
 800336e:	69fb      	ldr	r3, [r7, #28]
 8003370:	61bb      	str	r3, [r7, #24]
 8003372:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003374:	6979      	ldr	r1, [r7, #20]
 8003376:	69ba      	ldr	r2, [r7, #24]
 8003378:	e841 2300 	strex	r3, r2, [r1]
 800337c:	613b      	str	r3, [r7, #16]
   return(result);
 800337e:	693b      	ldr	r3, [r7, #16]
 8003380:	2b00      	cmp	r3, #0
 8003382:	d1e6      	bne.n	8003352 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2220      	movs	r2, #32
 8003388:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	2200      	movs	r2, #0
 800338e:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003390:	6878      	ldr	r0, [r7, #4]
 8003392:	f7ff ff41 	bl	8003218 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003396:	bf00      	nop
 8003398:	3720      	adds	r7, #32
 800339a:	46bd      	mov	sp, r7
 800339c:	bd80      	pop	{r7, pc}

0800339e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800339e:	b480      	push	{r7}
 80033a0:	b083      	sub	sp, #12
 80033a2:	af00      	add	r7, sp, #0
 80033a4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80033a6:	bf00      	nop
 80033a8:	370c      	adds	r7, #12
 80033aa:	46bd      	mov	sp, r7
 80033ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b0:	4770      	bx	lr
	...

080033b4 <__NVIC_SetPriority>:
{
 80033b4:	b480      	push	{r7}
 80033b6:	b083      	sub	sp, #12
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	4603      	mov	r3, r0
 80033bc:	6039      	str	r1, [r7, #0]
 80033be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80033c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	db0a      	blt.n	80033de <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	b2da      	uxtb	r2, r3
 80033cc:	490c      	ldr	r1, [pc, #48]	; (8003400 <__NVIC_SetPriority+0x4c>)
 80033ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033d2:	0112      	lsls	r2, r2, #4
 80033d4:	b2d2      	uxtb	r2, r2
 80033d6:	440b      	add	r3, r1
 80033d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80033dc:	e00a      	b.n	80033f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033de:	683b      	ldr	r3, [r7, #0]
 80033e0:	b2da      	uxtb	r2, r3
 80033e2:	4908      	ldr	r1, [pc, #32]	; (8003404 <__NVIC_SetPriority+0x50>)
 80033e4:	79fb      	ldrb	r3, [r7, #7]
 80033e6:	f003 030f 	and.w	r3, r3, #15
 80033ea:	3b04      	subs	r3, #4
 80033ec:	0112      	lsls	r2, r2, #4
 80033ee:	b2d2      	uxtb	r2, r2
 80033f0:	440b      	add	r3, r1
 80033f2:	761a      	strb	r2, [r3, #24]
}
 80033f4:	bf00      	nop
 80033f6:	370c      	adds	r7, #12
 80033f8:	46bd      	mov	sp, r7
 80033fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fe:	4770      	bx	lr
 8003400:	e000e100 	.word	0xe000e100
 8003404:	e000ed00 	.word	0xe000ed00

08003408 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8003408:	b580      	push	{r7, lr}
 800340a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800340c:	4b05      	ldr	r3, [pc, #20]	; (8003424 <SysTick_Handler+0x1c>)
 800340e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8003410:	f001 fd28 	bl	8004e64 <xTaskGetSchedulerState>
 8003414:	4603      	mov	r3, r0
 8003416:	2b01      	cmp	r3, #1
 8003418:	d001      	beq.n	800341e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800341a:	f002 fb0d 	bl	8005a38 <xPortSysTickHandler>
  }
}
 800341e:	bf00      	nop
 8003420:	bd80      	pop	{r7, pc}
 8003422:	bf00      	nop
 8003424:	e000e010 	.word	0xe000e010

08003428 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8003428:	b580      	push	{r7, lr}
 800342a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800342c:	2100      	movs	r1, #0
 800342e:	f06f 0004 	mvn.w	r0, #4
 8003432:	f7ff ffbf 	bl	80033b4 <__NVIC_SetPriority>
#endif
}
 8003436:	bf00      	nop
 8003438:	bd80      	pop	{r7, pc}
	...

0800343c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800343c:	b480      	push	{r7}
 800343e:	b083      	sub	sp, #12
 8003440:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003442:	f3ef 8305 	mrs	r3, IPSR
 8003446:	603b      	str	r3, [r7, #0]
  return(result);
 8003448:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800344a:	2b00      	cmp	r3, #0
 800344c:	d003      	beq.n	8003456 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800344e:	f06f 0305 	mvn.w	r3, #5
 8003452:	607b      	str	r3, [r7, #4]
 8003454:	e00c      	b.n	8003470 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8003456:	4b0a      	ldr	r3, [pc, #40]	; (8003480 <osKernelInitialize+0x44>)
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	2b00      	cmp	r3, #0
 800345c:	d105      	bne.n	800346a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800345e:	4b08      	ldr	r3, [pc, #32]	; (8003480 <osKernelInitialize+0x44>)
 8003460:	2201      	movs	r2, #1
 8003462:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003464:	2300      	movs	r3, #0
 8003466:	607b      	str	r3, [r7, #4]
 8003468:	e002      	b.n	8003470 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800346a:	f04f 33ff 	mov.w	r3, #4294967295
 800346e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003470:	687b      	ldr	r3, [r7, #4]
}
 8003472:	4618      	mov	r0, r3
 8003474:	370c      	adds	r7, #12
 8003476:	46bd      	mov	sp, r7
 8003478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347c:	4770      	bx	lr
 800347e:	bf00      	nop
 8003480:	200002a4 	.word	0x200002a4

08003484 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003484:	b580      	push	{r7, lr}
 8003486:	b082      	sub	sp, #8
 8003488:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800348a:	f3ef 8305 	mrs	r3, IPSR
 800348e:	603b      	str	r3, [r7, #0]
  return(result);
 8003490:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003492:	2b00      	cmp	r3, #0
 8003494:	d003      	beq.n	800349e <osKernelStart+0x1a>
    stat = osErrorISR;
 8003496:	f06f 0305 	mvn.w	r3, #5
 800349a:	607b      	str	r3, [r7, #4]
 800349c:	e010      	b.n	80034c0 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800349e:	4b0b      	ldr	r3, [pc, #44]	; (80034cc <osKernelStart+0x48>)
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	2b01      	cmp	r3, #1
 80034a4:	d109      	bne.n	80034ba <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80034a6:	f7ff ffbf 	bl	8003428 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80034aa:	4b08      	ldr	r3, [pc, #32]	; (80034cc <osKernelStart+0x48>)
 80034ac:	2202      	movs	r2, #2
 80034ae:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80034b0:	f001 f87c 	bl	80045ac <vTaskStartScheduler>
      stat = osOK;
 80034b4:	2300      	movs	r3, #0
 80034b6:	607b      	str	r3, [r7, #4]
 80034b8:	e002      	b.n	80034c0 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80034ba:	f04f 33ff 	mov.w	r3, #4294967295
 80034be:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80034c0:	687b      	ldr	r3, [r7, #4]
}
 80034c2:	4618      	mov	r0, r3
 80034c4:	3708      	adds	r7, #8
 80034c6:	46bd      	mov	sp, r7
 80034c8:	bd80      	pop	{r7, pc}
 80034ca:	bf00      	nop
 80034cc:	200002a4 	.word	0x200002a4

080034d0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b08e      	sub	sp, #56	; 0x38
 80034d4:	af04      	add	r7, sp, #16
 80034d6:	60f8      	str	r0, [r7, #12]
 80034d8:	60b9      	str	r1, [r7, #8]
 80034da:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80034dc:	2300      	movs	r3, #0
 80034de:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80034e0:	f3ef 8305 	mrs	r3, IPSR
 80034e4:	617b      	str	r3, [r7, #20]
  return(result);
 80034e6:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d17e      	bne.n	80035ea <osThreadNew+0x11a>
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d07b      	beq.n	80035ea <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80034f2:	2380      	movs	r3, #128	; 0x80
 80034f4:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80034f6:	2318      	movs	r3, #24
 80034f8:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80034fa:	2300      	movs	r3, #0
 80034fc:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80034fe:	f04f 33ff 	mov.w	r3, #4294967295
 8003502:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2b00      	cmp	r3, #0
 8003508:	d045      	beq.n	8003596 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	2b00      	cmp	r3, #0
 8003510:	d002      	beq.n	8003518 <osThreadNew+0x48>
        name = attr->name;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	699b      	ldr	r3, [r3, #24]
 800351c:	2b00      	cmp	r3, #0
 800351e:	d002      	beq.n	8003526 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	699b      	ldr	r3, [r3, #24]
 8003524:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8003526:	69fb      	ldr	r3, [r7, #28]
 8003528:	2b00      	cmp	r3, #0
 800352a:	d008      	beq.n	800353e <osThreadNew+0x6e>
 800352c:	69fb      	ldr	r3, [r7, #28]
 800352e:	2b38      	cmp	r3, #56	; 0x38
 8003530:	d805      	bhi.n	800353e <osThreadNew+0x6e>
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	685b      	ldr	r3, [r3, #4]
 8003536:	f003 0301 	and.w	r3, r3, #1
 800353a:	2b00      	cmp	r3, #0
 800353c:	d001      	beq.n	8003542 <osThreadNew+0x72>
        return (NULL);
 800353e:	2300      	movs	r3, #0
 8003540:	e054      	b.n	80035ec <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	695b      	ldr	r3, [r3, #20]
 8003546:	2b00      	cmp	r3, #0
 8003548:	d003      	beq.n	8003552 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	695b      	ldr	r3, [r3, #20]
 800354e:	089b      	lsrs	r3, r3, #2
 8003550:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	689b      	ldr	r3, [r3, #8]
 8003556:	2b00      	cmp	r3, #0
 8003558:	d00e      	beq.n	8003578 <osThreadNew+0xa8>
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	68db      	ldr	r3, [r3, #12]
 800355e:	2ba7      	cmp	r3, #167	; 0xa7
 8003560:	d90a      	bls.n	8003578 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003566:	2b00      	cmp	r3, #0
 8003568:	d006      	beq.n	8003578 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	695b      	ldr	r3, [r3, #20]
 800356e:	2b00      	cmp	r3, #0
 8003570:	d002      	beq.n	8003578 <osThreadNew+0xa8>
        mem = 1;
 8003572:	2301      	movs	r3, #1
 8003574:	61bb      	str	r3, [r7, #24]
 8003576:	e010      	b.n	800359a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	689b      	ldr	r3, [r3, #8]
 800357c:	2b00      	cmp	r3, #0
 800357e:	d10c      	bne.n	800359a <osThreadNew+0xca>
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	68db      	ldr	r3, [r3, #12]
 8003584:	2b00      	cmp	r3, #0
 8003586:	d108      	bne.n	800359a <osThreadNew+0xca>
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	691b      	ldr	r3, [r3, #16]
 800358c:	2b00      	cmp	r3, #0
 800358e:	d104      	bne.n	800359a <osThreadNew+0xca>
          mem = 0;
 8003590:	2300      	movs	r3, #0
 8003592:	61bb      	str	r3, [r7, #24]
 8003594:	e001      	b.n	800359a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8003596:	2300      	movs	r3, #0
 8003598:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800359a:	69bb      	ldr	r3, [r7, #24]
 800359c:	2b01      	cmp	r3, #1
 800359e:	d110      	bne.n	80035c2 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80035a4:	687a      	ldr	r2, [r7, #4]
 80035a6:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80035a8:	9202      	str	r2, [sp, #8]
 80035aa:	9301      	str	r3, [sp, #4]
 80035ac:	69fb      	ldr	r3, [r7, #28]
 80035ae:	9300      	str	r3, [sp, #0]
 80035b0:	68bb      	ldr	r3, [r7, #8]
 80035b2:	6a3a      	ldr	r2, [r7, #32]
 80035b4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80035b6:	68f8      	ldr	r0, [r7, #12]
 80035b8:	f000 fe0c 	bl	80041d4 <xTaskCreateStatic>
 80035bc:	4603      	mov	r3, r0
 80035be:	613b      	str	r3, [r7, #16]
 80035c0:	e013      	b.n	80035ea <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80035c2:	69bb      	ldr	r3, [r7, #24]
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d110      	bne.n	80035ea <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80035c8:	6a3b      	ldr	r3, [r7, #32]
 80035ca:	b29a      	uxth	r2, r3
 80035cc:	f107 0310 	add.w	r3, r7, #16
 80035d0:	9301      	str	r3, [sp, #4]
 80035d2:	69fb      	ldr	r3, [r7, #28]
 80035d4:	9300      	str	r3, [sp, #0]
 80035d6:	68bb      	ldr	r3, [r7, #8]
 80035d8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80035da:	68f8      	ldr	r0, [r7, #12]
 80035dc:	f000 fe57 	bl	800428e <xTaskCreate>
 80035e0:	4603      	mov	r3, r0
 80035e2:	2b01      	cmp	r3, #1
 80035e4:	d001      	beq.n	80035ea <osThreadNew+0x11a>
            hTask = NULL;
 80035e6:	2300      	movs	r3, #0
 80035e8:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80035ea:	693b      	ldr	r3, [r7, #16]
}
 80035ec:	4618      	mov	r0, r3
 80035ee:	3728      	adds	r7, #40	; 0x28
 80035f0:	46bd      	mov	sp, r7
 80035f2:	bd80      	pop	{r7, pc}

080035f4 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b084      	sub	sp, #16
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80035fc:	f3ef 8305 	mrs	r3, IPSR
 8003600:	60bb      	str	r3, [r7, #8]
  return(result);
 8003602:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003604:	2b00      	cmp	r3, #0
 8003606:	d003      	beq.n	8003610 <osDelay+0x1c>
    stat = osErrorISR;
 8003608:	f06f 0305 	mvn.w	r3, #5
 800360c:	60fb      	str	r3, [r7, #12]
 800360e:	e007      	b.n	8003620 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8003610:	2300      	movs	r3, #0
 8003612:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2b00      	cmp	r3, #0
 8003618:	d002      	beq.n	8003620 <osDelay+0x2c>
      vTaskDelay(ticks);
 800361a:	6878      	ldr	r0, [r7, #4]
 800361c:	f000 ff92 	bl	8004544 <vTaskDelay>
    }
  }

  return (stat);
 8003620:	68fb      	ldr	r3, [r7, #12]
}
 8003622:	4618      	mov	r0, r3
 8003624:	3710      	adds	r7, #16
 8003626:	46bd      	mov	sp, r7
 8003628:	bd80      	pop	{r7, pc}
	...

0800362c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800362c:	b480      	push	{r7}
 800362e:	b085      	sub	sp, #20
 8003630:	af00      	add	r7, sp, #0
 8003632:	60f8      	str	r0, [r7, #12]
 8003634:	60b9      	str	r1, [r7, #8]
 8003636:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	4a07      	ldr	r2, [pc, #28]	; (8003658 <vApplicationGetIdleTaskMemory+0x2c>)
 800363c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800363e:	68bb      	ldr	r3, [r7, #8]
 8003640:	4a06      	ldr	r2, [pc, #24]	; (800365c <vApplicationGetIdleTaskMemory+0x30>)
 8003642:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	2280      	movs	r2, #128	; 0x80
 8003648:	601a      	str	r2, [r3, #0]
}
 800364a:	bf00      	nop
 800364c:	3714      	adds	r7, #20
 800364e:	46bd      	mov	sp, r7
 8003650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003654:	4770      	bx	lr
 8003656:	bf00      	nop
 8003658:	200002a8 	.word	0x200002a8
 800365c:	20000350 	.word	0x20000350

08003660 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003660:	b480      	push	{r7}
 8003662:	b085      	sub	sp, #20
 8003664:	af00      	add	r7, sp, #0
 8003666:	60f8      	str	r0, [r7, #12]
 8003668:	60b9      	str	r1, [r7, #8]
 800366a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	4a07      	ldr	r2, [pc, #28]	; (800368c <vApplicationGetTimerTaskMemory+0x2c>)
 8003670:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8003672:	68bb      	ldr	r3, [r7, #8]
 8003674:	4a06      	ldr	r2, [pc, #24]	; (8003690 <vApplicationGetTimerTaskMemory+0x30>)
 8003676:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800367e:	601a      	str	r2, [r3, #0]
}
 8003680:	bf00      	nop
 8003682:	3714      	adds	r7, #20
 8003684:	46bd      	mov	sp, r7
 8003686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368a:	4770      	bx	lr
 800368c:	20000550 	.word	0x20000550
 8003690:	200005f8 	.word	0x200005f8

08003694 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003694:	b480      	push	{r7}
 8003696:	b083      	sub	sp, #12
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	f103 0208 	add.w	r2, r3, #8
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	f04f 32ff 	mov.w	r2, #4294967295
 80036ac:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	f103 0208 	add.w	r2, r3, #8
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	f103 0208 	add.w	r2, r3, #8
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	2200      	movs	r2, #0
 80036c6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80036c8:	bf00      	nop
 80036ca:	370c      	adds	r7, #12
 80036cc:	46bd      	mov	sp, r7
 80036ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d2:	4770      	bx	lr

080036d4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80036d4:	b480      	push	{r7}
 80036d6:	b083      	sub	sp, #12
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2200      	movs	r2, #0
 80036e0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80036e2:	bf00      	nop
 80036e4:	370c      	adds	r7, #12
 80036e6:	46bd      	mov	sp, r7
 80036e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ec:	4770      	bx	lr

080036ee <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80036ee:	b480      	push	{r7}
 80036f0:	b085      	sub	sp, #20
 80036f2:	af00      	add	r7, sp, #0
 80036f4:	6078      	str	r0, [r7, #4]
 80036f6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	685b      	ldr	r3, [r3, #4]
 80036fc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80036fe:	683b      	ldr	r3, [r7, #0]
 8003700:	68fa      	ldr	r2, [r7, #12]
 8003702:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	689a      	ldr	r2, [r3, #8]
 8003708:	683b      	ldr	r3, [r7, #0]
 800370a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	689b      	ldr	r3, [r3, #8]
 8003710:	683a      	ldr	r2, [r7, #0]
 8003712:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	683a      	ldr	r2, [r7, #0]
 8003718:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800371a:	683b      	ldr	r3, [r7, #0]
 800371c:	687a      	ldr	r2, [r7, #4]
 800371e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	1c5a      	adds	r2, r3, #1
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	601a      	str	r2, [r3, #0]
}
 800372a:	bf00      	nop
 800372c:	3714      	adds	r7, #20
 800372e:	46bd      	mov	sp, r7
 8003730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003734:	4770      	bx	lr

08003736 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003736:	b480      	push	{r7}
 8003738:	b085      	sub	sp, #20
 800373a:	af00      	add	r7, sp, #0
 800373c:	6078      	str	r0, [r7, #4]
 800373e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003740:	683b      	ldr	r3, [r7, #0]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003746:	68bb      	ldr	r3, [r7, #8]
 8003748:	f1b3 3fff 	cmp.w	r3, #4294967295
 800374c:	d103      	bne.n	8003756 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	691b      	ldr	r3, [r3, #16]
 8003752:	60fb      	str	r3, [r7, #12]
 8003754:	e00c      	b.n	8003770 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	3308      	adds	r3, #8
 800375a:	60fb      	str	r3, [r7, #12]
 800375c:	e002      	b.n	8003764 <vListInsert+0x2e>
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	685b      	ldr	r3, [r3, #4]
 8003762:	60fb      	str	r3, [r7, #12]
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	685b      	ldr	r3, [r3, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	68ba      	ldr	r2, [r7, #8]
 800376c:	429a      	cmp	r2, r3
 800376e:	d2f6      	bcs.n	800375e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	685a      	ldr	r2, [r3, #4]
 8003774:	683b      	ldr	r3, [r7, #0]
 8003776:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003778:	683b      	ldr	r3, [r7, #0]
 800377a:	685b      	ldr	r3, [r3, #4]
 800377c:	683a      	ldr	r2, [r7, #0]
 800377e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003780:	683b      	ldr	r3, [r7, #0]
 8003782:	68fa      	ldr	r2, [r7, #12]
 8003784:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	683a      	ldr	r2, [r7, #0]
 800378a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800378c:	683b      	ldr	r3, [r7, #0]
 800378e:	687a      	ldr	r2, [r7, #4]
 8003790:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	1c5a      	adds	r2, r3, #1
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	601a      	str	r2, [r3, #0]
}
 800379c:	bf00      	nop
 800379e:	3714      	adds	r7, #20
 80037a0:	46bd      	mov	sp, r7
 80037a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a6:	4770      	bx	lr

080037a8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80037a8:	b480      	push	{r7}
 80037aa:	b085      	sub	sp, #20
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	691b      	ldr	r3, [r3, #16]
 80037b4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	685b      	ldr	r3, [r3, #4]
 80037ba:	687a      	ldr	r2, [r7, #4]
 80037bc:	6892      	ldr	r2, [r2, #8]
 80037be:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	689b      	ldr	r3, [r3, #8]
 80037c4:	687a      	ldr	r2, [r7, #4]
 80037c6:	6852      	ldr	r2, [r2, #4]
 80037c8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	685b      	ldr	r3, [r3, #4]
 80037ce:	687a      	ldr	r2, [r7, #4]
 80037d0:	429a      	cmp	r2, r3
 80037d2:	d103      	bne.n	80037dc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	689a      	ldr	r2, [r3, #8]
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2200      	movs	r2, #0
 80037e0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	1e5a      	subs	r2, r3, #1
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	681b      	ldr	r3, [r3, #0]
}
 80037f0:	4618      	mov	r0, r3
 80037f2:	3714      	adds	r7, #20
 80037f4:	46bd      	mov	sp, r7
 80037f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fa:	4770      	bx	lr

080037fc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b084      	sub	sp, #16
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
 8003804:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	2b00      	cmp	r3, #0
 800380e:	d10a      	bne.n	8003826 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003810:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003814:	f383 8811 	msr	BASEPRI, r3
 8003818:	f3bf 8f6f 	isb	sy
 800381c:	f3bf 8f4f 	dsb	sy
 8003820:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003822:	bf00      	nop
 8003824:	e7fe      	b.n	8003824 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8003826:	f002 f875 	bl	8005914 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	681a      	ldr	r2, [r3, #0]
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003832:	68f9      	ldr	r1, [r7, #12]
 8003834:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003836:	fb01 f303 	mul.w	r3, r1, r3
 800383a:	441a      	add	r2, r3
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	2200      	movs	r2, #0
 8003844:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	681a      	ldr	r2, [r3, #0]
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	681a      	ldr	r2, [r3, #0]
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003856:	3b01      	subs	r3, #1
 8003858:	68f9      	ldr	r1, [r7, #12]
 800385a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800385c:	fb01 f303 	mul.w	r3, r1, r3
 8003860:	441a      	add	r2, r3
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	22ff      	movs	r2, #255	; 0xff
 800386a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	22ff      	movs	r2, #255	; 0xff
 8003872:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8003876:	683b      	ldr	r3, [r7, #0]
 8003878:	2b00      	cmp	r3, #0
 800387a:	d114      	bne.n	80038a6 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	691b      	ldr	r3, [r3, #16]
 8003880:	2b00      	cmp	r3, #0
 8003882:	d01a      	beq.n	80038ba <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	3310      	adds	r3, #16
 8003888:	4618      	mov	r0, r3
 800388a:	f001 f929 	bl	8004ae0 <xTaskRemoveFromEventList>
 800388e:	4603      	mov	r3, r0
 8003890:	2b00      	cmp	r3, #0
 8003892:	d012      	beq.n	80038ba <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003894:	4b0c      	ldr	r3, [pc, #48]	; (80038c8 <xQueueGenericReset+0xcc>)
 8003896:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800389a:	601a      	str	r2, [r3, #0]
 800389c:	f3bf 8f4f 	dsb	sy
 80038a0:	f3bf 8f6f 	isb	sy
 80038a4:	e009      	b.n	80038ba <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	3310      	adds	r3, #16
 80038aa:	4618      	mov	r0, r3
 80038ac:	f7ff fef2 	bl	8003694 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	3324      	adds	r3, #36	; 0x24
 80038b4:	4618      	mov	r0, r3
 80038b6:	f7ff feed 	bl	8003694 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80038ba:	f002 f85b 	bl	8005974 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80038be:	2301      	movs	r3, #1
}
 80038c0:	4618      	mov	r0, r3
 80038c2:	3710      	adds	r7, #16
 80038c4:	46bd      	mov	sp, r7
 80038c6:	bd80      	pop	{r7, pc}
 80038c8:	e000ed04 	.word	0xe000ed04

080038cc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b08e      	sub	sp, #56	; 0x38
 80038d0:	af02      	add	r7, sp, #8
 80038d2:	60f8      	str	r0, [r7, #12]
 80038d4:	60b9      	str	r1, [r7, #8]
 80038d6:	607a      	str	r2, [r7, #4]
 80038d8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d10a      	bne.n	80038f6 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80038e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038e4:	f383 8811 	msr	BASEPRI, r3
 80038e8:	f3bf 8f6f 	isb	sy
 80038ec:	f3bf 8f4f 	dsb	sy
 80038f0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80038f2:	bf00      	nop
 80038f4:	e7fe      	b.n	80038f4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80038f6:	683b      	ldr	r3, [r7, #0]
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d10a      	bne.n	8003912 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80038fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003900:	f383 8811 	msr	BASEPRI, r3
 8003904:	f3bf 8f6f 	isb	sy
 8003908:	f3bf 8f4f 	dsb	sy
 800390c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800390e:	bf00      	nop
 8003910:	e7fe      	b.n	8003910 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	2b00      	cmp	r3, #0
 8003916:	d002      	beq.n	800391e <xQueueGenericCreateStatic+0x52>
 8003918:	68bb      	ldr	r3, [r7, #8]
 800391a:	2b00      	cmp	r3, #0
 800391c:	d001      	beq.n	8003922 <xQueueGenericCreateStatic+0x56>
 800391e:	2301      	movs	r3, #1
 8003920:	e000      	b.n	8003924 <xQueueGenericCreateStatic+0x58>
 8003922:	2300      	movs	r3, #0
 8003924:	2b00      	cmp	r3, #0
 8003926:	d10a      	bne.n	800393e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8003928:	f04f 0350 	mov.w	r3, #80	; 0x50
 800392c:	f383 8811 	msr	BASEPRI, r3
 8003930:	f3bf 8f6f 	isb	sy
 8003934:	f3bf 8f4f 	dsb	sy
 8003938:	623b      	str	r3, [r7, #32]
}
 800393a:	bf00      	nop
 800393c:	e7fe      	b.n	800393c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	2b00      	cmp	r3, #0
 8003942:	d102      	bne.n	800394a <xQueueGenericCreateStatic+0x7e>
 8003944:	68bb      	ldr	r3, [r7, #8]
 8003946:	2b00      	cmp	r3, #0
 8003948:	d101      	bne.n	800394e <xQueueGenericCreateStatic+0x82>
 800394a:	2301      	movs	r3, #1
 800394c:	e000      	b.n	8003950 <xQueueGenericCreateStatic+0x84>
 800394e:	2300      	movs	r3, #0
 8003950:	2b00      	cmp	r3, #0
 8003952:	d10a      	bne.n	800396a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8003954:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003958:	f383 8811 	msr	BASEPRI, r3
 800395c:	f3bf 8f6f 	isb	sy
 8003960:	f3bf 8f4f 	dsb	sy
 8003964:	61fb      	str	r3, [r7, #28]
}
 8003966:	bf00      	nop
 8003968:	e7fe      	b.n	8003968 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800396a:	2350      	movs	r3, #80	; 0x50
 800396c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800396e:	697b      	ldr	r3, [r7, #20]
 8003970:	2b50      	cmp	r3, #80	; 0x50
 8003972:	d00a      	beq.n	800398a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8003974:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003978:	f383 8811 	msr	BASEPRI, r3
 800397c:	f3bf 8f6f 	isb	sy
 8003980:	f3bf 8f4f 	dsb	sy
 8003984:	61bb      	str	r3, [r7, #24]
}
 8003986:	bf00      	nop
 8003988:	e7fe      	b.n	8003988 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800398a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800398c:	683b      	ldr	r3, [r7, #0]
 800398e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8003990:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003992:	2b00      	cmp	r3, #0
 8003994:	d00d      	beq.n	80039b2 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003996:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003998:	2201      	movs	r2, #1
 800399a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800399e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80039a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039a4:	9300      	str	r3, [sp, #0]
 80039a6:	4613      	mov	r3, r2
 80039a8:	687a      	ldr	r2, [r7, #4]
 80039aa:	68b9      	ldr	r1, [r7, #8]
 80039ac:	68f8      	ldr	r0, [r7, #12]
 80039ae:	f000 f805 	bl	80039bc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80039b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80039b4:	4618      	mov	r0, r3
 80039b6:	3730      	adds	r7, #48	; 0x30
 80039b8:	46bd      	mov	sp, r7
 80039ba:	bd80      	pop	{r7, pc}

080039bc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	b084      	sub	sp, #16
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	60f8      	str	r0, [r7, #12]
 80039c4:	60b9      	str	r1, [r7, #8]
 80039c6:	607a      	str	r2, [r7, #4]
 80039c8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80039ca:	68bb      	ldr	r3, [r7, #8]
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d103      	bne.n	80039d8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80039d0:	69bb      	ldr	r3, [r7, #24]
 80039d2:	69ba      	ldr	r2, [r7, #24]
 80039d4:	601a      	str	r2, [r3, #0]
 80039d6:	e002      	b.n	80039de <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80039d8:	69bb      	ldr	r3, [r7, #24]
 80039da:	687a      	ldr	r2, [r7, #4]
 80039dc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80039de:	69bb      	ldr	r3, [r7, #24]
 80039e0:	68fa      	ldr	r2, [r7, #12]
 80039e2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80039e4:	69bb      	ldr	r3, [r7, #24]
 80039e6:	68ba      	ldr	r2, [r7, #8]
 80039e8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80039ea:	2101      	movs	r1, #1
 80039ec:	69b8      	ldr	r0, [r7, #24]
 80039ee:	f7ff ff05 	bl	80037fc <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80039f2:	69bb      	ldr	r3, [r7, #24]
 80039f4:	78fa      	ldrb	r2, [r7, #3]
 80039f6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80039fa:	bf00      	nop
 80039fc:	3710      	adds	r7, #16
 80039fe:	46bd      	mov	sp, r7
 8003a00:	bd80      	pop	{r7, pc}
	...

08003a04 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003a04:	b580      	push	{r7, lr}
 8003a06:	b08e      	sub	sp, #56	; 0x38
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	60f8      	str	r0, [r7, #12]
 8003a0c:	60b9      	str	r1, [r7, #8]
 8003a0e:	607a      	str	r2, [r7, #4]
 8003a10:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003a12:	2300      	movs	r3, #0
 8003a14:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003a1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d10a      	bne.n	8003a36 <xQueueGenericSend+0x32>
	__asm volatile
 8003a20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a24:	f383 8811 	msr	BASEPRI, r3
 8003a28:	f3bf 8f6f 	isb	sy
 8003a2c:	f3bf 8f4f 	dsb	sy
 8003a30:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003a32:	bf00      	nop
 8003a34:	e7fe      	b.n	8003a34 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003a36:	68bb      	ldr	r3, [r7, #8]
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d103      	bne.n	8003a44 <xQueueGenericSend+0x40>
 8003a3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d101      	bne.n	8003a48 <xQueueGenericSend+0x44>
 8003a44:	2301      	movs	r3, #1
 8003a46:	e000      	b.n	8003a4a <xQueueGenericSend+0x46>
 8003a48:	2300      	movs	r3, #0
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d10a      	bne.n	8003a64 <xQueueGenericSend+0x60>
	__asm volatile
 8003a4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a52:	f383 8811 	msr	BASEPRI, r3
 8003a56:	f3bf 8f6f 	isb	sy
 8003a5a:	f3bf 8f4f 	dsb	sy
 8003a5e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003a60:	bf00      	nop
 8003a62:	e7fe      	b.n	8003a62 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003a64:	683b      	ldr	r3, [r7, #0]
 8003a66:	2b02      	cmp	r3, #2
 8003a68:	d103      	bne.n	8003a72 <xQueueGenericSend+0x6e>
 8003a6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a6e:	2b01      	cmp	r3, #1
 8003a70:	d101      	bne.n	8003a76 <xQueueGenericSend+0x72>
 8003a72:	2301      	movs	r3, #1
 8003a74:	e000      	b.n	8003a78 <xQueueGenericSend+0x74>
 8003a76:	2300      	movs	r3, #0
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d10a      	bne.n	8003a92 <xQueueGenericSend+0x8e>
	__asm volatile
 8003a7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a80:	f383 8811 	msr	BASEPRI, r3
 8003a84:	f3bf 8f6f 	isb	sy
 8003a88:	f3bf 8f4f 	dsb	sy
 8003a8c:	623b      	str	r3, [r7, #32]
}
 8003a8e:	bf00      	nop
 8003a90:	e7fe      	b.n	8003a90 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003a92:	f001 f9e7 	bl	8004e64 <xTaskGetSchedulerState>
 8003a96:	4603      	mov	r3, r0
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d102      	bne.n	8003aa2 <xQueueGenericSend+0x9e>
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d101      	bne.n	8003aa6 <xQueueGenericSend+0xa2>
 8003aa2:	2301      	movs	r3, #1
 8003aa4:	e000      	b.n	8003aa8 <xQueueGenericSend+0xa4>
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d10a      	bne.n	8003ac2 <xQueueGenericSend+0xbe>
	__asm volatile
 8003aac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ab0:	f383 8811 	msr	BASEPRI, r3
 8003ab4:	f3bf 8f6f 	isb	sy
 8003ab8:	f3bf 8f4f 	dsb	sy
 8003abc:	61fb      	str	r3, [r7, #28]
}
 8003abe:	bf00      	nop
 8003ac0:	e7fe      	b.n	8003ac0 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003ac2:	f001 ff27 	bl	8005914 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003ac6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ac8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003aca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003acc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ace:	429a      	cmp	r2, r3
 8003ad0:	d302      	bcc.n	8003ad8 <xQueueGenericSend+0xd4>
 8003ad2:	683b      	ldr	r3, [r7, #0]
 8003ad4:	2b02      	cmp	r3, #2
 8003ad6:	d129      	bne.n	8003b2c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003ad8:	683a      	ldr	r2, [r7, #0]
 8003ada:	68b9      	ldr	r1, [r7, #8]
 8003adc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003ade:	f000 fa0b 	bl	8003ef8 <prvCopyDataToQueue>
 8003ae2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003ae4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ae6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d010      	beq.n	8003b0e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003aec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003aee:	3324      	adds	r3, #36	; 0x24
 8003af0:	4618      	mov	r0, r3
 8003af2:	f000 fff5 	bl	8004ae0 <xTaskRemoveFromEventList>
 8003af6:	4603      	mov	r3, r0
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d013      	beq.n	8003b24 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003afc:	4b3f      	ldr	r3, [pc, #252]	; (8003bfc <xQueueGenericSend+0x1f8>)
 8003afe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b02:	601a      	str	r2, [r3, #0]
 8003b04:	f3bf 8f4f 	dsb	sy
 8003b08:	f3bf 8f6f 	isb	sy
 8003b0c:	e00a      	b.n	8003b24 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003b0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d007      	beq.n	8003b24 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003b14:	4b39      	ldr	r3, [pc, #228]	; (8003bfc <xQueueGenericSend+0x1f8>)
 8003b16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b1a:	601a      	str	r2, [r3, #0]
 8003b1c:	f3bf 8f4f 	dsb	sy
 8003b20:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003b24:	f001 ff26 	bl	8005974 <vPortExitCritical>
				return pdPASS;
 8003b28:	2301      	movs	r3, #1
 8003b2a:	e063      	b.n	8003bf4 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d103      	bne.n	8003b3a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003b32:	f001 ff1f 	bl	8005974 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003b36:	2300      	movs	r3, #0
 8003b38:	e05c      	b.n	8003bf4 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003b3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d106      	bne.n	8003b4e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003b40:	f107 0314 	add.w	r3, r7, #20
 8003b44:	4618      	mov	r0, r3
 8003b46:	f001 f82f 	bl	8004ba8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003b4a:	2301      	movs	r3, #1
 8003b4c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003b4e:	f001 ff11 	bl	8005974 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003b52:	f000 fd9b 	bl	800468c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003b56:	f001 fedd 	bl	8005914 <vPortEnterCritical>
 8003b5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b5c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003b60:	b25b      	sxtb	r3, r3
 8003b62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b66:	d103      	bne.n	8003b70 <xQueueGenericSend+0x16c>
 8003b68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003b70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b72:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003b76:	b25b      	sxtb	r3, r3
 8003b78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b7c:	d103      	bne.n	8003b86 <xQueueGenericSend+0x182>
 8003b7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b80:	2200      	movs	r2, #0
 8003b82:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003b86:	f001 fef5 	bl	8005974 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003b8a:	1d3a      	adds	r2, r7, #4
 8003b8c:	f107 0314 	add.w	r3, r7, #20
 8003b90:	4611      	mov	r1, r2
 8003b92:	4618      	mov	r0, r3
 8003b94:	f001 f81e 	bl	8004bd4 <xTaskCheckForTimeOut>
 8003b98:	4603      	mov	r3, r0
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d124      	bne.n	8003be8 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003b9e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003ba0:	f000 faa2 	bl	80040e8 <prvIsQueueFull>
 8003ba4:	4603      	mov	r3, r0
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d018      	beq.n	8003bdc <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003baa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bac:	3310      	adds	r3, #16
 8003bae:	687a      	ldr	r2, [r7, #4]
 8003bb0:	4611      	mov	r1, r2
 8003bb2:	4618      	mov	r0, r3
 8003bb4:	f000 ff44 	bl	8004a40 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003bb8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003bba:	f000 fa2d 	bl	8004018 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003bbe:	f000 fd73 	bl	80046a8 <xTaskResumeAll>
 8003bc2:	4603      	mov	r3, r0
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	f47f af7c 	bne.w	8003ac2 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8003bca:	4b0c      	ldr	r3, [pc, #48]	; (8003bfc <xQueueGenericSend+0x1f8>)
 8003bcc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003bd0:	601a      	str	r2, [r3, #0]
 8003bd2:	f3bf 8f4f 	dsb	sy
 8003bd6:	f3bf 8f6f 	isb	sy
 8003bda:	e772      	b.n	8003ac2 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003bdc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003bde:	f000 fa1b 	bl	8004018 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003be2:	f000 fd61 	bl	80046a8 <xTaskResumeAll>
 8003be6:	e76c      	b.n	8003ac2 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003be8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003bea:	f000 fa15 	bl	8004018 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003bee:	f000 fd5b 	bl	80046a8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003bf2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	3738      	adds	r7, #56	; 0x38
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	bd80      	pop	{r7, pc}
 8003bfc:	e000ed04 	.word	0xe000ed04

08003c00 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003c00:	b580      	push	{r7, lr}
 8003c02:	b090      	sub	sp, #64	; 0x40
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	60f8      	str	r0, [r7, #12]
 8003c08:	60b9      	str	r1, [r7, #8]
 8003c0a:	607a      	str	r2, [r7, #4]
 8003c0c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8003c12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d10a      	bne.n	8003c2e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8003c18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c1c:	f383 8811 	msr	BASEPRI, r3
 8003c20:	f3bf 8f6f 	isb	sy
 8003c24:	f3bf 8f4f 	dsb	sy
 8003c28:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003c2a:	bf00      	nop
 8003c2c:	e7fe      	b.n	8003c2c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003c2e:	68bb      	ldr	r3, [r7, #8]
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d103      	bne.n	8003c3c <xQueueGenericSendFromISR+0x3c>
 8003c34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d101      	bne.n	8003c40 <xQueueGenericSendFromISR+0x40>
 8003c3c:	2301      	movs	r3, #1
 8003c3e:	e000      	b.n	8003c42 <xQueueGenericSendFromISR+0x42>
 8003c40:	2300      	movs	r3, #0
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d10a      	bne.n	8003c5c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8003c46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c4a:	f383 8811 	msr	BASEPRI, r3
 8003c4e:	f3bf 8f6f 	isb	sy
 8003c52:	f3bf 8f4f 	dsb	sy
 8003c56:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003c58:	bf00      	nop
 8003c5a:	e7fe      	b.n	8003c5a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003c5c:	683b      	ldr	r3, [r7, #0]
 8003c5e:	2b02      	cmp	r3, #2
 8003c60:	d103      	bne.n	8003c6a <xQueueGenericSendFromISR+0x6a>
 8003c62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c66:	2b01      	cmp	r3, #1
 8003c68:	d101      	bne.n	8003c6e <xQueueGenericSendFromISR+0x6e>
 8003c6a:	2301      	movs	r3, #1
 8003c6c:	e000      	b.n	8003c70 <xQueueGenericSendFromISR+0x70>
 8003c6e:	2300      	movs	r3, #0
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d10a      	bne.n	8003c8a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8003c74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c78:	f383 8811 	msr	BASEPRI, r3
 8003c7c:	f3bf 8f6f 	isb	sy
 8003c80:	f3bf 8f4f 	dsb	sy
 8003c84:	623b      	str	r3, [r7, #32]
}
 8003c86:	bf00      	nop
 8003c88:	e7fe      	b.n	8003c88 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003c8a:	f001 ff25 	bl	8005ad8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003c8e:	f3ef 8211 	mrs	r2, BASEPRI
 8003c92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c96:	f383 8811 	msr	BASEPRI, r3
 8003c9a:	f3bf 8f6f 	isb	sy
 8003c9e:	f3bf 8f4f 	dsb	sy
 8003ca2:	61fa      	str	r2, [r7, #28]
 8003ca4:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003ca6:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003ca8:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003caa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003cae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cb2:	429a      	cmp	r2, r3
 8003cb4:	d302      	bcc.n	8003cbc <xQueueGenericSendFromISR+0xbc>
 8003cb6:	683b      	ldr	r3, [r7, #0]
 8003cb8:	2b02      	cmp	r3, #2
 8003cba:	d12f      	bne.n	8003d1c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003cbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cbe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003cc2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003cc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cca:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003ccc:	683a      	ldr	r2, [r7, #0]
 8003cce:	68b9      	ldr	r1, [r7, #8]
 8003cd0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003cd2:	f000 f911 	bl	8003ef8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003cd6:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8003cda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cde:	d112      	bne.n	8003d06 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003ce0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ce2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d016      	beq.n	8003d16 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003ce8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cea:	3324      	adds	r3, #36	; 0x24
 8003cec:	4618      	mov	r0, r3
 8003cee:	f000 fef7 	bl	8004ae0 <xTaskRemoveFromEventList>
 8003cf2:	4603      	mov	r3, r0
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d00e      	beq.n	8003d16 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d00b      	beq.n	8003d16 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	2201      	movs	r2, #1
 8003d02:	601a      	str	r2, [r3, #0]
 8003d04:	e007      	b.n	8003d16 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003d06:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003d0a:	3301      	adds	r3, #1
 8003d0c:	b2db      	uxtb	r3, r3
 8003d0e:	b25a      	sxtb	r2, r3
 8003d10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d12:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8003d16:	2301      	movs	r3, #1
 8003d18:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8003d1a:	e001      	b.n	8003d20 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003d1c:	2300      	movs	r3, #0
 8003d1e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003d20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d22:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003d24:	697b      	ldr	r3, [r7, #20]
 8003d26:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003d2a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003d2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8003d2e:	4618      	mov	r0, r3
 8003d30:	3740      	adds	r7, #64	; 0x40
 8003d32:	46bd      	mov	sp, r7
 8003d34:	bd80      	pop	{r7, pc}
	...

08003d38 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	b08c      	sub	sp, #48	; 0x30
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	60f8      	str	r0, [r7, #12]
 8003d40:	60b9      	str	r1, [r7, #8]
 8003d42:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003d44:	2300      	movs	r3, #0
 8003d46:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003d4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d10a      	bne.n	8003d68 <xQueueReceive+0x30>
	__asm volatile
 8003d52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d56:	f383 8811 	msr	BASEPRI, r3
 8003d5a:	f3bf 8f6f 	isb	sy
 8003d5e:	f3bf 8f4f 	dsb	sy
 8003d62:	623b      	str	r3, [r7, #32]
}
 8003d64:	bf00      	nop
 8003d66:	e7fe      	b.n	8003d66 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003d68:	68bb      	ldr	r3, [r7, #8]
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d103      	bne.n	8003d76 <xQueueReceive+0x3e>
 8003d6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d101      	bne.n	8003d7a <xQueueReceive+0x42>
 8003d76:	2301      	movs	r3, #1
 8003d78:	e000      	b.n	8003d7c <xQueueReceive+0x44>
 8003d7a:	2300      	movs	r3, #0
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d10a      	bne.n	8003d96 <xQueueReceive+0x5e>
	__asm volatile
 8003d80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d84:	f383 8811 	msr	BASEPRI, r3
 8003d88:	f3bf 8f6f 	isb	sy
 8003d8c:	f3bf 8f4f 	dsb	sy
 8003d90:	61fb      	str	r3, [r7, #28]
}
 8003d92:	bf00      	nop
 8003d94:	e7fe      	b.n	8003d94 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003d96:	f001 f865 	bl	8004e64 <xTaskGetSchedulerState>
 8003d9a:	4603      	mov	r3, r0
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d102      	bne.n	8003da6 <xQueueReceive+0x6e>
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d101      	bne.n	8003daa <xQueueReceive+0x72>
 8003da6:	2301      	movs	r3, #1
 8003da8:	e000      	b.n	8003dac <xQueueReceive+0x74>
 8003daa:	2300      	movs	r3, #0
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d10a      	bne.n	8003dc6 <xQueueReceive+0x8e>
	__asm volatile
 8003db0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003db4:	f383 8811 	msr	BASEPRI, r3
 8003db8:	f3bf 8f6f 	isb	sy
 8003dbc:	f3bf 8f4f 	dsb	sy
 8003dc0:	61bb      	str	r3, [r7, #24]
}
 8003dc2:	bf00      	nop
 8003dc4:	e7fe      	b.n	8003dc4 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003dc6:	f001 fda5 	bl	8005914 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003dca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dce:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d01f      	beq.n	8003e16 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003dd6:	68b9      	ldr	r1, [r7, #8]
 8003dd8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003dda:	f000 f8f7 	bl	8003fcc <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003dde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003de0:	1e5a      	subs	r2, r3, #1
 8003de2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003de4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003de6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003de8:	691b      	ldr	r3, [r3, #16]
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d00f      	beq.n	8003e0e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003dee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003df0:	3310      	adds	r3, #16
 8003df2:	4618      	mov	r0, r3
 8003df4:	f000 fe74 	bl	8004ae0 <xTaskRemoveFromEventList>
 8003df8:	4603      	mov	r3, r0
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d007      	beq.n	8003e0e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003dfe:	4b3d      	ldr	r3, [pc, #244]	; (8003ef4 <xQueueReceive+0x1bc>)
 8003e00:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e04:	601a      	str	r2, [r3, #0]
 8003e06:	f3bf 8f4f 	dsb	sy
 8003e0a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003e0e:	f001 fdb1 	bl	8005974 <vPortExitCritical>
				return pdPASS;
 8003e12:	2301      	movs	r3, #1
 8003e14:	e069      	b.n	8003eea <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d103      	bne.n	8003e24 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003e1c:	f001 fdaa 	bl	8005974 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003e20:	2300      	movs	r3, #0
 8003e22:	e062      	b.n	8003eea <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003e24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d106      	bne.n	8003e38 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003e2a:	f107 0310 	add.w	r3, r7, #16
 8003e2e:	4618      	mov	r0, r3
 8003e30:	f000 feba 	bl	8004ba8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003e34:	2301      	movs	r3, #1
 8003e36:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003e38:	f001 fd9c 	bl	8005974 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003e3c:	f000 fc26 	bl	800468c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003e40:	f001 fd68 	bl	8005914 <vPortEnterCritical>
 8003e44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e46:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003e4a:	b25b      	sxtb	r3, r3
 8003e4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e50:	d103      	bne.n	8003e5a <xQueueReceive+0x122>
 8003e52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e54:	2200      	movs	r2, #0
 8003e56:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003e5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e5c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003e60:	b25b      	sxtb	r3, r3
 8003e62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e66:	d103      	bne.n	8003e70 <xQueueReceive+0x138>
 8003e68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003e70:	f001 fd80 	bl	8005974 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003e74:	1d3a      	adds	r2, r7, #4
 8003e76:	f107 0310 	add.w	r3, r7, #16
 8003e7a:	4611      	mov	r1, r2
 8003e7c:	4618      	mov	r0, r3
 8003e7e:	f000 fea9 	bl	8004bd4 <xTaskCheckForTimeOut>
 8003e82:	4603      	mov	r3, r0
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d123      	bne.n	8003ed0 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003e88:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003e8a:	f000 f917 	bl	80040bc <prvIsQueueEmpty>
 8003e8e:	4603      	mov	r3, r0
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d017      	beq.n	8003ec4 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003e94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e96:	3324      	adds	r3, #36	; 0x24
 8003e98:	687a      	ldr	r2, [r7, #4]
 8003e9a:	4611      	mov	r1, r2
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	f000 fdcf 	bl	8004a40 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003ea2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003ea4:	f000 f8b8 	bl	8004018 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003ea8:	f000 fbfe 	bl	80046a8 <xTaskResumeAll>
 8003eac:	4603      	mov	r3, r0
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d189      	bne.n	8003dc6 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8003eb2:	4b10      	ldr	r3, [pc, #64]	; (8003ef4 <xQueueReceive+0x1bc>)
 8003eb4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003eb8:	601a      	str	r2, [r3, #0]
 8003eba:	f3bf 8f4f 	dsb	sy
 8003ebe:	f3bf 8f6f 	isb	sy
 8003ec2:	e780      	b.n	8003dc6 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003ec4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003ec6:	f000 f8a7 	bl	8004018 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003eca:	f000 fbed 	bl	80046a8 <xTaskResumeAll>
 8003ece:	e77a      	b.n	8003dc6 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003ed0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003ed2:	f000 f8a1 	bl	8004018 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003ed6:	f000 fbe7 	bl	80046a8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003eda:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003edc:	f000 f8ee 	bl	80040bc <prvIsQueueEmpty>
 8003ee0:	4603      	mov	r3, r0
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	f43f af6f 	beq.w	8003dc6 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003ee8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003eea:	4618      	mov	r0, r3
 8003eec:	3730      	adds	r7, #48	; 0x30
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	bd80      	pop	{r7, pc}
 8003ef2:	bf00      	nop
 8003ef4:	e000ed04 	.word	0xe000ed04

08003ef8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	b086      	sub	sp, #24
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	60f8      	str	r0, [r7, #12]
 8003f00:	60b9      	str	r1, [r7, #8]
 8003f02:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003f04:	2300      	movs	r3, #0
 8003f06:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f0c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d10d      	bne.n	8003f32 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d14d      	bne.n	8003fba <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	689b      	ldr	r3, [r3, #8]
 8003f22:	4618      	mov	r0, r3
 8003f24:	f000 ffbc 	bl	8004ea0 <xTaskPriorityDisinherit>
 8003f28:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	609a      	str	r2, [r3, #8]
 8003f30:	e043      	b.n	8003fba <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d119      	bne.n	8003f6c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	6858      	ldr	r0, [r3, #4]
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f40:	461a      	mov	r2, r3
 8003f42:	68b9      	ldr	r1, [r7, #8]
 8003f44:	f002 f882 	bl	800604c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	685a      	ldr	r2, [r3, #4]
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f50:	441a      	add	r2, r3
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	685a      	ldr	r2, [r3, #4]
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	689b      	ldr	r3, [r3, #8]
 8003f5e:	429a      	cmp	r2, r3
 8003f60:	d32b      	bcc.n	8003fba <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	681a      	ldr	r2, [r3, #0]
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	605a      	str	r2, [r3, #4]
 8003f6a:	e026      	b.n	8003fba <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	68d8      	ldr	r0, [r3, #12]
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f74:	461a      	mov	r2, r3
 8003f76:	68b9      	ldr	r1, [r7, #8]
 8003f78:	f002 f868 	bl	800604c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	68da      	ldr	r2, [r3, #12]
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f84:	425b      	negs	r3, r3
 8003f86:	441a      	add	r2, r3
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	68da      	ldr	r2, [r3, #12]
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	429a      	cmp	r2, r3
 8003f96:	d207      	bcs.n	8003fa8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	689a      	ldr	r2, [r3, #8]
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fa0:	425b      	negs	r3, r3
 8003fa2:	441a      	add	r2, r3
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2b02      	cmp	r3, #2
 8003fac:	d105      	bne.n	8003fba <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003fae:	693b      	ldr	r3, [r7, #16]
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d002      	beq.n	8003fba <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003fb4:	693b      	ldr	r3, [r7, #16]
 8003fb6:	3b01      	subs	r3, #1
 8003fb8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003fba:	693b      	ldr	r3, [r7, #16]
 8003fbc:	1c5a      	adds	r2, r3, #1
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8003fc2:	697b      	ldr	r3, [r7, #20]
}
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	3718      	adds	r7, #24
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	bd80      	pop	{r7, pc}

08003fcc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	b082      	sub	sp, #8
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	6078      	str	r0, [r7, #4]
 8003fd4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d018      	beq.n	8004010 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	68da      	ldr	r2, [r3, #12]
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fe6:	441a      	add	r2, r3
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	68da      	ldr	r2, [r3, #12]
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	689b      	ldr	r3, [r3, #8]
 8003ff4:	429a      	cmp	r2, r3
 8003ff6:	d303      	bcc.n	8004000 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681a      	ldr	r2, [r3, #0]
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	68d9      	ldr	r1, [r3, #12]
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004008:	461a      	mov	r2, r3
 800400a:	6838      	ldr	r0, [r7, #0]
 800400c:	f002 f81e 	bl	800604c <memcpy>
	}
}
 8004010:	bf00      	nop
 8004012:	3708      	adds	r7, #8
 8004014:	46bd      	mov	sp, r7
 8004016:	bd80      	pop	{r7, pc}

08004018 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004018:	b580      	push	{r7, lr}
 800401a:	b084      	sub	sp, #16
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004020:	f001 fc78 	bl	8005914 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800402a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800402c:	e011      	b.n	8004052 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004032:	2b00      	cmp	r3, #0
 8004034:	d012      	beq.n	800405c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	3324      	adds	r3, #36	; 0x24
 800403a:	4618      	mov	r0, r3
 800403c:	f000 fd50 	bl	8004ae0 <xTaskRemoveFromEventList>
 8004040:	4603      	mov	r3, r0
 8004042:	2b00      	cmp	r3, #0
 8004044:	d001      	beq.n	800404a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004046:	f000 fe27 	bl	8004c98 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800404a:	7bfb      	ldrb	r3, [r7, #15]
 800404c:	3b01      	subs	r3, #1
 800404e:	b2db      	uxtb	r3, r3
 8004050:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004052:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004056:	2b00      	cmp	r3, #0
 8004058:	dce9      	bgt.n	800402e <prvUnlockQueue+0x16>
 800405a:	e000      	b.n	800405e <prvUnlockQueue+0x46>
					break;
 800405c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	22ff      	movs	r2, #255	; 0xff
 8004062:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8004066:	f001 fc85 	bl	8005974 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800406a:	f001 fc53 	bl	8005914 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004074:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004076:	e011      	b.n	800409c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	691b      	ldr	r3, [r3, #16]
 800407c:	2b00      	cmp	r3, #0
 800407e:	d012      	beq.n	80040a6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	3310      	adds	r3, #16
 8004084:	4618      	mov	r0, r3
 8004086:	f000 fd2b 	bl	8004ae0 <xTaskRemoveFromEventList>
 800408a:	4603      	mov	r3, r0
 800408c:	2b00      	cmp	r3, #0
 800408e:	d001      	beq.n	8004094 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004090:	f000 fe02 	bl	8004c98 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004094:	7bbb      	ldrb	r3, [r7, #14]
 8004096:	3b01      	subs	r3, #1
 8004098:	b2db      	uxtb	r3, r3
 800409a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800409c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	dce9      	bgt.n	8004078 <prvUnlockQueue+0x60>
 80040a4:	e000      	b.n	80040a8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80040a6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	22ff      	movs	r2, #255	; 0xff
 80040ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80040b0:	f001 fc60 	bl	8005974 <vPortExitCritical>
}
 80040b4:	bf00      	nop
 80040b6:	3710      	adds	r7, #16
 80040b8:	46bd      	mov	sp, r7
 80040ba:	bd80      	pop	{r7, pc}

080040bc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80040bc:	b580      	push	{r7, lr}
 80040be:	b084      	sub	sp, #16
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80040c4:	f001 fc26 	bl	8005914 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d102      	bne.n	80040d6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80040d0:	2301      	movs	r3, #1
 80040d2:	60fb      	str	r3, [r7, #12]
 80040d4:	e001      	b.n	80040da <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80040d6:	2300      	movs	r3, #0
 80040d8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80040da:	f001 fc4b 	bl	8005974 <vPortExitCritical>

	return xReturn;
 80040de:	68fb      	ldr	r3, [r7, #12]
}
 80040e0:	4618      	mov	r0, r3
 80040e2:	3710      	adds	r7, #16
 80040e4:	46bd      	mov	sp, r7
 80040e6:	bd80      	pop	{r7, pc}

080040e8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80040e8:	b580      	push	{r7, lr}
 80040ea:	b084      	sub	sp, #16
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80040f0:	f001 fc10 	bl	8005914 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040fc:	429a      	cmp	r2, r3
 80040fe:	d102      	bne.n	8004106 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004100:	2301      	movs	r3, #1
 8004102:	60fb      	str	r3, [r7, #12]
 8004104:	e001      	b.n	800410a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004106:	2300      	movs	r3, #0
 8004108:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800410a:	f001 fc33 	bl	8005974 <vPortExitCritical>

	return xReturn;
 800410e:	68fb      	ldr	r3, [r7, #12]
}
 8004110:	4618      	mov	r0, r3
 8004112:	3710      	adds	r7, #16
 8004114:	46bd      	mov	sp, r7
 8004116:	bd80      	pop	{r7, pc}

08004118 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004118:	b480      	push	{r7}
 800411a:	b085      	sub	sp, #20
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]
 8004120:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004122:	2300      	movs	r3, #0
 8004124:	60fb      	str	r3, [r7, #12]
 8004126:	e014      	b.n	8004152 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004128:	4a0f      	ldr	r2, [pc, #60]	; (8004168 <vQueueAddToRegistry+0x50>)
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004130:	2b00      	cmp	r3, #0
 8004132:	d10b      	bne.n	800414c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004134:	490c      	ldr	r1, [pc, #48]	; (8004168 <vQueueAddToRegistry+0x50>)
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	683a      	ldr	r2, [r7, #0]
 800413a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800413e:	4a0a      	ldr	r2, [pc, #40]	; (8004168 <vQueueAddToRegistry+0x50>)
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	00db      	lsls	r3, r3, #3
 8004144:	4413      	add	r3, r2
 8004146:	687a      	ldr	r2, [r7, #4]
 8004148:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800414a:	e006      	b.n	800415a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	3301      	adds	r3, #1
 8004150:	60fb      	str	r3, [r7, #12]
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	2b07      	cmp	r3, #7
 8004156:	d9e7      	bls.n	8004128 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004158:	bf00      	nop
 800415a:	bf00      	nop
 800415c:	3714      	adds	r7, #20
 800415e:	46bd      	mov	sp, r7
 8004160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004164:	4770      	bx	lr
 8004166:	bf00      	nop
 8004168:	200009f8 	.word	0x200009f8

0800416c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800416c:	b580      	push	{r7, lr}
 800416e:	b086      	sub	sp, #24
 8004170:	af00      	add	r7, sp, #0
 8004172:	60f8      	str	r0, [r7, #12]
 8004174:	60b9      	str	r1, [r7, #8]
 8004176:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800417c:	f001 fbca 	bl	8005914 <vPortEnterCritical>
 8004180:	697b      	ldr	r3, [r7, #20]
 8004182:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004186:	b25b      	sxtb	r3, r3
 8004188:	f1b3 3fff 	cmp.w	r3, #4294967295
 800418c:	d103      	bne.n	8004196 <vQueueWaitForMessageRestricted+0x2a>
 800418e:	697b      	ldr	r3, [r7, #20]
 8004190:	2200      	movs	r2, #0
 8004192:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004196:	697b      	ldr	r3, [r7, #20]
 8004198:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800419c:	b25b      	sxtb	r3, r3
 800419e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041a2:	d103      	bne.n	80041ac <vQueueWaitForMessageRestricted+0x40>
 80041a4:	697b      	ldr	r3, [r7, #20]
 80041a6:	2200      	movs	r2, #0
 80041a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80041ac:	f001 fbe2 	bl	8005974 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80041b0:	697b      	ldr	r3, [r7, #20]
 80041b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d106      	bne.n	80041c6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80041b8:	697b      	ldr	r3, [r7, #20]
 80041ba:	3324      	adds	r3, #36	; 0x24
 80041bc:	687a      	ldr	r2, [r7, #4]
 80041be:	68b9      	ldr	r1, [r7, #8]
 80041c0:	4618      	mov	r0, r3
 80041c2:	f000 fc61 	bl	8004a88 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80041c6:	6978      	ldr	r0, [r7, #20]
 80041c8:	f7ff ff26 	bl	8004018 <prvUnlockQueue>
	}
 80041cc:	bf00      	nop
 80041ce:	3718      	adds	r7, #24
 80041d0:	46bd      	mov	sp, r7
 80041d2:	bd80      	pop	{r7, pc}

080041d4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80041d4:	b580      	push	{r7, lr}
 80041d6:	b08e      	sub	sp, #56	; 0x38
 80041d8:	af04      	add	r7, sp, #16
 80041da:	60f8      	str	r0, [r7, #12]
 80041dc:	60b9      	str	r1, [r7, #8]
 80041de:	607a      	str	r2, [r7, #4]
 80041e0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80041e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d10a      	bne.n	80041fe <xTaskCreateStatic+0x2a>
	__asm volatile
 80041e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041ec:	f383 8811 	msr	BASEPRI, r3
 80041f0:	f3bf 8f6f 	isb	sy
 80041f4:	f3bf 8f4f 	dsb	sy
 80041f8:	623b      	str	r3, [r7, #32]
}
 80041fa:	bf00      	nop
 80041fc:	e7fe      	b.n	80041fc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80041fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004200:	2b00      	cmp	r3, #0
 8004202:	d10a      	bne.n	800421a <xTaskCreateStatic+0x46>
	__asm volatile
 8004204:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004208:	f383 8811 	msr	BASEPRI, r3
 800420c:	f3bf 8f6f 	isb	sy
 8004210:	f3bf 8f4f 	dsb	sy
 8004214:	61fb      	str	r3, [r7, #28]
}
 8004216:	bf00      	nop
 8004218:	e7fe      	b.n	8004218 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800421a:	23a8      	movs	r3, #168	; 0xa8
 800421c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800421e:	693b      	ldr	r3, [r7, #16]
 8004220:	2ba8      	cmp	r3, #168	; 0xa8
 8004222:	d00a      	beq.n	800423a <xTaskCreateStatic+0x66>
	__asm volatile
 8004224:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004228:	f383 8811 	msr	BASEPRI, r3
 800422c:	f3bf 8f6f 	isb	sy
 8004230:	f3bf 8f4f 	dsb	sy
 8004234:	61bb      	str	r3, [r7, #24]
}
 8004236:	bf00      	nop
 8004238:	e7fe      	b.n	8004238 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800423a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800423c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800423e:	2b00      	cmp	r3, #0
 8004240:	d01e      	beq.n	8004280 <xTaskCreateStatic+0xac>
 8004242:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004244:	2b00      	cmp	r3, #0
 8004246:	d01b      	beq.n	8004280 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004248:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800424a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800424c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800424e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004250:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004254:	2202      	movs	r2, #2
 8004256:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800425a:	2300      	movs	r3, #0
 800425c:	9303      	str	r3, [sp, #12]
 800425e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004260:	9302      	str	r3, [sp, #8]
 8004262:	f107 0314 	add.w	r3, r7, #20
 8004266:	9301      	str	r3, [sp, #4]
 8004268:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800426a:	9300      	str	r3, [sp, #0]
 800426c:	683b      	ldr	r3, [r7, #0]
 800426e:	687a      	ldr	r2, [r7, #4]
 8004270:	68b9      	ldr	r1, [r7, #8]
 8004272:	68f8      	ldr	r0, [r7, #12]
 8004274:	f000 f850 	bl	8004318 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004278:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800427a:	f000 f8f3 	bl	8004464 <prvAddNewTaskToReadyList>
 800427e:	e001      	b.n	8004284 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8004280:	2300      	movs	r3, #0
 8004282:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004284:	697b      	ldr	r3, [r7, #20]
	}
 8004286:	4618      	mov	r0, r3
 8004288:	3728      	adds	r7, #40	; 0x28
 800428a:	46bd      	mov	sp, r7
 800428c:	bd80      	pop	{r7, pc}

0800428e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800428e:	b580      	push	{r7, lr}
 8004290:	b08c      	sub	sp, #48	; 0x30
 8004292:	af04      	add	r7, sp, #16
 8004294:	60f8      	str	r0, [r7, #12]
 8004296:	60b9      	str	r1, [r7, #8]
 8004298:	603b      	str	r3, [r7, #0]
 800429a:	4613      	mov	r3, r2
 800429c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800429e:	88fb      	ldrh	r3, [r7, #6]
 80042a0:	009b      	lsls	r3, r3, #2
 80042a2:	4618      	mov	r0, r3
 80042a4:	f001 fc58 	bl	8005b58 <pvPortMalloc>
 80042a8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80042aa:	697b      	ldr	r3, [r7, #20]
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d00e      	beq.n	80042ce <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80042b0:	20a8      	movs	r0, #168	; 0xa8
 80042b2:	f001 fc51 	bl	8005b58 <pvPortMalloc>
 80042b6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80042b8:	69fb      	ldr	r3, [r7, #28]
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d003      	beq.n	80042c6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80042be:	69fb      	ldr	r3, [r7, #28]
 80042c0:	697a      	ldr	r2, [r7, #20]
 80042c2:	631a      	str	r2, [r3, #48]	; 0x30
 80042c4:	e005      	b.n	80042d2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80042c6:	6978      	ldr	r0, [r7, #20]
 80042c8:	f001 fd12 	bl	8005cf0 <vPortFree>
 80042cc:	e001      	b.n	80042d2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80042ce:	2300      	movs	r3, #0
 80042d0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80042d2:	69fb      	ldr	r3, [r7, #28]
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d017      	beq.n	8004308 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80042d8:	69fb      	ldr	r3, [r7, #28]
 80042da:	2200      	movs	r2, #0
 80042dc:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80042e0:	88fa      	ldrh	r2, [r7, #6]
 80042e2:	2300      	movs	r3, #0
 80042e4:	9303      	str	r3, [sp, #12]
 80042e6:	69fb      	ldr	r3, [r7, #28]
 80042e8:	9302      	str	r3, [sp, #8]
 80042ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042ec:	9301      	str	r3, [sp, #4]
 80042ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042f0:	9300      	str	r3, [sp, #0]
 80042f2:	683b      	ldr	r3, [r7, #0]
 80042f4:	68b9      	ldr	r1, [r7, #8]
 80042f6:	68f8      	ldr	r0, [r7, #12]
 80042f8:	f000 f80e 	bl	8004318 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80042fc:	69f8      	ldr	r0, [r7, #28]
 80042fe:	f000 f8b1 	bl	8004464 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004302:	2301      	movs	r3, #1
 8004304:	61bb      	str	r3, [r7, #24]
 8004306:	e002      	b.n	800430e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004308:	f04f 33ff 	mov.w	r3, #4294967295
 800430c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800430e:	69bb      	ldr	r3, [r7, #24]
	}
 8004310:	4618      	mov	r0, r3
 8004312:	3720      	adds	r7, #32
 8004314:	46bd      	mov	sp, r7
 8004316:	bd80      	pop	{r7, pc}

08004318 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004318:	b580      	push	{r7, lr}
 800431a:	b088      	sub	sp, #32
 800431c:	af00      	add	r7, sp, #0
 800431e:	60f8      	str	r0, [r7, #12]
 8004320:	60b9      	str	r1, [r7, #8]
 8004322:	607a      	str	r2, [r7, #4]
 8004324:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004326:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004328:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	009b      	lsls	r3, r3, #2
 800432e:	461a      	mov	r2, r3
 8004330:	21a5      	movs	r1, #165	; 0xa5
 8004332:	f001 fe07 	bl	8005f44 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004336:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004338:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004340:	3b01      	subs	r3, #1
 8004342:	009b      	lsls	r3, r3, #2
 8004344:	4413      	add	r3, r2
 8004346:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004348:	69bb      	ldr	r3, [r7, #24]
 800434a:	f023 0307 	bic.w	r3, r3, #7
 800434e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004350:	69bb      	ldr	r3, [r7, #24]
 8004352:	f003 0307 	and.w	r3, r3, #7
 8004356:	2b00      	cmp	r3, #0
 8004358:	d00a      	beq.n	8004370 <prvInitialiseNewTask+0x58>
	__asm volatile
 800435a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800435e:	f383 8811 	msr	BASEPRI, r3
 8004362:	f3bf 8f6f 	isb	sy
 8004366:	f3bf 8f4f 	dsb	sy
 800436a:	617b      	str	r3, [r7, #20]
}
 800436c:	bf00      	nop
 800436e:	e7fe      	b.n	800436e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004370:	68bb      	ldr	r3, [r7, #8]
 8004372:	2b00      	cmp	r3, #0
 8004374:	d01f      	beq.n	80043b6 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004376:	2300      	movs	r3, #0
 8004378:	61fb      	str	r3, [r7, #28]
 800437a:	e012      	b.n	80043a2 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800437c:	68ba      	ldr	r2, [r7, #8]
 800437e:	69fb      	ldr	r3, [r7, #28]
 8004380:	4413      	add	r3, r2
 8004382:	7819      	ldrb	r1, [r3, #0]
 8004384:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004386:	69fb      	ldr	r3, [r7, #28]
 8004388:	4413      	add	r3, r2
 800438a:	3334      	adds	r3, #52	; 0x34
 800438c:	460a      	mov	r2, r1
 800438e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004390:	68ba      	ldr	r2, [r7, #8]
 8004392:	69fb      	ldr	r3, [r7, #28]
 8004394:	4413      	add	r3, r2
 8004396:	781b      	ldrb	r3, [r3, #0]
 8004398:	2b00      	cmp	r3, #0
 800439a:	d006      	beq.n	80043aa <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800439c:	69fb      	ldr	r3, [r7, #28]
 800439e:	3301      	adds	r3, #1
 80043a0:	61fb      	str	r3, [r7, #28]
 80043a2:	69fb      	ldr	r3, [r7, #28]
 80043a4:	2b0f      	cmp	r3, #15
 80043a6:	d9e9      	bls.n	800437c <prvInitialiseNewTask+0x64>
 80043a8:	e000      	b.n	80043ac <prvInitialiseNewTask+0x94>
			{
				break;
 80043aa:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80043ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043ae:	2200      	movs	r2, #0
 80043b0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80043b4:	e003      	b.n	80043be <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80043b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043b8:	2200      	movs	r2, #0
 80043ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80043be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043c0:	2b37      	cmp	r3, #55	; 0x37
 80043c2:	d901      	bls.n	80043c8 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80043c4:	2337      	movs	r3, #55	; 0x37
 80043c6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80043c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043ca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80043cc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80043ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043d0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80043d2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80043d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043d6:	2200      	movs	r2, #0
 80043d8:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80043da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043dc:	3304      	adds	r3, #4
 80043de:	4618      	mov	r0, r3
 80043e0:	f7ff f978 	bl	80036d4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80043e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043e6:	3318      	adds	r3, #24
 80043e8:	4618      	mov	r0, r3
 80043ea:	f7ff f973 	bl	80036d4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80043ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80043f2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80043f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043f6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80043fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043fc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80043fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004400:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004402:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004404:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004406:	2200      	movs	r2, #0
 8004408:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800440c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800440e:	2200      	movs	r2, #0
 8004410:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8004414:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004416:	3354      	adds	r3, #84	; 0x54
 8004418:	224c      	movs	r2, #76	; 0x4c
 800441a:	2100      	movs	r1, #0
 800441c:	4618      	mov	r0, r3
 800441e:	f001 fd91 	bl	8005f44 <memset>
 8004422:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004424:	4a0c      	ldr	r2, [pc, #48]	; (8004458 <prvInitialiseNewTask+0x140>)
 8004426:	659a      	str	r2, [r3, #88]	; 0x58
 8004428:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800442a:	4a0c      	ldr	r2, [pc, #48]	; (800445c <prvInitialiseNewTask+0x144>)
 800442c:	65da      	str	r2, [r3, #92]	; 0x5c
 800442e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004430:	4a0b      	ldr	r2, [pc, #44]	; (8004460 <prvInitialiseNewTask+0x148>)
 8004432:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004434:	683a      	ldr	r2, [r7, #0]
 8004436:	68f9      	ldr	r1, [r7, #12]
 8004438:	69b8      	ldr	r0, [r7, #24]
 800443a:	f001 f941 	bl	80056c0 <pxPortInitialiseStack>
 800443e:	4602      	mov	r2, r0
 8004440:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004442:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004444:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004446:	2b00      	cmp	r3, #0
 8004448:	d002      	beq.n	8004450 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800444a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800444c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800444e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004450:	bf00      	nop
 8004452:	3720      	adds	r7, #32
 8004454:	46bd      	mov	sp, r7
 8004456:	bd80      	pop	{r7, pc}
 8004458:	20001c48 	.word	0x20001c48
 800445c:	20001cb0 	.word	0x20001cb0
 8004460:	20001d18 	.word	0x20001d18

08004464 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004464:	b580      	push	{r7, lr}
 8004466:	b082      	sub	sp, #8
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800446c:	f001 fa52 	bl	8005914 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004470:	4b2d      	ldr	r3, [pc, #180]	; (8004528 <prvAddNewTaskToReadyList+0xc4>)
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	3301      	adds	r3, #1
 8004476:	4a2c      	ldr	r2, [pc, #176]	; (8004528 <prvAddNewTaskToReadyList+0xc4>)
 8004478:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800447a:	4b2c      	ldr	r3, [pc, #176]	; (800452c <prvAddNewTaskToReadyList+0xc8>)
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	2b00      	cmp	r3, #0
 8004480:	d109      	bne.n	8004496 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004482:	4a2a      	ldr	r2, [pc, #168]	; (800452c <prvAddNewTaskToReadyList+0xc8>)
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004488:	4b27      	ldr	r3, [pc, #156]	; (8004528 <prvAddNewTaskToReadyList+0xc4>)
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	2b01      	cmp	r3, #1
 800448e:	d110      	bne.n	80044b2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004490:	f000 fc26 	bl	8004ce0 <prvInitialiseTaskLists>
 8004494:	e00d      	b.n	80044b2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004496:	4b26      	ldr	r3, [pc, #152]	; (8004530 <prvAddNewTaskToReadyList+0xcc>)
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	2b00      	cmp	r3, #0
 800449c:	d109      	bne.n	80044b2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800449e:	4b23      	ldr	r3, [pc, #140]	; (800452c <prvAddNewTaskToReadyList+0xc8>)
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044a8:	429a      	cmp	r2, r3
 80044aa:	d802      	bhi.n	80044b2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80044ac:	4a1f      	ldr	r2, [pc, #124]	; (800452c <prvAddNewTaskToReadyList+0xc8>)
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80044b2:	4b20      	ldr	r3, [pc, #128]	; (8004534 <prvAddNewTaskToReadyList+0xd0>)
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	3301      	adds	r3, #1
 80044b8:	4a1e      	ldr	r2, [pc, #120]	; (8004534 <prvAddNewTaskToReadyList+0xd0>)
 80044ba:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80044bc:	4b1d      	ldr	r3, [pc, #116]	; (8004534 <prvAddNewTaskToReadyList+0xd0>)
 80044be:	681a      	ldr	r2, [r3, #0]
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044c8:	4b1b      	ldr	r3, [pc, #108]	; (8004538 <prvAddNewTaskToReadyList+0xd4>)
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	429a      	cmp	r2, r3
 80044ce:	d903      	bls.n	80044d8 <prvAddNewTaskToReadyList+0x74>
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044d4:	4a18      	ldr	r2, [pc, #96]	; (8004538 <prvAddNewTaskToReadyList+0xd4>)
 80044d6:	6013      	str	r3, [r2, #0]
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044dc:	4613      	mov	r3, r2
 80044de:	009b      	lsls	r3, r3, #2
 80044e0:	4413      	add	r3, r2
 80044e2:	009b      	lsls	r3, r3, #2
 80044e4:	4a15      	ldr	r2, [pc, #84]	; (800453c <prvAddNewTaskToReadyList+0xd8>)
 80044e6:	441a      	add	r2, r3
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	3304      	adds	r3, #4
 80044ec:	4619      	mov	r1, r3
 80044ee:	4610      	mov	r0, r2
 80044f0:	f7ff f8fd 	bl	80036ee <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80044f4:	f001 fa3e 	bl	8005974 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80044f8:	4b0d      	ldr	r3, [pc, #52]	; (8004530 <prvAddNewTaskToReadyList+0xcc>)
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d00e      	beq.n	800451e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004500:	4b0a      	ldr	r3, [pc, #40]	; (800452c <prvAddNewTaskToReadyList+0xc8>)
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800450a:	429a      	cmp	r2, r3
 800450c:	d207      	bcs.n	800451e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800450e:	4b0c      	ldr	r3, [pc, #48]	; (8004540 <prvAddNewTaskToReadyList+0xdc>)
 8004510:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004514:	601a      	str	r2, [r3, #0]
 8004516:	f3bf 8f4f 	dsb	sy
 800451a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800451e:	bf00      	nop
 8004520:	3708      	adds	r7, #8
 8004522:	46bd      	mov	sp, r7
 8004524:	bd80      	pop	{r7, pc}
 8004526:	bf00      	nop
 8004528:	20000f0c 	.word	0x20000f0c
 800452c:	20000a38 	.word	0x20000a38
 8004530:	20000f18 	.word	0x20000f18
 8004534:	20000f28 	.word	0x20000f28
 8004538:	20000f14 	.word	0x20000f14
 800453c:	20000a3c 	.word	0x20000a3c
 8004540:	e000ed04 	.word	0xe000ed04

08004544 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004544:	b580      	push	{r7, lr}
 8004546:	b084      	sub	sp, #16
 8004548:	af00      	add	r7, sp, #0
 800454a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800454c:	2300      	movs	r3, #0
 800454e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2b00      	cmp	r3, #0
 8004554:	d017      	beq.n	8004586 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004556:	4b13      	ldr	r3, [pc, #76]	; (80045a4 <vTaskDelay+0x60>)
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	2b00      	cmp	r3, #0
 800455c:	d00a      	beq.n	8004574 <vTaskDelay+0x30>
	__asm volatile
 800455e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004562:	f383 8811 	msr	BASEPRI, r3
 8004566:	f3bf 8f6f 	isb	sy
 800456a:	f3bf 8f4f 	dsb	sy
 800456e:	60bb      	str	r3, [r7, #8]
}
 8004570:	bf00      	nop
 8004572:	e7fe      	b.n	8004572 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004574:	f000 f88a 	bl	800468c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004578:	2100      	movs	r1, #0
 800457a:	6878      	ldr	r0, [r7, #4]
 800457c:	f000 fcfe 	bl	8004f7c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004580:	f000 f892 	bl	80046a8 <xTaskResumeAll>
 8004584:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	2b00      	cmp	r3, #0
 800458a:	d107      	bne.n	800459c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800458c:	4b06      	ldr	r3, [pc, #24]	; (80045a8 <vTaskDelay+0x64>)
 800458e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004592:	601a      	str	r2, [r3, #0]
 8004594:	f3bf 8f4f 	dsb	sy
 8004598:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800459c:	bf00      	nop
 800459e:	3710      	adds	r7, #16
 80045a0:	46bd      	mov	sp, r7
 80045a2:	bd80      	pop	{r7, pc}
 80045a4:	20000f34 	.word	0x20000f34
 80045a8:	e000ed04 	.word	0xe000ed04

080045ac <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80045ac:	b580      	push	{r7, lr}
 80045ae:	b08a      	sub	sp, #40	; 0x28
 80045b0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80045b2:	2300      	movs	r3, #0
 80045b4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80045b6:	2300      	movs	r3, #0
 80045b8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80045ba:	463a      	mov	r2, r7
 80045bc:	1d39      	adds	r1, r7, #4
 80045be:	f107 0308 	add.w	r3, r7, #8
 80045c2:	4618      	mov	r0, r3
 80045c4:	f7ff f832 	bl	800362c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80045c8:	6839      	ldr	r1, [r7, #0]
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	68ba      	ldr	r2, [r7, #8]
 80045ce:	9202      	str	r2, [sp, #8]
 80045d0:	9301      	str	r3, [sp, #4]
 80045d2:	2300      	movs	r3, #0
 80045d4:	9300      	str	r3, [sp, #0]
 80045d6:	2300      	movs	r3, #0
 80045d8:	460a      	mov	r2, r1
 80045da:	4924      	ldr	r1, [pc, #144]	; (800466c <vTaskStartScheduler+0xc0>)
 80045dc:	4824      	ldr	r0, [pc, #144]	; (8004670 <vTaskStartScheduler+0xc4>)
 80045de:	f7ff fdf9 	bl	80041d4 <xTaskCreateStatic>
 80045e2:	4603      	mov	r3, r0
 80045e4:	4a23      	ldr	r2, [pc, #140]	; (8004674 <vTaskStartScheduler+0xc8>)
 80045e6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80045e8:	4b22      	ldr	r3, [pc, #136]	; (8004674 <vTaskStartScheduler+0xc8>)
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d002      	beq.n	80045f6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80045f0:	2301      	movs	r3, #1
 80045f2:	617b      	str	r3, [r7, #20]
 80045f4:	e001      	b.n	80045fa <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80045f6:	2300      	movs	r3, #0
 80045f8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80045fa:	697b      	ldr	r3, [r7, #20]
 80045fc:	2b01      	cmp	r3, #1
 80045fe:	d102      	bne.n	8004606 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8004600:	f000 fd10 	bl	8005024 <xTimerCreateTimerTask>
 8004604:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004606:	697b      	ldr	r3, [r7, #20]
 8004608:	2b01      	cmp	r3, #1
 800460a:	d11b      	bne.n	8004644 <vTaskStartScheduler+0x98>
	__asm volatile
 800460c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004610:	f383 8811 	msr	BASEPRI, r3
 8004614:	f3bf 8f6f 	isb	sy
 8004618:	f3bf 8f4f 	dsb	sy
 800461c:	613b      	str	r3, [r7, #16]
}
 800461e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004620:	4b15      	ldr	r3, [pc, #84]	; (8004678 <vTaskStartScheduler+0xcc>)
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	3354      	adds	r3, #84	; 0x54
 8004626:	4a15      	ldr	r2, [pc, #84]	; (800467c <vTaskStartScheduler+0xd0>)
 8004628:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800462a:	4b15      	ldr	r3, [pc, #84]	; (8004680 <vTaskStartScheduler+0xd4>)
 800462c:	f04f 32ff 	mov.w	r2, #4294967295
 8004630:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004632:	4b14      	ldr	r3, [pc, #80]	; (8004684 <vTaskStartScheduler+0xd8>)
 8004634:	2201      	movs	r2, #1
 8004636:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004638:	4b13      	ldr	r3, [pc, #76]	; (8004688 <vTaskStartScheduler+0xdc>)
 800463a:	2200      	movs	r2, #0
 800463c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800463e:	f001 f8c7 	bl	80057d0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004642:	e00e      	b.n	8004662 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004644:	697b      	ldr	r3, [r7, #20]
 8004646:	f1b3 3fff 	cmp.w	r3, #4294967295
 800464a:	d10a      	bne.n	8004662 <vTaskStartScheduler+0xb6>
	__asm volatile
 800464c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004650:	f383 8811 	msr	BASEPRI, r3
 8004654:	f3bf 8f6f 	isb	sy
 8004658:	f3bf 8f4f 	dsb	sy
 800465c:	60fb      	str	r3, [r7, #12]
}
 800465e:	bf00      	nop
 8004660:	e7fe      	b.n	8004660 <vTaskStartScheduler+0xb4>
}
 8004662:	bf00      	nop
 8004664:	3718      	adds	r7, #24
 8004666:	46bd      	mov	sp, r7
 8004668:	bd80      	pop	{r7, pc}
 800466a:	bf00      	nop
 800466c:	08006124 	.word	0x08006124
 8004670:	08004cb1 	.word	0x08004cb1
 8004674:	20000f30 	.word	0x20000f30
 8004678:	20000a38 	.word	0x20000a38
 800467c:	20000184 	.word	0x20000184
 8004680:	20000f2c 	.word	0x20000f2c
 8004684:	20000f18 	.word	0x20000f18
 8004688:	20000f10 	.word	0x20000f10

0800468c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800468c:	b480      	push	{r7}
 800468e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004690:	4b04      	ldr	r3, [pc, #16]	; (80046a4 <vTaskSuspendAll+0x18>)
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	3301      	adds	r3, #1
 8004696:	4a03      	ldr	r2, [pc, #12]	; (80046a4 <vTaskSuspendAll+0x18>)
 8004698:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800469a:	bf00      	nop
 800469c:	46bd      	mov	sp, r7
 800469e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a2:	4770      	bx	lr
 80046a4:	20000f34 	.word	0x20000f34

080046a8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80046a8:	b580      	push	{r7, lr}
 80046aa:	b084      	sub	sp, #16
 80046ac:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80046ae:	2300      	movs	r3, #0
 80046b0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80046b2:	2300      	movs	r3, #0
 80046b4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80046b6:	4b42      	ldr	r3, [pc, #264]	; (80047c0 <xTaskResumeAll+0x118>)
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d10a      	bne.n	80046d4 <xTaskResumeAll+0x2c>
	__asm volatile
 80046be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046c2:	f383 8811 	msr	BASEPRI, r3
 80046c6:	f3bf 8f6f 	isb	sy
 80046ca:	f3bf 8f4f 	dsb	sy
 80046ce:	603b      	str	r3, [r7, #0]
}
 80046d0:	bf00      	nop
 80046d2:	e7fe      	b.n	80046d2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80046d4:	f001 f91e 	bl	8005914 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80046d8:	4b39      	ldr	r3, [pc, #228]	; (80047c0 <xTaskResumeAll+0x118>)
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	3b01      	subs	r3, #1
 80046de:	4a38      	ldr	r2, [pc, #224]	; (80047c0 <xTaskResumeAll+0x118>)
 80046e0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80046e2:	4b37      	ldr	r3, [pc, #220]	; (80047c0 <xTaskResumeAll+0x118>)
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d162      	bne.n	80047b0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80046ea:	4b36      	ldr	r3, [pc, #216]	; (80047c4 <xTaskResumeAll+0x11c>)
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d05e      	beq.n	80047b0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80046f2:	e02f      	b.n	8004754 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80046f4:	4b34      	ldr	r3, [pc, #208]	; (80047c8 <xTaskResumeAll+0x120>)
 80046f6:	68db      	ldr	r3, [r3, #12]
 80046f8:	68db      	ldr	r3, [r3, #12]
 80046fa:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	3318      	adds	r3, #24
 8004700:	4618      	mov	r0, r3
 8004702:	f7ff f851 	bl	80037a8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	3304      	adds	r3, #4
 800470a:	4618      	mov	r0, r3
 800470c:	f7ff f84c 	bl	80037a8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004714:	4b2d      	ldr	r3, [pc, #180]	; (80047cc <xTaskResumeAll+0x124>)
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	429a      	cmp	r2, r3
 800471a:	d903      	bls.n	8004724 <xTaskResumeAll+0x7c>
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004720:	4a2a      	ldr	r2, [pc, #168]	; (80047cc <xTaskResumeAll+0x124>)
 8004722:	6013      	str	r3, [r2, #0]
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004728:	4613      	mov	r3, r2
 800472a:	009b      	lsls	r3, r3, #2
 800472c:	4413      	add	r3, r2
 800472e:	009b      	lsls	r3, r3, #2
 8004730:	4a27      	ldr	r2, [pc, #156]	; (80047d0 <xTaskResumeAll+0x128>)
 8004732:	441a      	add	r2, r3
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	3304      	adds	r3, #4
 8004738:	4619      	mov	r1, r3
 800473a:	4610      	mov	r0, r2
 800473c:	f7fe ffd7 	bl	80036ee <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004744:	4b23      	ldr	r3, [pc, #140]	; (80047d4 <xTaskResumeAll+0x12c>)
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800474a:	429a      	cmp	r2, r3
 800474c:	d302      	bcc.n	8004754 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800474e:	4b22      	ldr	r3, [pc, #136]	; (80047d8 <xTaskResumeAll+0x130>)
 8004750:	2201      	movs	r2, #1
 8004752:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004754:	4b1c      	ldr	r3, [pc, #112]	; (80047c8 <xTaskResumeAll+0x120>)
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	2b00      	cmp	r3, #0
 800475a:	d1cb      	bne.n	80046f4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	2b00      	cmp	r3, #0
 8004760:	d001      	beq.n	8004766 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004762:	f000 fb5f 	bl	8004e24 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004766:	4b1d      	ldr	r3, [pc, #116]	; (80047dc <xTaskResumeAll+0x134>)
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	2b00      	cmp	r3, #0
 8004770:	d010      	beq.n	8004794 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004772:	f000 f847 	bl	8004804 <xTaskIncrementTick>
 8004776:	4603      	mov	r3, r0
 8004778:	2b00      	cmp	r3, #0
 800477a:	d002      	beq.n	8004782 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800477c:	4b16      	ldr	r3, [pc, #88]	; (80047d8 <xTaskResumeAll+0x130>)
 800477e:	2201      	movs	r2, #1
 8004780:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	3b01      	subs	r3, #1
 8004786:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	2b00      	cmp	r3, #0
 800478c:	d1f1      	bne.n	8004772 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800478e:	4b13      	ldr	r3, [pc, #76]	; (80047dc <xTaskResumeAll+0x134>)
 8004790:	2200      	movs	r2, #0
 8004792:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004794:	4b10      	ldr	r3, [pc, #64]	; (80047d8 <xTaskResumeAll+0x130>)
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	2b00      	cmp	r3, #0
 800479a:	d009      	beq.n	80047b0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800479c:	2301      	movs	r3, #1
 800479e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80047a0:	4b0f      	ldr	r3, [pc, #60]	; (80047e0 <xTaskResumeAll+0x138>)
 80047a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80047a6:	601a      	str	r2, [r3, #0]
 80047a8:	f3bf 8f4f 	dsb	sy
 80047ac:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80047b0:	f001 f8e0 	bl	8005974 <vPortExitCritical>

	return xAlreadyYielded;
 80047b4:	68bb      	ldr	r3, [r7, #8]
}
 80047b6:	4618      	mov	r0, r3
 80047b8:	3710      	adds	r7, #16
 80047ba:	46bd      	mov	sp, r7
 80047bc:	bd80      	pop	{r7, pc}
 80047be:	bf00      	nop
 80047c0:	20000f34 	.word	0x20000f34
 80047c4:	20000f0c 	.word	0x20000f0c
 80047c8:	20000ecc 	.word	0x20000ecc
 80047cc:	20000f14 	.word	0x20000f14
 80047d0:	20000a3c 	.word	0x20000a3c
 80047d4:	20000a38 	.word	0x20000a38
 80047d8:	20000f20 	.word	0x20000f20
 80047dc:	20000f1c 	.word	0x20000f1c
 80047e0:	e000ed04 	.word	0xe000ed04

080047e4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80047e4:	b480      	push	{r7}
 80047e6:	b083      	sub	sp, #12
 80047e8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80047ea:	4b05      	ldr	r3, [pc, #20]	; (8004800 <xTaskGetTickCount+0x1c>)
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80047f0:	687b      	ldr	r3, [r7, #4]
}
 80047f2:	4618      	mov	r0, r3
 80047f4:	370c      	adds	r7, #12
 80047f6:	46bd      	mov	sp, r7
 80047f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fc:	4770      	bx	lr
 80047fe:	bf00      	nop
 8004800:	20000f10 	.word	0x20000f10

08004804 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004804:	b580      	push	{r7, lr}
 8004806:	b086      	sub	sp, #24
 8004808:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800480a:	2300      	movs	r3, #0
 800480c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800480e:	4b4f      	ldr	r3, [pc, #316]	; (800494c <xTaskIncrementTick+0x148>)
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	2b00      	cmp	r3, #0
 8004814:	f040 808f 	bne.w	8004936 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004818:	4b4d      	ldr	r3, [pc, #308]	; (8004950 <xTaskIncrementTick+0x14c>)
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	3301      	adds	r3, #1
 800481e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004820:	4a4b      	ldr	r2, [pc, #300]	; (8004950 <xTaskIncrementTick+0x14c>)
 8004822:	693b      	ldr	r3, [r7, #16]
 8004824:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004826:	693b      	ldr	r3, [r7, #16]
 8004828:	2b00      	cmp	r3, #0
 800482a:	d120      	bne.n	800486e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800482c:	4b49      	ldr	r3, [pc, #292]	; (8004954 <xTaskIncrementTick+0x150>)
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	2b00      	cmp	r3, #0
 8004834:	d00a      	beq.n	800484c <xTaskIncrementTick+0x48>
	__asm volatile
 8004836:	f04f 0350 	mov.w	r3, #80	; 0x50
 800483a:	f383 8811 	msr	BASEPRI, r3
 800483e:	f3bf 8f6f 	isb	sy
 8004842:	f3bf 8f4f 	dsb	sy
 8004846:	603b      	str	r3, [r7, #0]
}
 8004848:	bf00      	nop
 800484a:	e7fe      	b.n	800484a <xTaskIncrementTick+0x46>
 800484c:	4b41      	ldr	r3, [pc, #260]	; (8004954 <xTaskIncrementTick+0x150>)
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	60fb      	str	r3, [r7, #12]
 8004852:	4b41      	ldr	r3, [pc, #260]	; (8004958 <xTaskIncrementTick+0x154>)
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	4a3f      	ldr	r2, [pc, #252]	; (8004954 <xTaskIncrementTick+0x150>)
 8004858:	6013      	str	r3, [r2, #0]
 800485a:	4a3f      	ldr	r2, [pc, #252]	; (8004958 <xTaskIncrementTick+0x154>)
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	6013      	str	r3, [r2, #0]
 8004860:	4b3e      	ldr	r3, [pc, #248]	; (800495c <xTaskIncrementTick+0x158>)
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	3301      	adds	r3, #1
 8004866:	4a3d      	ldr	r2, [pc, #244]	; (800495c <xTaskIncrementTick+0x158>)
 8004868:	6013      	str	r3, [r2, #0]
 800486a:	f000 fadb 	bl	8004e24 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800486e:	4b3c      	ldr	r3, [pc, #240]	; (8004960 <xTaskIncrementTick+0x15c>)
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	693a      	ldr	r2, [r7, #16]
 8004874:	429a      	cmp	r2, r3
 8004876:	d349      	bcc.n	800490c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004878:	4b36      	ldr	r3, [pc, #216]	; (8004954 <xTaskIncrementTick+0x150>)
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	2b00      	cmp	r3, #0
 8004880:	d104      	bne.n	800488c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004882:	4b37      	ldr	r3, [pc, #220]	; (8004960 <xTaskIncrementTick+0x15c>)
 8004884:	f04f 32ff 	mov.w	r2, #4294967295
 8004888:	601a      	str	r2, [r3, #0]
					break;
 800488a:	e03f      	b.n	800490c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800488c:	4b31      	ldr	r3, [pc, #196]	; (8004954 <xTaskIncrementTick+0x150>)
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	68db      	ldr	r3, [r3, #12]
 8004892:	68db      	ldr	r3, [r3, #12]
 8004894:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004896:	68bb      	ldr	r3, [r7, #8]
 8004898:	685b      	ldr	r3, [r3, #4]
 800489a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800489c:	693a      	ldr	r2, [r7, #16]
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	429a      	cmp	r2, r3
 80048a2:	d203      	bcs.n	80048ac <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80048a4:	4a2e      	ldr	r2, [pc, #184]	; (8004960 <xTaskIncrementTick+0x15c>)
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80048aa:	e02f      	b.n	800490c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80048ac:	68bb      	ldr	r3, [r7, #8]
 80048ae:	3304      	adds	r3, #4
 80048b0:	4618      	mov	r0, r3
 80048b2:	f7fe ff79 	bl	80037a8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80048b6:	68bb      	ldr	r3, [r7, #8]
 80048b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d004      	beq.n	80048c8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80048be:	68bb      	ldr	r3, [r7, #8]
 80048c0:	3318      	adds	r3, #24
 80048c2:	4618      	mov	r0, r3
 80048c4:	f7fe ff70 	bl	80037a8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80048c8:	68bb      	ldr	r3, [r7, #8]
 80048ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048cc:	4b25      	ldr	r3, [pc, #148]	; (8004964 <xTaskIncrementTick+0x160>)
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	429a      	cmp	r2, r3
 80048d2:	d903      	bls.n	80048dc <xTaskIncrementTick+0xd8>
 80048d4:	68bb      	ldr	r3, [r7, #8]
 80048d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048d8:	4a22      	ldr	r2, [pc, #136]	; (8004964 <xTaskIncrementTick+0x160>)
 80048da:	6013      	str	r3, [r2, #0]
 80048dc:	68bb      	ldr	r3, [r7, #8]
 80048de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048e0:	4613      	mov	r3, r2
 80048e2:	009b      	lsls	r3, r3, #2
 80048e4:	4413      	add	r3, r2
 80048e6:	009b      	lsls	r3, r3, #2
 80048e8:	4a1f      	ldr	r2, [pc, #124]	; (8004968 <xTaskIncrementTick+0x164>)
 80048ea:	441a      	add	r2, r3
 80048ec:	68bb      	ldr	r3, [r7, #8]
 80048ee:	3304      	adds	r3, #4
 80048f0:	4619      	mov	r1, r3
 80048f2:	4610      	mov	r0, r2
 80048f4:	f7fe fefb 	bl	80036ee <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80048f8:	68bb      	ldr	r3, [r7, #8]
 80048fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048fc:	4b1b      	ldr	r3, [pc, #108]	; (800496c <xTaskIncrementTick+0x168>)
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004902:	429a      	cmp	r2, r3
 8004904:	d3b8      	bcc.n	8004878 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8004906:	2301      	movs	r3, #1
 8004908:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800490a:	e7b5      	b.n	8004878 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800490c:	4b17      	ldr	r3, [pc, #92]	; (800496c <xTaskIncrementTick+0x168>)
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004912:	4915      	ldr	r1, [pc, #84]	; (8004968 <xTaskIncrementTick+0x164>)
 8004914:	4613      	mov	r3, r2
 8004916:	009b      	lsls	r3, r3, #2
 8004918:	4413      	add	r3, r2
 800491a:	009b      	lsls	r3, r3, #2
 800491c:	440b      	add	r3, r1
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	2b01      	cmp	r3, #1
 8004922:	d901      	bls.n	8004928 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8004924:	2301      	movs	r3, #1
 8004926:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8004928:	4b11      	ldr	r3, [pc, #68]	; (8004970 <xTaskIncrementTick+0x16c>)
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	2b00      	cmp	r3, #0
 800492e:	d007      	beq.n	8004940 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8004930:	2301      	movs	r3, #1
 8004932:	617b      	str	r3, [r7, #20]
 8004934:	e004      	b.n	8004940 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004936:	4b0f      	ldr	r3, [pc, #60]	; (8004974 <xTaskIncrementTick+0x170>)
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	3301      	adds	r3, #1
 800493c:	4a0d      	ldr	r2, [pc, #52]	; (8004974 <xTaskIncrementTick+0x170>)
 800493e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8004940:	697b      	ldr	r3, [r7, #20]
}
 8004942:	4618      	mov	r0, r3
 8004944:	3718      	adds	r7, #24
 8004946:	46bd      	mov	sp, r7
 8004948:	bd80      	pop	{r7, pc}
 800494a:	bf00      	nop
 800494c:	20000f34 	.word	0x20000f34
 8004950:	20000f10 	.word	0x20000f10
 8004954:	20000ec4 	.word	0x20000ec4
 8004958:	20000ec8 	.word	0x20000ec8
 800495c:	20000f24 	.word	0x20000f24
 8004960:	20000f2c 	.word	0x20000f2c
 8004964:	20000f14 	.word	0x20000f14
 8004968:	20000a3c 	.word	0x20000a3c
 800496c:	20000a38 	.word	0x20000a38
 8004970:	20000f20 	.word	0x20000f20
 8004974:	20000f1c 	.word	0x20000f1c

08004978 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004978:	b480      	push	{r7}
 800497a:	b085      	sub	sp, #20
 800497c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800497e:	4b2a      	ldr	r3, [pc, #168]	; (8004a28 <vTaskSwitchContext+0xb0>)
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	2b00      	cmp	r3, #0
 8004984:	d003      	beq.n	800498e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004986:	4b29      	ldr	r3, [pc, #164]	; (8004a2c <vTaskSwitchContext+0xb4>)
 8004988:	2201      	movs	r2, #1
 800498a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800498c:	e046      	b.n	8004a1c <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800498e:	4b27      	ldr	r3, [pc, #156]	; (8004a2c <vTaskSwitchContext+0xb4>)
 8004990:	2200      	movs	r2, #0
 8004992:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004994:	4b26      	ldr	r3, [pc, #152]	; (8004a30 <vTaskSwitchContext+0xb8>)
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	60fb      	str	r3, [r7, #12]
 800499a:	e010      	b.n	80049be <vTaskSwitchContext+0x46>
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d10a      	bne.n	80049b8 <vTaskSwitchContext+0x40>
	__asm volatile
 80049a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049a6:	f383 8811 	msr	BASEPRI, r3
 80049aa:	f3bf 8f6f 	isb	sy
 80049ae:	f3bf 8f4f 	dsb	sy
 80049b2:	607b      	str	r3, [r7, #4]
}
 80049b4:	bf00      	nop
 80049b6:	e7fe      	b.n	80049b6 <vTaskSwitchContext+0x3e>
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	3b01      	subs	r3, #1
 80049bc:	60fb      	str	r3, [r7, #12]
 80049be:	491d      	ldr	r1, [pc, #116]	; (8004a34 <vTaskSwitchContext+0xbc>)
 80049c0:	68fa      	ldr	r2, [r7, #12]
 80049c2:	4613      	mov	r3, r2
 80049c4:	009b      	lsls	r3, r3, #2
 80049c6:	4413      	add	r3, r2
 80049c8:	009b      	lsls	r3, r3, #2
 80049ca:	440b      	add	r3, r1
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d0e4      	beq.n	800499c <vTaskSwitchContext+0x24>
 80049d2:	68fa      	ldr	r2, [r7, #12]
 80049d4:	4613      	mov	r3, r2
 80049d6:	009b      	lsls	r3, r3, #2
 80049d8:	4413      	add	r3, r2
 80049da:	009b      	lsls	r3, r3, #2
 80049dc:	4a15      	ldr	r2, [pc, #84]	; (8004a34 <vTaskSwitchContext+0xbc>)
 80049de:	4413      	add	r3, r2
 80049e0:	60bb      	str	r3, [r7, #8]
 80049e2:	68bb      	ldr	r3, [r7, #8]
 80049e4:	685b      	ldr	r3, [r3, #4]
 80049e6:	685a      	ldr	r2, [r3, #4]
 80049e8:	68bb      	ldr	r3, [r7, #8]
 80049ea:	605a      	str	r2, [r3, #4]
 80049ec:	68bb      	ldr	r3, [r7, #8]
 80049ee:	685a      	ldr	r2, [r3, #4]
 80049f0:	68bb      	ldr	r3, [r7, #8]
 80049f2:	3308      	adds	r3, #8
 80049f4:	429a      	cmp	r2, r3
 80049f6:	d104      	bne.n	8004a02 <vTaskSwitchContext+0x8a>
 80049f8:	68bb      	ldr	r3, [r7, #8]
 80049fa:	685b      	ldr	r3, [r3, #4]
 80049fc:	685a      	ldr	r2, [r3, #4]
 80049fe:	68bb      	ldr	r3, [r7, #8]
 8004a00:	605a      	str	r2, [r3, #4]
 8004a02:	68bb      	ldr	r3, [r7, #8]
 8004a04:	685b      	ldr	r3, [r3, #4]
 8004a06:	68db      	ldr	r3, [r3, #12]
 8004a08:	4a0b      	ldr	r2, [pc, #44]	; (8004a38 <vTaskSwitchContext+0xc0>)
 8004a0a:	6013      	str	r3, [r2, #0]
 8004a0c:	4a08      	ldr	r2, [pc, #32]	; (8004a30 <vTaskSwitchContext+0xb8>)
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004a12:	4b09      	ldr	r3, [pc, #36]	; (8004a38 <vTaskSwitchContext+0xc0>)
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	3354      	adds	r3, #84	; 0x54
 8004a18:	4a08      	ldr	r2, [pc, #32]	; (8004a3c <vTaskSwitchContext+0xc4>)
 8004a1a:	6013      	str	r3, [r2, #0]
}
 8004a1c:	bf00      	nop
 8004a1e:	3714      	adds	r7, #20
 8004a20:	46bd      	mov	sp, r7
 8004a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a26:	4770      	bx	lr
 8004a28:	20000f34 	.word	0x20000f34
 8004a2c:	20000f20 	.word	0x20000f20
 8004a30:	20000f14 	.word	0x20000f14
 8004a34:	20000a3c 	.word	0x20000a3c
 8004a38:	20000a38 	.word	0x20000a38
 8004a3c:	20000184 	.word	0x20000184

08004a40 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004a40:	b580      	push	{r7, lr}
 8004a42:	b084      	sub	sp, #16
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	6078      	str	r0, [r7, #4]
 8004a48:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d10a      	bne.n	8004a66 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8004a50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a54:	f383 8811 	msr	BASEPRI, r3
 8004a58:	f3bf 8f6f 	isb	sy
 8004a5c:	f3bf 8f4f 	dsb	sy
 8004a60:	60fb      	str	r3, [r7, #12]
}
 8004a62:	bf00      	nop
 8004a64:	e7fe      	b.n	8004a64 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004a66:	4b07      	ldr	r3, [pc, #28]	; (8004a84 <vTaskPlaceOnEventList+0x44>)
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	3318      	adds	r3, #24
 8004a6c:	4619      	mov	r1, r3
 8004a6e:	6878      	ldr	r0, [r7, #4]
 8004a70:	f7fe fe61 	bl	8003736 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004a74:	2101      	movs	r1, #1
 8004a76:	6838      	ldr	r0, [r7, #0]
 8004a78:	f000 fa80 	bl	8004f7c <prvAddCurrentTaskToDelayedList>
}
 8004a7c:	bf00      	nop
 8004a7e:	3710      	adds	r7, #16
 8004a80:	46bd      	mov	sp, r7
 8004a82:	bd80      	pop	{r7, pc}
 8004a84:	20000a38 	.word	0x20000a38

08004a88 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004a88:	b580      	push	{r7, lr}
 8004a8a:	b086      	sub	sp, #24
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	60f8      	str	r0, [r7, #12]
 8004a90:	60b9      	str	r1, [r7, #8]
 8004a92:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d10a      	bne.n	8004ab0 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8004a9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a9e:	f383 8811 	msr	BASEPRI, r3
 8004aa2:	f3bf 8f6f 	isb	sy
 8004aa6:	f3bf 8f4f 	dsb	sy
 8004aaa:	617b      	str	r3, [r7, #20]
}
 8004aac:	bf00      	nop
 8004aae:	e7fe      	b.n	8004aae <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004ab0:	4b0a      	ldr	r3, [pc, #40]	; (8004adc <vTaskPlaceOnEventListRestricted+0x54>)
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	3318      	adds	r3, #24
 8004ab6:	4619      	mov	r1, r3
 8004ab8:	68f8      	ldr	r0, [r7, #12]
 8004aba:	f7fe fe18 	bl	80036ee <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d002      	beq.n	8004aca <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8004ac4:	f04f 33ff 	mov.w	r3, #4294967295
 8004ac8:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004aca:	6879      	ldr	r1, [r7, #4]
 8004acc:	68b8      	ldr	r0, [r7, #8]
 8004ace:	f000 fa55 	bl	8004f7c <prvAddCurrentTaskToDelayedList>
	}
 8004ad2:	bf00      	nop
 8004ad4:	3718      	adds	r7, #24
 8004ad6:	46bd      	mov	sp, r7
 8004ad8:	bd80      	pop	{r7, pc}
 8004ada:	bf00      	nop
 8004adc:	20000a38 	.word	0x20000a38

08004ae0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004ae0:	b580      	push	{r7, lr}
 8004ae2:	b086      	sub	sp, #24
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	68db      	ldr	r3, [r3, #12]
 8004aec:	68db      	ldr	r3, [r3, #12]
 8004aee:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004af0:	693b      	ldr	r3, [r7, #16]
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d10a      	bne.n	8004b0c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8004af6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004afa:	f383 8811 	msr	BASEPRI, r3
 8004afe:	f3bf 8f6f 	isb	sy
 8004b02:	f3bf 8f4f 	dsb	sy
 8004b06:	60fb      	str	r3, [r7, #12]
}
 8004b08:	bf00      	nop
 8004b0a:	e7fe      	b.n	8004b0a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004b0c:	693b      	ldr	r3, [r7, #16]
 8004b0e:	3318      	adds	r3, #24
 8004b10:	4618      	mov	r0, r3
 8004b12:	f7fe fe49 	bl	80037a8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004b16:	4b1e      	ldr	r3, [pc, #120]	; (8004b90 <xTaskRemoveFromEventList+0xb0>)
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d11d      	bne.n	8004b5a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004b1e:	693b      	ldr	r3, [r7, #16]
 8004b20:	3304      	adds	r3, #4
 8004b22:	4618      	mov	r0, r3
 8004b24:	f7fe fe40 	bl	80037a8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004b28:	693b      	ldr	r3, [r7, #16]
 8004b2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b2c:	4b19      	ldr	r3, [pc, #100]	; (8004b94 <xTaskRemoveFromEventList+0xb4>)
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	429a      	cmp	r2, r3
 8004b32:	d903      	bls.n	8004b3c <xTaskRemoveFromEventList+0x5c>
 8004b34:	693b      	ldr	r3, [r7, #16]
 8004b36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b38:	4a16      	ldr	r2, [pc, #88]	; (8004b94 <xTaskRemoveFromEventList+0xb4>)
 8004b3a:	6013      	str	r3, [r2, #0]
 8004b3c:	693b      	ldr	r3, [r7, #16]
 8004b3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b40:	4613      	mov	r3, r2
 8004b42:	009b      	lsls	r3, r3, #2
 8004b44:	4413      	add	r3, r2
 8004b46:	009b      	lsls	r3, r3, #2
 8004b48:	4a13      	ldr	r2, [pc, #76]	; (8004b98 <xTaskRemoveFromEventList+0xb8>)
 8004b4a:	441a      	add	r2, r3
 8004b4c:	693b      	ldr	r3, [r7, #16]
 8004b4e:	3304      	adds	r3, #4
 8004b50:	4619      	mov	r1, r3
 8004b52:	4610      	mov	r0, r2
 8004b54:	f7fe fdcb 	bl	80036ee <vListInsertEnd>
 8004b58:	e005      	b.n	8004b66 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004b5a:	693b      	ldr	r3, [r7, #16]
 8004b5c:	3318      	adds	r3, #24
 8004b5e:	4619      	mov	r1, r3
 8004b60:	480e      	ldr	r0, [pc, #56]	; (8004b9c <xTaskRemoveFromEventList+0xbc>)
 8004b62:	f7fe fdc4 	bl	80036ee <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004b66:	693b      	ldr	r3, [r7, #16]
 8004b68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b6a:	4b0d      	ldr	r3, [pc, #52]	; (8004ba0 <xTaskRemoveFromEventList+0xc0>)
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b70:	429a      	cmp	r2, r3
 8004b72:	d905      	bls.n	8004b80 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004b74:	2301      	movs	r3, #1
 8004b76:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004b78:	4b0a      	ldr	r3, [pc, #40]	; (8004ba4 <xTaskRemoveFromEventList+0xc4>)
 8004b7a:	2201      	movs	r2, #1
 8004b7c:	601a      	str	r2, [r3, #0]
 8004b7e:	e001      	b.n	8004b84 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8004b80:	2300      	movs	r3, #0
 8004b82:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8004b84:	697b      	ldr	r3, [r7, #20]
}
 8004b86:	4618      	mov	r0, r3
 8004b88:	3718      	adds	r7, #24
 8004b8a:	46bd      	mov	sp, r7
 8004b8c:	bd80      	pop	{r7, pc}
 8004b8e:	bf00      	nop
 8004b90:	20000f34 	.word	0x20000f34
 8004b94:	20000f14 	.word	0x20000f14
 8004b98:	20000a3c 	.word	0x20000a3c
 8004b9c:	20000ecc 	.word	0x20000ecc
 8004ba0:	20000a38 	.word	0x20000a38
 8004ba4:	20000f20 	.word	0x20000f20

08004ba8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004ba8:	b480      	push	{r7}
 8004baa:	b083      	sub	sp, #12
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004bb0:	4b06      	ldr	r3, [pc, #24]	; (8004bcc <vTaskInternalSetTimeOutState+0x24>)
 8004bb2:	681a      	ldr	r2, [r3, #0]
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004bb8:	4b05      	ldr	r3, [pc, #20]	; (8004bd0 <vTaskInternalSetTimeOutState+0x28>)
 8004bba:	681a      	ldr	r2, [r3, #0]
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	605a      	str	r2, [r3, #4]
}
 8004bc0:	bf00      	nop
 8004bc2:	370c      	adds	r7, #12
 8004bc4:	46bd      	mov	sp, r7
 8004bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bca:	4770      	bx	lr
 8004bcc:	20000f24 	.word	0x20000f24
 8004bd0:	20000f10 	.word	0x20000f10

08004bd4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004bd4:	b580      	push	{r7, lr}
 8004bd6:	b088      	sub	sp, #32
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	6078      	str	r0, [r7, #4]
 8004bdc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d10a      	bne.n	8004bfa <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8004be4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004be8:	f383 8811 	msr	BASEPRI, r3
 8004bec:	f3bf 8f6f 	isb	sy
 8004bf0:	f3bf 8f4f 	dsb	sy
 8004bf4:	613b      	str	r3, [r7, #16]
}
 8004bf6:	bf00      	nop
 8004bf8:	e7fe      	b.n	8004bf8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8004bfa:	683b      	ldr	r3, [r7, #0]
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d10a      	bne.n	8004c16 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8004c00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c04:	f383 8811 	msr	BASEPRI, r3
 8004c08:	f3bf 8f6f 	isb	sy
 8004c0c:	f3bf 8f4f 	dsb	sy
 8004c10:	60fb      	str	r3, [r7, #12]
}
 8004c12:	bf00      	nop
 8004c14:	e7fe      	b.n	8004c14 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8004c16:	f000 fe7d 	bl	8005914 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004c1a:	4b1d      	ldr	r3, [pc, #116]	; (8004c90 <xTaskCheckForTimeOut+0xbc>)
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	685b      	ldr	r3, [r3, #4]
 8004c24:	69ba      	ldr	r2, [r7, #24]
 8004c26:	1ad3      	subs	r3, r2, r3
 8004c28:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004c2a:	683b      	ldr	r3, [r7, #0]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c32:	d102      	bne.n	8004c3a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004c34:	2300      	movs	r3, #0
 8004c36:	61fb      	str	r3, [r7, #28]
 8004c38:	e023      	b.n	8004c82 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681a      	ldr	r2, [r3, #0]
 8004c3e:	4b15      	ldr	r3, [pc, #84]	; (8004c94 <xTaskCheckForTimeOut+0xc0>)
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	429a      	cmp	r2, r3
 8004c44:	d007      	beq.n	8004c56 <xTaskCheckForTimeOut+0x82>
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	685b      	ldr	r3, [r3, #4]
 8004c4a:	69ba      	ldr	r2, [r7, #24]
 8004c4c:	429a      	cmp	r2, r3
 8004c4e:	d302      	bcc.n	8004c56 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004c50:	2301      	movs	r3, #1
 8004c52:	61fb      	str	r3, [r7, #28]
 8004c54:	e015      	b.n	8004c82 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004c56:	683b      	ldr	r3, [r7, #0]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	697a      	ldr	r2, [r7, #20]
 8004c5c:	429a      	cmp	r2, r3
 8004c5e:	d20b      	bcs.n	8004c78 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004c60:	683b      	ldr	r3, [r7, #0]
 8004c62:	681a      	ldr	r2, [r3, #0]
 8004c64:	697b      	ldr	r3, [r7, #20]
 8004c66:	1ad2      	subs	r2, r2, r3
 8004c68:	683b      	ldr	r3, [r7, #0]
 8004c6a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004c6c:	6878      	ldr	r0, [r7, #4]
 8004c6e:	f7ff ff9b 	bl	8004ba8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004c72:	2300      	movs	r3, #0
 8004c74:	61fb      	str	r3, [r7, #28]
 8004c76:	e004      	b.n	8004c82 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8004c78:	683b      	ldr	r3, [r7, #0]
 8004c7a:	2200      	movs	r2, #0
 8004c7c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004c7e:	2301      	movs	r3, #1
 8004c80:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004c82:	f000 fe77 	bl	8005974 <vPortExitCritical>

	return xReturn;
 8004c86:	69fb      	ldr	r3, [r7, #28]
}
 8004c88:	4618      	mov	r0, r3
 8004c8a:	3720      	adds	r7, #32
 8004c8c:	46bd      	mov	sp, r7
 8004c8e:	bd80      	pop	{r7, pc}
 8004c90:	20000f10 	.word	0x20000f10
 8004c94:	20000f24 	.word	0x20000f24

08004c98 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004c98:	b480      	push	{r7}
 8004c9a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004c9c:	4b03      	ldr	r3, [pc, #12]	; (8004cac <vTaskMissedYield+0x14>)
 8004c9e:	2201      	movs	r2, #1
 8004ca0:	601a      	str	r2, [r3, #0]
}
 8004ca2:	bf00      	nop
 8004ca4:	46bd      	mov	sp, r7
 8004ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004caa:	4770      	bx	lr
 8004cac:	20000f20 	.word	0x20000f20

08004cb0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004cb0:	b580      	push	{r7, lr}
 8004cb2:	b082      	sub	sp, #8
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004cb8:	f000 f852 	bl	8004d60 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004cbc:	4b06      	ldr	r3, [pc, #24]	; (8004cd8 <prvIdleTask+0x28>)
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	2b01      	cmp	r3, #1
 8004cc2:	d9f9      	bls.n	8004cb8 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004cc4:	4b05      	ldr	r3, [pc, #20]	; (8004cdc <prvIdleTask+0x2c>)
 8004cc6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004cca:	601a      	str	r2, [r3, #0]
 8004ccc:	f3bf 8f4f 	dsb	sy
 8004cd0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004cd4:	e7f0      	b.n	8004cb8 <prvIdleTask+0x8>
 8004cd6:	bf00      	nop
 8004cd8:	20000a3c 	.word	0x20000a3c
 8004cdc:	e000ed04 	.word	0xe000ed04

08004ce0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004ce0:	b580      	push	{r7, lr}
 8004ce2:	b082      	sub	sp, #8
 8004ce4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004ce6:	2300      	movs	r3, #0
 8004ce8:	607b      	str	r3, [r7, #4]
 8004cea:	e00c      	b.n	8004d06 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004cec:	687a      	ldr	r2, [r7, #4]
 8004cee:	4613      	mov	r3, r2
 8004cf0:	009b      	lsls	r3, r3, #2
 8004cf2:	4413      	add	r3, r2
 8004cf4:	009b      	lsls	r3, r3, #2
 8004cf6:	4a12      	ldr	r2, [pc, #72]	; (8004d40 <prvInitialiseTaskLists+0x60>)
 8004cf8:	4413      	add	r3, r2
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	f7fe fcca 	bl	8003694 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	3301      	adds	r3, #1
 8004d04:	607b      	str	r3, [r7, #4]
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	2b37      	cmp	r3, #55	; 0x37
 8004d0a:	d9ef      	bls.n	8004cec <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004d0c:	480d      	ldr	r0, [pc, #52]	; (8004d44 <prvInitialiseTaskLists+0x64>)
 8004d0e:	f7fe fcc1 	bl	8003694 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004d12:	480d      	ldr	r0, [pc, #52]	; (8004d48 <prvInitialiseTaskLists+0x68>)
 8004d14:	f7fe fcbe 	bl	8003694 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004d18:	480c      	ldr	r0, [pc, #48]	; (8004d4c <prvInitialiseTaskLists+0x6c>)
 8004d1a:	f7fe fcbb 	bl	8003694 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004d1e:	480c      	ldr	r0, [pc, #48]	; (8004d50 <prvInitialiseTaskLists+0x70>)
 8004d20:	f7fe fcb8 	bl	8003694 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004d24:	480b      	ldr	r0, [pc, #44]	; (8004d54 <prvInitialiseTaskLists+0x74>)
 8004d26:	f7fe fcb5 	bl	8003694 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004d2a:	4b0b      	ldr	r3, [pc, #44]	; (8004d58 <prvInitialiseTaskLists+0x78>)
 8004d2c:	4a05      	ldr	r2, [pc, #20]	; (8004d44 <prvInitialiseTaskLists+0x64>)
 8004d2e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004d30:	4b0a      	ldr	r3, [pc, #40]	; (8004d5c <prvInitialiseTaskLists+0x7c>)
 8004d32:	4a05      	ldr	r2, [pc, #20]	; (8004d48 <prvInitialiseTaskLists+0x68>)
 8004d34:	601a      	str	r2, [r3, #0]
}
 8004d36:	bf00      	nop
 8004d38:	3708      	adds	r7, #8
 8004d3a:	46bd      	mov	sp, r7
 8004d3c:	bd80      	pop	{r7, pc}
 8004d3e:	bf00      	nop
 8004d40:	20000a3c 	.word	0x20000a3c
 8004d44:	20000e9c 	.word	0x20000e9c
 8004d48:	20000eb0 	.word	0x20000eb0
 8004d4c:	20000ecc 	.word	0x20000ecc
 8004d50:	20000ee0 	.word	0x20000ee0
 8004d54:	20000ef8 	.word	0x20000ef8
 8004d58:	20000ec4 	.word	0x20000ec4
 8004d5c:	20000ec8 	.word	0x20000ec8

08004d60 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004d60:	b580      	push	{r7, lr}
 8004d62:	b082      	sub	sp, #8
 8004d64:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004d66:	e019      	b.n	8004d9c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004d68:	f000 fdd4 	bl	8005914 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004d6c:	4b10      	ldr	r3, [pc, #64]	; (8004db0 <prvCheckTasksWaitingTermination+0x50>)
 8004d6e:	68db      	ldr	r3, [r3, #12]
 8004d70:	68db      	ldr	r3, [r3, #12]
 8004d72:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	3304      	adds	r3, #4
 8004d78:	4618      	mov	r0, r3
 8004d7a:	f7fe fd15 	bl	80037a8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004d7e:	4b0d      	ldr	r3, [pc, #52]	; (8004db4 <prvCheckTasksWaitingTermination+0x54>)
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	3b01      	subs	r3, #1
 8004d84:	4a0b      	ldr	r2, [pc, #44]	; (8004db4 <prvCheckTasksWaitingTermination+0x54>)
 8004d86:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004d88:	4b0b      	ldr	r3, [pc, #44]	; (8004db8 <prvCheckTasksWaitingTermination+0x58>)
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	3b01      	subs	r3, #1
 8004d8e:	4a0a      	ldr	r2, [pc, #40]	; (8004db8 <prvCheckTasksWaitingTermination+0x58>)
 8004d90:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004d92:	f000 fdef 	bl	8005974 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004d96:	6878      	ldr	r0, [r7, #4]
 8004d98:	f000 f810 	bl	8004dbc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004d9c:	4b06      	ldr	r3, [pc, #24]	; (8004db8 <prvCheckTasksWaitingTermination+0x58>)
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d1e1      	bne.n	8004d68 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004da4:	bf00      	nop
 8004da6:	bf00      	nop
 8004da8:	3708      	adds	r7, #8
 8004daa:	46bd      	mov	sp, r7
 8004dac:	bd80      	pop	{r7, pc}
 8004dae:	bf00      	nop
 8004db0:	20000ee0 	.word	0x20000ee0
 8004db4:	20000f0c 	.word	0x20000f0c
 8004db8:	20000ef4 	.word	0x20000ef4

08004dbc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004dbc:	b580      	push	{r7, lr}
 8004dbe:	b084      	sub	sp, #16
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	3354      	adds	r3, #84	; 0x54
 8004dc8:	4618      	mov	r0, r3
 8004dca:	f001 f8c3 	bl	8005f54 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d108      	bne.n	8004dea <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ddc:	4618      	mov	r0, r3
 8004dde:	f000 ff87 	bl	8005cf0 <vPortFree>
				vPortFree( pxTCB );
 8004de2:	6878      	ldr	r0, [r7, #4]
 8004de4:	f000 ff84 	bl	8005cf0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004de8:	e018      	b.n	8004e1c <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8004df0:	2b01      	cmp	r3, #1
 8004df2:	d103      	bne.n	8004dfc <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8004df4:	6878      	ldr	r0, [r7, #4]
 8004df6:	f000 ff7b 	bl	8005cf0 <vPortFree>
	}
 8004dfa:	e00f      	b.n	8004e1c <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8004e02:	2b02      	cmp	r3, #2
 8004e04:	d00a      	beq.n	8004e1c <prvDeleteTCB+0x60>
	__asm volatile
 8004e06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e0a:	f383 8811 	msr	BASEPRI, r3
 8004e0e:	f3bf 8f6f 	isb	sy
 8004e12:	f3bf 8f4f 	dsb	sy
 8004e16:	60fb      	str	r3, [r7, #12]
}
 8004e18:	bf00      	nop
 8004e1a:	e7fe      	b.n	8004e1a <prvDeleteTCB+0x5e>
	}
 8004e1c:	bf00      	nop
 8004e1e:	3710      	adds	r7, #16
 8004e20:	46bd      	mov	sp, r7
 8004e22:	bd80      	pop	{r7, pc}

08004e24 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004e24:	b480      	push	{r7}
 8004e26:	b083      	sub	sp, #12
 8004e28:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004e2a:	4b0c      	ldr	r3, [pc, #48]	; (8004e5c <prvResetNextTaskUnblockTime+0x38>)
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d104      	bne.n	8004e3e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004e34:	4b0a      	ldr	r3, [pc, #40]	; (8004e60 <prvResetNextTaskUnblockTime+0x3c>)
 8004e36:	f04f 32ff 	mov.w	r2, #4294967295
 8004e3a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004e3c:	e008      	b.n	8004e50 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004e3e:	4b07      	ldr	r3, [pc, #28]	; (8004e5c <prvResetNextTaskUnblockTime+0x38>)
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	68db      	ldr	r3, [r3, #12]
 8004e44:	68db      	ldr	r3, [r3, #12]
 8004e46:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	685b      	ldr	r3, [r3, #4]
 8004e4c:	4a04      	ldr	r2, [pc, #16]	; (8004e60 <prvResetNextTaskUnblockTime+0x3c>)
 8004e4e:	6013      	str	r3, [r2, #0]
}
 8004e50:	bf00      	nop
 8004e52:	370c      	adds	r7, #12
 8004e54:	46bd      	mov	sp, r7
 8004e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e5a:	4770      	bx	lr
 8004e5c:	20000ec4 	.word	0x20000ec4
 8004e60:	20000f2c 	.word	0x20000f2c

08004e64 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004e64:	b480      	push	{r7}
 8004e66:	b083      	sub	sp, #12
 8004e68:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004e6a:	4b0b      	ldr	r3, [pc, #44]	; (8004e98 <xTaskGetSchedulerState+0x34>)
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d102      	bne.n	8004e78 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004e72:	2301      	movs	r3, #1
 8004e74:	607b      	str	r3, [r7, #4]
 8004e76:	e008      	b.n	8004e8a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004e78:	4b08      	ldr	r3, [pc, #32]	; (8004e9c <xTaskGetSchedulerState+0x38>)
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d102      	bne.n	8004e86 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004e80:	2302      	movs	r3, #2
 8004e82:	607b      	str	r3, [r7, #4]
 8004e84:	e001      	b.n	8004e8a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004e86:	2300      	movs	r3, #0
 8004e88:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004e8a:	687b      	ldr	r3, [r7, #4]
	}
 8004e8c:	4618      	mov	r0, r3
 8004e8e:	370c      	adds	r7, #12
 8004e90:	46bd      	mov	sp, r7
 8004e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e96:	4770      	bx	lr
 8004e98:	20000f18 	.word	0x20000f18
 8004e9c:	20000f34 	.word	0x20000f34

08004ea0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004ea0:	b580      	push	{r7, lr}
 8004ea2:	b086      	sub	sp, #24
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004eac:	2300      	movs	r3, #0
 8004eae:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d056      	beq.n	8004f64 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004eb6:	4b2e      	ldr	r3, [pc, #184]	; (8004f70 <xTaskPriorityDisinherit+0xd0>)
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	693a      	ldr	r2, [r7, #16]
 8004ebc:	429a      	cmp	r2, r3
 8004ebe:	d00a      	beq.n	8004ed6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8004ec0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ec4:	f383 8811 	msr	BASEPRI, r3
 8004ec8:	f3bf 8f6f 	isb	sy
 8004ecc:	f3bf 8f4f 	dsb	sy
 8004ed0:	60fb      	str	r3, [r7, #12]
}
 8004ed2:	bf00      	nop
 8004ed4:	e7fe      	b.n	8004ed4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004ed6:	693b      	ldr	r3, [r7, #16]
 8004ed8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d10a      	bne.n	8004ef4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8004ede:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ee2:	f383 8811 	msr	BASEPRI, r3
 8004ee6:	f3bf 8f6f 	isb	sy
 8004eea:	f3bf 8f4f 	dsb	sy
 8004eee:	60bb      	str	r3, [r7, #8]
}
 8004ef0:	bf00      	nop
 8004ef2:	e7fe      	b.n	8004ef2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8004ef4:	693b      	ldr	r3, [r7, #16]
 8004ef6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ef8:	1e5a      	subs	r2, r3, #1
 8004efa:	693b      	ldr	r3, [r7, #16]
 8004efc:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004efe:	693b      	ldr	r3, [r7, #16]
 8004f00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f02:	693b      	ldr	r3, [r7, #16]
 8004f04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f06:	429a      	cmp	r2, r3
 8004f08:	d02c      	beq.n	8004f64 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004f0a:	693b      	ldr	r3, [r7, #16]
 8004f0c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d128      	bne.n	8004f64 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004f12:	693b      	ldr	r3, [r7, #16]
 8004f14:	3304      	adds	r3, #4
 8004f16:	4618      	mov	r0, r3
 8004f18:	f7fe fc46 	bl	80037a8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004f1c:	693b      	ldr	r3, [r7, #16]
 8004f1e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004f20:	693b      	ldr	r3, [r7, #16]
 8004f22:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004f24:	693b      	ldr	r3, [r7, #16]
 8004f26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f28:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004f2c:	693b      	ldr	r3, [r7, #16]
 8004f2e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004f30:	693b      	ldr	r3, [r7, #16]
 8004f32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f34:	4b0f      	ldr	r3, [pc, #60]	; (8004f74 <xTaskPriorityDisinherit+0xd4>)
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	429a      	cmp	r2, r3
 8004f3a:	d903      	bls.n	8004f44 <xTaskPriorityDisinherit+0xa4>
 8004f3c:	693b      	ldr	r3, [r7, #16]
 8004f3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f40:	4a0c      	ldr	r2, [pc, #48]	; (8004f74 <xTaskPriorityDisinherit+0xd4>)
 8004f42:	6013      	str	r3, [r2, #0]
 8004f44:	693b      	ldr	r3, [r7, #16]
 8004f46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f48:	4613      	mov	r3, r2
 8004f4a:	009b      	lsls	r3, r3, #2
 8004f4c:	4413      	add	r3, r2
 8004f4e:	009b      	lsls	r3, r3, #2
 8004f50:	4a09      	ldr	r2, [pc, #36]	; (8004f78 <xTaskPriorityDisinherit+0xd8>)
 8004f52:	441a      	add	r2, r3
 8004f54:	693b      	ldr	r3, [r7, #16]
 8004f56:	3304      	adds	r3, #4
 8004f58:	4619      	mov	r1, r3
 8004f5a:	4610      	mov	r0, r2
 8004f5c:	f7fe fbc7 	bl	80036ee <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004f60:	2301      	movs	r3, #1
 8004f62:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004f64:	697b      	ldr	r3, [r7, #20]
	}
 8004f66:	4618      	mov	r0, r3
 8004f68:	3718      	adds	r7, #24
 8004f6a:	46bd      	mov	sp, r7
 8004f6c:	bd80      	pop	{r7, pc}
 8004f6e:	bf00      	nop
 8004f70:	20000a38 	.word	0x20000a38
 8004f74:	20000f14 	.word	0x20000f14
 8004f78:	20000a3c 	.word	0x20000a3c

08004f7c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004f7c:	b580      	push	{r7, lr}
 8004f7e:	b084      	sub	sp, #16
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	6078      	str	r0, [r7, #4]
 8004f84:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004f86:	4b21      	ldr	r3, [pc, #132]	; (800500c <prvAddCurrentTaskToDelayedList+0x90>)
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004f8c:	4b20      	ldr	r3, [pc, #128]	; (8005010 <prvAddCurrentTaskToDelayedList+0x94>)
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	3304      	adds	r3, #4
 8004f92:	4618      	mov	r0, r3
 8004f94:	f7fe fc08 	bl	80037a8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f9e:	d10a      	bne.n	8004fb6 <prvAddCurrentTaskToDelayedList+0x3a>
 8004fa0:	683b      	ldr	r3, [r7, #0]
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d007      	beq.n	8004fb6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004fa6:	4b1a      	ldr	r3, [pc, #104]	; (8005010 <prvAddCurrentTaskToDelayedList+0x94>)
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	3304      	adds	r3, #4
 8004fac:	4619      	mov	r1, r3
 8004fae:	4819      	ldr	r0, [pc, #100]	; (8005014 <prvAddCurrentTaskToDelayedList+0x98>)
 8004fb0:	f7fe fb9d 	bl	80036ee <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004fb4:	e026      	b.n	8005004 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004fb6:	68fa      	ldr	r2, [r7, #12]
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	4413      	add	r3, r2
 8004fbc:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004fbe:	4b14      	ldr	r3, [pc, #80]	; (8005010 <prvAddCurrentTaskToDelayedList+0x94>)
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	68ba      	ldr	r2, [r7, #8]
 8004fc4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004fc6:	68ba      	ldr	r2, [r7, #8]
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	429a      	cmp	r2, r3
 8004fcc:	d209      	bcs.n	8004fe2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004fce:	4b12      	ldr	r3, [pc, #72]	; (8005018 <prvAddCurrentTaskToDelayedList+0x9c>)
 8004fd0:	681a      	ldr	r2, [r3, #0]
 8004fd2:	4b0f      	ldr	r3, [pc, #60]	; (8005010 <prvAddCurrentTaskToDelayedList+0x94>)
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	3304      	adds	r3, #4
 8004fd8:	4619      	mov	r1, r3
 8004fda:	4610      	mov	r0, r2
 8004fdc:	f7fe fbab 	bl	8003736 <vListInsert>
}
 8004fe0:	e010      	b.n	8005004 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004fe2:	4b0e      	ldr	r3, [pc, #56]	; (800501c <prvAddCurrentTaskToDelayedList+0xa0>)
 8004fe4:	681a      	ldr	r2, [r3, #0]
 8004fe6:	4b0a      	ldr	r3, [pc, #40]	; (8005010 <prvAddCurrentTaskToDelayedList+0x94>)
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	3304      	adds	r3, #4
 8004fec:	4619      	mov	r1, r3
 8004fee:	4610      	mov	r0, r2
 8004ff0:	f7fe fba1 	bl	8003736 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004ff4:	4b0a      	ldr	r3, [pc, #40]	; (8005020 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	68ba      	ldr	r2, [r7, #8]
 8004ffa:	429a      	cmp	r2, r3
 8004ffc:	d202      	bcs.n	8005004 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8004ffe:	4a08      	ldr	r2, [pc, #32]	; (8005020 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005000:	68bb      	ldr	r3, [r7, #8]
 8005002:	6013      	str	r3, [r2, #0]
}
 8005004:	bf00      	nop
 8005006:	3710      	adds	r7, #16
 8005008:	46bd      	mov	sp, r7
 800500a:	bd80      	pop	{r7, pc}
 800500c:	20000f10 	.word	0x20000f10
 8005010:	20000a38 	.word	0x20000a38
 8005014:	20000ef8 	.word	0x20000ef8
 8005018:	20000ec8 	.word	0x20000ec8
 800501c:	20000ec4 	.word	0x20000ec4
 8005020:	20000f2c 	.word	0x20000f2c

08005024 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005024:	b580      	push	{r7, lr}
 8005026:	b08a      	sub	sp, #40	; 0x28
 8005028:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800502a:	2300      	movs	r3, #0
 800502c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800502e:	f000 fb07 	bl	8005640 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005032:	4b1c      	ldr	r3, [pc, #112]	; (80050a4 <xTimerCreateTimerTask+0x80>)
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	2b00      	cmp	r3, #0
 8005038:	d021      	beq.n	800507e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800503a:	2300      	movs	r3, #0
 800503c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800503e:	2300      	movs	r3, #0
 8005040:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005042:	1d3a      	adds	r2, r7, #4
 8005044:	f107 0108 	add.w	r1, r7, #8
 8005048:	f107 030c 	add.w	r3, r7, #12
 800504c:	4618      	mov	r0, r3
 800504e:	f7fe fb07 	bl	8003660 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005052:	6879      	ldr	r1, [r7, #4]
 8005054:	68bb      	ldr	r3, [r7, #8]
 8005056:	68fa      	ldr	r2, [r7, #12]
 8005058:	9202      	str	r2, [sp, #8]
 800505a:	9301      	str	r3, [sp, #4]
 800505c:	2302      	movs	r3, #2
 800505e:	9300      	str	r3, [sp, #0]
 8005060:	2300      	movs	r3, #0
 8005062:	460a      	mov	r2, r1
 8005064:	4910      	ldr	r1, [pc, #64]	; (80050a8 <xTimerCreateTimerTask+0x84>)
 8005066:	4811      	ldr	r0, [pc, #68]	; (80050ac <xTimerCreateTimerTask+0x88>)
 8005068:	f7ff f8b4 	bl	80041d4 <xTaskCreateStatic>
 800506c:	4603      	mov	r3, r0
 800506e:	4a10      	ldr	r2, [pc, #64]	; (80050b0 <xTimerCreateTimerTask+0x8c>)
 8005070:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8005072:	4b0f      	ldr	r3, [pc, #60]	; (80050b0 <xTimerCreateTimerTask+0x8c>)
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	2b00      	cmp	r3, #0
 8005078:	d001      	beq.n	800507e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800507a:	2301      	movs	r3, #1
 800507c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800507e:	697b      	ldr	r3, [r7, #20]
 8005080:	2b00      	cmp	r3, #0
 8005082:	d10a      	bne.n	800509a <xTimerCreateTimerTask+0x76>
	__asm volatile
 8005084:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005088:	f383 8811 	msr	BASEPRI, r3
 800508c:	f3bf 8f6f 	isb	sy
 8005090:	f3bf 8f4f 	dsb	sy
 8005094:	613b      	str	r3, [r7, #16]
}
 8005096:	bf00      	nop
 8005098:	e7fe      	b.n	8005098 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800509a:	697b      	ldr	r3, [r7, #20]
}
 800509c:	4618      	mov	r0, r3
 800509e:	3718      	adds	r7, #24
 80050a0:	46bd      	mov	sp, r7
 80050a2:	bd80      	pop	{r7, pc}
 80050a4:	20000f68 	.word	0x20000f68
 80050a8:	0800612c 	.word	0x0800612c
 80050ac:	080051e9 	.word	0x080051e9
 80050b0:	20000f6c 	.word	0x20000f6c

080050b4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80050b4:	b580      	push	{r7, lr}
 80050b6:	b08a      	sub	sp, #40	; 0x28
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	60f8      	str	r0, [r7, #12]
 80050bc:	60b9      	str	r1, [r7, #8]
 80050be:	607a      	str	r2, [r7, #4]
 80050c0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80050c2:	2300      	movs	r3, #0
 80050c4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d10a      	bne.n	80050e2 <xTimerGenericCommand+0x2e>
	__asm volatile
 80050cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050d0:	f383 8811 	msr	BASEPRI, r3
 80050d4:	f3bf 8f6f 	isb	sy
 80050d8:	f3bf 8f4f 	dsb	sy
 80050dc:	623b      	str	r3, [r7, #32]
}
 80050de:	bf00      	nop
 80050e0:	e7fe      	b.n	80050e0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80050e2:	4b1a      	ldr	r3, [pc, #104]	; (800514c <xTimerGenericCommand+0x98>)
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d02a      	beq.n	8005140 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80050ea:	68bb      	ldr	r3, [r7, #8]
 80050ec:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80050f6:	68bb      	ldr	r3, [r7, #8]
 80050f8:	2b05      	cmp	r3, #5
 80050fa:	dc18      	bgt.n	800512e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80050fc:	f7ff feb2 	bl	8004e64 <xTaskGetSchedulerState>
 8005100:	4603      	mov	r3, r0
 8005102:	2b02      	cmp	r3, #2
 8005104:	d109      	bne.n	800511a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005106:	4b11      	ldr	r3, [pc, #68]	; (800514c <xTimerGenericCommand+0x98>)
 8005108:	6818      	ldr	r0, [r3, #0]
 800510a:	f107 0110 	add.w	r1, r7, #16
 800510e:	2300      	movs	r3, #0
 8005110:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005112:	f7fe fc77 	bl	8003a04 <xQueueGenericSend>
 8005116:	6278      	str	r0, [r7, #36]	; 0x24
 8005118:	e012      	b.n	8005140 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800511a:	4b0c      	ldr	r3, [pc, #48]	; (800514c <xTimerGenericCommand+0x98>)
 800511c:	6818      	ldr	r0, [r3, #0]
 800511e:	f107 0110 	add.w	r1, r7, #16
 8005122:	2300      	movs	r3, #0
 8005124:	2200      	movs	r2, #0
 8005126:	f7fe fc6d 	bl	8003a04 <xQueueGenericSend>
 800512a:	6278      	str	r0, [r7, #36]	; 0x24
 800512c:	e008      	b.n	8005140 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800512e:	4b07      	ldr	r3, [pc, #28]	; (800514c <xTimerGenericCommand+0x98>)
 8005130:	6818      	ldr	r0, [r3, #0]
 8005132:	f107 0110 	add.w	r1, r7, #16
 8005136:	2300      	movs	r3, #0
 8005138:	683a      	ldr	r2, [r7, #0]
 800513a:	f7fe fd61 	bl	8003c00 <xQueueGenericSendFromISR>
 800513e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005142:	4618      	mov	r0, r3
 8005144:	3728      	adds	r7, #40	; 0x28
 8005146:	46bd      	mov	sp, r7
 8005148:	bd80      	pop	{r7, pc}
 800514a:	bf00      	nop
 800514c:	20000f68 	.word	0x20000f68

08005150 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005150:	b580      	push	{r7, lr}
 8005152:	b088      	sub	sp, #32
 8005154:	af02      	add	r7, sp, #8
 8005156:	6078      	str	r0, [r7, #4]
 8005158:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800515a:	4b22      	ldr	r3, [pc, #136]	; (80051e4 <prvProcessExpiredTimer+0x94>)
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	68db      	ldr	r3, [r3, #12]
 8005160:	68db      	ldr	r3, [r3, #12]
 8005162:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005164:	697b      	ldr	r3, [r7, #20]
 8005166:	3304      	adds	r3, #4
 8005168:	4618      	mov	r0, r3
 800516a:	f7fe fb1d 	bl	80037a8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800516e:	697b      	ldr	r3, [r7, #20]
 8005170:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005174:	f003 0304 	and.w	r3, r3, #4
 8005178:	2b00      	cmp	r3, #0
 800517a:	d022      	beq.n	80051c2 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800517c:	697b      	ldr	r3, [r7, #20]
 800517e:	699a      	ldr	r2, [r3, #24]
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	18d1      	adds	r1, r2, r3
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	683a      	ldr	r2, [r7, #0]
 8005188:	6978      	ldr	r0, [r7, #20]
 800518a:	f000 f8d1 	bl	8005330 <prvInsertTimerInActiveList>
 800518e:	4603      	mov	r3, r0
 8005190:	2b00      	cmp	r3, #0
 8005192:	d01f      	beq.n	80051d4 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005194:	2300      	movs	r3, #0
 8005196:	9300      	str	r3, [sp, #0]
 8005198:	2300      	movs	r3, #0
 800519a:	687a      	ldr	r2, [r7, #4]
 800519c:	2100      	movs	r1, #0
 800519e:	6978      	ldr	r0, [r7, #20]
 80051a0:	f7ff ff88 	bl	80050b4 <xTimerGenericCommand>
 80051a4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80051a6:	693b      	ldr	r3, [r7, #16]
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d113      	bne.n	80051d4 <prvProcessExpiredTimer+0x84>
	__asm volatile
 80051ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051b0:	f383 8811 	msr	BASEPRI, r3
 80051b4:	f3bf 8f6f 	isb	sy
 80051b8:	f3bf 8f4f 	dsb	sy
 80051bc:	60fb      	str	r3, [r7, #12]
}
 80051be:	bf00      	nop
 80051c0:	e7fe      	b.n	80051c0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80051c2:	697b      	ldr	r3, [r7, #20]
 80051c4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80051c8:	f023 0301 	bic.w	r3, r3, #1
 80051cc:	b2da      	uxtb	r2, r3
 80051ce:	697b      	ldr	r3, [r7, #20]
 80051d0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80051d4:	697b      	ldr	r3, [r7, #20]
 80051d6:	6a1b      	ldr	r3, [r3, #32]
 80051d8:	6978      	ldr	r0, [r7, #20]
 80051da:	4798      	blx	r3
}
 80051dc:	bf00      	nop
 80051de:	3718      	adds	r7, #24
 80051e0:	46bd      	mov	sp, r7
 80051e2:	bd80      	pop	{r7, pc}
 80051e4:	20000f60 	.word	0x20000f60

080051e8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80051e8:	b580      	push	{r7, lr}
 80051ea:	b084      	sub	sp, #16
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80051f0:	f107 0308 	add.w	r3, r7, #8
 80051f4:	4618      	mov	r0, r3
 80051f6:	f000 f857 	bl	80052a8 <prvGetNextExpireTime>
 80051fa:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80051fc:	68bb      	ldr	r3, [r7, #8]
 80051fe:	4619      	mov	r1, r3
 8005200:	68f8      	ldr	r0, [r7, #12]
 8005202:	f000 f803 	bl	800520c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8005206:	f000 f8d5 	bl	80053b4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800520a:	e7f1      	b.n	80051f0 <prvTimerTask+0x8>

0800520c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800520c:	b580      	push	{r7, lr}
 800520e:	b084      	sub	sp, #16
 8005210:	af00      	add	r7, sp, #0
 8005212:	6078      	str	r0, [r7, #4]
 8005214:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8005216:	f7ff fa39 	bl	800468c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800521a:	f107 0308 	add.w	r3, r7, #8
 800521e:	4618      	mov	r0, r3
 8005220:	f000 f866 	bl	80052f0 <prvSampleTimeNow>
 8005224:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8005226:	68bb      	ldr	r3, [r7, #8]
 8005228:	2b00      	cmp	r3, #0
 800522a:	d130      	bne.n	800528e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800522c:	683b      	ldr	r3, [r7, #0]
 800522e:	2b00      	cmp	r3, #0
 8005230:	d10a      	bne.n	8005248 <prvProcessTimerOrBlockTask+0x3c>
 8005232:	687a      	ldr	r2, [r7, #4]
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	429a      	cmp	r2, r3
 8005238:	d806      	bhi.n	8005248 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800523a:	f7ff fa35 	bl	80046a8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800523e:	68f9      	ldr	r1, [r7, #12]
 8005240:	6878      	ldr	r0, [r7, #4]
 8005242:	f7ff ff85 	bl	8005150 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8005246:	e024      	b.n	8005292 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005248:	683b      	ldr	r3, [r7, #0]
 800524a:	2b00      	cmp	r3, #0
 800524c:	d008      	beq.n	8005260 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800524e:	4b13      	ldr	r3, [pc, #76]	; (800529c <prvProcessTimerOrBlockTask+0x90>)
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	2b00      	cmp	r3, #0
 8005256:	d101      	bne.n	800525c <prvProcessTimerOrBlockTask+0x50>
 8005258:	2301      	movs	r3, #1
 800525a:	e000      	b.n	800525e <prvProcessTimerOrBlockTask+0x52>
 800525c:	2300      	movs	r3, #0
 800525e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005260:	4b0f      	ldr	r3, [pc, #60]	; (80052a0 <prvProcessTimerOrBlockTask+0x94>)
 8005262:	6818      	ldr	r0, [r3, #0]
 8005264:	687a      	ldr	r2, [r7, #4]
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	1ad3      	subs	r3, r2, r3
 800526a:	683a      	ldr	r2, [r7, #0]
 800526c:	4619      	mov	r1, r3
 800526e:	f7fe ff7d 	bl	800416c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005272:	f7ff fa19 	bl	80046a8 <xTaskResumeAll>
 8005276:	4603      	mov	r3, r0
 8005278:	2b00      	cmp	r3, #0
 800527a:	d10a      	bne.n	8005292 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800527c:	4b09      	ldr	r3, [pc, #36]	; (80052a4 <prvProcessTimerOrBlockTask+0x98>)
 800527e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005282:	601a      	str	r2, [r3, #0]
 8005284:	f3bf 8f4f 	dsb	sy
 8005288:	f3bf 8f6f 	isb	sy
}
 800528c:	e001      	b.n	8005292 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800528e:	f7ff fa0b 	bl	80046a8 <xTaskResumeAll>
}
 8005292:	bf00      	nop
 8005294:	3710      	adds	r7, #16
 8005296:	46bd      	mov	sp, r7
 8005298:	bd80      	pop	{r7, pc}
 800529a:	bf00      	nop
 800529c:	20000f64 	.word	0x20000f64
 80052a0:	20000f68 	.word	0x20000f68
 80052a4:	e000ed04 	.word	0xe000ed04

080052a8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80052a8:	b480      	push	{r7}
 80052aa:	b085      	sub	sp, #20
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80052b0:	4b0e      	ldr	r3, [pc, #56]	; (80052ec <prvGetNextExpireTime+0x44>)
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d101      	bne.n	80052be <prvGetNextExpireTime+0x16>
 80052ba:	2201      	movs	r2, #1
 80052bc:	e000      	b.n	80052c0 <prvGetNextExpireTime+0x18>
 80052be:	2200      	movs	r2, #0
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d105      	bne.n	80052d8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80052cc:	4b07      	ldr	r3, [pc, #28]	; (80052ec <prvGetNextExpireTime+0x44>)
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	68db      	ldr	r3, [r3, #12]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	60fb      	str	r3, [r7, #12]
 80052d6:	e001      	b.n	80052dc <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80052d8:	2300      	movs	r3, #0
 80052da:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80052dc:	68fb      	ldr	r3, [r7, #12]
}
 80052de:	4618      	mov	r0, r3
 80052e0:	3714      	adds	r7, #20
 80052e2:	46bd      	mov	sp, r7
 80052e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e8:	4770      	bx	lr
 80052ea:	bf00      	nop
 80052ec:	20000f60 	.word	0x20000f60

080052f0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80052f0:	b580      	push	{r7, lr}
 80052f2:	b084      	sub	sp, #16
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80052f8:	f7ff fa74 	bl	80047e4 <xTaskGetTickCount>
 80052fc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80052fe:	4b0b      	ldr	r3, [pc, #44]	; (800532c <prvSampleTimeNow+0x3c>)
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	68fa      	ldr	r2, [r7, #12]
 8005304:	429a      	cmp	r2, r3
 8005306:	d205      	bcs.n	8005314 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005308:	f000 f936 	bl	8005578 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	2201      	movs	r2, #1
 8005310:	601a      	str	r2, [r3, #0]
 8005312:	e002      	b.n	800531a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	2200      	movs	r2, #0
 8005318:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800531a:	4a04      	ldr	r2, [pc, #16]	; (800532c <prvSampleTimeNow+0x3c>)
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005320:	68fb      	ldr	r3, [r7, #12]
}
 8005322:	4618      	mov	r0, r3
 8005324:	3710      	adds	r7, #16
 8005326:	46bd      	mov	sp, r7
 8005328:	bd80      	pop	{r7, pc}
 800532a:	bf00      	nop
 800532c:	20000f70 	.word	0x20000f70

08005330 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005330:	b580      	push	{r7, lr}
 8005332:	b086      	sub	sp, #24
 8005334:	af00      	add	r7, sp, #0
 8005336:	60f8      	str	r0, [r7, #12]
 8005338:	60b9      	str	r1, [r7, #8]
 800533a:	607a      	str	r2, [r7, #4]
 800533c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800533e:	2300      	movs	r3, #0
 8005340:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	68ba      	ldr	r2, [r7, #8]
 8005346:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	68fa      	ldr	r2, [r7, #12]
 800534c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800534e:	68ba      	ldr	r2, [r7, #8]
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	429a      	cmp	r2, r3
 8005354:	d812      	bhi.n	800537c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005356:	687a      	ldr	r2, [r7, #4]
 8005358:	683b      	ldr	r3, [r7, #0]
 800535a:	1ad2      	subs	r2, r2, r3
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	699b      	ldr	r3, [r3, #24]
 8005360:	429a      	cmp	r2, r3
 8005362:	d302      	bcc.n	800536a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005364:	2301      	movs	r3, #1
 8005366:	617b      	str	r3, [r7, #20]
 8005368:	e01b      	b.n	80053a2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800536a:	4b10      	ldr	r3, [pc, #64]	; (80053ac <prvInsertTimerInActiveList+0x7c>)
 800536c:	681a      	ldr	r2, [r3, #0]
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	3304      	adds	r3, #4
 8005372:	4619      	mov	r1, r3
 8005374:	4610      	mov	r0, r2
 8005376:	f7fe f9de 	bl	8003736 <vListInsert>
 800537a:	e012      	b.n	80053a2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800537c:	687a      	ldr	r2, [r7, #4]
 800537e:	683b      	ldr	r3, [r7, #0]
 8005380:	429a      	cmp	r2, r3
 8005382:	d206      	bcs.n	8005392 <prvInsertTimerInActiveList+0x62>
 8005384:	68ba      	ldr	r2, [r7, #8]
 8005386:	683b      	ldr	r3, [r7, #0]
 8005388:	429a      	cmp	r2, r3
 800538a:	d302      	bcc.n	8005392 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800538c:	2301      	movs	r3, #1
 800538e:	617b      	str	r3, [r7, #20]
 8005390:	e007      	b.n	80053a2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005392:	4b07      	ldr	r3, [pc, #28]	; (80053b0 <prvInsertTimerInActiveList+0x80>)
 8005394:	681a      	ldr	r2, [r3, #0]
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	3304      	adds	r3, #4
 800539a:	4619      	mov	r1, r3
 800539c:	4610      	mov	r0, r2
 800539e:	f7fe f9ca 	bl	8003736 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80053a2:	697b      	ldr	r3, [r7, #20]
}
 80053a4:	4618      	mov	r0, r3
 80053a6:	3718      	adds	r7, #24
 80053a8:	46bd      	mov	sp, r7
 80053aa:	bd80      	pop	{r7, pc}
 80053ac:	20000f64 	.word	0x20000f64
 80053b0:	20000f60 	.word	0x20000f60

080053b4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80053b4:	b580      	push	{r7, lr}
 80053b6:	b08e      	sub	sp, #56	; 0x38
 80053b8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80053ba:	e0ca      	b.n	8005552 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	2b00      	cmp	r3, #0
 80053c0:	da18      	bge.n	80053f4 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80053c2:	1d3b      	adds	r3, r7, #4
 80053c4:	3304      	adds	r3, #4
 80053c6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80053c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d10a      	bne.n	80053e4 <prvProcessReceivedCommands+0x30>
	__asm volatile
 80053ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053d2:	f383 8811 	msr	BASEPRI, r3
 80053d6:	f3bf 8f6f 	isb	sy
 80053da:	f3bf 8f4f 	dsb	sy
 80053de:	61fb      	str	r3, [r7, #28]
}
 80053e0:	bf00      	nop
 80053e2:	e7fe      	b.n	80053e2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80053e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80053ea:	6850      	ldr	r0, [r2, #4]
 80053ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80053ee:	6892      	ldr	r2, [r2, #8]
 80053f0:	4611      	mov	r1, r2
 80053f2:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	f2c0 80ab 	blt.w	8005552 <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005400:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005402:	695b      	ldr	r3, [r3, #20]
 8005404:	2b00      	cmp	r3, #0
 8005406:	d004      	beq.n	8005412 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005408:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800540a:	3304      	adds	r3, #4
 800540c:	4618      	mov	r0, r3
 800540e:	f7fe f9cb 	bl	80037a8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005412:	463b      	mov	r3, r7
 8005414:	4618      	mov	r0, r3
 8005416:	f7ff ff6b 	bl	80052f0 <prvSampleTimeNow>
 800541a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	2b09      	cmp	r3, #9
 8005420:	f200 8096 	bhi.w	8005550 <prvProcessReceivedCommands+0x19c>
 8005424:	a201      	add	r2, pc, #4	; (adr r2, 800542c <prvProcessReceivedCommands+0x78>)
 8005426:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800542a:	bf00      	nop
 800542c:	08005455 	.word	0x08005455
 8005430:	08005455 	.word	0x08005455
 8005434:	08005455 	.word	0x08005455
 8005438:	080054c9 	.word	0x080054c9
 800543c:	080054dd 	.word	0x080054dd
 8005440:	08005527 	.word	0x08005527
 8005444:	08005455 	.word	0x08005455
 8005448:	08005455 	.word	0x08005455
 800544c:	080054c9 	.word	0x080054c9
 8005450:	080054dd 	.word	0x080054dd
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005454:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005456:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800545a:	f043 0301 	orr.w	r3, r3, #1
 800545e:	b2da      	uxtb	r2, r3
 8005460:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005462:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005466:	68ba      	ldr	r2, [r7, #8]
 8005468:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800546a:	699b      	ldr	r3, [r3, #24]
 800546c:	18d1      	adds	r1, r2, r3
 800546e:	68bb      	ldr	r3, [r7, #8]
 8005470:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005472:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005474:	f7ff ff5c 	bl	8005330 <prvInsertTimerInActiveList>
 8005478:	4603      	mov	r3, r0
 800547a:	2b00      	cmp	r3, #0
 800547c:	d069      	beq.n	8005552 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800547e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005480:	6a1b      	ldr	r3, [r3, #32]
 8005482:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005484:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005486:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005488:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800548c:	f003 0304 	and.w	r3, r3, #4
 8005490:	2b00      	cmp	r3, #0
 8005492:	d05e      	beq.n	8005552 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005494:	68ba      	ldr	r2, [r7, #8]
 8005496:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005498:	699b      	ldr	r3, [r3, #24]
 800549a:	441a      	add	r2, r3
 800549c:	2300      	movs	r3, #0
 800549e:	9300      	str	r3, [sp, #0]
 80054a0:	2300      	movs	r3, #0
 80054a2:	2100      	movs	r1, #0
 80054a4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80054a6:	f7ff fe05 	bl	80050b4 <xTimerGenericCommand>
 80054aa:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80054ac:	6a3b      	ldr	r3, [r7, #32]
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d14f      	bne.n	8005552 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80054b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054b6:	f383 8811 	msr	BASEPRI, r3
 80054ba:	f3bf 8f6f 	isb	sy
 80054be:	f3bf 8f4f 	dsb	sy
 80054c2:	61bb      	str	r3, [r7, #24]
}
 80054c4:	bf00      	nop
 80054c6:	e7fe      	b.n	80054c6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80054c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054ca:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80054ce:	f023 0301 	bic.w	r3, r3, #1
 80054d2:	b2da      	uxtb	r2, r3
 80054d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054d6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80054da:	e03a      	b.n	8005552 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80054dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054de:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80054e2:	f043 0301 	orr.w	r3, r3, #1
 80054e6:	b2da      	uxtb	r2, r3
 80054e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054ea:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80054ee:	68ba      	ldr	r2, [r7, #8]
 80054f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054f2:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80054f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054f6:	699b      	ldr	r3, [r3, #24]
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d10a      	bne.n	8005512 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80054fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005500:	f383 8811 	msr	BASEPRI, r3
 8005504:	f3bf 8f6f 	isb	sy
 8005508:	f3bf 8f4f 	dsb	sy
 800550c:	617b      	str	r3, [r7, #20]
}
 800550e:	bf00      	nop
 8005510:	e7fe      	b.n	8005510 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005512:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005514:	699a      	ldr	r2, [r3, #24]
 8005516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005518:	18d1      	adds	r1, r2, r3
 800551a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800551c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800551e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005520:	f7ff ff06 	bl	8005330 <prvInsertTimerInActiveList>
					break;
 8005524:	e015      	b.n	8005552 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8005526:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005528:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800552c:	f003 0302 	and.w	r3, r3, #2
 8005530:	2b00      	cmp	r3, #0
 8005532:	d103      	bne.n	800553c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8005534:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005536:	f000 fbdb 	bl	8005cf0 <vPortFree>
 800553a:	e00a      	b.n	8005552 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800553c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800553e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005542:	f023 0301 	bic.w	r3, r3, #1
 8005546:	b2da      	uxtb	r2, r3
 8005548:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800554a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800554e:	e000      	b.n	8005552 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 8005550:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005552:	4b08      	ldr	r3, [pc, #32]	; (8005574 <prvProcessReceivedCommands+0x1c0>)
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	1d39      	adds	r1, r7, #4
 8005558:	2200      	movs	r2, #0
 800555a:	4618      	mov	r0, r3
 800555c:	f7fe fbec 	bl	8003d38 <xQueueReceive>
 8005560:	4603      	mov	r3, r0
 8005562:	2b00      	cmp	r3, #0
 8005564:	f47f af2a 	bne.w	80053bc <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8005568:	bf00      	nop
 800556a:	bf00      	nop
 800556c:	3730      	adds	r7, #48	; 0x30
 800556e:	46bd      	mov	sp, r7
 8005570:	bd80      	pop	{r7, pc}
 8005572:	bf00      	nop
 8005574:	20000f68 	.word	0x20000f68

08005578 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005578:	b580      	push	{r7, lr}
 800557a:	b088      	sub	sp, #32
 800557c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800557e:	e048      	b.n	8005612 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005580:	4b2d      	ldr	r3, [pc, #180]	; (8005638 <prvSwitchTimerLists+0xc0>)
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	68db      	ldr	r3, [r3, #12]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800558a:	4b2b      	ldr	r3, [pc, #172]	; (8005638 <prvSwitchTimerLists+0xc0>)
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	68db      	ldr	r3, [r3, #12]
 8005590:	68db      	ldr	r3, [r3, #12]
 8005592:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	3304      	adds	r3, #4
 8005598:	4618      	mov	r0, r3
 800559a:	f7fe f905 	bl	80037a8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	6a1b      	ldr	r3, [r3, #32]
 80055a2:	68f8      	ldr	r0, [r7, #12]
 80055a4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80055ac:	f003 0304 	and.w	r3, r3, #4
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d02e      	beq.n	8005612 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	699b      	ldr	r3, [r3, #24]
 80055b8:	693a      	ldr	r2, [r7, #16]
 80055ba:	4413      	add	r3, r2
 80055bc:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80055be:	68ba      	ldr	r2, [r7, #8]
 80055c0:	693b      	ldr	r3, [r7, #16]
 80055c2:	429a      	cmp	r2, r3
 80055c4:	d90e      	bls.n	80055e4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	68ba      	ldr	r2, [r7, #8]
 80055ca:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	68fa      	ldr	r2, [r7, #12]
 80055d0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80055d2:	4b19      	ldr	r3, [pc, #100]	; (8005638 <prvSwitchTimerLists+0xc0>)
 80055d4:	681a      	ldr	r2, [r3, #0]
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	3304      	adds	r3, #4
 80055da:	4619      	mov	r1, r3
 80055dc:	4610      	mov	r0, r2
 80055de:	f7fe f8aa 	bl	8003736 <vListInsert>
 80055e2:	e016      	b.n	8005612 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80055e4:	2300      	movs	r3, #0
 80055e6:	9300      	str	r3, [sp, #0]
 80055e8:	2300      	movs	r3, #0
 80055ea:	693a      	ldr	r2, [r7, #16]
 80055ec:	2100      	movs	r1, #0
 80055ee:	68f8      	ldr	r0, [r7, #12]
 80055f0:	f7ff fd60 	bl	80050b4 <xTimerGenericCommand>
 80055f4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d10a      	bne.n	8005612 <prvSwitchTimerLists+0x9a>
	__asm volatile
 80055fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005600:	f383 8811 	msr	BASEPRI, r3
 8005604:	f3bf 8f6f 	isb	sy
 8005608:	f3bf 8f4f 	dsb	sy
 800560c:	603b      	str	r3, [r7, #0]
}
 800560e:	bf00      	nop
 8005610:	e7fe      	b.n	8005610 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005612:	4b09      	ldr	r3, [pc, #36]	; (8005638 <prvSwitchTimerLists+0xc0>)
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	2b00      	cmp	r3, #0
 800561a:	d1b1      	bne.n	8005580 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800561c:	4b06      	ldr	r3, [pc, #24]	; (8005638 <prvSwitchTimerLists+0xc0>)
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8005622:	4b06      	ldr	r3, [pc, #24]	; (800563c <prvSwitchTimerLists+0xc4>)
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	4a04      	ldr	r2, [pc, #16]	; (8005638 <prvSwitchTimerLists+0xc0>)
 8005628:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800562a:	4a04      	ldr	r2, [pc, #16]	; (800563c <prvSwitchTimerLists+0xc4>)
 800562c:	697b      	ldr	r3, [r7, #20]
 800562e:	6013      	str	r3, [r2, #0]
}
 8005630:	bf00      	nop
 8005632:	3718      	adds	r7, #24
 8005634:	46bd      	mov	sp, r7
 8005636:	bd80      	pop	{r7, pc}
 8005638:	20000f60 	.word	0x20000f60
 800563c:	20000f64 	.word	0x20000f64

08005640 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005640:	b580      	push	{r7, lr}
 8005642:	b082      	sub	sp, #8
 8005644:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8005646:	f000 f965 	bl	8005914 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800564a:	4b15      	ldr	r3, [pc, #84]	; (80056a0 <prvCheckForValidListAndQueue+0x60>)
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	2b00      	cmp	r3, #0
 8005650:	d120      	bne.n	8005694 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8005652:	4814      	ldr	r0, [pc, #80]	; (80056a4 <prvCheckForValidListAndQueue+0x64>)
 8005654:	f7fe f81e 	bl	8003694 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005658:	4813      	ldr	r0, [pc, #76]	; (80056a8 <prvCheckForValidListAndQueue+0x68>)
 800565a:	f7fe f81b 	bl	8003694 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800565e:	4b13      	ldr	r3, [pc, #76]	; (80056ac <prvCheckForValidListAndQueue+0x6c>)
 8005660:	4a10      	ldr	r2, [pc, #64]	; (80056a4 <prvCheckForValidListAndQueue+0x64>)
 8005662:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005664:	4b12      	ldr	r3, [pc, #72]	; (80056b0 <prvCheckForValidListAndQueue+0x70>)
 8005666:	4a10      	ldr	r2, [pc, #64]	; (80056a8 <prvCheckForValidListAndQueue+0x68>)
 8005668:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800566a:	2300      	movs	r3, #0
 800566c:	9300      	str	r3, [sp, #0]
 800566e:	4b11      	ldr	r3, [pc, #68]	; (80056b4 <prvCheckForValidListAndQueue+0x74>)
 8005670:	4a11      	ldr	r2, [pc, #68]	; (80056b8 <prvCheckForValidListAndQueue+0x78>)
 8005672:	2110      	movs	r1, #16
 8005674:	200a      	movs	r0, #10
 8005676:	f7fe f929 	bl	80038cc <xQueueGenericCreateStatic>
 800567a:	4603      	mov	r3, r0
 800567c:	4a08      	ldr	r2, [pc, #32]	; (80056a0 <prvCheckForValidListAndQueue+0x60>)
 800567e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005680:	4b07      	ldr	r3, [pc, #28]	; (80056a0 <prvCheckForValidListAndQueue+0x60>)
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	2b00      	cmp	r3, #0
 8005686:	d005      	beq.n	8005694 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005688:	4b05      	ldr	r3, [pc, #20]	; (80056a0 <prvCheckForValidListAndQueue+0x60>)
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	490b      	ldr	r1, [pc, #44]	; (80056bc <prvCheckForValidListAndQueue+0x7c>)
 800568e:	4618      	mov	r0, r3
 8005690:	f7fe fd42 	bl	8004118 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005694:	f000 f96e 	bl	8005974 <vPortExitCritical>
}
 8005698:	bf00      	nop
 800569a:	46bd      	mov	sp, r7
 800569c:	bd80      	pop	{r7, pc}
 800569e:	bf00      	nop
 80056a0:	20000f68 	.word	0x20000f68
 80056a4:	20000f38 	.word	0x20000f38
 80056a8:	20000f4c 	.word	0x20000f4c
 80056ac:	20000f60 	.word	0x20000f60
 80056b0:	20000f64 	.word	0x20000f64
 80056b4:	20001014 	.word	0x20001014
 80056b8:	20000f74 	.word	0x20000f74
 80056bc:	08006134 	.word	0x08006134

080056c0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80056c0:	b480      	push	{r7}
 80056c2:	b085      	sub	sp, #20
 80056c4:	af00      	add	r7, sp, #0
 80056c6:	60f8      	str	r0, [r7, #12]
 80056c8:	60b9      	str	r1, [r7, #8]
 80056ca:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	3b04      	subs	r3, #4
 80056d0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80056d8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	3b04      	subs	r3, #4
 80056de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80056e0:	68bb      	ldr	r3, [r7, #8]
 80056e2:	f023 0201 	bic.w	r2, r3, #1
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	3b04      	subs	r3, #4
 80056ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80056f0:	4a0c      	ldr	r2, [pc, #48]	; (8005724 <pxPortInitialiseStack+0x64>)
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	3b14      	subs	r3, #20
 80056fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80056fc:	687a      	ldr	r2, [r7, #4]
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	3b04      	subs	r3, #4
 8005706:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	f06f 0202 	mvn.w	r2, #2
 800570e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	3b20      	subs	r3, #32
 8005714:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005716:	68fb      	ldr	r3, [r7, #12]
}
 8005718:	4618      	mov	r0, r3
 800571a:	3714      	adds	r7, #20
 800571c:	46bd      	mov	sp, r7
 800571e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005722:	4770      	bx	lr
 8005724:	08005729 	.word	0x08005729

08005728 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005728:	b480      	push	{r7}
 800572a:	b085      	sub	sp, #20
 800572c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800572e:	2300      	movs	r3, #0
 8005730:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005732:	4b12      	ldr	r3, [pc, #72]	; (800577c <prvTaskExitError+0x54>)
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	f1b3 3fff 	cmp.w	r3, #4294967295
 800573a:	d00a      	beq.n	8005752 <prvTaskExitError+0x2a>
	__asm volatile
 800573c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005740:	f383 8811 	msr	BASEPRI, r3
 8005744:	f3bf 8f6f 	isb	sy
 8005748:	f3bf 8f4f 	dsb	sy
 800574c:	60fb      	str	r3, [r7, #12]
}
 800574e:	bf00      	nop
 8005750:	e7fe      	b.n	8005750 <prvTaskExitError+0x28>
	__asm volatile
 8005752:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005756:	f383 8811 	msr	BASEPRI, r3
 800575a:	f3bf 8f6f 	isb	sy
 800575e:	f3bf 8f4f 	dsb	sy
 8005762:	60bb      	str	r3, [r7, #8]
}
 8005764:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005766:	bf00      	nop
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	2b00      	cmp	r3, #0
 800576c:	d0fc      	beq.n	8005768 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800576e:	bf00      	nop
 8005770:	bf00      	nop
 8005772:	3714      	adds	r7, #20
 8005774:	46bd      	mov	sp, r7
 8005776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800577a:	4770      	bx	lr
 800577c:	20000134 	.word	0x20000134

08005780 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005780:	4b07      	ldr	r3, [pc, #28]	; (80057a0 <pxCurrentTCBConst2>)
 8005782:	6819      	ldr	r1, [r3, #0]
 8005784:	6808      	ldr	r0, [r1, #0]
 8005786:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800578a:	f380 8809 	msr	PSP, r0
 800578e:	f3bf 8f6f 	isb	sy
 8005792:	f04f 0000 	mov.w	r0, #0
 8005796:	f380 8811 	msr	BASEPRI, r0
 800579a:	4770      	bx	lr
 800579c:	f3af 8000 	nop.w

080057a0 <pxCurrentTCBConst2>:
 80057a0:	20000a38 	.word	0x20000a38
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80057a4:	bf00      	nop
 80057a6:	bf00      	nop

080057a8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80057a8:	4808      	ldr	r0, [pc, #32]	; (80057cc <prvPortStartFirstTask+0x24>)
 80057aa:	6800      	ldr	r0, [r0, #0]
 80057ac:	6800      	ldr	r0, [r0, #0]
 80057ae:	f380 8808 	msr	MSP, r0
 80057b2:	f04f 0000 	mov.w	r0, #0
 80057b6:	f380 8814 	msr	CONTROL, r0
 80057ba:	b662      	cpsie	i
 80057bc:	b661      	cpsie	f
 80057be:	f3bf 8f4f 	dsb	sy
 80057c2:	f3bf 8f6f 	isb	sy
 80057c6:	df00      	svc	0
 80057c8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80057ca:	bf00      	nop
 80057cc:	e000ed08 	.word	0xe000ed08

080057d0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80057d0:	b580      	push	{r7, lr}
 80057d2:	b086      	sub	sp, #24
 80057d4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80057d6:	4b46      	ldr	r3, [pc, #280]	; (80058f0 <xPortStartScheduler+0x120>)
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	4a46      	ldr	r2, [pc, #280]	; (80058f4 <xPortStartScheduler+0x124>)
 80057dc:	4293      	cmp	r3, r2
 80057de:	d10a      	bne.n	80057f6 <xPortStartScheduler+0x26>
	__asm volatile
 80057e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057e4:	f383 8811 	msr	BASEPRI, r3
 80057e8:	f3bf 8f6f 	isb	sy
 80057ec:	f3bf 8f4f 	dsb	sy
 80057f0:	613b      	str	r3, [r7, #16]
}
 80057f2:	bf00      	nop
 80057f4:	e7fe      	b.n	80057f4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80057f6:	4b3e      	ldr	r3, [pc, #248]	; (80058f0 <xPortStartScheduler+0x120>)
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	4a3f      	ldr	r2, [pc, #252]	; (80058f8 <xPortStartScheduler+0x128>)
 80057fc:	4293      	cmp	r3, r2
 80057fe:	d10a      	bne.n	8005816 <xPortStartScheduler+0x46>
	__asm volatile
 8005800:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005804:	f383 8811 	msr	BASEPRI, r3
 8005808:	f3bf 8f6f 	isb	sy
 800580c:	f3bf 8f4f 	dsb	sy
 8005810:	60fb      	str	r3, [r7, #12]
}
 8005812:	bf00      	nop
 8005814:	e7fe      	b.n	8005814 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005816:	4b39      	ldr	r3, [pc, #228]	; (80058fc <xPortStartScheduler+0x12c>)
 8005818:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800581a:	697b      	ldr	r3, [r7, #20]
 800581c:	781b      	ldrb	r3, [r3, #0]
 800581e:	b2db      	uxtb	r3, r3
 8005820:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005822:	697b      	ldr	r3, [r7, #20]
 8005824:	22ff      	movs	r2, #255	; 0xff
 8005826:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005828:	697b      	ldr	r3, [r7, #20]
 800582a:	781b      	ldrb	r3, [r3, #0]
 800582c:	b2db      	uxtb	r3, r3
 800582e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005830:	78fb      	ldrb	r3, [r7, #3]
 8005832:	b2db      	uxtb	r3, r3
 8005834:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005838:	b2da      	uxtb	r2, r3
 800583a:	4b31      	ldr	r3, [pc, #196]	; (8005900 <xPortStartScheduler+0x130>)
 800583c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800583e:	4b31      	ldr	r3, [pc, #196]	; (8005904 <xPortStartScheduler+0x134>)
 8005840:	2207      	movs	r2, #7
 8005842:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005844:	e009      	b.n	800585a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8005846:	4b2f      	ldr	r3, [pc, #188]	; (8005904 <xPortStartScheduler+0x134>)
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	3b01      	subs	r3, #1
 800584c:	4a2d      	ldr	r2, [pc, #180]	; (8005904 <xPortStartScheduler+0x134>)
 800584e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005850:	78fb      	ldrb	r3, [r7, #3]
 8005852:	b2db      	uxtb	r3, r3
 8005854:	005b      	lsls	r3, r3, #1
 8005856:	b2db      	uxtb	r3, r3
 8005858:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800585a:	78fb      	ldrb	r3, [r7, #3]
 800585c:	b2db      	uxtb	r3, r3
 800585e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005862:	2b80      	cmp	r3, #128	; 0x80
 8005864:	d0ef      	beq.n	8005846 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005866:	4b27      	ldr	r3, [pc, #156]	; (8005904 <xPortStartScheduler+0x134>)
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	f1c3 0307 	rsb	r3, r3, #7
 800586e:	2b04      	cmp	r3, #4
 8005870:	d00a      	beq.n	8005888 <xPortStartScheduler+0xb8>
	__asm volatile
 8005872:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005876:	f383 8811 	msr	BASEPRI, r3
 800587a:	f3bf 8f6f 	isb	sy
 800587e:	f3bf 8f4f 	dsb	sy
 8005882:	60bb      	str	r3, [r7, #8]
}
 8005884:	bf00      	nop
 8005886:	e7fe      	b.n	8005886 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005888:	4b1e      	ldr	r3, [pc, #120]	; (8005904 <xPortStartScheduler+0x134>)
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	021b      	lsls	r3, r3, #8
 800588e:	4a1d      	ldr	r2, [pc, #116]	; (8005904 <xPortStartScheduler+0x134>)
 8005890:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005892:	4b1c      	ldr	r3, [pc, #112]	; (8005904 <xPortStartScheduler+0x134>)
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800589a:	4a1a      	ldr	r2, [pc, #104]	; (8005904 <xPortStartScheduler+0x134>)
 800589c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	b2da      	uxtb	r2, r3
 80058a2:	697b      	ldr	r3, [r7, #20]
 80058a4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80058a6:	4b18      	ldr	r3, [pc, #96]	; (8005908 <xPortStartScheduler+0x138>)
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	4a17      	ldr	r2, [pc, #92]	; (8005908 <xPortStartScheduler+0x138>)
 80058ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80058b0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80058b2:	4b15      	ldr	r3, [pc, #84]	; (8005908 <xPortStartScheduler+0x138>)
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	4a14      	ldr	r2, [pc, #80]	; (8005908 <xPortStartScheduler+0x138>)
 80058b8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80058bc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80058be:	f000 f8dd 	bl	8005a7c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80058c2:	4b12      	ldr	r3, [pc, #72]	; (800590c <xPortStartScheduler+0x13c>)
 80058c4:	2200      	movs	r2, #0
 80058c6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80058c8:	f000 f8fc 	bl	8005ac4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80058cc:	4b10      	ldr	r3, [pc, #64]	; (8005910 <xPortStartScheduler+0x140>)
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	4a0f      	ldr	r2, [pc, #60]	; (8005910 <xPortStartScheduler+0x140>)
 80058d2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80058d6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80058d8:	f7ff ff66 	bl	80057a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80058dc:	f7ff f84c 	bl	8004978 <vTaskSwitchContext>
	prvTaskExitError();
 80058e0:	f7ff ff22 	bl	8005728 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80058e4:	2300      	movs	r3, #0
}
 80058e6:	4618      	mov	r0, r3
 80058e8:	3718      	adds	r7, #24
 80058ea:	46bd      	mov	sp, r7
 80058ec:	bd80      	pop	{r7, pc}
 80058ee:	bf00      	nop
 80058f0:	e000ed00 	.word	0xe000ed00
 80058f4:	410fc271 	.word	0x410fc271
 80058f8:	410fc270 	.word	0x410fc270
 80058fc:	e000e400 	.word	0xe000e400
 8005900:	20001064 	.word	0x20001064
 8005904:	20001068 	.word	0x20001068
 8005908:	e000ed20 	.word	0xe000ed20
 800590c:	20000134 	.word	0x20000134
 8005910:	e000ef34 	.word	0xe000ef34

08005914 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005914:	b480      	push	{r7}
 8005916:	b083      	sub	sp, #12
 8005918:	af00      	add	r7, sp, #0
	__asm volatile
 800591a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800591e:	f383 8811 	msr	BASEPRI, r3
 8005922:	f3bf 8f6f 	isb	sy
 8005926:	f3bf 8f4f 	dsb	sy
 800592a:	607b      	str	r3, [r7, #4]
}
 800592c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800592e:	4b0f      	ldr	r3, [pc, #60]	; (800596c <vPortEnterCritical+0x58>)
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	3301      	adds	r3, #1
 8005934:	4a0d      	ldr	r2, [pc, #52]	; (800596c <vPortEnterCritical+0x58>)
 8005936:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005938:	4b0c      	ldr	r3, [pc, #48]	; (800596c <vPortEnterCritical+0x58>)
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	2b01      	cmp	r3, #1
 800593e:	d10f      	bne.n	8005960 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005940:	4b0b      	ldr	r3, [pc, #44]	; (8005970 <vPortEnterCritical+0x5c>)
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	b2db      	uxtb	r3, r3
 8005946:	2b00      	cmp	r3, #0
 8005948:	d00a      	beq.n	8005960 <vPortEnterCritical+0x4c>
	__asm volatile
 800594a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800594e:	f383 8811 	msr	BASEPRI, r3
 8005952:	f3bf 8f6f 	isb	sy
 8005956:	f3bf 8f4f 	dsb	sy
 800595a:	603b      	str	r3, [r7, #0]
}
 800595c:	bf00      	nop
 800595e:	e7fe      	b.n	800595e <vPortEnterCritical+0x4a>
	}
}
 8005960:	bf00      	nop
 8005962:	370c      	adds	r7, #12
 8005964:	46bd      	mov	sp, r7
 8005966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800596a:	4770      	bx	lr
 800596c:	20000134 	.word	0x20000134
 8005970:	e000ed04 	.word	0xe000ed04

08005974 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005974:	b480      	push	{r7}
 8005976:	b083      	sub	sp, #12
 8005978:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800597a:	4b12      	ldr	r3, [pc, #72]	; (80059c4 <vPortExitCritical+0x50>)
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	2b00      	cmp	r3, #0
 8005980:	d10a      	bne.n	8005998 <vPortExitCritical+0x24>
	__asm volatile
 8005982:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005986:	f383 8811 	msr	BASEPRI, r3
 800598a:	f3bf 8f6f 	isb	sy
 800598e:	f3bf 8f4f 	dsb	sy
 8005992:	607b      	str	r3, [r7, #4]
}
 8005994:	bf00      	nop
 8005996:	e7fe      	b.n	8005996 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005998:	4b0a      	ldr	r3, [pc, #40]	; (80059c4 <vPortExitCritical+0x50>)
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	3b01      	subs	r3, #1
 800599e:	4a09      	ldr	r2, [pc, #36]	; (80059c4 <vPortExitCritical+0x50>)
 80059a0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80059a2:	4b08      	ldr	r3, [pc, #32]	; (80059c4 <vPortExitCritical+0x50>)
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d105      	bne.n	80059b6 <vPortExitCritical+0x42>
 80059aa:	2300      	movs	r3, #0
 80059ac:	603b      	str	r3, [r7, #0]
	__asm volatile
 80059ae:	683b      	ldr	r3, [r7, #0]
 80059b0:	f383 8811 	msr	BASEPRI, r3
}
 80059b4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80059b6:	bf00      	nop
 80059b8:	370c      	adds	r7, #12
 80059ba:	46bd      	mov	sp, r7
 80059bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c0:	4770      	bx	lr
 80059c2:	bf00      	nop
 80059c4:	20000134 	.word	0x20000134
	...

080059d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80059d0:	f3ef 8009 	mrs	r0, PSP
 80059d4:	f3bf 8f6f 	isb	sy
 80059d8:	4b15      	ldr	r3, [pc, #84]	; (8005a30 <pxCurrentTCBConst>)
 80059da:	681a      	ldr	r2, [r3, #0]
 80059dc:	f01e 0f10 	tst.w	lr, #16
 80059e0:	bf08      	it	eq
 80059e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80059e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059ea:	6010      	str	r0, [r2, #0]
 80059ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 80059f0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80059f4:	f380 8811 	msr	BASEPRI, r0
 80059f8:	f3bf 8f4f 	dsb	sy
 80059fc:	f3bf 8f6f 	isb	sy
 8005a00:	f7fe ffba 	bl	8004978 <vTaskSwitchContext>
 8005a04:	f04f 0000 	mov.w	r0, #0
 8005a08:	f380 8811 	msr	BASEPRI, r0
 8005a0c:	bc09      	pop	{r0, r3}
 8005a0e:	6819      	ldr	r1, [r3, #0]
 8005a10:	6808      	ldr	r0, [r1, #0]
 8005a12:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a16:	f01e 0f10 	tst.w	lr, #16
 8005a1a:	bf08      	it	eq
 8005a1c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005a20:	f380 8809 	msr	PSP, r0
 8005a24:	f3bf 8f6f 	isb	sy
 8005a28:	4770      	bx	lr
 8005a2a:	bf00      	nop
 8005a2c:	f3af 8000 	nop.w

08005a30 <pxCurrentTCBConst>:
 8005a30:	20000a38 	.word	0x20000a38
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005a34:	bf00      	nop
 8005a36:	bf00      	nop

08005a38 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005a38:	b580      	push	{r7, lr}
 8005a3a:	b082      	sub	sp, #8
 8005a3c:	af00      	add	r7, sp, #0
	__asm volatile
 8005a3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a42:	f383 8811 	msr	BASEPRI, r3
 8005a46:	f3bf 8f6f 	isb	sy
 8005a4a:	f3bf 8f4f 	dsb	sy
 8005a4e:	607b      	str	r3, [r7, #4]
}
 8005a50:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005a52:	f7fe fed7 	bl	8004804 <xTaskIncrementTick>
 8005a56:	4603      	mov	r3, r0
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d003      	beq.n	8005a64 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005a5c:	4b06      	ldr	r3, [pc, #24]	; (8005a78 <xPortSysTickHandler+0x40>)
 8005a5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a62:	601a      	str	r2, [r3, #0]
 8005a64:	2300      	movs	r3, #0
 8005a66:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005a68:	683b      	ldr	r3, [r7, #0]
 8005a6a:	f383 8811 	msr	BASEPRI, r3
}
 8005a6e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005a70:	bf00      	nop
 8005a72:	3708      	adds	r7, #8
 8005a74:	46bd      	mov	sp, r7
 8005a76:	bd80      	pop	{r7, pc}
 8005a78:	e000ed04 	.word	0xe000ed04

08005a7c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005a7c:	b480      	push	{r7}
 8005a7e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005a80:	4b0b      	ldr	r3, [pc, #44]	; (8005ab0 <vPortSetupTimerInterrupt+0x34>)
 8005a82:	2200      	movs	r2, #0
 8005a84:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005a86:	4b0b      	ldr	r3, [pc, #44]	; (8005ab4 <vPortSetupTimerInterrupt+0x38>)
 8005a88:	2200      	movs	r2, #0
 8005a8a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005a8c:	4b0a      	ldr	r3, [pc, #40]	; (8005ab8 <vPortSetupTimerInterrupt+0x3c>)
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	4a0a      	ldr	r2, [pc, #40]	; (8005abc <vPortSetupTimerInterrupt+0x40>)
 8005a92:	fba2 2303 	umull	r2, r3, r2, r3
 8005a96:	099b      	lsrs	r3, r3, #6
 8005a98:	4a09      	ldr	r2, [pc, #36]	; (8005ac0 <vPortSetupTimerInterrupt+0x44>)
 8005a9a:	3b01      	subs	r3, #1
 8005a9c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005a9e:	4b04      	ldr	r3, [pc, #16]	; (8005ab0 <vPortSetupTimerInterrupt+0x34>)
 8005aa0:	2207      	movs	r2, #7
 8005aa2:	601a      	str	r2, [r3, #0]
}
 8005aa4:	bf00      	nop
 8005aa6:	46bd      	mov	sp, r7
 8005aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aac:	4770      	bx	lr
 8005aae:	bf00      	nop
 8005ab0:	e000e010 	.word	0xe000e010
 8005ab4:	e000e018 	.word	0xe000e018
 8005ab8:	20000128 	.word	0x20000128
 8005abc:	10624dd3 	.word	0x10624dd3
 8005ac0:	e000e014 	.word	0xe000e014

08005ac4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005ac4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005ad4 <vPortEnableVFP+0x10>
 8005ac8:	6801      	ldr	r1, [r0, #0]
 8005aca:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8005ace:	6001      	str	r1, [r0, #0]
 8005ad0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005ad2:	bf00      	nop
 8005ad4:	e000ed88 	.word	0xe000ed88

08005ad8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005ad8:	b480      	push	{r7}
 8005ada:	b085      	sub	sp, #20
 8005adc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8005ade:	f3ef 8305 	mrs	r3, IPSR
 8005ae2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	2b0f      	cmp	r3, #15
 8005ae8:	d914      	bls.n	8005b14 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005aea:	4a17      	ldr	r2, [pc, #92]	; (8005b48 <vPortValidateInterruptPriority+0x70>)
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	4413      	add	r3, r2
 8005af0:	781b      	ldrb	r3, [r3, #0]
 8005af2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005af4:	4b15      	ldr	r3, [pc, #84]	; (8005b4c <vPortValidateInterruptPriority+0x74>)
 8005af6:	781b      	ldrb	r3, [r3, #0]
 8005af8:	7afa      	ldrb	r2, [r7, #11]
 8005afa:	429a      	cmp	r2, r3
 8005afc:	d20a      	bcs.n	8005b14 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8005afe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b02:	f383 8811 	msr	BASEPRI, r3
 8005b06:	f3bf 8f6f 	isb	sy
 8005b0a:	f3bf 8f4f 	dsb	sy
 8005b0e:	607b      	str	r3, [r7, #4]
}
 8005b10:	bf00      	nop
 8005b12:	e7fe      	b.n	8005b12 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005b14:	4b0e      	ldr	r3, [pc, #56]	; (8005b50 <vPortValidateInterruptPriority+0x78>)
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005b1c:	4b0d      	ldr	r3, [pc, #52]	; (8005b54 <vPortValidateInterruptPriority+0x7c>)
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	429a      	cmp	r2, r3
 8005b22:	d90a      	bls.n	8005b3a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8005b24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b28:	f383 8811 	msr	BASEPRI, r3
 8005b2c:	f3bf 8f6f 	isb	sy
 8005b30:	f3bf 8f4f 	dsb	sy
 8005b34:	603b      	str	r3, [r7, #0]
}
 8005b36:	bf00      	nop
 8005b38:	e7fe      	b.n	8005b38 <vPortValidateInterruptPriority+0x60>
	}
 8005b3a:	bf00      	nop
 8005b3c:	3714      	adds	r7, #20
 8005b3e:	46bd      	mov	sp, r7
 8005b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b44:	4770      	bx	lr
 8005b46:	bf00      	nop
 8005b48:	e000e3f0 	.word	0xe000e3f0
 8005b4c:	20001064 	.word	0x20001064
 8005b50:	e000ed0c 	.word	0xe000ed0c
 8005b54:	20001068 	.word	0x20001068

08005b58 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005b58:	b580      	push	{r7, lr}
 8005b5a:	b08a      	sub	sp, #40	; 0x28
 8005b5c:	af00      	add	r7, sp, #0
 8005b5e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005b60:	2300      	movs	r3, #0
 8005b62:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005b64:	f7fe fd92 	bl	800468c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005b68:	4b5b      	ldr	r3, [pc, #364]	; (8005cd8 <pvPortMalloc+0x180>)
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d101      	bne.n	8005b74 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005b70:	f000 f920 	bl	8005db4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005b74:	4b59      	ldr	r3, [pc, #356]	; (8005cdc <pvPortMalloc+0x184>)
 8005b76:	681a      	ldr	r2, [r3, #0]
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	4013      	ands	r3, r2
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	f040 8093 	bne.w	8005ca8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d01d      	beq.n	8005bc4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8005b88:	2208      	movs	r2, #8
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	4413      	add	r3, r2
 8005b8e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	f003 0307 	and.w	r3, r3, #7
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d014      	beq.n	8005bc4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	f023 0307 	bic.w	r3, r3, #7
 8005ba0:	3308      	adds	r3, #8
 8005ba2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	f003 0307 	and.w	r3, r3, #7
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d00a      	beq.n	8005bc4 <pvPortMalloc+0x6c>
	__asm volatile
 8005bae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bb2:	f383 8811 	msr	BASEPRI, r3
 8005bb6:	f3bf 8f6f 	isb	sy
 8005bba:	f3bf 8f4f 	dsb	sy
 8005bbe:	617b      	str	r3, [r7, #20]
}
 8005bc0:	bf00      	nop
 8005bc2:	e7fe      	b.n	8005bc2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d06e      	beq.n	8005ca8 <pvPortMalloc+0x150>
 8005bca:	4b45      	ldr	r3, [pc, #276]	; (8005ce0 <pvPortMalloc+0x188>)
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	687a      	ldr	r2, [r7, #4]
 8005bd0:	429a      	cmp	r2, r3
 8005bd2:	d869      	bhi.n	8005ca8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005bd4:	4b43      	ldr	r3, [pc, #268]	; (8005ce4 <pvPortMalloc+0x18c>)
 8005bd6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005bd8:	4b42      	ldr	r3, [pc, #264]	; (8005ce4 <pvPortMalloc+0x18c>)
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005bde:	e004      	b.n	8005bea <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8005be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005be2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bec:	685b      	ldr	r3, [r3, #4]
 8005bee:	687a      	ldr	r2, [r7, #4]
 8005bf0:	429a      	cmp	r2, r3
 8005bf2:	d903      	bls.n	8005bfc <pvPortMalloc+0xa4>
 8005bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d1f1      	bne.n	8005be0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005bfc:	4b36      	ldr	r3, [pc, #216]	; (8005cd8 <pvPortMalloc+0x180>)
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c02:	429a      	cmp	r2, r3
 8005c04:	d050      	beq.n	8005ca8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005c06:	6a3b      	ldr	r3, [r7, #32]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	2208      	movs	r2, #8
 8005c0c:	4413      	add	r3, r2
 8005c0e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c12:	681a      	ldr	r2, [r3, #0]
 8005c14:	6a3b      	ldr	r3, [r7, #32]
 8005c16:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c1a:	685a      	ldr	r2, [r3, #4]
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	1ad2      	subs	r2, r2, r3
 8005c20:	2308      	movs	r3, #8
 8005c22:	005b      	lsls	r3, r3, #1
 8005c24:	429a      	cmp	r2, r3
 8005c26:	d91f      	bls.n	8005c68 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005c28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	4413      	add	r3, r2
 8005c2e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005c30:	69bb      	ldr	r3, [r7, #24]
 8005c32:	f003 0307 	and.w	r3, r3, #7
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d00a      	beq.n	8005c50 <pvPortMalloc+0xf8>
	__asm volatile
 8005c3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c3e:	f383 8811 	msr	BASEPRI, r3
 8005c42:	f3bf 8f6f 	isb	sy
 8005c46:	f3bf 8f4f 	dsb	sy
 8005c4a:	613b      	str	r3, [r7, #16]
}
 8005c4c:	bf00      	nop
 8005c4e:	e7fe      	b.n	8005c4e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c52:	685a      	ldr	r2, [r3, #4]
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	1ad2      	subs	r2, r2, r3
 8005c58:	69bb      	ldr	r3, [r7, #24]
 8005c5a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005c5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c5e:	687a      	ldr	r2, [r7, #4]
 8005c60:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005c62:	69b8      	ldr	r0, [r7, #24]
 8005c64:	f000 f908 	bl	8005e78 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005c68:	4b1d      	ldr	r3, [pc, #116]	; (8005ce0 <pvPortMalloc+0x188>)
 8005c6a:	681a      	ldr	r2, [r3, #0]
 8005c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c6e:	685b      	ldr	r3, [r3, #4]
 8005c70:	1ad3      	subs	r3, r2, r3
 8005c72:	4a1b      	ldr	r2, [pc, #108]	; (8005ce0 <pvPortMalloc+0x188>)
 8005c74:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005c76:	4b1a      	ldr	r3, [pc, #104]	; (8005ce0 <pvPortMalloc+0x188>)
 8005c78:	681a      	ldr	r2, [r3, #0]
 8005c7a:	4b1b      	ldr	r3, [pc, #108]	; (8005ce8 <pvPortMalloc+0x190>)
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	429a      	cmp	r2, r3
 8005c80:	d203      	bcs.n	8005c8a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005c82:	4b17      	ldr	r3, [pc, #92]	; (8005ce0 <pvPortMalloc+0x188>)
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	4a18      	ldr	r2, [pc, #96]	; (8005ce8 <pvPortMalloc+0x190>)
 8005c88:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c8c:	685a      	ldr	r2, [r3, #4]
 8005c8e:	4b13      	ldr	r3, [pc, #76]	; (8005cdc <pvPortMalloc+0x184>)
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	431a      	orrs	r2, r3
 8005c94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c96:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c9a:	2200      	movs	r2, #0
 8005c9c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8005c9e:	4b13      	ldr	r3, [pc, #76]	; (8005cec <pvPortMalloc+0x194>)
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	3301      	adds	r3, #1
 8005ca4:	4a11      	ldr	r2, [pc, #68]	; (8005cec <pvPortMalloc+0x194>)
 8005ca6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005ca8:	f7fe fcfe 	bl	80046a8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005cac:	69fb      	ldr	r3, [r7, #28]
 8005cae:	f003 0307 	and.w	r3, r3, #7
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d00a      	beq.n	8005ccc <pvPortMalloc+0x174>
	__asm volatile
 8005cb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cba:	f383 8811 	msr	BASEPRI, r3
 8005cbe:	f3bf 8f6f 	isb	sy
 8005cc2:	f3bf 8f4f 	dsb	sy
 8005cc6:	60fb      	str	r3, [r7, #12]
}
 8005cc8:	bf00      	nop
 8005cca:	e7fe      	b.n	8005cca <pvPortMalloc+0x172>
	return pvReturn;
 8005ccc:	69fb      	ldr	r3, [r7, #28]
}
 8005cce:	4618      	mov	r0, r3
 8005cd0:	3728      	adds	r7, #40	; 0x28
 8005cd2:	46bd      	mov	sp, r7
 8005cd4:	bd80      	pop	{r7, pc}
 8005cd6:	bf00      	nop
 8005cd8:	20001c2c 	.word	0x20001c2c
 8005cdc:	20001c40 	.word	0x20001c40
 8005ce0:	20001c30 	.word	0x20001c30
 8005ce4:	20001c24 	.word	0x20001c24
 8005ce8:	20001c34 	.word	0x20001c34
 8005cec:	20001c38 	.word	0x20001c38

08005cf0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005cf0:	b580      	push	{r7, lr}
 8005cf2:	b086      	sub	sp, #24
 8005cf4:	af00      	add	r7, sp, #0
 8005cf6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d04d      	beq.n	8005d9e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005d02:	2308      	movs	r3, #8
 8005d04:	425b      	negs	r3, r3
 8005d06:	697a      	ldr	r2, [r7, #20]
 8005d08:	4413      	add	r3, r2
 8005d0a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005d0c:	697b      	ldr	r3, [r7, #20]
 8005d0e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005d10:	693b      	ldr	r3, [r7, #16]
 8005d12:	685a      	ldr	r2, [r3, #4]
 8005d14:	4b24      	ldr	r3, [pc, #144]	; (8005da8 <vPortFree+0xb8>)
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	4013      	ands	r3, r2
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d10a      	bne.n	8005d34 <vPortFree+0x44>
	__asm volatile
 8005d1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d22:	f383 8811 	msr	BASEPRI, r3
 8005d26:	f3bf 8f6f 	isb	sy
 8005d2a:	f3bf 8f4f 	dsb	sy
 8005d2e:	60fb      	str	r3, [r7, #12]
}
 8005d30:	bf00      	nop
 8005d32:	e7fe      	b.n	8005d32 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005d34:	693b      	ldr	r3, [r7, #16]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d00a      	beq.n	8005d52 <vPortFree+0x62>
	__asm volatile
 8005d3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d40:	f383 8811 	msr	BASEPRI, r3
 8005d44:	f3bf 8f6f 	isb	sy
 8005d48:	f3bf 8f4f 	dsb	sy
 8005d4c:	60bb      	str	r3, [r7, #8]
}
 8005d4e:	bf00      	nop
 8005d50:	e7fe      	b.n	8005d50 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005d52:	693b      	ldr	r3, [r7, #16]
 8005d54:	685a      	ldr	r2, [r3, #4]
 8005d56:	4b14      	ldr	r3, [pc, #80]	; (8005da8 <vPortFree+0xb8>)
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	4013      	ands	r3, r2
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d01e      	beq.n	8005d9e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005d60:	693b      	ldr	r3, [r7, #16]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d11a      	bne.n	8005d9e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005d68:	693b      	ldr	r3, [r7, #16]
 8005d6a:	685a      	ldr	r2, [r3, #4]
 8005d6c:	4b0e      	ldr	r3, [pc, #56]	; (8005da8 <vPortFree+0xb8>)
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	43db      	mvns	r3, r3
 8005d72:	401a      	ands	r2, r3
 8005d74:	693b      	ldr	r3, [r7, #16]
 8005d76:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005d78:	f7fe fc88 	bl	800468c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005d7c:	693b      	ldr	r3, [r7, #16]
 8005d7e:	685a      	ldr	r2, [r3, #4]
 8005d80:	4b0a      	ldr	r3, [pc, #40]	; (8005dac <vPortFree+0xbc>)
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	4413      	add	r3, r2
 8005d86:	4a09      	ldr	r2, [pc, #36]	; (8005dac <vPortFree+0xbc>)
 8005d88:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005d8a:	6938      	ldr	r0, [r7, #16]
 8005d8c:	f000 f874 	bl	8005e78 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005d90:	4b07      	ldr	r3, [pc, #28]	; (8005db0 <vPortFree+0xc0>)
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	3301      	adds	r3, #1
 8005d96:	4a06      	ldr	r2, [pc, #24]	; (8005db0 <vPortFree+0xc0>)
 8005d98:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8005d9a:	f7fe fc85 	bl	80046a8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005d9e:	bf00      	nop
 8005da0:	3718      	adds	r7, #24
 8005da2:	46bd      	mov	sp, r7
 8005da4:	bd80      	pop	{r7, pc}
 8005da6:	bf00      	nop
 8005da8:	20001c40 	.word	0x20001c40
 8005dac:	20001c30 	.word	0x20001c30
 8005db0:	20001c3c 	.word	0x20001c3c

08005db4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005db4:	b480      	push	{r7}
 8005db6:	b085      	sub	sp, #20
 8005db8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005dba:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8005dbe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005dc0:	4b27      	ldr	r3, [pc, #156]	; (8005e60 <prvHeapInit+0xac>)
 8005dc2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	f003 0307 	and.w	r3, r3, #7
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d00c      	beq.n	8005de8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	3307      	adds	r3, #7
 8005dd2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	f023 0307 	bic.w	r3, r3, #7
 8005dda:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005ddc:	68ba      	ldr	r2, [r7, #8]
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	1ad3      	subs	r3, r2, r3
 8005de2:	4a1f      	ldr	r2, [pc, #124]	; (8005e60 <prvHeapInit+0xac>)
 8005de4:	4413      	add	r3, r2
 8005de6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005dec:	4a1d      	ldr	r2, [pc, #116]	; (8005e64 <prvHeapInit+0xb0>)
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005df2:	4b1c      	ldr	r3, [pc, #112]	; (8005e64 <prvHeapInit+0xb0>)
 8005df4:	2200      	movs	r2, #0
 8005df6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	68ba      	ldr	r2, [r7, #8]
 8005dfc:	4413      	add	r3, r2
 8005dfe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005e00:	2208      	movs	r2, #8
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	1a9b      	subs	r3, r3, r2
 8005e06:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	f023 0307 	bic.w	r3, r3, #7
 8005e0e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	4a15      	ldr	r2, [pc, #84]	; (8005e68 <prvHeapInit+0xb4>)
 8005e14:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005e16:	4b14      	ldr	r3, [pc, #80]	; (8005e68 <prvHeapInit+0xb4>)
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	2200      	movs	r2, #0
 8005e1c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005e1e:	4b12      	ldr	r3, [pc, #72]	; (8005e68 <prvHeapInit+0xb4>)
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	2200      	movs	r2, #0
 8005e24:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005e2a:	683b      	ldr	r3, [r7, #0]
 8005e2c:	68fa      	ldr	r2, [r7, #12]
 8005e2e:	1ad2      	subs	r2, r2, r3
 8005e30:	683b      	ldr	r3, [r7, #0]
 8005e32:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005e34:	4b0c      	ldr	r3, [pc, #48]	; (8005e68 <prvHeapInit+0xb4>)
 8005e36:	681a      	ldr	r2, [r3, #0]
 8005e38:	683b      	ldr	r3, [r7, #0]
 8005e3a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005e3c:	683b      	ldr	r3, [r7, #0]
 8005e3e:	685b      	ldr	r3, [r3, #4]
 8005e40:	4a0a      	ldr	r2, [pc, #40]	; (8005e6c <prvHeapInit+0xb8>)
 8005e42:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005e44:	683b      	ldr	r3, [r7, #0]
 8005e46:	685b      	ldr	r3, [r3, #4]
 8005e48:	4a09      	ldr	r2, [pc, #36]	; (8005e70 <prvHeapInit+0xbc>)
 8005e4a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005e4c:	4b09      	ldr	r3, [pc, #36]	; (8005e74 <prvHeapInit+0xc0>)
 8005e4e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005e52:	601a      	str	r2, [r3, #0]
}
 8005e54:	bf00      	nop
 8005e56:	3714      	adds	r7, #20
 8005e58:	46bd      	mov	sp, r7
 8005e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e5e:	4770      	bx	lr
 8005e60:	2000106c 	.word	0x2000106c
 8005e64:	20001c24 	.word	0x20001c24
 8005e68:	20001c2c 	.word	0x20001c2c
 8005e6c:	20001c34 	.word	0x20001c34
 8005e70:	20001c30 	.word	0x20001c30
 8005e74:	20001c40 	.word	0x20001c40

08005e78 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005e78:	b480      	push	{r7}
 8005e7a:	b085      	sub	sp, #20
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005e80:	4b28      	ldr	r3, [pc, #160]	; (8005f24 <prvInsertBlockIntoFreeList+0xac>)
 8005e82:	60fb      	str	r3, [r7, #12]
 8005e84:	e002      	b.n	8005e8c <prvInsertBlockIntoFreeList+0x14>
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	60fb      	str	r3, [r7, #12]
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	687a      	ldr	r2, [r7, #4]
 8005e92:	429a      	cmp	r2, r3
 8005e94:	d8f7      	bhi.n	8005e86 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	685b      	ldr	r3, [r3, #4]
 8005e9e:	68ba      	ldr	r2, [r7, #8]
 8005ea0:	4413      	add	r3, r2
 8005ea2:	687a      	ldr	r2, [r7, #4]
 8005ea4:	429a      	cmp	r2, r3
 8005ea6:	d108      	bne.n	8005eba <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	685a      	ldr	r2, [r3, #4]
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	685b      	ldr	r3, [r3, #4]
 8005eb0:	441a      	add	r2, r3
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	685b      	ldr	r3, [r3, #4]
 8005ec2:	68ba      	ldr	r2, [r7, #8]
 8005ec4:	441a      	add	r2, r3
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	429a      	cmp	r2, r3
 8005ecc:	d118      	bne.n	8005f00 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	681a      	ldr	r2, [r3, #0]
 8005ed2:	4b15      	ldr	r3, [pc, #84]	; (8005f28 <prvInsertBlockIntoFreeList+0xb0>)
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	429a      	cmp	r2, r3
 8005ed8:	d00d      	beq.n	8005ef6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	685a      	ldr	r2, [r3, #4]
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	685b      	ldr	r3, [r3, #4]
 8005ee4:	441a      	add	r2, r3
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	681a      	ldr	r2, [r3, #0]
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	601a      	str	r2, [r3, #0]
 8005ef4:	e008      	b.n	8005f08 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005ef6:	4b0c      	ldr	r3, [pc, #48]	; (8005f28 <prvInsertBlockIntoFreeList+0xb0>)
 8005ef8:	681a      	ldr	r2, [r3, #0]
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	601a      	str	r2, [r3, #0]
 8005efe:	e003      	b.n	8005f08 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	681a      	ldr	r2, [r3, #0]
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005f08:	68fa      	ldr	r2, [r7, #12]
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	429a      	cmp	r2, r3
 8005f0e:	d002      	beq.n	8005f16 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	687a      	ldr	r2, [r7, #4]
 8005f14:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005f16:	bf00      	nop
 8005f18:	3714      	adds	r7, #20
 8005f1a:	46bd      	mov	sp, r7
 8005f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f20:	4770      	bx	lr
 8005f22:	bf00      	nop
 8005f24:	20001c24 	.word	0x20001c24
 8005f28:	20001c2c 	.word	0x20001c2c

08005f2c <__malloc_lock>:
 8005f2c:	4801      	ldr	r0, [pc, #4]	; (8005f34 <__malloc_lock+0x8>)
 8005f2e:	f000 b88b 	b.w	8006048 <__retarget_lock_acquire_recursive>
 8005f32:	bf00      	nop
 8005f34:	20001d80 	.word	0x20001d80

08005f38 <__malloc_unlock>:
 8005f38:	4801      	ldr	r0, [pc, #4]	; (8005f40 <__malloc_unlock+0x8>)
 8005f3a:	f000 b886 	b.w	800604a <__retarget_lock_release_recursive>
 8005f3e:	bf00      	nop
 8005f40:	20001d80 	.word	0x20001d80

08005f44 <memset>:
 8005f44:	4402      	add	r2, r0
 8005f46:	4603      	mov	r3, r0
 8005f48:	4293      	cmp	r3, r2
 8005f4a:	d100      	bne.n	8005f4e <memset+0xa>
 8005f4c:	4770      	bx	lr
 8005f4e:	f803 1b01 	strb.w	r1, [r3], #1
 8005f52:	e7f9      	b.n	8005f48 <memset+0x4>

08005f54 <_reclaim_reent>:
 8005f54:	4b29      	ldr	r3, [pc, #164]	; (8005ffc <_reclaim_reent+0xa8>)
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	4283      	cmp	r3, r0
 8005f5a:	b570      	push	{r4, r5, r6, lr}
 8005f5c:	4604      	mov	r4, r0
 8005f5e:	d04b      	beq.n	8005ff8 <_reclaim_reent+0xa4>
 8005f60:	69c3      	ldr	r3, [r0, #28]
 8005f62:	b143      	cbz	r3, 8005f76 <_reclaim_reent+0x22>
 8005f64:	68db      	ldr	r3, [r3, #12]
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d144      	bne.n	8005ff4 <_reclaim_reent+0xa0>
 8005f6a:	69e3      	ldr	r3, [r4, #28]
 8005f6c:	6819      	ldr	r1, [r3, #0]
 8005f6e:	b111      	cbz	r1, 8005f76 <_reclaim_reent+0x22>
 8005f70:	4620      	mov	r0, r4
 8005f72:	f000 f879 	bl	8006068 <_free_r>
 8005f76:	6961      	ldr	r1, [r4, #20]
 8005f78:	b111      	cbz	r1, 8005f80 <_reclaim_reent+0x2c>
 8005f7a:	4620      	mov	r0, r4
 8005f7c:	f000 f874 	bl	8006068 <_free_r>
 8005f80:	69e1      	ldr	r1, [r4, #28]
 8005f82:	b111      	cbz	r1, 8005f8a <_reclaim_reent+0x36>
 8005f84:	4620      	mov	r0, r4
 8005f86:	f000 f86f 	bl	8006068 <_free_r>
 8005f8a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8005f8c:	b111      	cbz	r1, 8005f94 <_reclaim_reent+0x40>
 8005f8e:	4620      	mov	r0, r4
 8005f90:	f000 f86a 	bl	8006068 <_free_r>
 8005f94:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005f96:	b111      	cbz	r1, 8005f9e <_reclaim_reent+0x4a>
 8005f98:	4620      	mov	r0, r4
 8005f9a:	f000 f865 	bl	8006068 <_free_r>
 8005f9e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8005fa0:	b111      	cbz	r1, 8005fa8 <_reclaim_reent+0x54>
 8005fa2:	4620      	mov	r0, r4
 8005fa4:	f000 f860 	bl	8006068 <_free_r>
 8005fa8:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8005faa:	b111      	cbz	r1, 8005fb2 <_reclaim_reent+0x5e>
 8005fac:	4620      	mov	r0, r4
 8005fae:	f000 f85b 	bl	8006068 <_free_r>
 8005fb2:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8005fb4:	b111      	cbz	r1, 8005fbc <_reclaim_reent+0x68>
 8005fb6:	4620      	mov	r0, r4
 8005fb8:	f000 f856 	bl	8006068 <_free_r>
 8005fbc:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8005fbe:	b111      	cbz	r1, 8005fc6 <_reclaim_reent+0x72>
 8005fc0:	4620      	mov	r0, r4
 8005fc2:	f000 f851 	bl	8006068 <_free_r>
 8005fc6:	6a23      	ldr	r3, [r4, #32]
 8005fc8:	b1b3      	cbz	r3, 8005ff8 <_reclaim_reent+0xa4>
 8005fca:	4620      	mov	r0, r4
 8005fcc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8005fd0:	4718      	bx	r3
 8005fd2:	5949      	ldr	r1, [r1, r5]
 8005fd4:	b941      	cbnz	r1, 8005fe8 <_reclaim_reent+0x94>
 8005fd6:	3504      	adds	r5, #4
 8005fd8:	69e3      	ldr	r3, [r4, #28]
 8005fda:	2d80      	cmp	r5, #128	; 0x80
 8005fdc:	68d9      	ldr	r1, [r3, #12]
 8005fde:	d1f8      	bne.n	8005fd2 <_reclaim_reent+0x7e>
 8005fe0:	4620      	mov	r0, r4
 8005fe2:	f000 f841 	bl	8006068 <_free_r>
 8005fe6:	e7c0      	b.n	8005f6a <_reclaim_reent+0x16>
 8005fe8:	680e      	ldr	r6, [r1, #0]
 8005fea:	4620      	mov	r0, r4
 8005fec:	f000 f83c 	bl	8006068 <_free_r>
 8005ff0:	4631      	mov	r1, r6
 8005ff2:	e7ef      	b.n	8005fd4 <_reclaim_reent+0x80>
 8005ff4:	2500      	movs	r5, #0
 8005ff6:	e7ef      	b.n	8005fd8 <_reclaim_reent+0x84>
 8005ff8:	bd70      	pop	{r4, r5, r6, pc}
 8005ffa:	bf00      	nop
 8005ffc:	20000184 	.word	0x20000184

08006000 <__libc_init_array>:
 8006000:	b570      	push	{r4, r5, r6, lr}
 8006002:	4d0d      	ldr	r5, [pc, #52]	; (8006038 <__libc_init_array+0x38>)
 8006004:	4c0d      	ldr	r4, [pc, #52]	; (800603c <__libc_init_array+0x3c>)
 8006006:	1b64      	subs	r4, r4, r5
 8006008:	10a4      	asrs	r4, r4, #2
 800600a:	2600      	movs	r6, #0
 800600c:	42a6      	cmp	r6, r4
 800600e:	d109      	bne.n	8006024 <__libc_init_array+0x24>
 8006010:	4d0b      	ldr	r5, [pc, #44]	; (8006040 <__libc_init_array+0x40>)
 8006012:	4c0c      	ldr	r4, [pc, #48]	; (8006044 <__libc_init_array+0x44>)
 8006014:	f000 f874 	bl	8006100 <_init>
 8006018:	1b64      	subs	r4, r4, r5
 800601a:	10a4      	asrs	r4, r4, #2
 800601c:	2600      	movs	r6, #0
 800601e:	42a6      	cmp	r6, r4
 8006020:	d105      	bne.n	800602e <__libc_init_array+0x2e>
 8006022:	bd70      	pop	{r4, r5, r6, pc}
 8006024:	f855 3b04 	ldr.w	r3, [r5], #4
 8006028:	4798      	blx	r3
 800602a:	3601      	adds	r6, #1
 800602c:	e7ee      	b.n	800600c <__libc_init_array+0xc>
 800602e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006032:	4798      	blx	r3
 8006034:	3601      	adds	r6, #1
 8006036:	e7f2      	b.n	800601e <__libc_init_array+0x1e>
 8006038:	080064fc 	.word	0x080064fc
 800603c:	080064fc 	.word	0x080064fc
 8006040:	080064fc 	.word	0x080064fc
 8006044:	08006500 	.word	0x08006500

08006048 <__retarget_lock_acquire_recursive>:
 8006048:	4770      	bx	lr

0800604a <__retarget_lock_release_recursive>:
 800604a:	4770      	bx	lr

0800604c <memcpy>:
 800604c:	440a      	add	r2, r1
 800604e:	4291      	cmp	r1, r2
 8006050:	f100 33ff 	add.w	r3, r0, #4294967295
 8006054:	d100      	bne.n	8006058 <memcpy+0xc>
 8006056:	4770      	bx	lr
 8006058:	b510      	push	{r4, lr}
 800605a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800605e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006062:	4291      	cmp	r1, r2
 8006064:	d1f9      	bne.n	800605a <memcpy+0xe>
 8006066:	bd10      	pop	{r4, pc}

08006068 <_free_r>:
 8006068:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800606a:	2900      	cmp	r1, #0
 800606c:	d044      	beq.n	80060f8 <_free_r+0x90>
 800606e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006072:	9001      	str	r0, [sp, #4]
 8006074:	2b00      	cmp	r3, #0
 8006076:	f1a1 0404 	sub.w	r4, r1, #4
 800607a:	bfb8      	it	lt
 800607c:	18e4      	addlt	r4, r4, r3
 800607e:	f7ff ff55 	bl	8005f2c <__malloc_lock>
 8006082:	4a1e      	ldr	r2, [pc, #120]	; (80060fc <_free_r+0x94>)
 8006084:	9801      	ldr	r0, [sp, #4]
 8006086:	6813      	ldr	r3, [r2, #0]
 8006088:	b933      	cbnz	r3, 8006098 <_free_r+0x30>
 800608a:	6063      	str	r3, [r4, #4]
 800608c:	6014      	str	r4, [r2, #0]
 800608e:	b003      	add	sp, #12
 8006090:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006094:	f7ff bf50 	b.w	8005f38 <__malloc_unlock>
 8006098:	42a3      	cmp	r3, r4
 800609a:	d908      	bls.n	80060ae <_free_r+0x46>
 800609c:	6825      	ldr	r5, [r4, #0]
 800609e:	1961      	adds	r1, r4, r5
 80060a0:	428b      	cmp	r3, r1
 80060a2:	bf01      	itttt	eq
 80060a4:	6819      	ldreq	r1, [r3, #0]
 80060a6:	685b      	ldreq	r3, [r3, #4]
 80060a8:	1949      	addeq	r1, r1, r5
 80060aa:	6021      	streq	r1, [r4, #0]
 80060ac:	e7ed      	b.n	800608a <_free_r+0x22>
 80060ae:	461a      	mov	r2, r3
 80060b0:	685b      	ldr	r3, [r3, #4]
 80060b2:	b10b      	cbz	r3, 80060b8 <_free_r+0x50>
 80060b4:	42a3      	cmp	r3, r4
 80060b6:	d9fa      	bls.n	80060ae <_free_r+0x46>
 80060b8:	6811      	ldr	r1, [r2, #0]
 80060ba:	1855      	adds	r5, r2, r1
 80060bc:	42a5      	cmp	r5, r4
 80060be:	d10b      	bne.n	80060d8 <_free_r+0x70>
 80060c0:	6824      	ldr	r4, [r4, #0]
 80060c2:	4421      	add	r1, r4
 80060c4:	1854      	adds	r4, r2, r1
 80060c6:	42a3      	cmp	r3, r4
 80060c8:	6011      	str	r1, [r2, #0]
 80060ca:	d1e0      	bne.n	800608e <_free_r+0x26>
 80060cc:	681c      	ldr	r4, [r3, #0]
 80060ce:	685b      	ldr	r3, [r3, #4]
 80060d0:	6053      	str	r3, [r2, #4]
 80060d2:	440c      	add	r4, r1
 80060d4:	6014      	str	r4, [r2, #0]
 80060d6:	e7da      	b.n	800608e <_free_r+0x26>
 80060d8:	d902      	bls.n	80060e0 <_free_r+0x78>
 80060da:	230c      	movs	r3, #12
 80060dc:	6003      	str	r3, [r0, #0]
 80060de:	e7d6      	b.n	800608e <_free_r+0x26>
 80060e0:	6825      	ldr	r5, [r4, #0]
 80060e2:	1961      	adds	r1, r4, r5
 80060e4:	428b      	cmp	r3, r1
 80060e6:	bf04      	itt	eq
 80060e8:	6819      	ldreq	r1, [r3, #0]
 80060ea:	685b      	ldreq	r3, [r3, #4]
 80060ec:	6063      	str	r3, [r4, #4]
 80060ee:	bf04      	itt	eq
 80060f0:	1949      	addeq	r1, r1, r5
 80060f2:	6021      	streq	r1, [r4, #0]
 80060f4:	6054      	str	r4, [r2, #4]
 80060f6:	e7ca      	b.n	800608e <_free_r+0x26>
 80060f8:	b003      	add	sp, #12
 80060fa:	bd30      	pop	{r4, r5, pc}
 80060fc:	20001c44 	.word	0x20001c44

08006100 <_init>:
 8006100:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006102:	bf00      	nop
 8006104:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006106:	bc08      	pop	{r3}
 8006108:	469e      	mov	lr, r3
 800610a:	4770      	bx	lr

0800610c <_fini>:
 800610c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800610e:	bf00      	nop
 8006110:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006112:	bc08      	pop	{r3}
 8006114:	469e      	mov	lr, r3
 8006116:	4770      	bx	lr
