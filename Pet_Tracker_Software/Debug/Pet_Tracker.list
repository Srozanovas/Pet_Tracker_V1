
Pet_Tracker.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007770  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f0  08007900  08007900  00017900  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080079f0  080079f0  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  080079f0  080079f0  000179f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080079f8  080079f8  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080079f8  080079f8  000179f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080079fc  080079fc  000179fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08007a00  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001bf0  20000074  08007a74  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001c64  08007a74  00021c64  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00020b48  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003d62  00000000  00000000  00040bec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001a70  00000000  00000000  00044950  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001908  00000000  00000000  000463c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003c7a  00000000  00000000  00047cc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001dcd2  00000000  00000000  0004b942  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e1f80  00000000  00000000  00069614  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0014b594  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007378  00000000  00000000  0014b5e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080078e8 	.word	0x080078e8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	080078e8 	.word	0x080078e8

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b974 	b.w	80004d0 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	4604      	mov	r4, r0
 8000208:	468e      	mov	lr, r1
 800020a:	2b00      	cmp	r3, #0
 800020c:	d14d      	bne.n	80002aa <__udivmoddi4+0xaa>
 800020e:	428a      	cmp	r2, r1
 8000210:	4694      	mov	ip, r2
 8000212:	d969      	bls.n	80002e8 <__udivmoddi4+0xe8>
 8000214:	fab2 f282 	clz	r2, r2
 8000218:	b152      	cbz	r2, 8000230 <__udivmoddi4+0x30>
 800021a:	fa01 f302 	lsl.w	r3, r1, r2
 800021e:	f1c2 0120 	rsb	r1, r2, #32
 8000222:	fa20 f101 	lsr.w	r1, r0, r1
 8000226:	fa0c fc02 	lsl.w	ip, ip, r2
 800022a:	ea41 0e03 	orr.w	lr, r1, r3
 800022e:	4094      	lsls	r4, r2
 8000230:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000234:	0c21      	lsrs	r1, r4, #16
 8000236:	fbbe f6f8 	udiv	r6, lr, r8
 800023a:	fa1f f78c 	uxth.w	r7, ip
 800023e:	fb08 e316 	mls	r3, r8, r6, lr
 8000242:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000246:	fb06 f107 	mul.w	r1, r6, r7
 800024a:	4299      	cmp	r1, r3
 800024c:	d90a      	bls.n	8000264 <__udivmoddi4+0x64>
 800024e:	eb1c 0303 	adds.w	r3, ip, r3
 8000252:	f106 30ff 	add.w	r0, r6, #4294967295
 8000256:	f080 811f 	bcs.w	8000498 <__udivmoddi4+0x298>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 811c 	bls.w	8000498 <__udivmoddi4+0x298>
 8000260:	3e02      	subs	r6, #2
 8000262:	4463      	add	r3, ip
 8000264:	1a5b      	subs	r3, r3, r1
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb3 f0f8 	udiv	r0, r3, r8
 800026c:	fb08 3310 	mls	r3, r8, r0, r3
 8000270:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000274:	fb00 f707 	mul.w	r7, r0, r7
 8000278:	42a7      	cmp	r7, r4
 800027a:	d90a      	bls.n	8000292 <__udivmoddi4+0x92>
 800027c:	eb1c 0404 	adds.w	r4, ip, r4
 8000280:	f100 33ff 	add.w	r3, r0, #4294967295
 8000284:	f080 810a 	bcs.w	800049c <__udivmoddi4+0x29c>
 8000288:	42a7      	cmp	r7, r4
 800028a:	f240 8107 	bls.w	800049c <__udivmoddi4+0x29c>
 800028e:	4464      	add	r4, ip
 8000290:	3802      	subs	r0, #2
 8000292:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000296:	1be4      	subs	r4, r4, r7
 8000298:	2600      	movs	r6, #0
 800029a:	b11d      	cbz	r5, 80002a4 <__udivmoddi4+0xa4>
 800029c:	40d4      	lsrs	r4, r2
 800029e:	2300      	movs	r3, #0
 80002a0:	e9c5 4300 	strd	r4, r3, [r5]
 80002a4:	4631      	mov	r1, r6
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d909      	bls.n	80002c2 <__udivmoddi4+0xc2>
 80002ae:	2d00      	cmp	r5, #0
 80002b0:	f000 80ef 	beq.w	8000492 <__udivmoddi4+0x292>
 80002b4:	2600      	movs	r6, #0
 80002b6:	e9c5 0100 	strd	r0, r1, [r5]
 80002ba:	4630      	mov	r0, r6
 80002bc:	4631      	mov	r1, r6
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	fab3 f683 	clz	r6, r3
 80002c6:	2e00      	cmp	r6, #0
 80002c8:	d14a      	bne.n	8000360 <__udivmoddi4+0x160>
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xd4>
 80002ce:	4282      	cmp	r2, r0
 80002d0:	f200 80f9 	bhi.w	80004c6 <__udivmoddi4+0x2c6>
 80002d4:	1a84      	subs	r4, r0, r2
 80002d6:	eb61 0303 	sbc.w	r3, r1, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	469e      	mov	lr, r3
 80002de:	2d00      	cmp	r5, #0
 80002e0:	d0e0      	beq.n	80002a4 <__udivmoddi4+0xa4>
 80002e2:	e9c5 4e00 	strd	r4, lr, [r5]
 80002e6:	e7dd      	b.n	80002a4 <__udivmoddi4+0xa4>
 80002e8:	b902      	cbnz	r2, 80002ec <__udivmoddi4+0xec>
 80002ea:	deff      	udf	#255	; 0xff
 80002ec:	fab2 f282 	clz	r2, r2
 80002f0:	2a00      	cmp	r2, #0
 80002f2:	f040 8092 	bne.w	800041a <__udivmoddi4+0x21a>
 80002f6:	eba1 010c 	sub.w	r1, r1, ip
 80002fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fe:	fa1f fe8c 	uxth.w	lr, ip
 8000302:	2601      	movs	r6, #1
 8000304:	0c20      	lsrs	r0, r4, #16
 8000306:	fbb1 f3f7 	udiv	r3, r1, r7
 800030a:	fb07 1113 	mls	r1, r7, r3, r1
 800030e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000312:	fb0e f003 	mul.w	r0, lr, r3
 8000316:	4288      	cmp	r0, r1
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x12c>
 800031a:	eb1c 0101 	adds.w	r1, ip, r1
 800031e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x12a>
 8000324:	4288      	cmp	r0, r1
 8000326:	f200 80cb 	bhi.w	80004c0 <__udivmoddi4+0x2c0>
 800032a:	4643      	mov	r3, r8
 800032c:	1a09      	subs	r1, r1, r0
 800032e:	b2a4      	uxth	r4, r4
 8000330:	fbb1 f0f7 	udiv	r0, r1, r7
 8000334:	fb07 1110 	mls	r1, r7, r0, r1
 8000338:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800033c:	fb0e fe00 	mul.w	lr, lr, r0
 8000340:	45a6      	cmp	lr, r4
 8000342:	d908      	bls.n	8000356 <__udivmoddi4+0x156>
 8000344:	eb1c 0404 	adds.w	r4, ip, r4
 8000348:	f100 31ff 	add.w	r1, r0, #4294967295
 800034c:	d202      	bcs.n	8000354 <__udivmoddi4+0x154>
 800034e:	45a6      	cmp	lr, r4
 8000350:	f200 80bb 	bhi.w	80004ca <__udivmoddi4+0x2ca>
 8000354:	4608      	mov	r0, r1
 8000356:	eba4 040e 	sub.w	r4, r4, lr
 800035a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800035e:	e79c      	b.n	800029a <__udivmoddi4+0x9a>
 8000360:	f1c6 0720 	rsb	r7, r6, #32
 8000364:	40b3      	lsls	r3, r6
 8000366:	fa22 fc07 	lsr.w	ip, r2, r7
 800036a:	ea4c 0c03 	orr.w	ip, ip, r3
 800036e:	fa20 f407 	lsr.w	r4, r0, r7
 8000372:	fa01 f306 	lsl.w	r3, r1, r6
 8000376:	431c      	orrs	r4, r3
 8000378:	40f9      	lsrs	r1, r7
 800037a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800037e:	fa00 f306 	lsl.w	r3, r0, r6
 8000382:	fbb1 f8f9 	udiv	r8, r1, r9
 8000386:	0c20      	lsrs	r0, r4, #16
 8000388:	fa1f fe8c 	uxth.w	lr, ip
 800038c:	fb09 1118 	mls	r1, r9, r8, r1
 8000390:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000394:	fb08 f00e 	mul.w	r0, r8, lr
 8000398:	4288      	cmp	r0, r1
 800039a:	fa02 f206 	lsl.w	r2, r2, r6
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b8>
 80003a0:	eb1c 0101 	adds.w	r1, ip, r1
 80003a4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a8:	f080 8088 	bcs.w	80004bc <__udivmoddi4+0x2bc>
 80003ac:	4288      	cmp	r0, r1
 80003ae:	f240 8085 	bls.w	80004bc <__udivmoddi4+0x2bc>
 80003b2:	f1a8 0802 	sub.w	r8, r8, #2
 80003b6:	4461      	add	r1, ip
 80003b8:	1a09      	subs	r1, r1, r0
 80003ba:	b2a4      	uxth	r4, r4
 80003bc:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c0:	fb09 1110 	mls	r1, r9, r0, r1
 80003c4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003cc:	458e      	cmp	lr, r1
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1e2>
 80003d0:	eb1c 0101 	adds.w	r1, ip, r1
 80003d4:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d8:	d26c      	bcs.n	80004b4 <__udivmoddi4+0x2b4>
 80003da:	458e      	cmp	lr, r1
 80003dc:	d96a      	bls.n	80004b4 <__udivmoddi4+0x2b4>
 80003de:	3802      	subs	r0, #2
 80003e0:	4461      	add	r1, ip
 80003e2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003e6:	fba0 9402 	umull	r9, r4, r0, r2
 80003ea:	eba1 010e 	sub.w	r1, r1, lr
 80003ee:	42a1      	cmp	r1, r4
 80003f0:	46c8      	mov	r8, r9
 80003f2:	46a6      	mov	lr, r4
 80003f4:	d356      	bcc.n	80004a4 <__udivmoddi4+0x2a4>
 80003f6:	d053      	beq.n	80004a0 <__udivmoddi4+0x2a0>
 80003f8:	b15d      	cbz	r5, 8000412 <__udivmoddi4+0x212>
 80003fa:	ebb3 0208 	subs.w	r2, r3, r8
 80003fe:	eb61 010e 	sbc.w	r1, r1, lr
 8000402:	fa01 f707 	lsl.w	r7, r1, r7
 8000406:	fa22 f306 	lsr.w	r3, r2, r6
 800040a:	40f1      	lsrs	r1, r6
 800040c:	431f      	orrs	r7, r3
 800040e:	e9c5 7100 	strd	r7, r1, [r5]
 8000412:	2600      	movs	r6, #0
 8000414:	4631      	mov	r1, r6
 8000416:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041a:	f1c2 0320 	rsb	r3, r2, #32
 800041e:	40d8      	lsrs	r0, r3
 8000420:	fa0c fc02 	lsl.w	ip, ip, r2
 8000424:	fa21 f303 	lsr.w	r3, r1, r3
 8000428:	4091      	lsls	r1, r2
 800042a:	4301      	orrs	r1, r0
 800042c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000430:	fa1f fe8c 	uxth.w	lr, ip
 8000434:	fbb3 f0f7 	udiv	r0, r3, r7
 8000438:	fb07 3610 	mls	r6, r7, r0, r3
 800043c:	0c0b      	lsrs	r3, r1, #16
 800043e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000442:	fb00 f60e 	mul.w	r6, r0, lr
 8000446:	429e      	cmp	r6, r3
 8000448:	fa04 f402 	lsl.w	r4, r4, r2
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x260>
 800044e:	eb1c 0303 	adds.w	r3, ip, r3
 8000452:	f100 38ff 	add.w	r8, r0, #4294967295
 8000456:	d22f      	bcs.n	80004b8 <__udivmoddi4+0x2b8>
 8000458:	429e      	cmp	r6, r3
 800045a:	d92d      	bls.n	80004b8 <__udivmoddi4+0x2b8>
 800045c:	3802      	subs	r0, #2
 800045e:	4463      	add	r3, ip
 8000460:	1b9b      	subs	r3, r3, r6
 8000462:	b289      	uxth	r1, r1
 8000464:	fbb3 f6f7 	udiv	r6, r3, r7
 8000468:	fb07 3316 	mls	r3, r7, r6, r3
 800046c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000470:	fb06 f30e 	mul.w	r3, r6, lr
 8000474:	428b      	cmp	r3, r1
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x28a>
 8000478:	eb1c 0101 	adds.w	r1, ip, r1
 800047c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000480:	d216      	bcs.n	80004b0 <__udivmoddi4+0x2b0>
 8000482:	428b      	cmp	r3, r1
 8000484:	d914      	bls.n	80004b0 <__udivmoddi4+0x2b0>
 8000486:	3e02      	subs	r6, #2
 8000488:	4461      	add	r1, ip
 800048a:	1ac9      	subs	r1, r1, r3
 800048c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000490:	e738      	b.n	8000304 <__udivmoddi4+0x104>
 8000492:	462e      	mov	r6, r5
 8000494:	4628      	mov	r0, r5
 8000496:	e705      	b.n	80002a4 <__udivmoddi4+0xa4>
 8000498:	4606      	mov	r6, r0
 800049a:	e6e3      	b.n	8000264 <__udivmoddi4+0x64>
 800049c:	4618      	mov	r0, r3
 800049e:	e6f8      	b.n	8000292 <__udivmoddi4+0x92>
 80004a0:	454b      	cmp	r3, r9
 80004a2:	d2a9      	bcs.n	80003f8 <__udivmoddi4+0x1f8>
 80004a4:	ebb9 0802 	subs.w	r8, r9, r2
 80004a8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004ac:	3801      	subs	r0, #1
 80004ae:	e7a3      	b.n	80003f8 <__udivmoddi4+0x1f8>
 80004b0:	4646      	mov	r6, r8
 80004b2:	e7ea      	b.n	800048a <__udivmoddi4+0x28a>
 80004b4:	4620      	mov	r0, r4
 80004b6:	e794      	b.n	80003e2 <__udivmoddi4+0x1e2>
 80004b8:	4640      	mov	r0, r8
 80004ba:	e7d1      	b.n	8000460 <__udivmoddi4+0x260>
 80004bc:	46d0      	mov	r8, sl
 80004be:	e77b      	b.n	80003b8 <__udivmoddi4+0x1b8>
 80004c0:	3b02      	subs	r3, #2
 80004c2:	4461      	add	r1, ip
 80004c4:	e732      	b.n	800032c <__udivmoddi4+0x12c>
 80004c6:	4630      	mov	r0, r6
 80004c8:	e709      	b.n	80002de <__udivmoddi4+0xde>
 80004ca:	4464      	add	r4, ip
 80004cc:	3802      	subs	r0, #2
 80004ce:	e742      	b.n	8000356 <__udivmoddi4+0x156>

080004d0 <__aeabi_idiv0>:
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop

080004d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d8:	f000 fca7 	bl	8000e2a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004dc:	f000 f81e 	bl	800051c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004e0:	f000 f93e 	bl	8000760 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80004e4:	f000 f8dc 	bl	80006a0 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 80004e8:	f000 f85e 	bl	80005a8 <MX_I2C1_Init>
  MX_I2C2_Init();
 80004ec:	f000 f89a 	bl	8000624 <MX_I2C2_Init>
  MX_USART2_UART_Init();
 80004f0:	f000 f906 	bl	8000700 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80004f4:	f004 fb7e 	bl	8004bf4 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80004f8:	4a05      	ldr	r2, [pc, #20]	; (8000510 <main+0x3c>)
 80004fa:	2100      	movs	r1, #0
 80004fc:	4805      	ldr	r0, [pc, #20]	; (8000514 <main+0x40>)
 80004fe:	f004 fbc3 	bl	8004c88 <osThreadNew>
 8000502:	4603      	mov	r3, r0
 8000504:	4a04      	ldr	r2, [pc, #16]	; (8000518 <main+0x44>)
 8000506:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000508:	f004 fb98 	bl	8004c3c <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800050c:	e7fe      	b.n	800050c <main+0x38>
 800050e:	bf00      	nop
 8000510:	08007924 	.word	0x08007924
 8000514:	0800086d 	.word	0x0800086d
 8000518:	20000240 	.word	0x20000240

0800051c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	b096      	sub	sp, #88	; 0x58
 8000520:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000522:	f107 0314 	add.w	r3, r7, #20
 8000526:	2244      	movs	r2, #68	; 0x44
 8000528:	2100      	movs	r1, #0
 800052a:	4618      	mov	r0, r3
 800052c:	f007 f912 	bl	8007754 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000530:	463b      	mov	r3, r7
 8000532:	2200      	movs	r2, #0
 8000534:	601a      	str	r2, [r3, #0]
 8000536:	605a      	str	r2, [r3, #4]
 8000538:	609a      	str	r2, [r3, #8]
 800053a:	60da      	str	r2, [r3, #12]
 800053c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800053e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000542:	f001 fe93 	bl	800226c <HAL_PWREx_ControlVoltageScaling>
 8000546:	4603      	mov	r3, r0
 8000548:	2b00      	cmp	r3, #0
 800054a:	d001      	beq.n	8000550 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800054c:	f000 f9b0 	bl	80008b0 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000550:	2301      	movs	r3, #1
 8000552:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000554:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000558:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800055a:	2300      	movs	r3, #0
 800055c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800055e:	f107 0314 	add.w	r3, r7, #20
 8000562:	4618      	mov	r0, r3
 8000564:	f001 fed8 	bl	8002318 <HAL_RCC_OscConfig>
 8000568:	4603      	mov	r3, r0
 800056a:	2b00      	cmp	r3, #0
 800056c:	d001      	beq.n	8000572 <SystemClock_Config+0x56>
  {
    Error_Handler();
 800056e:	f000 f99f 	bl	80008b0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000572:	230f      	movs	r3, #15
 8000574:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8000576:	2302      	movs	r3, #2
 8000578:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800057a:	2300      	movs	r3, #0
 800057c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800057e:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8000582:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8000584:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8000588:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800058a:	463b      	mov	r3, r7
 800058c:	2100      	movs	r1, #0
 800058e:	4618      	mov	r0, r3
 8000590:	f002 fad6 	bl	8002b40 <HAL_RCC_ClockConfig>
 8000594:	4603      	mov	r3, r0
 8000596:	2b00      	cmp	r3, #0
 8000598:	d001      	beq.n	800059e <SystemClock_Config+0x82>
  {
    Error_Handler();
 800059a:	f000 f989 	bl	80008b0 <Error_Handler>
  }
}
 800059e:	bf00      	nop
 80005a0:	3758      	adds	r7, #88	; 0x58
 80005a2:	46bd      	mov	sp, r7
 80005a4:	bd80      	pop	{r7, pc}
	...

080005a8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80005ac:	4b1b      	ldr	r3, [pc, #108]	; (800061c <MX_I2C1_Init+0x74>)
 80005ae:	4a1c      	ldr	r2, [pc, #112]	; (8000620 <MX_I2C1_Init+0x78>)
 80005b0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00000E14;
 80005b2:	4b1a      	ldr	r3, [pc, #104]	; (800061c <MX_I2C1_Init+0x74>)
 80005b4:	f640 6214 	movw	r2, #3604	; 0xe14
 80005b8:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80005ba:	4b18      	ldr	r3, [pc, #96]	; (800061c <MX_I2C1_Init+0x74>)
 80005bc:	2200      	movs	r2, #0
 80005be:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80005c0:	4b16      	ldr	r3, [pc, #88]	; (800061c <MX_I2C1_Init+0x74>)
 80005c2:	2201      	movs	r2, #1
 80005c4:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80005c6:	4b15      	ldr	r3, [pc, #84]	; (800061c <MX_I2C1_Init+0x74>)
 80005c8:	2200      	movs	r2, #0
 80005ca:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80005cc:	4b13      	ldr	r3, [pc, #76]	; (800061c <MX_I2C1_Init+0x74>)
 80005ce:	2200      	movs	r2, #0
 80005d0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80005d2:	4b12      	ldr	r3, [pc, #72]	; (800061c <MX_I2C1_Init+0x74>)
 80005d4:	2200      	movs	r2, #0
 80005d6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80005d8:	4b10      	ldr	r3, [pc, #64]	; (800061c <MX_I2C1_Init+0x74>)
 80005da:	2200      	movs	r2, #0
 80005dc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80005de:	4b0f      	ldr	r3, [pc, #60]	; (800061c <MX_I2C1_Init+0x74>)
 80005e0:	2200      	movs	r2, #0
 80005e2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80005e4:	480d      	ldr	r0, [pc, #52]	; (800061c <MX_I2C1_Init+0x74>)
 80005e6:	f000 ff75 	bl	80014d4 <HAL_I2C_Init>
 80005ea:	4603      	mov	r3, r0
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	d001      	beq.n	80005f4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80005f0:	f000 f95e 	bl	80008b0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80005f4:	2100      	movs	r1, #0
 80005f6:	4809      	ldr	r0, [pc, #36]	; (800061c <MX_I2C1_Init+0x74>)
 80005f8:	f001 fd93 	bl	8002122 <HAL_I2CEx_ConfigAnalogFilter>
 80005fc:	4603      	mov	r3, r0
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d001      	beq.n	8000606 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8000602:	f000 f955 	bl	80008b0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000606:	2100      	movs	r1, #0
 8000608:	4804      	ldr	r0, [pc, #16]	; (800061c <MX_I2C1_Init+0x74>)
 800060a:	f001 fdd5 	bl	80021b8 <HAL_I2CEx_ConfigDigitalFilter>
 800060e:	4603      	mov	r3, r0
 8000610:	2b00      	cmp	r3, #0
 8000612:	d001      	beq.n	8000618 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8000614:	f000 f94c 	bl	80008b0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000618:	bf00      	nop
 800061a:	bd80      	pop	{r7, pc}
 800061c:	20000090 	.word	0x20000090
 8000620:	40005400 	.word	0x40005400

08000624 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000628:	4b1b      	ldr	r3, [pc, #108]	; (8000698 <MX_I2C2_Init+0x74>)
 800062a:	4a1c      	ldr	r2, [pc, #112]	; (800069c <MX_I2C2_Init+0x78>)
 800062c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00000E14;
 800062e:	4b1a      	ldr	r3, [pc, #104]	; (8000698 <MX_I2C2_Init+0x74>)
 8000630:	f640 6214 	movw	r2, #3604	; 0xe14
 8000634:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000636:	4b18      	ldr	r3, [pc, #96]	; (8000698 <MX_I2C2_Init+0x74>)
 8000638:	2200      	movs	r2, #0
 800063a:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800063c:	4b16      	ldr	r3, [pc, #88]	; (8000698 <MX_I2C2_Init+0x74>)
 800063e:	2201      	movs	r2, #1
 8000640:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000642:	4b15      	ldr	r3, [pc, #84]	; (8000698 <MX_I2C2_Init+0x74>)
 8000644:	2200      	movs	r2, #0
 8000646:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000648:	4b13      	ldr	r3, [pc, #76]	; (8000698 <MX_I2C2_Init+0x74>)
 800064a:	2200      	movs	r2, #0
 800064c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800064e:	4b12      	ldr	r3, [pc, #72]	; (8000698 <MX_I2C2_Init+0x74>)
 8000650:	2200      	movs	r2, #0
 8000652:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000654:	4b10      	ldr	r3, [pc, #64]	; (8000698 <MX_I2C2_Init+0x74>)
 8000656:	2200      	movs	r2, #0
 8000658:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800065a:	4b0f      	ldr	r3, [pc, #60]	; (8000698 <MX_I2C2_Init+0x74>)
 800065c:	2200      	movs	r2, #0
 800065e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000660:	480d      	ldr	r0, [pc, #52]	; (8000698 <MX_I2C2_Init+0x74>)
 8000662:	f000 ff37 	bl	80014d4 <HAL_I2C_Init>
 8000666:	4603      	mov	r3, r0
 8000668:	2b00      	cmp	r3, #0
 800066a:	d001      	beq.n	8000670 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 800066c:	f000 f920 	bl	80008b0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000670:	2100      	movs	r1, #0
 8000672:	4809      	ldr	r0, [pc, #36]	; (8000698 <MX_I2C2_Init+0x74>)
 8000674:	f001 fd55 	bl	8002122 <HAL_I2CEx_ConfigAnalogFilter>
 8000678:	4603      	mov	r3, r0
 800067a:	2b00      	cmp	r3, #0
 800067c:	d001      	beq.n	8000682 <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 800067e:	f000 f917 	bl	80008b0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000682:	2100      	movs	r1, #0
 8000684:	4804      	ldr	r0, [pc, #16]	; (8000698 <MX_I2C2_Init+0x74>)
 8000686:	f001 fd97 	bl	80021b8 <HAL_I2CEx_ConfigDigitalFilter>
 800068a:	4603      	mov	r3, r0
 800068c:	2b00      	cmp	r3, #0
 800068e:	d001      	beq.n	8000694 <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 8000690:	f000 f90e 	bl	80008b0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000694:	bf00      	nop
 8000696:	bd80      	pop	{r7, pc}
 8000698:	200000e4 	.word	0x200000e4
 800069c:	40005800 	.word	0x40005800

080006a0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80006a4:	4b14      	ldr	r3, [pc, #80]	; (80006f8 <MX_USART1_UART_Init+0x58>)
 80006a6:	4a15      	ldr	r2, [pc, #84]	; (80006fc <MX_USART1_UART_Init+0x5c>)
 80006a8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80006aa:	4b13      	ldr	r3, [pc, #76]	; (80006f8 <MX_USART1_UART_Init+0x58>)
 80006ac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006b0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80006b2:	4b11      	ldr	r3, [pc, #68]	; (80006f8 <MX_USART1_UART_Init+0x58>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80006b8:	4b0f      	ldr	r3, [pc, #60]	; (80006f8 <MX_USART1_UART_Init+0x58>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80006be:	4b0e      	ldr	r3, [pc, #56]	; (80006f8 <MX_USART1_UART_Init+0x58>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80006c4:	4b0c      	ldr	r3, [pc, #48]	; (80006f8 <MX_USART1_UART_Init+0x58>)
 80006c6:	220c      	movs	r2, #12
 80006c8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006ca:	4b0b      	ldr	r3, [pc, #44]	; (80006f8 <MX_USART1_UART_Init+0x58>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80006d0:	4b09      	ldr	r3, [pc, #36]	; (80006f8 <MX_USART1_UART_Init+0x58>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006d6:	4b08      	ldr	r3, [pc, #32]	; (80006f8 <MX_USART1_UART_Init+0x58>)
 80006d8:	2200      	movs	r2, #0
 80006da:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006dc:	4b06      	ldr	r3, [pc, #24]	; (80006f8 <MX_USART1_UART_Init+0x58>)
 80006de:	2200      	movs	r2, #0
 80006e0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80006e2:	4805      	ldr	r0, [pc, #20]	; (80006f8 <MX_USART1_UART_Init+0x58>)
 80006e4:	f003 fa3c 	bl	8003b60 <HAL_UART_Init>
 80006e8:	4603      	mov	r3, r0
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d001      	beq.n	80006f2 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80006ee:	f000 f8df 	bl	80008b0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80006f2:	bf00      	nop
 80006f4:	bd80      	pop	{r7, pc}
 80006f6:	bf00      	nop
 80006f8:	20000138 	.word	0x20000138
 80006fc:	40013800 	.word	0x40013800

08000700 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000704:	4b14      	ldr	r3, [pc, #80]	; (8000758 <MX_USART2_UART_Init+0x58>)
 8000706:	4a15      	ldr	r2, [pc, #84]	; (800075c <MX_USART2_UART_Init+0x5c>)
 8000708:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800070a:	4b13      	ldr	r3, [pc, #76]	; (8000758 <MX_USART2_UART_Init+0x58>)
 800070c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000710:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000712:	4b11      	ldr	r3, [pc, #68]	; (8000758 <MX_USART2_UART_Init+0x58>)
 8000714:	2200      	movs	r2, #0
 8000716:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000718:	4b0f      	ldr	r3, [pc, #60]	; (8000758 <MX_USART2_UART_Init+0x58>)
 800071a:	2200      	movs	r2, #0
 800071c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800071e:	4b0e      	ldr	r3, [pc, #56]	; (8000758 <MX_USART2_UART_Init+0x58>)
 8000720:	2200      	movs	r2, #0
 8000722:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000724:	4b0c      	ldr	r3, [pc, #48]	; (8000758 <MX_USART2_UART_Init+0x58>)
 8000726:	220c      	movs	r2, #12
 8000728:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800072a:	4b0b      	ldr	r3, [pc, #44]	; (8000758 <MX_USART2_UART_Init+0x58>)
 800072c:	2200      	movs	r2, #0
 800072e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000730:	4b09      	ldr	r3, [pc, #36]	; (8000758 <MX_USART2_UART_Init+0x58>)
 8000732:	2200      	movs	r2, #0
 8000734:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000736:	4b08      	ldr	r3, [pc, #32]	; (8000758 <MX_USART2_UART_Init+0x58>)
 8000738:	2200      	movs	r2, #0
 800073a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800073c:	4b06      	ldr	r3, [pc, #24]	; (8000758 <MX_USART2_UART_Init+0x58>)
 800073e:	2200      	movs	r2, #0
 8000740:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000742:	4805      	ldr	r0, [pc, #20]	; (8000758 <MX_USART2_UART_Init+0x58>)
 8000744:	f003 fa0c 	bl	8003b60 <HAL_UART_Init>
 8000748:	4603      	mov	r3, r0
 800074a:	2b00      	cmp	r3, #0
 800074c:	d001      	beq.n	8000752 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800074e:	f000 f8af 	bl	80008b0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000752:	bf00      	nop
 8000754:	bd80      	pop	{r7, pc}
 8000756:	bf00      	nop
 8000758:	200001bc 	.word	0x200001bc
 800075c:	40004400 	.word	0x40004400

08000760 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b08a      	sub	sp, #40	; 0x28
 8000764:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000766:	f107 0314 	add.w	r3, r7, #20
 800076a:	2200      	movs	r2, #0
 800076c:	601a      	str	r2, [r3, #0]
 800076e:	605a      	str	r2, [r3, #4]
 8000770:	609a      	str	r2, [r3, #8]
 8000772:	60da      	str	r2, [r3, #12]
 8000774:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000776:	4b3a      	ldr	r3, [pc, #232]	; (8000860 <MX_GPIO_Init+0x100>)
 8000778:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800077a:	4a39      	ldr	r2, [pc, #228]	; (8000860 <MX_GPIO_Init+0x100>)
 800077c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000780:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000782:	4b37      	ldr	r3, [pc, #220]	; (8000860 <MX_GPIO_Init+0x100>)
 8000784:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000786:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800078a:	613b      	str	r3, [r7, #16]
 800078c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800078e:	4b34      	ldr	r3, [pc, #208]	; (8000860 <MX_GPIO_Init+0x100>)
 8000790:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000792:	4a33      	ldr	r2, [pc, #204]	; (8000860 <MX_GPIO_Init+0x100>)
 8000794:	f043 0301 	orr.w	r3, r3, #1
 8000798:	64d3      	str	r3, [r2, #76]	; 0x4c
 800079a:	4b31      	ldr	r3, [pc, #196]	; (8000860 <MX_GPIO_Init+0x100>)
 800079c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800079e:	f003 0301 	and.w	r3, r3, #1
 80007a2:	60fb      	str	r3, [r7, #12]
 80007a4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007a6:	4b2e      	ldr	r3, [pc, #184]	; (8000860 <MX_GPIO_Init+0x100>)
 80007a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007aa:	4a2d      	ldr	r2, [pc, #180]	; (8000860 <MX_GPIO_Init+0x100>)
 80007ac:	f043 0304 	orr.w	r3, r3, #4
 80007b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007b2:	4b2b      	ldr	r3, [pc, #172]	; (8000860 <MX_GPIO_Init+0x100>)
 80007b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007b6:	f003 0304 	and.w	r3, r3, #4
 80007ba:	60bb      	str	r3, [r7, #8]
 80007bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007be:	4b28      	ldr	r3, [pc, #160]	; (8000860 <MX_GPIO_Init+0x100>)
 80007c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007c2:	4a27      	ldr	r2, [pc, #156]	; (8000860 <MX_GPIO_Init+0x100>)
 80007c4:	f043 0302 	orr.w	r3, r3, #2
 80007c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007ca:	4b25      	ldr	r3, [pc, #148]	; (8000860 <MX_GPIO_Init+0x100>)
 80007cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007ce:	f003 0302 	and.w	r3, r3, #2
 80007d2:	607b      	str	r3, [r7, #4]
 80007d4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 80007d6:	2200      	movs	r2, #0
 80007d8:	f641 11fa 	movw	r1, #6650	; 0x19fa
 80007dc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007e0:	f000 fe46 	bl	8001470 <HAL_GPIO_WritePin>
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_11
                          |GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 80007e4:	2200      	movs	r2, #0
 80007e6:	f44f 7174 	mov.w	r1, #976	; 0x3d0
 80007ea:	481e      	ldr	r0, [pc, #120]	; (8000864 <MX_GPIO_Init+0x104>)
 80007ec:	f000 fe40 	bl	8001470 <HAL_GPIO_WritePin>
                          |GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_12
 80007f0:	2200      	movs	r2, #0
 80007f2:	f24f 0107 	movw	r1, #61447	; 0xf007
 80007f6:	481c      	ldr	r0, [pc, #112]	; (8000868 <MX_GPIO_Init+0x108>)
 80007f8:	f000 fe3a 	bl	8001470 <HAL_GPIO_WritePin>
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pins : PA1 PA3 PA4 PA5
                           PA6 PA7 PA8 PA11
                           PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 80007fc:	f641 13fa 	movw	r3, #6650	; 0x19fa
 8000800:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_11
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000802:	2301      	movs	r3, #1
 8000804:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000806:	2300      	movs	r3, #0
 8000808:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800080a:	2300      	movs	r3, #0
 800080c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800080e:	f107 0314 	add.w	r3, r7, #20
 8000812:	4619      	mov	r1, r3
 8000814:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000818:	f000 fcb0 	bl	800117c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC4 PC6 PC7 PC8
                           PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 800081c:	f44f 7374 	mov.w	r3, #976	; 0x3d0
 8000820:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000822:	2301      	movs	r3, #1
 8000824:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000826:	2300      	movs	r3, #0
 8000828:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800082a:	2300      	movs	r3, #0
 800082c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800082e:	f107 0314 	add.w	r3, r7, #20
 8000832:	4619      	mov	r1, r3
 8000834:	480b      	ldr	r0, [pc, #44]	; (8000864 <MX_GPIO_Init+0x104>)
 8000836:	f000 fca1 	bl	800117c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB12
                           PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_12
 800083a:	f24f 0307 	movw	r3, #61447	; 0xf007
 800083e:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000840:	2301      	movs	r3, #1
 8000842:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000844:	2300      	movs	r3, #0
 8000846:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000848:	2300      	movs	r3, #0
 800084a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800084c:	f107 0314 	add.w	r3, r7, #20
 8000850:	4619      	mov	r1, r3
 8000852:	4805      	ldr	r0, [pc, #20]	; (8000868 <MX_GPIO_Init+0x108>)
 8000854:	f000 fc92 	bl	800117c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000858:	bf00      	nop
 800085a:	3728      	adds	r7, #40	; 0x28
 800085c:	46bd      	mov	sp, r7
 800085e:	bd80      	pop	{r7, pc}
 8000860:	40021000 	.word	0x40021000
 8000864:	48000800 	.word	0x48000800
 8000868:	48000400 	.word	0x48000400

0800086c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b082      	sub	sp, #8
 8000870:	af00      	add	r7, sp, #0
 8000872:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 8000874:	2101      	movs	r1, #1
 8000876:	4804      	ldr	r0, [pc, #16]	; (8000888 <StartDefaultTask+0x1c>)
 8000878:	f000 fe12 	bl	80014a0 <HAL_GPIO_TogglePin>
    osDelay(500);
 800087c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000880:	f004 fa94 	bl	8004dac <osDelay>
    HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 8000884:	e7f6      	b.n	8000874 <StartDefaultTask+0x8>
 8000886:	bf00      	nop
 8000888:	48000400 	.word	0x48000400

0800088c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b082      	sub	sp, #8
 8000890:	af00      	add	r7, sp, #0
 8000892:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	4a04      	ldr	r2, [pc, #16]	; (80008ac <HAL_TIM_PeriodElapsedCallback+0x20>)
 800089a:	4293      	cmp	r3, r2
 800089c:	d101      	bne.n	80008a2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800089e:	f000 fadd 	bl	8000e5c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80008a2:	bf00      	nop
 80008a4:	3708      	adds	r7, #8
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bd80      	pop	{r7, pc}
 80008aa:	bf00      	nop
 80008ac:	40012c00 	.word	0x40012c00

080008b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008b0:	b480      	push	{r7}
 80008b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008b4:	b672      	cpsid	i
}
 80008b6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008b8:	e7fe      	b.n	80008b8 <Error_Handler+0x8>
	...

080008bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b082      	sub	sp, #8
 80008c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008c2:	4b11      	ldr	r3, [pc, #68]	; (8000908 <HAL_MspInit+0x4c>)
 80008c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008c6:	4a10      	ldr	r2, [pc, #64]	; (8000908 <HAL_MspInit+0x4c>)
 80008c8:	f043 0301 	orr.w	r3, r3, #1
 80008cc:	6613      	str	r3, [r2, #96]	; 0x60
 80008ce:	4b0e      	ldr	r3, [pc, #56]	; (8000908 <HAL_MspInit+0x4c>)
 80008d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008d2:	f003 0301 	and.w	r3, r3, #1
 80008d6:	607b      	str	r3, [r7, #4]
 80008d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008da:	4b0b      	ldr	r3, [pc, #44]	; (8000908 <HAL_MspInit+0x4c>)
 80008dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008de:	4a0a      	ldr	r2, [pc, #40]	; (8000908 <HAL_MspInit+0x4c>)
 80008e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008e4:	6593      	str	r3, [r2, #88]	; 0x58
 80008e6:	4b08      	ldr	r3, [pc, #32]	; (8000908 <HAL_MspInit+0x4c>)
 80008e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008ee:	603b      	str	r3, [r7, #0]
 80008f0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80008f2:	2200      	movs	r2, #0
 80008f4:	210f      	movs	r1, #15
 80008f6:	f06f 0001 	mvn.w	r0, #1
 80008fa:	f000 fb87 	bl	800100c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008fe:	bf00      	nop
 8000900:	3708      	adds	r7, #8
 8000902:	46bd      	mov	sp, r7
 8000904:	bd80      	pop	{r7, pc}
 8000906:	bf00      	nop
 8000908:	40021000 	.word	0x40021000

0800090c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b0a4      	sub	sp, #144	; 0x90
 8000910:	af00      	add	r7, sp, #0
 8000912:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000914:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000918:	2200      	movs	r2, #0
 800091a:	601a      	str	r2, [r3, #0]
 800091c:	605a      	str	r2, [r3, #4]
 800091e:	609a      	str	r2, [r3, #8]
 8000920:	60da      	str	r2, [r3, #12]
 8000922:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000924:	f107 031c 	add.w	r3, r7, #28
 8000928:	2260      	movs	r2, #96	; 0x60
 800092a:	2100      	movs	r1, #0
 800092c:	4618      	mov	r0, r3
 800092e:	f006 ff11 	bl	8007754 <memset>
  if(hi2c->Instance==I2C1)
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	681b      	ldr	r3, [r3, #0]
 8000936:	4a52      	ldr	r2, [pc, #328]	; (8000a80 <HAL_I2C_MspInit+0x174>)
 8000938:	4293      	cmp	r3, r2
 800093a:	d14c      	bne.n	80009d6 <HAL_I2C_MspInit+0xca>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800093c:	2340      	movs	r3, #64	; 0x40
 800093e:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000940:	2300      	movs	r3, #0
 8000942:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000944:	f107 031c 	add.w	r3, r7, #28
 8000948:	4618      	mov	r0, r3
 800094a:	f002 fb4d 	bl	8002fe8 <HAL_RCCEx_PeriphCLKConfig>
 800094e:	4603      	mov	r3, r0
 8000950:	2b00      	cmp	r3, #0
 8000952:	d001      	beq.n	8000958 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000954:	f7ff ffac 	bl	80008b0 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000958:	4b4a      	ldr	r3, [pc, #296]	; (8000a84 <HAL_I2C_MspInit+0x178>)
 800095a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800095c:	4a49      	ldr	r2, [pc, #292]	; (8000a84 <HAL_I2C_MspInit+0x178>)
 800095e:	f043 0301 	orr.w	r3, r3, #1
 8000962:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000964:	4b47      	ldr	r3, [pc, #284]	; (8000a84 <HAL_I2C_MspInit+0x178>)
 8000966:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000968:	f003 0301 	and.w	r3, r3, #1
 800096c:	61bb      	str	r3, [r7, #24]
 800096e:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000970:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000974:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000976:	2312      	movs	r3, #18
 8000978:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097c:	2300      	movs	r3, #0
 800097e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000982:	2303      	movs	r3, #3
 8000984:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000988:	2304      	movs	r3, #4
 800098a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800098e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000992:	4619      	mov	r1, r3
 8000994:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000998:	f000 fbf0 	bl	800117c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800099c:	4b39      	ldr	r3, [pc, #228]	; (8000a84 <HAL_I2C_MspInit+0x178>)
 800099e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009a0:	4a38      	ldr	r2, [pc, #224]	; (8000a84 <HAL_I2C_MspInit+0x178>)
 80009a2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80009a6:	6593      	str	r3, [r2, #88]	; 0x58
 80009a8:	4b36      	ldr	r3, [pc, #216]	; (8000a84 <HAL_I2C_MspInit+0x178>)
 80009aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80009b0:	617b      	str	r3, [r7, #20]
 80009b2:	697b      	ldr	r3, [r7, #20]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 80009b4:	2200      	movs	r2, #0
 80009b6:	2105      	movs	r1, #5
 80009b8:	201f      	movs	r0, #31
 80009ba:	f000 fb27 	bl	800100c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80009be:	201f      	movs	r0, #31
 80009c0:	f000 fb40 	bl	8001044 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 5, 0);
 80009c4:	2200      	movs	r2, #0
 80009c6:	2105      	movs	r1, #5
 80009c8:	2020      	movs	r0, #32
 80009ca:	f000 fb1f 	bl	800100c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80009ce:	2020      	movs	r0, #32
 80009d0:	f000 fb38 	bl	8001044 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80009d4:	e04f      	b.n	8000a76 <HAL_I2C_MspInit+0x16a>
  else if(hi2c->Instance==I2C2)
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	4a2b      	ldr	r2, [pc, #172]	; (8000a88 <HAL_I2C_MspInit+0x17c>)
 80009dc:	4293      	cmp	r3, r2
 80009de:	d14a      	bne.n	8000a76 <HAL_I2C_MspInit+0x16a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80009e0:	2380      	movs	r3, #128	; 0x80
 80009e2:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80009e4:	2300      	movs	r3, #0
 80009e6:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80009e8:	f107 031c 	add.w	r3, r7, #28
 80009ec:	4618      	mov	r0, r3
 80009ee:	f002 fafb 	bl	8002fe8 <HAL_RCCEx_PeriphCLKConfig>
 80009f2:	4603      	mov	r3, r0
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d001      	beq.n	80009fc <HAL_I2C_MspInit+0xf0>
      Error_Handler();
 80009f8:	f7ff ff5a 	bl	80008b0 <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009fc:	4b21      	ldr	r3, [pc, #132]	; (8000a84 <HAL_I2C_MspInit+0x178>)
 80009fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a00:	4a20      	ldr	r2, [pc, #128]	; (8000a84 <HAL_I2C_MspInit+0x178>)
 8000a02:	f043 0302 	orr.w	r3, r3, #2
 8000a06:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a08:	4b1e      	ldr	r3, [pc, #120]	; (8000a84 <HAL_I2C_MspInit+0x178>)
 8000a0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a0c:	f003 0302 	and.w	r3, r3, #2
 8000a10:	613b      	str	r3, [r7, #16]
 8000a12:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000a14:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000a18:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a1a:	2312      	movs	r3, #18
 8000a1c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a20:	2300      	movs	r3, #0
 8000a22:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a26:	2303      	movs	r3, #3
 8000a28:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000a2c:	2304      	movs	r3, #4
 8000a2e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a32:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000a36:	4619      	mov	r1, r3
 8000a38:	4814      	ldr	r0, [pc, #80]	; (8000a8c <HAL_I2C_MspInit+0x180>)
 8000a3a:	f000 fb9f 	bl	800117c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000a3e:	4b11      	ldr	r3, [pc, #68]	; (8000a84 <HAL_I2C_MspInit+0x178>)
 8000a40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a42:	4a10      	ldr	r2, [pc, #64]	; (8000a84 <HAL_I2C_MspInit+0x178>)
 8000a44:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000a48:	6593      	str	r3, [r2, #88]	; 0x58
 8000a4a:	4b0e      	ldr	r3, [pc, #56]	; (8000a84 <HAL_I2C_MspInit+0x178>)
 8000a4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a4e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000a52:	60fb      	str	r3, [r7, #12]
 8000a54:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 5, 0);
 8000a56:	2200      	movs	r2, #0
 8000a58:	2105      	movs	r1, #5
 8000a5a:	2021      	movs	r0, #33	; 0x21
 8000a5c:	f000 fad6 	bl	800100c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8000a60:	2021      	movs	r0, #33	; 0x21
 8000a62:	f000 faef 	bl	8001044 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 5, 0);
 8000a66:	2200      	movs	r2, #0
 8000a68:	2105      	movs	r1, #5
 8000a6a:	2022      	movs	r0, #34	; 0x22
 8000a6c:	f000 face 	bl	800100c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 8000a70:	2022      	movs	r0, #34	; 0x22
 8000a72:	f000 fae7 	bl	8001044 <HAL_NVIC_EnableIRQ>
}
 8000a76:	bf00      	nop
 8000a78:	3790      	adds	r7, #144	; 0x90
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bd80      	pop	{r7, pc}
 8000a7e:	bf00      	nop
 8000a80:	40005400 	.word	0x40005400
 8000a84:	40021000 	.word	0x40021000
 8000a88:	40005800 	.word	0x40005800
 8000a8c:	48000400 	.word	0x48000400

08000a90 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b0a4      	sub	sp, #144	; 0x90
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a98:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	601a      	str	r2, [r3, #0]
 8000aa0:	605a      	str	r2, [r3, #4]
 8000aa2:	609a      	str	r2, [r3, #8]
 8000aa4:	60da      	str	r2, [r3, #12]
 8000aa6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000aa8:	f107 031c 	add.w	r3, r7, #28
 8000aac:	2260      	movs	r2, #96	; 0x60
 8000aae:	2100      	movs	r1, #0
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	f006 fe4f 	bl	8007754 <memset>
  if(huart->Instance==USART1)
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	4a54      	ldr	r2, [pc, #336]	; (8000c0c <HAL_UART_MspInit+0x17c>)
 8000abc:	4293      	cmp	r3, r2
 8000abe:	d142      	bne.n	8000b46 <HAL_UART_MspInit+0xb6>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000ac0:	2301      	movs	r3, #1
 8000ac2:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ac8:	f107 031c 	add.w	r3, r7, #28
 8000acc:	4618      	mov	r0, r3
 8000ace:	f002 fa8b 	bl	8002fe8 <HAL_RCCEx_PeriphCLKConfig>
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d001      	beq.n	8000adc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000ad8:	f7ff feea 	bl	80008b0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000adc:	4b4c      	ldr	r3, [pc, #304]	; (8000c10 <HAL_UART_MspInit+0x180>)
 8000ade:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ae0:	4a4b      	ldr	r2, [pc, #300]	; (8000c10 <HAL_UART_MspInit+0x180>)
 8000ae2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ae6:	6613      	str	r3, [r2, #96]	; 0x60
 8000ae8:	4b49      	ldr	r3, [pc, #292]	; (8000c10 <HAL_UART_MspInit+0x180>)
 8000aea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000aec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000af0:	61bb      	str	r3, [r7, #24]
 8000af2:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000af4:	4b46      	ldr	r3, [pc, #280]	; (8000c10 <HAL_UART_MspInit+0x180>)
 8000af6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000af8:	4a45      	ldr	r2, [pc, #276]	; (8000c10 <HAL_UART_MspInit+0x180>)
 8000afa:	f043 0302 	orr.w	r3, r3, #2
 8000afe:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b00:	4b43      	ldr	r3, [pc, #268]	; (8000c10 <HAL_UART_MspInit+0x180>)
 8000b02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b04:	f003 0302 	and.w	r3, r3, #2
 8000b08:	617b      	str	r3, [r7, #20]
 8000b0a:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000b0c:	23c0      	movs	r3, #192	; 0xc0
 8000b0e:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b10:	2302      	movs	r3, #2
 8000b12:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b16:	2300      	movs	r3, #0
 8000b18:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b1c:	2303      	movs	r3, #3
 8000b1e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000b22:	2307      	movs	r3, #7
 8000b24:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b28:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000b2c:	4619      	mov	r1, r3
 8000b2e:	4839      	ldr	r0, [pc, #228]	; (8000c14 <HAL_UART_MspInit+0x184>)
 8000b30:	f000 fb24 	bl	800117c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8000b34:	2200      	movs	r2, #0
 8000b36:	2105      	movs	r1, #5
 8000b38:	2025      	movs	r0, #37	; 0x25
 8000b3a:	f000 fa67 	bl	800100c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000b3e:	2025      	movs	r0, #37	; 0x25
 8000b40:	f000 fa80 	bl	8001044 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000b44:	e05d      	b.n	8000c02 <HAL_UART_MspInit+0x172>
  else if(huart->Instance==USART2)
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	4a33      	ldr	r2, [pc, #204]	; (8000c18 <HAL_UART_MspInit+0x188>)
 8000b4c:	4293      	cmp	r3, r2
 8000b4e:	d158      	bne.n	8000c02 <HAL_UART_MspInit+0x172>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000b50:	2302      	movs	r3, #2
 8000b52:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000b54:	2300      	movs	r3, #0
 8000b56:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b58:	f107 031c 	add.w	r3, r7, #28
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	f002 fa43 	bl	8002fe8 <HAL_RCCEx_PeriphCLKConfig>
 8000b62:	4603      	mov	r3, r0
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d001      	beq.n	8000b6c <HAL_UART_MspInit+0xdc>
      Error_Handler();
 8000b68:	f7ff fea2 	bl	80008b0 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b6c:	4b28      	ldr	r3, [pc, #160]	; (8000c10 <HAL_UART_MspInit+0x180>)
 8000b6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b70:	4a27      	ldr	r2, [pc, #156]	; (8000c10 <HAL_UART_MspInit+0x180>)
 8000b72:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b76:	6593      	str	r3, [r2, #88]	; 0x58
 8000b78:	4b25      	ldr	r3, [pc, #148]	; (8000c10 <HAL_UART_MspInit+0x180>)
 8000b7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b80:	613b      	str	r3, [r7, #16]
 8000b82:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b84:	4b22      	ldr	r3, [pc, #136]	; (8000c10 <HAL_UART_MspInit+0x180>)
 8000b86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b88:	4a21      	ldr	r2, [pc, #132]	; (8000c10 <HAL_UART_MspInit+0x180>)
 8000b8a:	f043 0301 	orr.w	r3, r3, #1
 8000b8e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b90:	4b1f      	ldr	r3, [pc, #124]	; (8000c10 <HAL_UART_MspInit+0x180>)
 8000b92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b94:	f003 0301 	and.w	r3, r3, #1
 8000b98:	60fb      	str	r3, [r7, #12]
 8000b9a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000b9c:	2304      	movs	r3, #4
 8000b9e:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ba0:	2302      	movs	r3, #2
 8000ba2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bac:	2303      	movs	r3, #3
 8000bae:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000bb2:	2307      	movs	r3, #7
 8000bb4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bb8:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000bbc:	4619      	mov	r1, r3
 8000bbe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bc2:	f000 fadb 	bl	800117c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000bc6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000bca:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bcc:	2302      	movs	r3, #2
 8000bce:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bd8:	2303      	movs	r3, #3
 8000bda:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8000bde:	2303      	movs	r3, #3
 8000be0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000be4:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000be8:	4619      	mov	r1, r3
 8000bea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bee:	f000 fac5 	bl	800117c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	2105      	movs	r1, #5
 8000bf6:	2026      	movs	r0, #38	; 0x26
 8000bf8:	f000 fa08 	bl	800100c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000bfc:	2026      	movs	r0, #38	; 0x26
 8000bfe:	f000 fa21 	bl	8001044 <HAL_NVIC_EnableIRQ>
}
 8000c02:	bf00      	nop
 8000c04:	3790      	adds	r7, #144	; 0x90
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bd80      	pop	{r7, pc}
 8000c0a:	bf00      	nop
 8000c0c:	40013800 	.word	0x40013800
 8000c10:	40021000 	.word	0x40021000
 8000c14:	48000400 	.word	0x48000400
 8000c18:	40004400 	.word	0x40004400

08000c1c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b08c      	sub	sp, #48	; 0x30
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8000c24:	2300      	movs	r3, #0
 8000c26:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000c2a:	4b2f      	ldr	r3, [pc, #188]	; (8000ce8 <HAL_InitTick+0xcc>)
 8000c2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c2e:	4a2e      	ldr	r2, [pc, #184]	; (8000ce8 <HAL_InitTick+0xcc>)
 8000c30:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000c34:	6613      	str	r3, [r2, #96]	; 0x60
 8000c36:	4b2c      	ldr	r3, [pc, #176]	; (8000ce8 <HAL_InitTick+0xcc>)
 8000c38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c3a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000c3e:	60bb      	str	r3, [r7, #8]
 8000c40:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000c42:	f107 020c 	add.w	r2, r7, #12
 8000c46:	f107 0310 	add.w	r3, r7, #16
 8000c4a:	4611      	mov	r1, r2
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	f002 f939 	bl	8002ec4 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8000c52:	f002 f921 	bl	8002e98 <HAL_RCC_GetPCLK2Freq>
 8000c56:	4603      	mov	r3, r0
 8000c58:	005b      	lsls	r3, r3, #1
 8000c5a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000c5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c5e:	4a23      	ldr	r2, [pc, #140]	; (8000cec <HAL_InitTick+0xd0>)
 8000c60:	fba2 2303 	umull	r2, r3, r2, r3
 8000c64:	0c9b      	lsrs	r3, r3, #18
 8000c66:	3b01      	subs	r3, #1
 8000c68:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000c6a:	4b21      	ldr	r3, [pc, #132]	; (8000cf0 <HAL_InitTick+0xd4>)
 8000c6c:	4a21      	ldr	r2, [pc, #132]	; (8000cf4 <HAL_InitTick+0xd8>)
 8000c6e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000c70:	4b1f      	ldr	r3, [pc, #124]	; (8000cf0 <HAL_InitTick+0xd4>)
 8000c72:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000c76:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000c78:	4a1d      	ldr	r2, [pc, #116]	; (8000cf0 <HAL_InitTick+0xd4>)
 8000c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c7c:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000c7e:	4b1c      	ldr	r3, [pc, #112]	; (8000cf0 <HAL_InitTick+0xd4>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c84:	4b1a      	ldr	r3, [pc, #104]	; (8000cf0 <HAL_InitTick+0xd4>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c8a:	4b19      	ldr	r3, [pc, #100]	; (8000cf0 <HAL_InitTick+0xd4>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000c90:	4817      	ldr	r0, [pc, #92]	; (8000cf0 <HAL_InitTick+0xd4>)
 8000c92:	f002 fce5 	bl	8003660 <HAL_TIM_Base_Init>
 8000c96:	4603      	mov	r3, r0
 8000c98:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8000c9c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d11b      	bne.n	8000cdc <HAL_InitTick+0xc0>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000ca4:	4812      	ldr	r0, [pc, #72]	; (8000cf0 <HAL_InitTick+0xd4>)
 8000ca6:	f002 fd3d 	bl	8003724 <HAL_TIM_Base_Start_IT>
 8000caa:	4603      	mov	r3, r0
 8000cac:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8000cb0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d111      	bne.n	8000cdc <HAL_InitTick+0xc0>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000cb8:	2019      	movs	r0, #25
 8000cba:	f000 f9c3 	bl	8001044 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	2b0f      	cmp	r3, #15
 8000cc2:	d808      	bhi.n	8000cd6 <HAL_InitTick+0xba>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	6879      	ldr	r1, [r7, #4]
 8000cc8:	2019      	movs	r0, #25
 8000cca:	f000 f99f 	bl	800100c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000cce:	4a0a      	ldr	r2, [pc, #40]	; (8000cf8 <HAL_InitTick+0xdc>)
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	6013      	str	r3, [r2, #0]
 8000cd4:	e002      	b.n	8000cdc <HAL_InitTick+0xc0>
      }
      else
      {
        status = HAL_ERROR;
 8000cd6:	2301      	movs	r3, #1
 8000cd8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000cdc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	3730      	adds	r7, #48	; 0x30
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	bd80      	pop	{r7, pc}
 8000ce8:	40021000 	.word	0x40021000
 8000cec:	431bde83 	.word	0x431bde83
 8000cf0:	20000244 	.word	0x20000244
 8000cf4:	40012c00 	.word	0x40012c00
 8000cf8:	20000004 	.word	0x20000004

08000cfc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d00:	e7fe      	b.n	8000d00 <NMI_Handler+0x4>

08000d02 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d02:	b480      	push	{r7}
 8000d04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d06:	e7fe      	b.n	8000d06 <HardFault_Handler+0x4>

08000d08 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d0c:	e7fe      	b.n	8000d0c <MemManage_Handler+0x4>

08000d0e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d0e:	b480      	push	{r7}
 8000d10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d12:	e7fe      	b.n	8000d12 <BusFault_Handler+0x4>

08000d14 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d14:	b480      	push	{r7}
 8000d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d18:	e7fe      	b.n	8000d18 <UsageFault_Handler+0x4>

08000d1a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d1a:	b480      	push	{r7}
 8000d1c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d1e:	bf00      	nop
 8000d20:	46bd      	mov	sp, r7
 8000d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d26:	4770      	bx	lr

08000d28 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000d2c:	4802      	ldr	r0, [pc, #8]	; (8000d38 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8000d2e:	f002 fd4d 	bl	80037cc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8000d32:	bf00      	nop
 8000d34:	bd80      	pop	{r7, pc}
 8000d36:	bf00      	nop
 8000d38:	20000244 	.word	0x20000244

08000d3c <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8000d40:	4802      	ldr	r0, [pc, #8]	; (8000d4c <I2C1_EV_IRQHandler+0x10>)
 8000d42:	f000 fc56 	bl	80015f2 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8000d46:	bf00      	nop
 8000d48:	bd80      	pop	{r7, pc}
 8000d4a:	bf00      	nop
 8000d4c:	20000090 	.word	0x20000090

08000d50 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8000d54:	4802      	ldr	r0, [pc, #8]	; (8000d60 <I2C1_ER_IRQHandler+0x10>)
 8000d56:	f000 fc66 	bl	8001626 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8000d5a:	bf00      	nop
 8000d5c:	bd80      	pop	{r7, pc}
 8000d5e:	bf00      	nop
 8000d60:	20000090 	.word	0x20000090

08000d64 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8000d68:	4802      	ldr	r0, [pc, #8]	; (8000d74 <I2C2_EV_IRQHandler+0x10>)
 8000d6a:	f000 fc42 	bl	80015f2 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8000d6e:	bf00      	nop
 8000d70:	bd80      	pop	{r7, pc}
 8000d72:	bf00      	nop
 8000d74:	200000e4 	.word	0x200000e4

08000d78 <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 8000d7c:	4802      	ldr	r0, [pc, #8]	; (8000d88 <I2C2_ER_IRQHandler+0x10>)
 8000d7e:	f000 fc52 	bl	8001626 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 8000d82:	bf00      	nop
 8000d84:	bd80      	pop	{r7, pc}
 8000d86:	bf00      	nop
 8000d88:	200000e4 	.word	0x200000e4

08000d8c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000d90:	4802      	ldr	r0, [pc, #8]	; (8000d9c <USART1_IRQHandler+0x10>)
 8000d92:	f002 ff33 	bl	8003bfc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000d96:	bf00      	nop
 8000d98:	bd80      	pop	{r7, pc}
 8000d9a:	bf00      	nop
 8000d9c:	20000138 	.word	0x20000138

08000da0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000da4:	4802      	ldr	r0, [pc, #8]	; (8000db0 <USART2_IRQHandler+0x10>)
 8000da6:	f002 ff29 	bl	8003bfc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000daa:	bf00      	nop
 8000dac:	bd80      	pop	{r7, pc}
 8000dae:	bf00      	nop
 8000db0:	200001bc 	.word	0x200001bc

08000db4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000db4:	b480      	push	{r7}
 8000db6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000db8:	4b06      	ldr	r3, [pc, #24]	; (8000dd4 <SystemInit+0x20>)
 8000dba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000dbe:	4a05      	ldr	r2, [pc, #20]	; (8000dd4 <SystemInit+0x20>)
 8000dc0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000dc4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000dc8:	bf00      	nop
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd0:	4770      	bx	lr
 8000dd2:	bf00      	nop
 8000dd4:	e000ed00 	.word	0xe000ed00

08000dd8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000dd8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e10 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000ddc:	f7ff ffea 	bl	8000db4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000de0:	480c      	ldr	r0, [pc, #48]	; (8000e14 <LoopForever+0x6>)
  ldr r1, =_edata
 8000de2:	490d      	ldr	r1, [pc, #52]	; (8000e18 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000de4:	4a0d      	ldr	r2, [pc, #52]	; (8000e1c <LoopForever+0xe>)
  movs r3, #0
 8000de6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000de8:	e002      	b.n	8000df0 <LoopCopyDataInit>

08000dea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000dec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dee:	3304      	adds	r3, #4

08000df0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000df0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000df2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000df4:	d3f9      	bcc.n	8000dea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000df6:	4a0a      	ldr	r2, [pc, #40]	; (8000e20 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000df8:	4c0a      	ldr	r4, [pc, #40]	; (8000e24 <LoopForever+0x16>)
  movs r3, #0
 8000dfa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000dfc:	e001      	b.n	8000e02 <LoopFillZerobss>

08000dfe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dfe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e00:	3204      	adds	r2, #4

08000e02 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e02:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e04:	d3fb      	bcc.n	8000dfe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e06:	f006 fc71 	bl	80076ec <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000e0a:	f7ff fb63 	bl	80004d4 <main>

08000e0e <LoopForever>:

LoopForever:
    b LoopForever
 8000e0e:	e7fe      	b.n	8000e0e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000e10:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000e14:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e18:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000e1c:	08007a00 	.word	0x08007a00
  ldr r2, =_sbss
 8000e20:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000e24:	20001c64 	.word	0x20001c64

08000e28 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000e28:	e7fe      	b.n	8000e28 <ADC1_IRQHandler>

08000e2a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e2a:	b580      	push	{r7, lr}
 8000e2c:	b082      	sub	sp, #8
 8000e2e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000e30:	2300      	movs	r3, #0
 8000e32:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e34:	2003      	movs	r0, #3
 8000e36:	f000 f8de 	bl	8000ff6 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e3a:	200f      	movs	r0, #15
 8000e3c:	f7ff feee 	bl	8000c1c <HAL_InitTick>
 8000e40:	4603      	mov	r3, r0
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d002      	beq.n	8000e4c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000e46:	2301      	movs	r3, #1
 8000e48:	71fb      	strb	r3, [r7, #7]
 8000e4a:	e001      	b.n	8000e50 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000e4c:	f7ff fd36 	bl	80008bc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000e50:	79fb      	ldrb	r3, [r7, #7]
}
 8000e52:	4618      	mov	r0, r3
 8000e54:	3708      	adds	r7, #8
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bd80      	pop	{r7, pc}
	...

08000e5c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000e60:	4b06      	ldr	r3, [pc, #24]	; (8000e7c <HAL_IncTick+0x20>)
 8000e62:	781b      	ldrb	r3, [r3, #0]
 8000e64:	461a      	mov	r2, r3
 8000e66:	4b06      	ldr	r3, [pc, #24]	; (8000e80 <HAL_IncTick+0x24>)
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	4413      	add	r3, r2
 8000e6c:	4a04      	ldr	r2, [pc, #16]	; (8000e80 <HAL_IncTick+0x24>)
 8000e6e:	6013      	str	r3, [r2, #0]
}
 8000e70:	bf00      	nop
 8000e72:	46bd      	mov	sp, r7
 8000e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e78:	4770      	bx	lr
 8000e7a:	bf00      	nop
 8000e7c:	20000008 	.word	0x20000008
 8000e80:	20000290 	.word	0x20000290

08000e84 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e84:	b480      	push	{r7}
 8000e86:	af00      	add	r7, sp, #0
  return uwTick;
 8000e88:	4b03      	ldr	r3, [pc, #12]	; (8000e98 <HAL_GetTick+0x14>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
}
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e94:	4770      	bx	lr
 8000e96:	bf00      	nop
 8000e98:	20000290 	.word	0x20000290

08000e9c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	b085      	sub	sp, #20
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	f003 0307 	and.w	r3, r3, #7
 8000eaa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000eac:	4b0c      	ldr	r3, [pc, #48]	; (8000ee0 <__NVIC_SetPriorityGrouping+0x44>)
 8000eae:	68db      	ldr	r3, [r3, #12]
 8000eb0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000eb2:	68ba      	ldr	r2, [r7, #8]
 8000eb4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000eb8:	4013      	ands	r3, r2
 8000eba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ebc:	68fb      	ldr	r3, [r7, #12]
 8000ebe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ec0:	68bb      	ldr	r3, [r7, #8]
 8000ec2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ec4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ec8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ecc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ece:	4a04      	ldr	r2, [pc, #16]	; (8000ee0 <__NVIC_SetPriorityGrouping+0x44>)
 8000ed0:	68bb      	ldr	r3, [r7, #8]
 8000ed2:	60d3      	str	r3, [r2, #12]
}
 8000ed4:	bf00      	nop
 8000ed6:	3714      	adds	r7, #20
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ede:	4770      	bx	lr
 8000ee0:	e000ed00 	.word	0xe000ed00

08000ee4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ee8:	4b04      	ldr	r3, [pc, #16]	; (8000efc <__NVIC_GetPriorityGrouping+0x18>)
 8000eea:	68db      	ldr	r3, [r3, #12]
 8000eec:	0a1b      	lsrs	r3, r3, #8
 8000eee:	f003 0307 	and.w	r3, r3, #7
}
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efa:	4770      	bx	lr
 8000efc:	e000ed00 	.word	0xe000ed00

08000f00 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f00:	b480      	push	{r7}
 8000f02:	b083      	sub	sp, #12
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	4603      	mov	r3, r0
 8000f08:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	db0b      	blt.n	8000f2a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f12:	79fb      	ldrb	r3, [r7, #7]
 8000f14:	f003 021f 	and.w	r2, r3, #31
 8000f18:	4907      	ldr	r1, [pc, #28]	; (8000f38 <__NVIC_EnableIRQ+0x38>)
 8000f1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f1e:	095b      	lsrs	r3, r3, #5
 8000f20:	2001      	movs	r0, #1
 8000f22:	fa00 f202 	lsl.w	r2, r0, r2
 8000f26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000f2a:	bf00      	nop
 8000f2c:	370c      	adds	r7, #12
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f34:	4770      	bx	lr
 8000f36:	bf00      	nop
 8000f38:	e000e100 	.word	0xe000e100

08000f3c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	b083      	sub	sp, #12
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	4603      	mov	r3, r0
 8000f44:	6039      	str	r1, [r7, #0]
 8000f46:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	db0a      	blt.n	8000f66 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f50:	683b      	ldr	r3, [r7, #0]
 8000f52:	b2da      	uxtb	r2, r3
 8000f54:	490c      	ldr	r1, [pc, #48]	; (8000f88 <__NVIC_SetPriority+0x4c>)
 8000f56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f5a:	0112      	lsls	r2, r2, #4
 8000f5c:	b2d2      	uxtb	r2, r2
 8000f5e:	440b      	add	r3, r1
 8000f60:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f64:	e00a      	b.n	8000f7c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f66:	683b      	ldr	r3, [r7, #0]
 8000f68:	b2da      	uxtb	r2, r3
 8000f6a:	4908      	ldr	r1, [pc, #32]	; (8000f8c <__NVIC_SetPriority+0x50>)
 8000f6c:	79fb      	ldrb	r3, [r7, #7]
 8000f6e:	f003 030f 	and.w	r3, r3, #15
 8000f72:	3b04      	subs	r3, #4
 8000f74:	0112      	lsls	r2, r2, #4
 8000f76:	b2d2      	uxtb	r2, r2
 8000f78:	440b      	add	r3, r1
 8000f7a:	761a      	strb	r2, [r3, #24]
}
 8000f7c:	bf00      	nop
 8000f7e:	370c      	adds	r7, #12
 8000f80:	46bd      	mov	sp, r7
 8000f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f86:	4770      	bx	lr
 8000f88:	e000e100 	.word	0xe000e100
 8000f8c:	e000ed00 	.word	0xe000ed00

08000f90 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f90:	b480      	push	{r7}
 8000f92:	b089      	sub	sp, #36	; 0x24
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	60f8      	str	r0, [r7, #12]
 8000f98:	60b9      	str	r1, [r7, #8]
 8000f9a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f9c:	68fb      	ldr	r3, [r7, #12]
 8000f9e:	f003 0307 	and.w	r3, r3, #7
 8000fa2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fa4:	69fb      	ldr	r3, [r7, #28]
 8000fa6:	f1c3 0307 	rsb	r3, r3, #7
 8000faa:	2b04      	cmp	r3, #4
 8000fac:	bf28      	it	cs
 8000fae:	2304      	movcs	r3, #4
 8000fb0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fb2:	69fb      	ldr	r3, [r7, #28]
 8000fb4:	3304      	adds	r3, #4
 8000fb6:	2b06      	cmp	r3, #6
 8000fb8:	d902      	bls.n	8000fc0 <NVIC_EncodePriority+0x30>
 8000fba:	69fb      	ldr	r3, [r7, #28]
 8000fbc:	3b03      	subs	r3, #3
 8000fbe:	e000      	b.n	8000fc2 <NVIC_EncodePriority+0x32>
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fc4:	f04f 32ff 	mov.w	r2, #4294967295
 8000fc8:	69bb      	ldr	r3, [r7, #24]
 8000fca:	fa02 f303 	lsl.w	r3, r2, r3
 8000fce:	43da      	mvns	r2, r3
 8000fd0:	68bb      	ldr	r3, [r7, #8]
 8000fd2:	401a      	ands	r2, r3
 8000fd4:	697b      	ldr	r3, [r7, #20]
 8000fd6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fd8:	f04f 31ff 	mov.w	r1, #4294967295
 8000fdc:	697b      	ldr	r3, [r7, #20]
 8000fde:	fa01 f303 	lsl.w	r3, r1, r3
 8000fe2:	43d9      	mvns	r1, r3
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fe8:	4313      	orrs	r3, r2
         );
}
 8000fea:	4618      	mov	r0, r3
 8000fec:	3724      	adds	r7, #36	; 0x24
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff4:	4770      	bx	lr

08000ff6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ff6:	b580      	push	{r7, lr}
 8000ff8:	b082      	sub	sp, #8
 8000ffa:	af00      	add	r7, sp, #0
 8000ffc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ffe:	6878      	ldr	r0, [r7, #4]
 8001000:	f7ff ff4c 	bl	8000e9c <__NVIC_SetPriorityGrouping>
}
 8001004:	bf00      	nop
 8001006:	3708      	adds	r7, #8
 8001008:	46bd      	mov	sp, r7
 800100a:	bd80      	pop	{r7, pc}

0800100c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b086      	sub	sp, #24
 8001010:	af00      	add	r7, sp, #0
 8001012:	4603      	mov	r3, r0
 8001014:	60b9      	str	r1, [r7, #8]
 8001016:	607a      	str	r2, [r7, #4]
 8001018:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800101a:	2300      	movs	r3, #0
 800101c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800101e:	f7ff ff61 	bl	8000ee4 <__NVIC_GetPriorityGrouping>
 8001022:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001024:	687a      	ldr	r2, [r7, #4]
 8001026:	68b9      	ldr	r1, [r7, #8]
 8001028:	6978      	ldr	r0, [r7, #20]
 800102a:	f7ff ffb1 	bl	8000f90 <NVIC_EncodePriority>
 800102e:	4602      	mov	r2, r0
 8001030:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001034:	4611      	mov	r1, r2
 8001036:	4618      	mov	r0, r3
 8001038:	f7ff ff80 	bl	8000f3c <__NVIC_SetPriority>
}
 800103c:	bf00      	nop
 800103e:	3718      	adds	r7, #24
 8001040:	46bd      	mov	sp, r7
 8001042:	bd80      	pop	{r7, pc}

08001044 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b082      	sub	sp, #8
 8001048:	af00      	add	r7, sp, #0
 800104a:	4603      	mov	r3, r0
 800104c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800104e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001052:	4618      	mov	r0, r3
 8001054:	f7ff ff54 	bl	8000f00 <__NVIC_EnableIRQ>
}
 8001058:	bf00      	nop
 800105a:	3708      	adds	r7, #8
 800105c:	46bd      	mov	sp, r7
 800105e:	bd80      	pop	{r7, pc}

08001060 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001060:	b480      	push	{r7}
 8001062:	b085      	sub	sp, #20
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001068:	2300      	movs	r3, #0
 800106a:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001072:	b2db      	uxtb	r3, r3
 8001074:	2b02      	cmp	r3, #2
 8001076:	d008      	beq.n	800108a <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	2204      	movs	r2, #4
 800107c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	2200      	movs	r2, #0
 8001082:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001086:	2301      	movs	r3, #1
 8001088:	e022      	b.n	80010d0 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	681a      	ldr	r2, [r3, #0]
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	f022 020e 	bic.w	r2, r2, #14
 8001098:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	681a      	ldr	r2, [r3, #0]
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	f022 0201 	bic.w	r2, r2, #1
 80010a8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010ae:	f003 021c 	and.w	r2, r3, #28
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010b6:	2101      	movs	r1, #1
 80010b8:	fa01 f202 	lsl.w	r2, r1, r2
 80010bc:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	2201      	movs	r2, #1
 80010c2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	2200      	movs	r2, #0
 80010ca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 80010ce:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80010d0:	4618      	mov	r0, r3
 80010d2:	3714      	adds	r7, #20
 80010d4:	46bd      	mov	sp, r7
 80010d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010da:	4770      	bx	lr

080010dc <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b084      	sub	sp, #16
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80010e4:	2300      	movs	r3, #0
 80010e6:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80010ee:	b2db      	uxtb	r3, r3
 80010f0:	2b02      	cmp	r3, #2
 80010f2:	d005      	beq.n	8001100 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	2204      	movs	r2, #4
 80010f8:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80010fa:	2301      	movs	r3, #1
 80010fc:	73fb      	strb	r3, [r7, #15]
 80010fe:	e029      	b.n	8001154 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	681a      	ldr	r2, [r3, #0]
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	f022 020e 	bic.w	r2, r2, #14
 800110e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	681a      	ldr	r2, [r3, #0]
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	f022 0201 	bic.w	r2, r2, #1
 800111e:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001124:	f003 021c 	and.w	r2, r3, #28
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800112c:	2101      	movs	r1, #1
 800112e:	fa01 f202 	lsl.w	r2, r1, r2
 8001132:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	2201      	movs	r2, #1
 8001138:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	2200      	movs	r2, #0
 8001140:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001148:	2b00      	cmp	r3, #0
 800114a:	d003      	beq.n	8001154 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001150:	6878      	ldr	r0, [r7, #4]
 8001152:	4798      	blx	r3
    }
  }
  return status;
 8001154:	7bfb      	ldrb	r3, [r7, #15]
}
 8001156:	4618      	mov	r0, r3
 8001158:	3710      	adds	r7, #16
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}

0800115e <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800115e:	b480      	push	{r7}
 8001160:	b083      	sub	sp, #12
 8001162:	af00      	add	r7, sp, #0
 8001164:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800116c:	b2db      	uxtb	r3, r3
}
 800116e:	4618      	mov	r0, r3
 8001170:	370c      	adds	r7, #12
 8001172:	46bd      	mov	sp, r7
 8001174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001178:	4770      	bx	lr
	...

0800117c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800117c:	b480      	push	{r7}
 800117e:	b087      	sub	sp, #28
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
 8001184:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001186:	2300      	movs	r3, #0
 8001188:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800118a:	e154      	b.n	8001436 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	681a      	ldr	r2, [r3, #0]
 8001190:	2101      	movs	r1, #1
 8001192:	697b      	ldr	r3, [r7, #20]
 8001194:	fa01 f303 	lsl.w	r3, r1, r3
 8001198:	4013      	ands	r3, r2
 800119a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	2b00      	cmp	r3, #0
 80011a0:	f000 8146 	beq.w	8001430 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80011a4:	683b      	ldr	r3, [r7, #0]
 80011a6:	685b      	ldr	r3, [r3, #4]
 80011a8:	f003 0303 	and.w	r3, r3, #3
 80011ac:	2b01      	cmp	r3, #1
 80011ae:	d005      	beq.n	80011bc <HAL_GPIO_Init+0x40>
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	685b      	ldr	r3, [r3, #4]
 80011b4:	f003 0303 	and.w	r3, r3, #3
 80011b8:	2b02      	cmp	r3, #2
 80011ba:	d130      	bne.n	800121e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	689b      	ldr	r3, [r3, #8]
 80011c0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80011c2:	697b      	ldr	r3, [r7, #20]
 80011c4:	005b      	lsls	r3, r3, #1
 80011c6:	2203      	movs	r2, #3
 80011c8:	fa02 f303 	lsl.w	r3, r2, r3
 80011cc:	43db      	mvns	r3, r3
 80011ce:	693a      	ldr	r2, [r7, #16]
 80011d0:	4013      	ands	r3, r2
 80011d2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80011d4:	683b      	ldr	r3, [r7, #0]
 80011d6:	68da      	ldr	r2, [r3, #12]
 80011d8:	697b      	ldr	r3, [r7, #20]
 80011da:	005b      	lsls	r3, r3, #1
 80011dc:	fa02 f303 	lsl.w	r3, r2, r3
 80011e0:	693a      	ldr	r2, [r7, #16]
 80011e2:	4313      	orrs	r3, r2
 80011e4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	693a      	ldr	r2, [r7, #16]
 80011ea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	685b      	ldr	r3, [r3, #4]
 80011f0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80011f2:	2201      	movs	r2, #1
 80011f4:	697b      	ldr	r3, [r7, #20]
 80011f6:	fa02 f303 	lsl.w	r3, r2, r3
 80011fa:	43db      	mvns	r3, r3
 80011fc:	693a      	ldr	r2, [r7, #16]
 80011fe:	4013      	ands	r3, r2
 8001200:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001202:	683b      	ldr	r3, [r7, #0]
 8001204:	685b      	ldr	r3, [r3, #4]
 8001206:	091b      	lsrs	r3, r3, #4
 8001208:	f003 0201 	and.w	r2, r3, #1
 800120c:	697b      	ldr	r3, [r7, #20]
 800120e:	fa02 f303 	lsl.w	r3, r2, r3
 8001212:	693a      	ldr	r2, [r7, #16]
 8001214:	4313      	orrs	r3, r2
 8001216:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	693a      	ldr	r2, [r7, #16]
 800121c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	685b      	ldr	r3, [r3, #4]
 8001222:	f003 0303 	and.w	r3, r3, #3
 8001226:	2b03      	cmp	r3, #3
 8001228:	d017      	beq.n	800125a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	68db      	ldr	r3, [r3, #12]
 800122e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001230:	697b      	ldr	r3, [r7, #20]
 8001232:	005b      	lsls	r3, r3, #1
 8001234:	2203      	movs	r2, #3
 8001236:	fa02 f303 	lsl.w	r3, r2, r3
 800123a:	43db      	mvns	r3, r3
 800123c:	693a      	ldr	r2, [r7, #16]
 800123e:	4013      	ands	r3, r2
 8001240:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001242:	683b      	ldr	r3, [r7, #0]
 8001244:	689a      	ldr	r2, [r3, #8]
 8001246:	697b      	ldr	r3, [r7, #20]
 8001248:	005b      	lsls	r3, r3, #1
 800124a:	fa02 f303 	lsl.w	r3, r2, r3
 800124e:	693a      	ldr	r2, [r7, #16]
 8001250:	4313      	orrs	r3, r2
 8001252:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	693a      	ldr	r2, [r7, #16]
 8001258:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800125a:	683b      	ldr	r3, [r7, #0]
 800125c:	685b      	ldr	r3, [r3, #4]
 800125e:	f003 0303 	and.w	r3, r3, #3
 8001262:	2b02      	cmp	r3, #2
 8001264:	d123      	bne.n	80012ae <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001266:	697b      	ldr	r3, [r7, #20]
 8001268:	08da      	lsrs	r2, r3, #3
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	3208      	adds	r2, #8
 800126e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001272:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001274:	697b      	ldr	r3, [r7, #20]
 8001276:	f003 0307 	and.w	r3, r3, #7
 800127a:	009b      	lsls	r3, r3, #2
 800127c:	220f      	movs	r2, #15
 800127e:	fa02 f303 	lsl.w	r3, r2, r3
 8001282:	43db      	mvns	r3, r3
 8001284:	693a      	ldr	r2, [r7, #16]
 8001286:	4013      	ands	r3, r2
 8001288:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800128a:	683b      	ldr	r3, [r7, #0]
 800128c:	691a      	ldr	r2, [r3, #16]
 800128e:	697b      	ldr	r3, [r7, #20]
 8001290:	f003 0307 	and.w	r3, r3, #7
 8001294:	009b      	lsls	r3, r3, #2
 8001296:	fa02 f303 	lsl.w	r3, r2, r3
 800129a:	693a      	ldr	r2, [r7, #16]
 800129c:	4313      	orrs	r3, r2
 800129e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80012a0:	697b      	ldr	r3, [r7, #20]
 80012a2:	08da      	lsrs	r2, r3, #3
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	3208      	adds	r2, #8
 80012a8:	6939      	ldr	r1, [r7, #16]
 80012aa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80012b4:	697b      	ldr	r3, [r7, #20]
 80012b6:	005b      	lsls	r3, r3, #1
 80012b8:	2203      	movs	r2, #3
 80012ba:	fa02 f303 	lsl.w	r3, r2, r3
 80012be:	43db      	mvns	r3, r3
 80012c0:	693a      	ldr	r2, [r7, #16]
 80012c2:	4013      	ands	r3, r2
 80012c4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80012c6:	683b      	ldr	r3, [r7, #0]
 80012c8:	685b      	ldr	r3, [r3, #4]
 80012ca:	f003 0203 	and.w	r2, r3, #3
 80012ce:	697b      	ldr	r3, [r7, #20]
 80012d0:	005b      	lsls	r3, r3, #1
 80012d2:	fa02 f303 	lsl.w	r3, r2, r3
 80012d6:	693a      	ldr	r2, [r7, #16]
 80012d8:	4313      	orrs	r3, r2
 80012da:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	693a      	ldr	r2, [r7, #16]
 80012e0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80012e2:	683b      	ldr	r3, [r7, #0]
 80012e4:	685b      	ldr	r3, [r3, #4]
 80012e6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	f000 80a0 	beq.w	8001430 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012f0:	4b58      	ldr	r3, [pc, #352]	; (8001454 <HAL_GPIO_Init+0x2d8>)
 80012f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012f4:	4a57      	ldr	r2, [pc, #348]	; (8001454 <HAL_GPIO_Init+0x2d8>)
 80012f6:	f043 0301 	orr.w	r3, r3, #1
 80012fa:	6613      	str	r3, [r2, #96]	; 0x60
 80012fc:	4b55      	ldr	r3, [pc, #340]	; (8001454 <HAL_GPIO_Init+0x2d8>)
 80012fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001300:	f003 0301 	and.w	r3, r3, #1
 8001304:	60bb      	str	r3, [r7, #8]
 8001306:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001308:	4a53      	ldr	r2, [pc, #332]	; (8001458 <HAL_GPIO_Init+0x2dc>)
 800130a:	697b      	ldr	r3, [r7, #20]
 800130c:	089b      	lsrs	r3, r3, #2
 800130e:	3302      	adds	r3, #2
 8001310:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001314:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001316:	697b      	ldr	r3, [r7, #20]
 8001318:	f003 0303 	and.w	r3, r3, #3
 800131c:	009b      	lsls	r3, r3, #2
 800131e:	220f      	movs	r2, #15
 8001320:	fa02 f303 	lsl.w	r3, r2, r3
 8001324:	43db      	mvns	r3, r3
 8001326:	693a      	ldr	r2, [r7, #16]
 8001328:	4013      	ands	r3, r2
 800132a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001332:	d019      	beq.n	8001368 <HAL_GPIO_Init+0x1ec>
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	4a49      	ldr	r2, [pc, #292]	; (800145c <HAL_GPIO_Init+0x2e0>)
 8001338:	4293      	cmp	r3, r2
 800133a:	d013      	beq.n	8001364 <HAL_GPIO_Init+0x1e8>
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	4a48      	ldr	r2, [pc, #288]	; (8001460 <HAL_GPIO_Init+0x2e4>)
 8001340:	4293      	cmp	r3, r2
 8001342:	d00d      	beq.n	8001360 <HAL_GPIO_Init+0x1e4>
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	4a47      	ldr	r2, [pc, #284]	; (8001464 <HAL_GPIO_Init+0x2e8>)
 8001348:	4293      	cmp	r3, r2
 800134a:	d007      	beq.n	800135c <HAL_GPIO_Init+0x1e0>
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	4a46      	ldr	r2, [pc, #280]	; (8001468 <HAL_GPIO_Init+0x2ec>)
 8001350:	4293      	cmp	r3, r2
 8001352:	d101      	bne.n	8001358 <HAL_GPIO_Init+0x1dc>
 8001354:	2304      	movs	r3, #4
 8001356:	e008      	b.n	800136a <HAL_GPIO_Init+0x1ee>
 8001358:	2307      	movs	r3, #7
 800135a:	e006      	b.n	800136a <HAL_GPIO_Init+0x1ee>
 800135c:	2303      	movs	r3, #3
 800135e:	e004      	b.n	800136a <HAL_GPIO_Init+0x1ee>
 8001360:	2302      	movs	r3, #2
 8001362:	e002      	b.n	800136a <HAL_GPIO_Init+0x1ee>
 8001364:	2301      	movs	r3, #1
 8001366:	e000      	b.n	800136a <HAL_GPIO_Init+0x1ee>
 8001368:	2300      	movs	r3, #0
 800136a:	697a      	ldr	r2, [r7, #20]
 800136c:	f002 0203 	and.w	r2, r2, #3
 8001370:	0092      	lsls	r2, r2, #2
 8001372:	4093      	lsls	r3, r2
 8001374:	693a      	ldr	r2, [r7, #16]
 8001376:	4313      	orrs	r3, r2
 8001378:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800137a:	4937      	ldr	r1, [pc, #220]	; (8001458 <HAL_GPIO_Init+0x2dc>)
 800137c:	697b      	ldr	r3, [r7, #20]
 800137e:	089b      	lsrs	r3, r3, #2
 8001380:	3302      	adds	r3, #2
 8001382:	693a      	ldr	r2, [r7, #16]
 8001384:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001388:	4b38      	ldr	r3, [pc, #224]	; (800146c <HAL_GPIO_Init+0x2f0>)
 800138a:	689b      	ldr	r3, [r3, #8]
 800138c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	43db      	mvns	r3, r3
 8001392:	693a      	ldr	r2, [r7, #16]
 8001394:	4013      	ands	r3, r2
 8001396:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001398:	683b      	ldr	r3, [r7, #0]
 800139a:	685b      	ldr	r3, [r3, #4]
 800139c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d003      	beq.n	80013ac <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 80013a4:	693a      	ldr	r2, [r7, #16]
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	4313      	orrs	r3, r2
 80013aa:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80013ac:	4a2f      	ldr	r2, [pc, #188]	; (800146c <HAL_GPIO_Init+0x2f0>)
 80013ae:	693b      	ldr	r3, [r7, #16]
 80013b0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80013b2:	4b2e      	ldr	r3, [pc, #184]	; (800146c <HAL_GPIO_Init+0x2f0>)
 80013b4:	68db      	ldr	r3, [r3, #12]
 80013b6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	43db      	mvns	r3, r3
 80013bc:	693a      	ldr	r2, [r7, #16]
 80013be:	4013      	ands	r3, r2
 80013c0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80013c2:	683b      	ldr	r3, [r7, #0]
 80013c4:	685b      	ldr	r3, [r3, #4]
 80013c6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d003      	beq.n	80013d6 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 80013ce:	693a      	ldr	r2, [r7, #16]
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	4313      	orrs	r3, r2
 80013d4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80013d6:	4a25      	ldr	r2, [pc, #148]	; (800146c <HAL_GPIO_Init+0x2f0>)
 80013d8:	693b      	ldr	r3, [r7, #16]
 80013da:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80013dc:	4b23      	ldr	r3, [pc, #140]	; (800146c <HAL_GPIO_Init+0x2f0>)
 80013de:	685b      	ldr	r3, [r3, #4]
 80013e0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	43db      	mvns	r3, r3
 80013e6:	693a      	ldr	r2, [r7, #16]
 80013e8:	4013      	ands	r3, r2
 80013ea:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	685b      	ldr	r3, [r3, #4]
 80013f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d003      	beq.n	8001400 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 80013f8:	693a      	ldr	r2, [r7, #16]
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	4313      	orrs	r3, r2
 80013fe:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001400:	4a1a      	ldr	r2, [pc, #104]	; (800146c <HAL_GPIO_Init+0x2f0>)
 8001402:	693b      	ldr	r3, [r7, #16]
 8001404:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001406:	4b19      	ldr	r3, [pc, #100]	; (800146c <HAL_GPIO_Init+0x2f0>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	43db      	mvns	r3, r3
 8001410:	693a      	ldr	r2, [r7, #16]
 8001412:	4013      	ands	r3, r2
 8001414:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001416:	683b      	ldr	r3, [r7, #0]
 8001418:	685b      	ldr	r3, [r3, #4]
 800141a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800141e:	2b00      	cmp	r3, #0
 8001420:	d003      	beq.n	800142a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001422:	693a      	ldr	r2, [r7, #16]
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	4313      	orrs	r3, r2
 8001428:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800142a:	4a10      	ldr	r2, [pc, #64]	; (800146c <HAL_GPIO_Init+0x2f0>)
 800142c:	693b      	ldr	r3, [r7, #16]
 800142e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001430:	697b      	ldr	r3, [r7, #20]
 8001432:	3301      	adds	r3, #1
 8001434:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001436:	683b      	ldr	r3, [r7, #0]
 8001438:	681a      	ldr	r2, [r3, #0]
 800143a:	697b      	ldr	r3, [r7, #20]
 800143c:	fa22 f303 	lsr.w	r3, r2, r3
 8001440:	2b00      	cmp	r3, #0
 8001442:	f47f aea3 	bne.w	800118c <HAL_GPIO_Init+0x10>
  }
}
 8001446:	bf00      	nop
 8001448:	bf00      	nop
 800144a:	371c      	adds	r7, #28
 800144c:	46bd      	mov	sp, r7
 800144e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001452:	4770      	bx	lr
 8001454:	40021000 	.word	0x40021000
 8001458:	40010000 	.word	0x40010000
 800145c:	48000400 	.word	0x48000400
 8001460:	48000800 	.word	0x48000800
 8001464:	48000c00 	.word	0x48000c00
 8001468:	48001000 	.word	0x48001000
 800146c:	40010400 	.word	0x40010400

08001470 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001470:	b480      	push	{r7}
 8001472:	b083      	sub	sp, #12
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
 8001478:	460b      	mov	r3, r1
 800147a:	807b      	strh	r3, [r7, #2]
 800147c:	4613      	mov	r3, r2
 800147e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001480:	787b      	ldrb	r3, [r7, #1]
 8001482:	2b00      	cmp	r3, #0
 8001484:	d003      	beq.n	800148e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001486:	887a      	ldrh	r2, [r7, #2]
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800148c:	e002      	b.n	8001494 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800148e:	887a      	ldrh	r2, [r7, #2]
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001494:	bf00      	nop
 8001496:	370c      	adds	r7, #12
 8001498:	46bd      	mov	sp, r7
 800149a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149e:	4770      	bx	lr

080014a0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80014a0:	b480      	push	{r7}
 80014a2:	b085      	sub	sp, #20
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
 80014a8:	460b      	mov	r3, r1
 80014aa:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	695b      	ldr	r3, [r3, #20]
 80014b0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80014b2:	887a      	ldrh	r2, [r7, #2]
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	4013      	ands	r3, r2
 80014b8:	041a      	lsls	r2, r3, #16
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	43d9      	mvns	r1, r3
 80014be:	887b      	ldrh	r3, [r7, #2]
 80014c0:	400b      	ands	r3, r1
 80014c2:	431a      	orrs	r2, r3
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	619a      	str	r2, [r3, #24]
}
 80014c8:	bf00      	nop
 80014ca:	3714      	adds	r7, #20
 80014cc:	46bd      	mov	sp, r7
 80014ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d2:	4770      	bx	lr

080014d4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b082      	sub	sp, #8
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d101      	bne.n	80014e6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80014e2:	2301      	movs	r3, #1
 80014e4:	e081      	b.n	80015ea <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80014ec:	b2db      	uxtb	r3, r3
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d106      	bne.n	8001500 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	2200      	movs	r2, #0
 80014f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80014fa:	6878      	ldr	r0, [r7, #4]
 80014fc:	f7ff fa06 	bl	800090c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	2224      	movs	r2, #36	; 0x24
 8001504:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	681a      	ldr	r2, [r3, #0]
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f022 0201 	bic.w	r2, r2, #1
 8001516:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	685a      	ldr	r2, [r3, #4]
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001524:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	689a      	ldr	r2, [r3, #8]
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001534:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	68db      	ldr	r3, [r3, #12]
 800153a:	2b01      	cmp	r3, #1
 800153c:	d107      	bne.n	800154e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	689a      	ldr	r2, [r3, #8]
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800154a:	609a      	str	r2, [r3, #8]
 800154c:	e006      	b.n	800155c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	689a      	ldr	r2, [r3, #8]
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800155a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	68db      	ldr	r3, [r3, #12]
 8001560:	2b02      	cmp	r3, #2
 8001562:	d104      	bne.n	800156e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800156c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	685b      	ldr	r3, [r3, #4]
 8001574:	687a      	ldr	r2, [r7, #4]
 8001576:	6812      	ldr	r2, [r2, #0]
 8001578:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800157c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001580:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	68da      	ldr	r2, [r3, #12]
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001590:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	691a      	ldr	r2, [r3, #16]
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	695b      	ldr	r3, [r3, #20]
 800159a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	699b      	ldr	r3, [r3, #24]
 80015a2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	430a      	orrs	r2, r1
 80015aa:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	69d9      	ldr	r1, [r3, #28]
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	6a1a      	ldr	r2, [r3, #32]
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	430a      	orrs	r2, r1
 80015ba:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	681a      	ldr	r2, [r3, #0]
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	f042 0201 	orr.w	r2, r2, #1
 80015ca:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	2200      	movs	r2, #0
 80015d0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	2220      	movs	r2, #32
 80015d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	2200      	movs	r2, #0
 80015de:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	2200      	movs	r2, #0
 80015e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80015e8:	2300      	movs	r3, #0
}
 80015ea:	4618      	mov	r0, r3
 80015ec:	3708      	adds	r7, #8
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bd80      	pop	{r7, pc}

080015f2 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80015f2:	b580      	push	{r7, lr}
 80015f4:	b084      	sub	sp, #16
 80015f6:	af00      	add	r7, sp, #0
 80015f8:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	699b      	ldr	r3, [r3, #24]
 8001600:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800160e:	2b00      	cmp	r3, #0
 8001610:	d005      	beq.n	800161e <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001616:	68ba      	ldr	r2, [r7, #8]
 8001618:	68f9      	ldr	r1, [r7, #12]
 800161a:	6878      	ldr	r0, [r7, #4]
 800161c:	4798      	blx	r3
  }
}
 800161e:	bf00      	nop
 8001620:	3710      	adds	r7, #16
 8001622:	46bd      	mov	sp, r7
 8001624:	bd80      	pop	{r7, pc}

08001626 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001626:	b580      	push	{r7, lr}
 8001628:	b086      	sub	sp, #24
 800162a:	af00      	add	r7, sp, #0
 800162c:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	699b      	ldr	r3, [r3, #24]
 8001634:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800163e:	697b      	ldr	r3, [r7, #20]
 8001640:	0a1b      	lsrs	r3, r3, #8
 8001642:	f003 0301 	and.w	r3, r3, #1
 8001646:	2b00      	cmp	r3, #0
 8001648:	d010      	beq.n	800166c <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800164a:	693b      	ldr	r3, [r7, #16]
 800164c:	09db      	lsrs	r3, r3, #7
 800164e:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8001652:	2b00      	cmp	r3, #0
 8001654:	d00a      	beq.n	800166c <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800165a:	f043 0201 	orr.w	r2, r3, #1
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f44f 7280 	mov.w	r2, #256	; 0x100
 800166a:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800166c:	697b      	ldr	r3, [r7, #20]
 800166e:	0a9b      	lsrs	r3, r3, #10
 8001670:	f003 0301 	and.w	r3, r3, #1
 8001674:	2b00      	cmp	r3, #0
 8001676:	d010      	beq.n	800169a <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8001678:	693b      	ldr	r3, [r7, #16]
 800167a:	09db      	lsrs	r3, r3, #7
 800167c:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8001680:	2b00      	cmp	r3, #0
 8001682:	d00a      	beq.n	800169a <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001688:	f043 0208 	orr.w	r2, r3, #8
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001698:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800169a:	697b      	ldr	r3, [r7, #20]
 800169c:	0a5b      	lsrs	r3, r3, #9
 800169e:	f003 0301 	and.w	r3, r3, #1
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d010      	beq.n	80016c8 <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80016a6:	693b      	ldr	r3, [r7, #16]
 80016a8:	09db      	lsrs	r3, r3, #7
 80016aa:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d00a      	beq.n	80016c8 <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016b6:	f043 0202 	orr.w	r2, r3, #2
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80016c6:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016cc:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	f003 030b 	and.w	r3, r3, #11
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d003      	beq.n	80016e0 <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 80016d8:	68f9      	ldr	r1, [r7, #12]
 80016da:	6878      	ldr	r0, [r7, #4]
 80016dc:	f000 fb8a 	bl	8001df4 <I2C_ITError>
  }
}
 80016e0:	bf00      	nop
 80016e2:	3718      	adds	r7, #24
 80016e4:	46bd      	mov	sp, r7
 80016e6:	bd80      	pop	{r7, pc}

080016e8 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80016e8:	b480      	push	{r7}
 80016ea:	b083      	sub	sp, #12
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80016f0:	bf00      	nop
 80016f2:	370c      	adds	r7, #12
 80016f4:	46bd      	mov	sp, r7
 80016f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fa:	4770      	bx	lr

080016fc <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80016fc:	b480      	push	{r7}
 80016fe:	b083      	sub	sp, #12
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8001704:	bf00      	nop
 8001706:	370c      	adds	r7, #12
 8001708:	46bd      	mov	sp, r7
 800170a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170e:	4770      	bx	lr

08001710 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8001710:	b480      	push	{r7}
 8001712:	b083      	sub	sp, #12
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
 8001718:	460b      	mov	r3, r1
 800171a:	70fb      	strb	r3, [r7, #3]
 800171c:	4613      	mov	r3, r2
 800171e:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8001720:	bf00      	nop
 8001722:	370c      	adds	r7, #12
 8001724:	46bd      	mov	sp, r7
 8001726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172a:	4770      	bx	lr

0800172c <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800172c:	b480      	push	{r7}
 800172e:	b083      	sub	sp, #12
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8001734:	bf00      	nop
 8001736:	370c      	adds	r7, #12
 8001738:	46bd      	mov	sp, r7
 800173a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173e:	4770      	bx	lr

08001740 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8001740:	b480      	push	{r7}
 8001742:	b083      	sub	sp, #12
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8001748:	bf00      	nop
 800174a:	370c      	adds	r7, #12
 800174c:	46bd      	mov	sp, r7
 800174e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001752:	4770      	bx	lr

08001754 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001754:	b480      	push	{r7}
 8001756:	b083      	sub	sp, #12
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800175c:	bf00      	nop
 800175e:	370c      	adds	r7, #12
 8001760:	46bd      	mov	sp, r7
 8001762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001766:	4770      	bx	lr

08001768 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b086      	sub	sp, #24
 800176c:	af00      	add	r7, sp, #0
 800176e:	60f8      	str	r0, [r7, #12]
 8001770:	60b9      	str	r1, [r7, #8]
 8001772:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001778:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 800177a:	68bb      	ldr	r3, [r7, #8]
 800177c:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001784:	2b01      	cmp	r3, #1
 8001786:	d101      	bne.n	800178c <I2C_Slave_ISR_IT+0x24>
 8001788:	2302      	movs	r3, #2
 800178a:	e0ec      	b.n	8001966 <I2C_Slave_ISR_IT+0x1fe>
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	2201      	movs	r2, #1
 8001790:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8001794:	693b      	ldr	r3, [r7, #16]
 8001796:	095b      	lsrs	r3, r3, #5
 8001798:	f003 0301 	and.w	r3, r3, #1
 800179c:	2b00      	cmp	r3, #0
 800179e:	d009      	beq.n	80017b4 <I2C_Slave_ISR_IT+0x4c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	095b      	lsrs	r3, r3, #5
 80017a4:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d003      	beq.n	80017b4 <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 80017ac:	6939      	ldr	r1, [r7, #16]
 80017ae:	68f8      	ldr	r0, [r7, #12]
 80017b0:	f000 f9c0 	bl	8001b34 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80017b4:	693b      	ldr	r3, [r7, #16]
 80017b6:	091b      	lsrs	r3, r3, #4
 80017b8:	f003 0301 	and.w	r3, r3, #1
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d04d      	beq.n	800185c <I2C_Slave_ISR_IT+0xf4>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	091b      	lsrs	r3, r3, #4
 80017c4:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d047      	beq.n	800185c <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017d0:	b29b      	uxth	r3, r3
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d128      	bne.n	8001828 <I2C_Slave_ISR_IT+0xc0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80017dc:	b2db      	uxtb	r3, r3
 80017de:	2b28      	cmp	r3, #40	; 0x28
 80017e0:	d108      	bne.n	80017f4 <I2C_Slave_ISR_IT+0x8c>
 80017e2:	697b      	ldr	r3, [r7, #20]
 80017e4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80017e8:	d104      	bne.n	80017f4 <I2C_Slave_ISR_IT+0x8c>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80017ea:	6939      	ldr	r1, [r7, #16]
 80017ec:	68f8      	ldr	r0, [r7, #12]
 80017ee:	f000 faab 	bl	8001d48 <I2C_ITListenCplt>
 80017f2:	e032      	b.n	800185a <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80017fa:	b2db      	uxtb	r3, r3
 80017fc:	2b29      	cmp	r3, #41	; 0x29
 80017fe:	d10e      	bne.n	800181e <I2C_Slave_ISR_IT+0xb6>
 8001800:	697b      	ldr	r3, [r7, #20]
 8001802:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001806:	d00a      	beq.n	800181e <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	2210      	movs	r2, #16
 800180e:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8001810:	68f8      	ldr	r0, [r7, #12]
 8001812:	f000 fbe6 	bl	8001fe2 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8001816:	68f8      	ldr	r0, [r7, #12]
 8001818:	f000 f92d 	bl	8001a76 <I2C_ITSlaveSeqCplt>
 800181c:	e01d      	b.n	800185a <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	2210      	movs	r2, #16
 8001824:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8001826:	e096      	b.n	8001956 <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	2210      	movs	r2, #16
 800182e:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001834:	f043 0204 	orr.w	r2, r3, #4
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800183c:	697b      	ldr	r3, [r7, #20]
 800183e:	2b00      	cmp	r3, #0
 8001840:	d004      	beq.n	800184c <I2C_Slave_ISR_IT+0xe4>
 8001842:	697b      	ldr	r3, [r7, #20]
 8001844:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001848:	f040 8085 	bne.w	8001956 <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001850:	4619      	mov	r1, r3
 8001852:	68f8      	ldr	r0, [r7, #12]
 8001854:	f000 face 	bl	8001df4 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8001858:	e07d      	b.n	8001956 <I2C_Slave_ISR_IT+0x1ee>
 800185a:	e07c      	b.n	8001956 <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800185c:	693b      	ldr	r3, [r7, #16]
 800185e:	089b      	lsrs	r3, r3, #2
 8001860:	f003 0301 	and.w	r3, r3, #1
 8001864:	2b00      	cmp	r3, #0
 8001866:	d030      	beq.n	80018ca <I2C_Slave_ISR_IT+0x162>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	089b      	lsrs	r3, r3, #2
 800186c:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8001870:	2b00      	cmp	r3, #0
 8001872:	d02a      	beq.n	80018ca <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001878:	b29b      	uxth	r3, r3
 800187a:	2b00      	cmp	r3, #0
 800187c:	d018      	beq.n	80018b0 <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001888:	b2d2      	uxtb	r2, r2
 800188a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001890:	1c5a      	adds	r2, r3, #1
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800189a:	3b01      	subs	r3, #1
 800189c:	b29a      	uxth	r2, r3
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018a6:	b29b      	uxth	r3, r3
 80018a8:	3b01      	subs	r3, #1
 80018aa:	b29a      	uxth	r2, r3
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018b4:	b29b      	uxth	r3, r3
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d14f      	bne.n	800195a <I2C_Slave_ISR_IT+0x1f2>
 80018ba:	697b      	ldr	r3, [r7, #20]
 80018bc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80018c0:	d04b      	beq.n	800195a <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 80018c2:	68f8      	ldr	r0, [r7, #12]
 80018c4:	f000 f8d7 	bl	8001a76 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 80018c8:	e047      	b.n	800195a <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80018ca:	693b      	ldr	r3, [r7, #16]
 80018cc:	08db      	lsrs	r3, r3, #3
 80018ce:	f003 0301 	and.w	r3, r3, #1
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d00a      	beq.n	80018ec <I2C_Slave_ISR_IT+0x184>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	08db      	lsrs	r3, r3, #3
 80018da:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d004      	beq.n	80018ec <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 80018e2:	6939      	ldr	r1, [r7, #16]
 80018e4:	68f8      	ldr	r0, [r7, #12]
 80018e6:	f000 f842 	bl	800196e <I2C_ITAddrCplt>
 80018ea:	e037      	b.n	800195c <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80018ec:	693b      	ldr	r3, [r7, #16]
 80018ee:	085b      	lsrs	r3, r3, #1
 80018f0:	f003 0301 	and.w	r3, r3, #1
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d031      	beq.n	800195c <I2C_Slave_ISR_IT+0x1f4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	085b      	lsrs	r3, r3, #1
 80018fc:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8001900:	2b00      	cmp	r3, #0
 8001902:	d02b      	beq.n	800195c <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001908:	b29b      	uxth	r3, r3
 800190a:	2b00      	cmp	r3, #0
 800190c:	d018      	beq.n	8001940 <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001912:	781a      	ldrb	r2, [r3, #0]
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800191e:	1c5a      	adds	r2, r3, #1
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001928:	b29b      	uxth	r3, r3
 800192a:	3b01      	subs	r3, #1
 800192c:	b29a      	uxth	r2, r3
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001936:	3b01      	subs	r3, #1
 8001938:	b29a      	uxth	r2, r3
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	851a      	strh	r2, [r3, #40]	; 0x28
 800193e:	e00d      	b.n	800195c <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8001940:	697b      	ldr	r3, [r7, #20]
 8001942:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001946:	d002      	beq.n	800194e <I2C_Slave_ISR_IT+0x1e6>
 8001948:	697b      	ldr	r3, [r7, #20]
 800194a:	2b00      	cmp	r3, #0
 800194c:	d106      	bne.n	800195c <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800194e:	68f8      	ldr	r0, [r7, #12]
 8001950:	f000 f891 	bl	8001a76 <I2C_ITSlaveSeqCplt>
 8001954:	e002      	b.n	800195c <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 8001956:	bf00      	nop
 8001958:	e000      	b.n	800195c <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 800195a:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	2200      	movs	r2, #0
 8001960:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8001964:	2300      	movs	r3, #0
}
 8001966:	4618      	mov	r0, r3
 8001968:	3718      	adds	r7, #24
 800196a:	46bd      	mov	sp, r7
 800196c:	bd80      	pop	{r7, pc}

0800196e <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800196e:	b580      	push	{r7, lr}
 8001970:	b084      	sub	sp, #16
 8001972:	af00      	add	r7, sp, #0
 8001974:	6078      	str	r0, [r7, #4]
 8001976:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800197e:	b2db      	uxtb	r3, r3
 8001980:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8001984:	2b28      	cmp	r3, #40	; 0x28
 8001986:	d16a      	bne.n	8001a5e <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	699b      	ldr	r3, [r3, #24]
 800198e:	0c1b      	lsrs	r3, r3, #16
 8001990:	b2db      	uxtb	r3, r3
 8001992:	f003 0301 	and.w	r3, r3, #1
 8001996:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	699b      	ldr	r3, [r3, #24]
 800199e:	0c1b      	lsrs	r3, r3, #16
 80019a0:	b29b      	uxth	r3, r3
 80019a2:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 80019a6:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	689b      	ldr	r3, [r3, #8]
 80019ae:	b29b      	uxth	r3, r3
 80019b0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80019b4:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	68db      	ldr	r3, [r3, #12]
 80019bc:	b29b      	uxth	r3, r3
 80019be:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 80019c2:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	68db      	ldr	r3, [r3, #12]
 80019c8:	2b02      	cmp	r3, #2
 80019ca:	d138      	bne.n	8001a3e <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 80019cc:	897b      	ldrh	r3, [r7, #10]
 80019ce:	09db      	lsrs	r3, r3, #7
 80019d0:	b29a      	uxth	r2, r3
 80019d2:	89bb      	ldrh	r3, [r7, #12]
 80019d4:	4053      	eors	r3, r2
 80019d6:	b29b      	uxth	r3, r3
 80019d8:	f003 0306 	and.w	r3, r3, #6
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d11c      	bne.n	8001a1a <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 80019e0:	897b      	ldrh	r3, [r7, #10]
 80019e2:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80019e8:	1c5a      	adds	r2, r3, #1
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80019f2:	2b02      	cmp	r3, #2
 80019f4:	d13b      	bne.n	8001a6e <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	2200      	movs	r2, #0
 80019fa:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	2208      	movs	r2, #8
 8001a02:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	2200      	movs	r2, #0
 8001a08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8001a0c:	89ba      	ldrh	r2, [r7, #12]
 8001a0e:	7bfb      	ldrb	r3, [r7, #15]
 8001a10:	4619      	mov	r1, r3
 8001a12:	6878      	ldr	r0, [r7, #4]
 8001a14:	f7ff fe7c 	bl	8001710 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8001a18:	e029      	b.n	8001a6e <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8001a1a:	893b      	ldrh	r3, [r7, #8]
 8001a1c:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8001a1e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001a22:	6878      	ldr	r0, [r7, #4]
 8001a24:	f000 fb1f 	bl	8002066 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8001a30:	89ba      	ldrh	r2, [r7, #12]
 8001a32:	7bfb      	ldrb	r3, [r7, #15]
 8001a34:	4619      	mov	r1, r3
 8001a36:	6878      	ldr	r0, [r7, #4]
 8001a38:	f7ff fe6a 	bl	8001710 <HAL_I2C_AddrCallback>
}
 8001a3c:	e017      	b.n	8001a6e <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8001a3e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001a42:	6878      	ldr	r0, [r7, #4]
 8001a44:	f000 fb0f 	bl	8002066 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8001a50:	89ba      	ldrh	r2, [r7, #12]
 8001a52:	7bfb      	ldrb	r3, [r7, #15]
 8001a54:	4619      	mov	r1, r3
 8001a56:	6878      	ldr	r0, [r7, #4]
 8001a58:	f7ff fe5a 	bl	8001710 <HAL_I2C_AddrCallback>
}
 8001a5c:	e007      	b.n	8001a6e <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	2208      	movs	r2, #8
 8001a64:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	2200      	movs	r2, #0
 8001a6a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8001a6e:	bf00      	nop
 8001a70:	3710      	adds	r7, #16
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bd80      	pop	{r7, pc}

08001a76 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8001a76:	b580      	push	{r7, lr}
 8001a78:	b084      	sub	sp, #16
 8001a7a:	af00      	add	r7, sp, #0
 8001a7c:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	2200      	movs	r2, #0
 8001a8a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	0b9b      	lsrs	r3, r3, #14
 8001a92:	f003 0301 	and.w	r3, r3, #1
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d008      	beq.n	8001aac <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	681a      	ldr	r2, [r3, #0]
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001aa8:	601a      	str	r2, [r3, #0]
 8001aaa:	e00d      	b.n	8001ac8 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	0bdb      	lsrs	r3, r3, #15
 8001ab0:	f003 0301 	and.w	r3, r3, #1
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d007      	beq.n	8001ac8 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	681a      	ldr	r2, [r3, #0]
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001ac6:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001ace:	b2db      	uxtb	r3, r3
 8001ad0:	2b29      	cmp	r3, #41	; 0x29
 8001ad2:	d112      	bne.n	8001afa <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	2228      	movs	r2, #40	; 0x28
 8001ad8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	2221      	movs	r2, #33	; 0x21
 8001ae0:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8001ae2:	2101      	movs	r1, #1
 8001ae4:	6878      	ldr	r0, [r7, #4]
 8001ae6:	f000 fabe 	bl	8002066 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	2200      	movs	r2, #0
 8001aee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8001af2:	6878      	ldr	r0, [r7, #4]
 8001af4:	f7ff fdf8 	bl	80016e8 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8001af8:	e017      	b.n	8001b2a <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001b00:	b2db      	uxtb	r3, r3
 8001b02:	2b2a      	cmp	r3, #42	; 0x2a
 8001b04:	d111      	bne.n	8001b2a <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	2228      	movs	r2, #40	; 0x28
 8001b0a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	2222      	movs	r2, #34	; 0x22
 8001b12:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8001b14:	2102      	movs	r1, #2
 8001b16:	6878      	ldr	r0, [r7, #4]
 8001b18:	f000 faa5 	bl	8002066 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	2200      	movs	r2, #0
 8001b20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8001b24:	6878      	ldr	r0, [r7, #4]
 8001b26:	f7ff fde9 	bl	80016fc <HAL_I2C_SlaveRxCpltCallback>
}
 8001b2a:	bf00      	nop
 8001b2c:	3710      	adds	r7, #16
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bd80      	pop	{r7, pc}
	...

08001b34 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b086      	sub	sp, #24
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
 8001b3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001b50:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	2220      	movs	r2, #32
 8001b58:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8001b5a:	7bfb      	ldrb	r3, [r7, #15]
 8001b5c:	2b21      	cmp	r3, #33	; 0x21
 8001b5e:	d002      	beq.n	8001b66 <I2C_ITSlaveCplt+0x32>
 8001b60:	7bfb      	ldrb	r3, [r7, #15]
 8001b62:	2b29      	cmp	r3, #41	; 0x29
 8001b64:	d108      	bne.n	8001b78 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8001b66:	f248 0101 	movw	r1, #32769	; 0x8001
 8001b6a:	6878      	ldr	r0, [r7, #4]
 8001b6c:	f000 fa7b 	bl	8002066 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	2221      	movs	r2, #33	; 0x21
 8001b74:	631a      	str	r2, [r3, #48]	; 0x30
 8001b76:	e00d      	b.n	8001b94 <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8001b78:	7bfb      	ldrb	r3, [r7, #15]
 8001b7a:	2b22      	cmp	r3, #34	; 0x22
 8001b7c:	d002      	beq.n	8001b84 <I2C_ITSlaveCplt+0x50>
 8001b7e:	7bfb      	ldrb	r3, [r7, #15]
 8001b80:	2b2a      	cmp	r3, #42	; 0x2a
 8001b82:	d107      	bne.n	8001b94 <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8001b84:	f248 0102 	movw	r1, #32770	; 0x8002
 8001b88:	6878      	ldr	r0, [r7, #4]
 8001b8a:	f000 fa6c 	bl	8002066 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	2222      	movs	r2, #34	; 0x22
 8001b92:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	685a      	ldr	r2, [r3, #4]
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001ba2:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	6859      	ldr	r1, [r3, #4]
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681a      	ldr	r2, [r3, #0]
 8001bae:	4b64      	ldr	r3, [pc, #400]	; (8001d40 <I2C_ITSlaveCplt+0x20c>)
 8001bb0:	400b      	ands	r3, r1
 8001bb2:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8001bb4:	6878      	ldr	r0, [r7, #4]
 8001bb6:	f000 fa14 	bl	8001fe2 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8001bba:	693b      	ldr	r3, [r7, #16]
 8001bbc:	0b9b      	lsrs	r3, r3, #14
 8001bbe:	f003 0301 	and.w	r3, r3, #1
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d013      	beq.n	8001bee <I2C_ITSlaveCplt+0xba>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	681a      	ldr	r2, [r3, #0]
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001bd4:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d020      	beq.n	8001c20 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	685b      	ldr	r3, [r3, #4]
 8001be6:	b29a      	uxth	r2, r3
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001bec:	e018      	b.n	8001c20 <I2C_ITSlaveCplt+0xec>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8001bee:	693b      	ldr	r3, [r7, #16]
 8001bf0:	0bdb      	lsrs	r3, r3, #15
 8001bf2:	f003 0301 	and.w	r3, r3, #1
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d012      	beq.n	8001c20 <I2C_ITSlaveCplt+0xec>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	681a      	ldr	r2, [r3, #0]
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001c08:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d006      	beq.n	8001c20 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	685b      	ldr	r3, [r3, #4]
 8001c1a:	b29a      	uxth	r2, r3
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8001c20:	697b      	ldr	r3, [r7, #20]
 8001c22:	089b      	lsrs	r3, r3, #2
 8001c24:	f003 0301 	and.w	r3, r3, #1
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d020      	beq.n	8001c6e <I2C_ITSlaveCplt+0x13a>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8001c2c:	697b      	ldr	r3, [r7, #20]
 8001c2e:	f023 0304 	bic.w	r3, r3, #4
 8001c32:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c3e:	b2d2      	uxtb	r2, r2
 8001c40:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c46:	1c5a      	adds	r2, r3, #1
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d00c      	beq.n	8001c6e <I2C_ITSlaveCplt+0x13a>
    {
      hi2c->XferSize--;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c58:	3b01      	subs	r3, #1
 8001c5a:	b29a      	uxth	r2, r3
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c64:	b29b      	uxth	r3, r3
 8001c66:	3b01      	subs	r3, #1
 8001c68:	b29a      	uxth	r2, r3
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c72:	b29b      	uxth	r3, r3
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d005      	beq.n	8001c84 <I2C_ITSlaveCplt+0x150>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c7c:	f043 0204 	orr.w	r2, r3, #4
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	2200      	movs	r2, #0
 8001c88:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	2200      	movs	r2, #0
 8001c90:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d010      	beq.n	8001cbc <I2C_ITSlaveCplt+0x188>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c9e:	4619      	mov	r1, r3
 8001ca0:	6878      	ldr	r0, [r7, #4]
 8001ca2:	f000 f8a7 	bl	8001df4 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001cac:	b2db      	uxtb	r3, r3
 8001cae:	2b28      	cmp	r3, #40	; 0x28
 8001cb0:	d141      	bne.n	8001d36 <I2C_ITSlaveCplt+0x202>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8001cb2:	6979      	ldr	r1, [r7, #20]
 8001cb4:	6878      	ldr	r0, [r7, #4]
 8001cb6:	f000 f847 	bl	8001d48 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8001cba:	e03c      	b.n	8001d36 <I2C_ITSlaveCplt+0x202>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cc0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001cc4:	d014      	beq.n	8001cf0 <I2C_ITSlaveCplt+0x1bc>
    I2C_ITSlaveSeqCplt(hi2c);
 8001cc6:	6878      	ldr	r0, [r7, #4]
 8001cc8:	f7ff fed5 	bl	8001a76 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	4a1d      	ldr	r2, [pc, #116]	; (8001d44 <I2C_ITSlaveCplt+0x210>)
 8001cd0:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	2220      	movs	r2, #32
 8001cd6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	2200      	movs	r2, #0
 8001cde:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8001ce8:	6878      	ldr	r0, [r7, #4]
 8001cea:	f7ff fd1f 	bl	800172c <HAL_I2C_ListenCpltCallback>
}
 8001cee:	e022      	b.n	8001d36 <I2C_ITSlaveCplt+0x202>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001cf6:	b2db      	uxtb	r3, r3
 8001cf8:	2b22      	cmp	r3, #34	; 0x22
 8001cfa:	d10e      	bne.n	8001d1a <I2C_ITSlaveCplt+0x1e6>
    hi2c->State = HAL_I2C_STATE_READY;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	2220      	movs	r2, #32
 8001d00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	2200      	movs	r2, #0
 8001d08:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8001d12:	6878      	ldr	r0, [r7, #4]
 8001d14:	f7ff fcf2 	bl	80016fc <HAL_I2C_SlaveRxCpltCallback>
}
 8001d18:	e00d      	b.n	8001d36 <I2C_ITSlaveCplt+0x202>
    hi2c->State = HAL_I2C_STATE_READY;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	2220      	movs	r2, #32
 8001d1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	2200      	movs	r2, #0
 8001d26:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8001d30:	6878      	ldr	r0, [r7, #4]
 8001d32:	f7ff fcd9 	bl	80016e8 <HAL_I2C_SlaveTxCpltCallback>
}
 8001d36:	bf00      	nop
 8001d38:	3718      	adds	r7, #24
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bd80      	pop	{r7, pc}
 8001d3e:	bf00      	nop
 8001d40:	fe00e800 	.word	0xfe00e800
 8001d44:	ffff0000 	.word	0xffff0000

08001d48 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b082      	sub	sp, #8
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
 8001d50:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	4a26      	ldr	r2, [pc, #152]	; (8001df0 <I2C_ITListenCplt+0xa8>)
 8001d56:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	2220      	movs	r2, #32
 8001d62:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	2200      	movs	r2, #0
 8001d6a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	2200      	movs	r2, #0
 8001d72:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	089b      	lsrs	r3, r3, #2
 8001d78:	f003 0301 	and.w	r3, r3, #1
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d022      	beq.n	8001dc6 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d8a:	b2d2      	uxtb	r2, r2
 8001d8c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d92:	1c5a      	adds	r2, r3, #1
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d012      	beq.n	8001dc6 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001da4:	3b01      	subs	r3, #1
 8001da6:	b29a      	uxth	r2, r3
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001db0:	b29b      	uxth	r3, r3
 8001db2:	3b01      	subs	r3, #1
 8001db4:	b29a      	uxth	r2, r3
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dbe:	f043 0204 	orr.w	r2, r3, #4
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8001dc6:	f248 0103 	movw	r1, #32771	; 0x8003
 8001dca:	6878      	ldr	r0, [r7, #4]
 8001dcc:	f000 f94b 	bl	8002066 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	2210      	movs	r2, #16
 8001dd6:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	2200      	movs	r2, #0
 8001ddc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8001de0:	6878      	ldr	r0, [r7, #4]
 8001de2:	f7ff fca3 	bl	800172c <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8001de6:	bf00      	nop
 8001de8:	3708      	adds	r7, #8
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bd80      	pop	{r7, pc}
 8001dee:	bf00      	nop
 8001df0:	ffff0000 	.word	0xffff0000

08001df4 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b084      	sub	sp, #16
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
 8001dfc:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001e04:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	2200      	movs	r2, #0
 8001e0a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	4a5d      	ldr	r2, [pc, #372]	; (8001f88 <I2C_ITError+0x194>)
 8001e12:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	2200      	movs	r2, #0
 8001e18:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001e1e:	683b      	ldr	r3, [r7, #0]
 8001e20:	431a      	orrs	r2, r3
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8001e26:	7bfb      	ldrb	r3, [r7, #15]
 8001e28:	2b28      	cmp	r3, #40	; 0x28
 8001e2a:	d005      	beq.n	8001e38 <I2C_ITError+0x44>
 8001e2c:	7bfb      	ldrb	r3, [r7, #15]
 8001e2e:	2b29      	cmp	r3, #41	; 0x29
 8001e30:	d002      	beq.n	8001e38 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8001e32:	7bfb      	ldrb	r3, [r7, #15]
 8001e34:	2b2a      	cmp	r3, #42	; 0x2a
 8001e36:	d10b      	bne.n	8001e50 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8001e38:	2103      	movs	r1, #3
 8001e3a:	6878      	ldr	r0, [r7, #4]
 8001e3c:	f000 f913 	bl	8002066 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	2228      	movs	r2, #40	; 0x28
 8001e44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	4a50      	ldr	r2, [pc, #320]	; (8001f8c <I2C_ITError+0x198>)
 8001e4c:	635a      	str	r2, [r3, #52]	; 0x34
 8001e4e:	e011      	b.n	8001e74 <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8001e50:	f248 0103 	movw	r1, #32771	; 0x8003
 8001e54:	6878      	ldr	r0, [r7, #4]
 8001e56:	f000 f906 	bl	8002066 <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001e60:	b2db      	uxtb	r3, r3
 8001e62:	2b60      	cmp	r3, #96	; 0x60
 8001e64:	d003      	beq.n	8001e6e <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	2220      	movs	r2, #32
 8001e6a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	2200      	movs	r2, #0
 8001e72:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e78:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d039      	beq.n	8001ef6 <I2C_ITError+0x102>
 8001e82:	68bb      	ldr	r3, [r7, #8]
 8001e84:	2b11      	cmp	r3, #17
 8001e86:	d002      	beq.n	8001e8e <I2C_ITError+0x9a>
 8001e88:	68bb      	ldr	r3, [r7, #8]
 8001e8a:	2b21      	cmp	r3, #33	; 0x21
 8001e8c:	d133      	bne.n	8001ef6 <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e98:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001e9c:	d107      	bne.n	8001eae <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	681a      	ldr	r2, [r3, #0]
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001eac:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	f7ff f953 	bl	800115e <HAL_DMA_GetState>
 8001eb8:	4603      	mov	r3, r0
 8001eba:	2b01      	cmp	r3, #1
 8001ebc:	d017      	beq.n	8001eee <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ec2:	4a33      	ldr	r2, [pc, #204]	; (8001f90 <I2C_ITError+0x19c>)
 8001ec4:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	2200      	movs	r2, #0
 8001eca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	f7ff f902 	bl	80010dc <HAL_DMA_Abort_IT>
 8001ed8:	4603      	mov	r3, r0
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d04d      	beq.n	8001f7a <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ee2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ee4:	687a      	ldr	r2, [r7, #4]
 8001ee6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001ee8:	4610      	mov	r0, r2
 8001eea:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8001eec:	e045      	b.n	8001f7a <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8001eee:	6878      	ldr	r0, [r7, #4]
 8001ef0:	f000 f850 	bl	8001f94 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8001ef4:	e041      	b.n	8001f7a <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d039      	beq.n	8001f72 <I2C_ITError+0x17e>
 8001efe:	68bb      	ldr	r3, [r7, #8]
 8001f00:	2b12      	cmp	r3, #18
 8001f02:	d002      	beq.n	8001f0a <I2C_ITError+0x116>
 8001f04:	68bb      	ldr	r3, [r7, #8]
 8001f06:	2b22      	cmp	r3, #34	; 0x22
 8001f08:	d133      	bne.n	8001f72 <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001f14:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001f18:	d107      	bne.n	8001f2a <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	681a      	ldr	r2, [r3, #0]
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001f28:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f2e:	4618      	mov	r0, r3
 8001f30:	f7ff f915 	bl	800115e <HAL_DMA_GetState>
 8001f34:	4603      	mov	r3, r0
 8001f36:	2b01      	cmp	r3, #1
 8001f38:	d017      	beq.n	8001f6a <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f3e:	4a14      	ldr	r2, [pc, #80]	; (8001f90 <I2C_ITError+0x19c>)
 8001f40:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	2200      	movs	r2, #0
 8001f46:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f4e:	4618      	mov	r0, r3
 8001f50:	f7ff f8c4 	bl	80010dc <HAL_DMA_Abort_IT>
 8001f54:	4603      	mov	r3, r0
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d011      	beq.n	8001f7e <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f60:	687a      	ldr	r2, [r7, #4]
 8001f62:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001f64:	4610      	mov	r0, r2
 8001f66:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8001f68:	e009      	b.n	8001f7e <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8001f6a:	6878      	ldr	r0, [r7, #4]
 8001f6c:	f000 f812 	bl	8001f94 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8001f70:	e005      	b.n	8001f7e <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8001f72:	6878      	ldr	r0, [r7, #4]
 8001f74:	f000 f80e 	bl	8001f94 <I2C_TreatErrorCallback>
  }
}
 8001f78:	e002      	b.n	8001f80 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8001f7a:	bf00      	nop
 8001f7c:	e000      	b.n	8001f80 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8001f7e:	bf00      	nop
}
 8001f80:	bf00      	nop
 8001f82:	3710      	adds	r7, #16
 8001f84:	46bd      	mov	sp, r7
 8001f86:	bd80      	pop	{r7, pc}
 8001f88:	ffff0000 	.word	0xffff0000
 8001f8c:	08001769 	.word	0x08001769
 8001f90:	0800202b 	.word	0x0800202b

08001f94 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b082      	sub	sp, #8
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001fa2:	b2db      	uxtb	r3, r3
 8001fa4:	2b60      	cmp	r3, #96	; 0x60
 8001fa6:	d10e      	bne.n	8001fc6 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	2220      	movs	r2, #32
 8001fac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	2200      	movs	r2, #0
 8001fba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8001fbe:	6878      	ldr	r0, [r7, #4]
 8001fc0:	f7ff fbc8 	bl	8001754 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8001fc4:	e009      	b.n	8001fda <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	2200      	movs	r2, #0
 8001fca:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	2200      	movs	r2, #0
 8001fd0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8001fd4:	6878      	ldr	r0, [r7, #4]
 8001fd6:	f7ff fbb3 	bl	8001740 <HAL_I2C_ErrorCallback>
}
 8001fda:	bf00      	nop
 8001fdc:	3708      	adds	r7, #8
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bd80      	pop	{r7, pc}

08001fe2 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001fe2:	b480      	push	{r7}
 8001fe4:	b083      	sub	sp, #12
 8001fe6:	af00      	add	r7, sp, #0
 8001fe8:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	699b      	ldr	r3, [r3, #24]
 8001ff0:	f003 0302 	and.w	r3, r3, #2
 8001ff4:	2b02      	cmp	r3, #2
 8001ff6:	d103      	bne.n	8002000 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	699b      	ldr	r3, [r3, #24]
 8002006:	f003 0301 	and.w	r3, r3, #1
 800200a:	2b01      	cmp	r3, #1
 800200c:	d007      	beq.n	800201e <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	699a      	ldr	r2, [r3, #24]
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f042 0201 	orr.w	r2, r2, #1
 800201c:	619a      	str	r2, [r3, #24]
  }
}
 800201e:	bf00      	nop
 8002020:	370c      	adds	r7, #12
 8002022:	46bd      	mov	sp, r7
 8002024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002028:	4770      	bx	lr

0800202a <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800202a:	b580      	push	{r7, lr}
 800202c:	b084      	sub	sp, #16
 800202e:	af00      	add	r7, sp, #0
 8002030:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002036:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800203c:	2b00      	cmp	r3, #0
 800203e:	d003      	beq.n	8002048 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002044:	2200      	movs	r2, #0
 8002046:	639a      	str	r2, [r3, #56]	; 0x38
  }
  if (hi2c->hdmarx != NULL)
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800204c:	2b00      	cmp	r3, #0
 800204e:	d003      	beq.n	8002058 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002054:	2200      	movs	r2, #0
 8002056:	639a      	str	r2, [r3, #56]	; 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8002058:	68f8      	ldr	r0, [r7, #12]
 800205a:	f7ff ff9b 	bl	8001f94 <I2C_TreatErrorCallback>
}
 800205e:	bf00      	nop
 8002060:	3710      	adds	r7, #16
 8002062:	46bd      	mov	sp, r7
 8002064:	bd80      	pop	{r7, pc}

08002066 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8002066:	b480      	push	{r7}
 8002068:	b085      	sub	sp, #20
 800206a:	af00      	add	r7, sp, #0
 800206c:	6078      	str	r0, [r7, #4]
 800206e:	460b      	mov	r3, r1
 8002070:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8002072:	2300      	movs	r3, #0
 8002074:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8002076:	887b      	ldrh	r3, [r7, #2]
 8002078:	f003 0301 	and.w	r3, r3, #1
 800207c:	2b00      	cmp	r3, #0
 800207e:	d00f      	beq.n	80020a0 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8002086:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800208e:	b2db      	uxtb	r3, r3
 8002090:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002094:	2b28      	cmp	r3, #40	; 0x28
 8002096:	d003      	beq.n	80020a0 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 800209e:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80020a0:	887b      	ldrh	r3, [r7, #2]
 80020a2:	f003 0302 	and.w	r3, r3, #2
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d00f      	beq.n	80020ca <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 80020b0:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80020b8:	b2db      	uxtb	r3, r3
 80020ba:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80020be:	2b28      	cmp	r3, #40	; 0x28
 80020c0:	d003      	beq.n	80020ca <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 80020c8:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80020ca:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	da03      	bge.n	80020da <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 80020d8:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 80020da:	887b      	ldrh	r3, [r7, #2]
 80020dc:	2b10      	cmp	r3, #16
 80020de:	d103      	bne.n	80020e8 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 80020e6:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 80020e8:	887b      	ldrh	r3, [r7, #2]
 80020ea:	2b20      	cmp	r3, #32
 80020ec:	d103      	bne.n	80020f6 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	f043 0320 	orr.w	r3, r3, #32
 80020f4:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80020f6:	887b      	ldrh	r3, [r7, #2]
 80020f8:	2b40      	cmp	r3, #64	; 0x40
 80020fa:	d103      	bne.n	8002104 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002102:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	6819      	ldr	r1, [r3, #0]
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	43da      	mvns	r2, r3
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	400a      	ands	r2, r1
 8002114:	601a      	str	r2, [r3, #0]
}
 8002116:	bf00      	nop
 8002118:	3714      	adds	r7, #20
 800211a:	46bd      	mov	sp, r7
 800211c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002120:	4770      	bx	lr

08002122 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002122:	b480      	push	{r7}
 8002124:	b083      	sub	sp, #12
 8002126:	af00      	add	r7, sp, #0
 8002128:	6078      	str	r0, [r7, #4]
 800212a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002132:	b2db      	uxtb	r3, r3
 8002134:	2b20      	cmp	r3, #32
 8002136:	d138      	bne.n	80021aa <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800213e:	2b01      	cmp	r3, #1
 8002140:	d101      	bne.n	8002146 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002142:	2302      	movs	r3, #2
 8002144:	e032      	b.n	80021ac <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	2201      	movs	r2, #1
 800214a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	2224      	movs	r2, #36	; 0x24
 8002152:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	681a      	ldr	r2, [r3, #0]
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f022 0201 	bic.w	r2, r2, #1
 8002164:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	681a      	ldr	r2, [r3, #0]
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002174:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	6819      	ldr	r1, [r3, #0]
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	683a      	ldr	r2, [r7, #0]
 8002182:	430a      	orrs	r2, r1
 8002184:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	681a      	ldr	r2, [r3, #0]
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f042 0201 	orr.w	r2, r2, #1
 8002194:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	2220      	movs	r2, #32
 800219a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	2200      	movs	r2, #0
 80021a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80021a6:	2300      	movs	r3, #0
 80021a8:	e000      	b.n	80021ac <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80021aa:	2302      	movs	r3, #2
  }
}
 80021ac:	4618      	mov	r0, r3
 80021ae:	370c      	adds	r7, #12
 80021b0:	46bd      	mov	sp, r7
 80021b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b6:	4770      	bx	lr

080021b8 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80021b8:	b480      	push	{r7}
 80021ba:	b085      	sub	sp, #20
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
 80021c0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80021c8:	b2db      	uxtb	r3, r3
 80021ca:	2b20      	cmp	r3, #32
 80021cc:	d139      	bne.n	8002242 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80021d4:	2b01      	cmp	r3, #1
 80021d6:	d101      	bne.n	80021dc <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80021d8:	2302      	movs	r3, #2
 80021da:	e033      	b.n	8002244 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	2201      	movs	r2, #1
 80021e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	2224      	movs	r2, #36	; 0x24
 80021e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	681a      	ldr	r2, [r3, #0]
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f022 0201 	bic.w	r2, r2, #1
 80021fa:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800220a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	021b      	lsls	r3, r3, #8
 8002210:	68fa      	ldr	r2, [r7, #12]
 8002212:	4313      	orrs	r3, r2
 8002214:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	68fa      	ldr	r2, [r7, #12]
 800221c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	681a      	ldr	r2, [r3, #0]
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f042 0201 	orr.w	r2, r2, #1
 800222c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	2220      	movs	r2, #32
 8002232:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	2200      	movs	r2, #0
 800223a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800223e:	2300      	movs	r3, #0
 8002240:	e000      	b.n	8002244 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002242:	2302      	movs	r3, #2
  }
}
 8002244:	4618      	mov	r0, r3
 8002246:	3714      	adds	r7, #20
 8002248:	46bd      	mov	sp, r7
 800224a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224e:	4770      	bx	lr

08002250 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002250:	b480      	push	{r7}
 8002252:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002254:	4b04      	ldr	r3, [pc, #16]	; (8002268 <HAL_PWREx_GetVoltageRange+0x18>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800225c:	4618      	mov	r0, r3
 800225e:	46bd      	mov	sp, r7
 8002260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002264:	4770      	bx	lr
 8002266:	bf00      	nop
 8002268:	40007000 	.word	0x40007000

0800226c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800226c:	b480      	push	{r7}
 800226e:	b085      	sub	sp, #20
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800227a:	d130      	bne.n	80022de <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800227c:	4b23      	ldr	r3, [pc, #140]	; (800230c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002284:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002288:	d038      	beq.n	80022fc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800228a:	4b20      	ldr	r3, [pc, #128]	; (800230c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002292:	4a1e      	ldr	r2, [pc, #120]	; (800230c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002294:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002298:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800229a:	4b1d      	ldr	r3, [pc, #116]	; (8002310 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	2232      	movs	r2, #50	; 0x32
 80022a0:	fb02 f303 	mul.w	r3, r2, r3
 80022a4:	4a1b      	ldr	r2, [pc, #108]	; (8002314 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80022a6:	fba2 2303 	umull	r2, r3, r2, r3
 80022aa:	0c9b      	lsrs	r3, r3, #18
 80022ac:	3301      	adds	r3, #1
 80022ae:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80022b0:	e002      	b.n	80022b8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	3b01      	subs	r3, #1
 80022b6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80022b8:	4b14      	ldr	r3, [pc, #80]	; (800230c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80022ba:	695b      	ldr	r3, [r3, #20]
 80022bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80022c4:	d102      	bne.n	80022cc <HAL_PWREx_ControlVoltageScaling+0x60>
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d1f2      	bne.n	80022b2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80022cc:	4b0f      	ldr	r3, [pc, #60]	; (800230c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80022ce:	695b      	ldr	r3, [r3, #20]
 80022d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80022d8:	d110      	bne.n	80022fc <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80022da:	2303      	movs	r3, #3
 80022dc:	e00f      	b.n	80022fe <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80022de:	4b0b      	ldr	r3, [pc, #44]	; (800230c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80022e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80022ea:	d007      	beq.n	80022fc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80022ec:	4b07      	ldr	r3, [pc, #28]	; (800230c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80022f4:	4a05      	ldr	r2, [pc, #20]	; (800230c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80022f6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80022fa:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80022fc:	2300      	movs	r3, #0
}
 80022fe:	4618      	mov	r0, r3
 8002300:	3714      	adds	r7, #20
 8002302:	46bd      	mov	sp, r7
 8002304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002308:	4770      	bx	lr
 800230a:	bf00      	nop
 800230c:	40007000 	.word	0x40007000
 8002310:	20000000 	.word	0x20000000
 8002314:	431bde83 	.word	0x431bde83

08002318 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b088      	sub	sp, #32
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	2b00      	cmp	r3, #0
 8002324:	d102      	bne.n	800232c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002326:	2301      	movs	r3, #1
 8002328:	f000 bc02 	b.w	8002b30 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800232c:	4b96      	ldr	r3, [pc, #600]	; (8002588 <HAL_RCC_OscConfig+0x270>)
 800232e:	689b      	ldr	r3, [r3, #8]
 8002330:	f003 030c 	and.w	r3, r3, #12
 8002334:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002336:	4b94      	ldr	r3, [pc, #592]	; (8002588 <HAL_RCC_OscConfig+0x270>)
 8002338:	68db      	ldr	r3, [r3, #12]
 800233a:	f003 0303 	and.w	r3, r3, #3
 800233e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f003 0310 	and.w	r3, r3, #16
 8002348:	2b00      	cmp	r3, #0
 800234a:	f000 80e4 	beq.w	8002516 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800234e:	69bb      	ldr	r3, [r7, #24]
 8002350:	2b00      	cmp	r3, #0
 8002352:	d007      	beq.n	8002364 <HAL_RCC_OscConfig+0x4c>
 8002354:	69bb      	ldr	r3, [r7, #24]
 8002356:	2b0c      	cmp	r3, #12
 8002358:	f040 808b 	bne.w	8002472 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800235c:	697b      	ldr	r3, [r7, #20]
 800235e:	2b01      	cmp	r3, #1
 8002360:	f040 8087 	bne.w	8002472 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002364:	4b88      	ldr	r3, [pc, #544]	; (8002588 <HAL_RCC_OscConfig+0x270>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f003 0302 	and.w	r3, r3, #2
 800236c:	2b00      	cmp	r3, #0
 800236e:	d005      	beq.n	800237c <HAL_RCC_OscConfig+0x64>
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	699b      	ldr	r3, [r3, #24]
 8002374:	2b00      	cmp	r3, #0
 8002376:	d101      	bne.n	800237c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002378:	2301      	movs	r3, #1
 800237a:	e3d9      	b.n	8002b30 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	6a1a      	ldr	r2, [r3, #32]
 8002380:	4b81      	ldr	r3, [pc, #516]	; (8002588 <HAL_RCC_OscConfig+0x270>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f003 0308 	and.w	r3, r3, #8
 8002388:	2b00      	cmp	r3, #0
 800238a:	d004      	beq.n	8002396 <HAL_RCC_OscConfig+0x7e>
 800238c:	4b7e      	ldr	r3, [pc, #504]	; (8002588 <HAL_RCC_OscConfig+0x270>)
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002394:	e005      	b.n	80023a2 <HAL_RCC_OscConfig+0x8a>
 8002396:	4b7c      	ldr	r3, [pc, #496]	; (8002588 <HAL_RCC_OscConfig+0x270>)
 8002398:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800239c:	091b      	lsrs	r3, r3, #4
 800239e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80023a2:	4293      	cmp	r3, r2
 80023a4:	d223      	bcs.n	80023ee <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	6a1b      	ldr	r3, [r3, #32]
 80023aa:	4618      	mov	r0, r3
 80023ac:	f000 fdbc 	bl	8002f28 <RCC_SetFlashLatencyFromMSIRange>
 80023b0:	4603      	mov	r3, r0
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d001      	beq.n	80023ba <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80023b6:	2301      	movs	r3, #1
 80023b8:	e3ba      	b.n	8002b30 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80023ba:	4b73      	ldr	r3, [pc, #460]	; (8002588 <HAL_RCC_OscConfig+0x270>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	4a72      	ldr	r2, [pc, #456]	; (8002588 <HAL_RCC_OscConfig+0x270>)
 80023c0:	f043 0308 	orr.w	r3, r3, #8
 80023c4:	6013      	str	r3, [r2, #0]
 80023c6:	4b70      	ldr	r3, [pc, #448]	; (8002588 <HAL_RCC_OscConfig+0x270>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	6a1b      	ldr	r3, [r3, #32]
 80023d2:	496d      	ldr	r1, [pc, #436]	; (8002588 <HAL_RCC_OscConfig+0x270>)
 80023d4:	4313      	orrs	r3, r2
 80023d6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80023d8:	4b6b      	ldr	r3, [pc, #428]	; (8002588 <HAL_RCC_OscConfig+0x270>)
 80023da:	685b      	ldr	r3, [r3, #4]
 80023dc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	69db      	ldr	r3, [r3, #28]
 80023e4:	021b      	lsls	r3, r3, #8
 80023e6:	4968      	ldr	r1, [pc, #416]	; (8002588 <HAL_RCC_OscConfig+0x270>)
 80023e8:	4313      	orrs	r3, r2
 80023ea:	604b      	str	r3, [r1, #4]
 80023ec:	e025      	b.n	800243a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80023ee:	4b66      	ldr	r3, [pc, #408]	; (8002588 <HAL_RCC_OscConfig+0x270>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	4a65      	ldr	r2, [pc, #404]	; (8002588 <HAL_RCC_OscConfig+0x270>)
 80023f4:	f043 0308 	orr.w	r3, r3, #8
 80023f8:	6013      	str	r3, [r2, #0]
 80023fa:	4b63      	ldr	r3, [pc, #396]	; (8002588 <HAL_RCC_OscConfig+0x270>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	6a1b      	ldr	r3, [r3, #32]
 8002406:	4960      	ldr	r1, [pc, #384]	; (8002588 <HAL_RCC_OscConfig+0x270>)
 8002408:	4313      	orrs	r3, r2
 800240a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800240c:	4b5e      	ldr	r3, [pc, #376]	; (8002588 <HAL_RCC_OscConfig+0x270>)
 800240e:	685b      	ldr	r3, [r3, #4]
 8002410:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	69db      	ldr	r3, [r3, #28]
 8002418:	021b      	lsls	r3, r3, #8
 800241a:	495b      	ldr	r1, [pc, #364]	; (8002588 <HAL_RCC_OscConfig+0x270>)
 800241c:	4313      	orrs	r3, r2
 800241e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002420:	69bb      	ldr	r3, [r7, #24]
 8002422:	2b00      	cmp	r3, #0
 8002424:	d109      	bne.n	800243a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6a1b      	ldr	r3, [r3, #32]
 800242a:	4618      	mov	r0, r3
 800242c:	f000 fd7c 	bl	8002f28 <RCC_SetFlashLatencyFromMSIRange>
 8002430:	4603      	mov	r3, r0
 8002432:	2b00      	cmp	r3, #0
 8002434:	d001      	beq.n	800243a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8002436:	2301      	movs	r3, #1
 8002438:	e37a      	b.n	8002b30 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800243a:	f000 fc81 	bl	8002d40 <HAL_RCC_GetSysClockFreq>
 800243e:	4602      	mov	r2, r0
 8002440:	4b51      	ldr	r3, [pc, #324]	; (8002588 <HAL_RCC_OscConfig+0x270>)
 8002442:	689b      	ldr	r3, [r3, #8]
 8002444:	091b      	lsrs	r3, r3, #4
 8002446:	f003 030f 	and.w	r3, r3, #15
 800244a:	4950      	ldr	r1, [pc, #320]	; (800258c <HAL_RCC_OscConfig+0x274>)
 800244c:	5ccb      	ldrb	r3, [r1, r3]
 800244e:	f003 031f 	and.w	r3, r3, #31
 8002452:	fa22 f303 	lsr.w	r3, r2, r3
 8002456:	4a4e      	ldr	r2, [pc, #312]	; (8002590 <HAL_RCC_OscConfig+0x278>)
 8002458:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800245a:	4b4e      	ldr	r3, [pc, #312]	; (8002594 <HAL_RCC_OscConfig+0x27c>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	4618      	mov	r0, r3
 8002460:	f7fe fbdc 	bl	8000c1c <HAL_InitTick>
 8002464:	4603      	mov	r3, r0
 8002466:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002468:	7bfb      	ldrb	r3, [r7, #15]
 800246a:	2b00      	cmp	r3, #0
 800246c:	d052      	beq.n	8002514 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800246e:	7bfb      	ldrb	r3, [r7, #15]
 8002470:	e35e      	b.n	8002b30 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	699b      	ldr	r3, [r3, #24]
 8002476:	2b00      	cmp	r3, #0
 8002478:	d032      	beq.n	80024e0 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800247a:	4b43      	ldr	r3, [pc, #268]	; (8002588 <HAL_RCC_OscConfig+0x270>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	4a42      	ldr	r2, [pc, #264]	; (8002588 <HAL_RCC_OscConfig+0x270>)
 8002480:	f043 0301 	orr.w	r3, r3, #1
 8002484:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002486:	f7fe fcfd 	bl	8000e84 <HAL_GetTick>
 800248a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800248c:	e008      	b.n	80024a0 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800248e:	f7fe fcf9 	bl	8000e84 <HAL_GetTick>
 8002492:	4602      	mov	r2, r0
 8002494:	693b      	ldr	r3, [r7, #16]
 8002496:	1ad3      	subs	r3, r2, r3
 8002498:	2b02      	cmp	r3, #2
 800249a:	d901      	bls.n	80024a0 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 800249c:	2303      	movs	r3, #3
 800249e:	e347      	b.n	8002b30 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80024a0:	4b39      	ldr	r3, [pc, #228]	; (8002588 <HAL_RCC_OscConfig+0x270>)
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f003 0302 	and.w	r3, r3, #2
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d0f0      	beq.n	800248e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80024ac:	4b36      	ldr	r3, [pc, #216]	; (8002588 <HAL_RCC_OscConfig+0x270>)
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	4a35      	ldr	r2, [pc, #212]	; (8002588 <HAL_RCC_OscConfig+0x270>)
 80024b2:	f043 0308 	orr.w	r3, r3, #8
 80024b6:	6013      	str	r3, [r2, #0]
 80024b8:	4b33      	ldr	r3, [pc, #204]	; (8002588 <HAL_RCC_OscConfig+0x270>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	6a1b      	ldr	r3, [r3, #32]
 80024c4:	4930      	ldr	r1, [pc, #192]	; (8002588 <HAL_RCC_OscConfig+0x270>)
 80024c6:	4313      	orrs	r3, r2
 80024c8:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80024ca:	4b2f      	ldr	r3, [pc, #188]	; (8002588 <HAL_RCC_OscConfig+0x270>)
 80024cc:	685b      	ldr	r3, [r3, #4]
 80024ce:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	69db      	ldr	r3, [r3, #28]
 80024d6:	021b      	lsls	r3, r3, #8
 80024d8:	492b      	ldr	r1, [pc, #172]	; (8002588 <HAL_RCC_OscConfig+0x270>)
 80024da:	4313      	orrs	r3, r2
 80024dc:	604b      	str	r3, [r1, #4]
 80024de:	e01a      	b.n	8002516 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80024e0:	4b29      	ldr	r3, [pc, #164]	; (8002588 <HAL_RCC_OscConfig+0x270>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	4a28      	ldr	r2, [pc, #160]	; (8002588 <HAL_RCC_OscConfig+0x270>)
 80024e6:	f023 0301 	bic.w	r3, r3, #1
 80024ea:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80024ec:	f7fe fcca 	bl	8000e84 <HAL_GetTick>
 80024f0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80024f2:	e008      	b.n	8002506 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80024f4:	f7fe fcc6 	bl	8000e84 <HAL_GetTick>
 80024f8:	4602      	mov	r2, r0
 80024fa:	693b      	ldr	r3, [r7, #16]
 80024fc:	1ad3      	subs	r3, r2, r3
 80024fe:	2b02      	cmp	r3, #2
 8002500:	d901      	bls.n	8002506 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8002502:	2303      	movs	r3, #3
 8002504:	e314      	b.n	8002b30 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002506:	4b20      	ldr	r3, [pc, #128]	; (8002588 <HAL_RCC_OscConfig+0x270>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f003 0302 	and.w	r3, r3, #2
 800250e:	2b00      	cmp	r3, #0
 8002510:	d1f0      	bne.n	80024f4 <HAL_RCC_OscConfig+0x1dc>
 8002512:	e000      	b.n	8002516 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002514:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f003 0301 	and.w	r3, r3, #1
 800251e:	2b00      	cmp	r3, #0
 8002520:	d073      	beq.n	800260a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002522:	69bb      	ldr	r3, [r7, #24]
 8002524:	2b08      	cmp	r3, #8
 8002526:	d005      	beq.n	8002534 <HAL_RCC_OscConfig+0x21c>
 8002528:	69bb      	ldr	r3, [r7, #24]
 800252a:	2b0c      	cmp	r3, #12
 800252c:	d10e      	bne.n	800254c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800252e:	697b      	ldr	r3, [r7, #20]
 8002530:	2b03      	cmp	r3, #3
 8002532:	d10b      	bne.n	800254c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002534:	4b14      	ldr	r3, [pc, #80]	; (8002588 <HAL_RCC_OscConfig+0x270>)
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800253c:	2b00      	cmp	r3, #0
 800253e:	d063      	beq.n	8002608 <HAL_RCC_OscConfig+0x2f0>
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	685b      	ldr	r3, [r3, #4]
 8002544:	2b00      	cmp	r3, #0
 8002546:	d15f      	bne.n	8002608 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002548:	2301      	movs	r3, #1
 800254a:	e2f1      	b.n	8002b30 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	685b      	ldr	r3, [r3, #4]
 8002550:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002554:	d106      	bne.n	8002564 <HAL_RCC_OscConfig+0x24c>
 8002556:	4b0c      	ldr	r3, [pc, #48]	; (8002588 <HAL_RCC_OscConfig+0x270>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	4a0b      	ldr	r2, [pc, #44]	; (8002588 <HAL_RCC_OscConfig+0x270>)
 800255c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002560:	6013      	str	r3, [r2, #0]
 8002562:	e025      	b.n	80025b0 <HAL_RCC_OscConfig+0x298>
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	685b      	ldr	r3, [r3, #4]
 8002568:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800256c:	d114      	bne.n	8002598 <HAL_RCC_OscConfig+0x280>
 800256e:	4b06      	ldr	r3, [pc, #24]	; (8002588 <HAL_RCC_OscConfig+0x270>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	4a05      	ldr	r2, [pc, #20]	; (8002588 <HAL_RCC_OscConfig+0x270>)
 8002574:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002578:	6013      	str	r3, [r2, #0]
 800257a:	4b03      	ldr	r3, [pc, #12]	; (8002588 <HAL_RCC_OscConfig+0x270>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	4a02      	ldr	r2, [pc, #8]	; (8002588 <HAL_RCC_OscConfig+0x270>)
 8002580:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002584:	6013      	str	r3, [r2, #0]
 8002586:	e013      	b.n	80025b0 <HAL_RCC_OscConfig+0x298>
 8002588:	40021000 	.word	0x40021000
 800258c:	08007948 	.word	0x08007948
 8002590:	20000000 	.word	0x20000000
 8002594:	20000004 	.word	0x20000004
 8002598:	4ba0      	ldr	r3, [pc, #640]	; (800281c <HAL_RCC_OscConfig+0x504>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	4a9f      	ldr	r2, [pc, #636]	; (800281c <HAL_RCC_OscConfig+0x504>)
 800259e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80025a2:	6013      	str	r3, [r2, #0]
 80025a4:	4b9d      	ldr	r3, [pc, #628]	; (800281c <HAL_RCC_OscConfig+0x504>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	4a9c      	ldr	r2, [pc, #624]	; (800281c <HAL_RCC_OscConfig+0x504>)
 80025aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80025ae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	685b      	ldr	r3, [r3, #4]
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d013      	beq.n	80025e0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025b8:	f7fe fc64 	bl	8000e84 <HAL_GetTick>
 80025bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80025be:	e008      	b.n	80025d2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025c0:	f7fe fc60 	bl	8000e84 <HAL_GetTick>
 80025c4:	4602      	mov	r2, r0
 80025c6:	693b      	ldr	r3, [r7, #16]
 80025c8:	1ad3      	subs	r3, r2, r3
 80025ca:	2b64      	cmp	r3, #100	; 0x64
 80025cc:	d901      	bls.n	80025d2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80025ce:	2303      	movs	r3, #3
 80025d0:	e2ae      	b.n	8002b30 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80025d2:	4b92      	ldr	r3, [pc, #584]	; (800281c <HAL_RCC_OscConfig+0x504>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d0f0      	beq.n	80025c0 <HAL_RCC_OscConfig+0x2a8>
 80025de:	e014      	b.n	800260a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025e0:	f7fe fc50 	bl	8000e84 <HAL_GetTick>
 80025e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80025e6:	e008      	b.n	80025fa <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025e8:	f7fe fc4c 	bl	8000e84 <HAL_GetTick>
 80025ec:	4602      	mov	r2, r0
 80025ee:	693b      	ldr	r3, [r7, #16]
 80025f0:	1ad3      	subs	r3, r2, r3
 80025f2:	2b64      	cmp	r3, #100	; 0x64
 80025f4:	d901      	bls.n	80025fa <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80025f6:	2303      	movs	r3, #3
 80025f8:	e29a      	b.n	8002b30 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80025fa:	4b88      	ldr	r3, [pc, #544]	; (800281c <HAL_RCC_OscConfig+0x504>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002602:	2b00      	cmp	r3, #0
 8002604:	d1f0      	bne.n	80025e8 <HAL_RCC_OscConfig+0x2d0>
 8002606:	e000      	b.n	800260a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002608:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f003 0302 	and.w	r3, r3, #2
 8002612:	2b00      	cmp	r3, #0
 8002614:	d060      	beq.n	80026d8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002616:	69bb      	ldr	r3, [r7, #24]
 8002618:	2b04      	cmp	r3, #4
 800261a:	d005      	beq.n	8002628 <HAL_RCC_OscConfig+0x310>
 800261c:	69bb      	ldr	r3, [r7, #24]
 800261e:	2b0c      	cmp	r3, #12
 8002620:	d119      	bne.n	8002656 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002622:	697b      	ldr	r3, [r7, #20]
 8002624:	2b02      	cmp	r3, #2
 8002626:	d116      	bne.n	8002656 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002628:	4b7c      	ldr	r3, [pc, #496]	; (800281c <HAL_RCC_OscConfig+0x504>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002630:	2b00      	cmp	r3, #0
 8002632:	d005      	beq.n	8002640 <HAL_RCC_OscConfig+0x328>
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	68db      	ldr	r3, [r3, #12]
 8002638:	2b00      	cmp	r3, #0
 800263a:	d101      	bne.n	8002640 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800263c:	2301      	movs	r3, #1
 800263e:	e277      	b.n	8002b30 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002640:	4b76      	ldr	r3, [pc, #472]	; (800281c <HAL_RCC_OscConfig+0x504>)
 8002642:	685b      	ldr	r3, [r3, #4]
 8002644:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	691b      	ldr	r3, [r3, #16]
 800264c:	061b      	lsls	r3, r3, #24
 800264e:	4973      	ldr	r1, [pc, #460]	; (800281c <HAL_RCC_OscConfig+0x504>)
 8002650:	4313      	orrs	r3, r2
 8002652:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002654:	e040      	b.n	80026d8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	68db      	ldr	r3, [r3, #12]
 800265a:	2b00      	cmp	r3, #0
 800265c:	d023      	beq.n	80026a6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800265e:	4b6f      	ldr	r3, [pc, #444]	; (800281c <HAL_RCC_OscConfig+0x504>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	4a6e      	ldr	r2, [pc, #440]	; (800281c <HAL_RCC_OscConfig+0x504>)
 8002664:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002668:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800266a:	f7fe fc0b 	bl	8000e84 <HAL_GetTick>
 800266e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002670:	e008      	b.n	8002684 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002672:	f7fe fc07 	bl	8000e84 <HAL_GetTick>
 8002676:	4602      	mov	r2, r0
 8002678:	693b      	ldr	r3, [r7, #16]
 800267a:	1ad3      	subs	r3, r2, r3
 800267c:	2b02      	cmp	r3, #2
 800267e:	d901      	bls.n	8002684 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002680:	2303      	movs	r3, #3
 8002682:	e255      	b.n	8002b30 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002684:	4b65      	ldr	r3, [pc, #404]	; (800281c <HAL_RCC_OscConfig+0x504>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800268c:	2b00      	cmp	r3, #0
 800268e:	d0f0      	beq.n	8002672 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002690:	4b62      	ldr	r3, [pc, #392]	; (800281c <HAL_RCC_OscConfig+0x504>)
 8002692:	685b      	ldr	r3, [r3, #4]
 8002694:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	691b      	ldr	r3, [r3, #16]
 800269c:	061b      	lsls	r3, r3, #24
 800269e:	495f      	ldr	r1, [pc, #380]	; (800281c <HAL_RCC_OscConfig+0x504>)
 80026a0:	4313      	orrs	r3, r2
 80026a2:	604b      	str	r3, [r1, #4]
 80026a4:	e018      	b.n	80026d8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80026a6:	4b5d      	ldr	r3, [pc, #372]	; (800281c <HAL_RCC_OscConfig+0x504>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	4a5c      	ldr	r2, [pc, #368]	; (800281c <HAL_RCC_OscConfig+0x504>)
 80026ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80026b0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026b2:	f7fe fbe7 	bl	8000e84 <HAL_GetTick>
 80026b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80026b8:	e008      	b.n	80026cc <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026ba:	f7fe fbe3 	bl	8000e84 <HAL_GetTick>
 80026be:	4602      	mov	r2, r0
 80026c0:	693b      	ldr	r3, [r7, #16]
 80026c2:	1ad3      	subs	r3, r2, r3
 80026c4:	2b02      	cmp	r3, #2
 80026c6:	d901      	bls.n	80026cc <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80026c8:	2303      	movs	r3, #3
 80026ca:	e231      	b.n	8002b30 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80026cc:	4b53      	ldr	r3, [pc, #332]	; (800281c <HAL_RCC_OscConfig+0x504>)
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d1f0      	bne.n	80026ba <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f003 0308 	and.w	r3, r3, #8
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d03c      	beq.n	800275e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	695b      	ldr	r3, [r3, #20]
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d01c      	beq.n	8002726 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80026ec:	4b4b      	ldr	r3, [pc, #300]	; (800281c <HAL_RCC_OscConfig+0x504>)
 80026ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80026f2:	4a4a      	ldr	r2, [pc, #296]	; (800281c <HAL_RCC_OscConfig+0x504>)
 80026f4:	f043 0301 	orr.w	r3, r3, #1
 80026f8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026fc:	f7fe fbc2 	bl	8000e84 <HAL_GetTick>
 8002700:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002702:	e008      	b.n	8002716 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002704:	f7fe fbbe 	bl	8000e84 <HAL_GetTick>
 8002708:	4602      	mov	r2, r0
 800270a:	693b      	ldr	r3, [r7, #16]
 800270c:	1ad3      	subs	r3, r2, r3
 800270e:	2b02      	cmp	r3, #2
 8002710:	d901      	bls.n	8002716 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002712:	2303      	movs	r3, #3
 8002714:	e20c      	b.n	8002b30 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002716:	4b41      	ldr	r3, [pc, #260]	; (800281c <HAL_RCC_OscConfig+0x504>)
 8002718:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800271c:	f003 0302 	and.w	r3, r3, #2
 8002720:	2b00      	cmp	r3, #0
 8002722:	d0ef      	beq.n	8002704 <HAL_RCC_OscConfig+0x3ec>
 8002724:	e01b      	b.n	800275e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002726:	4b3d      	ldr	r3, [pc, #244]	; (800281c <HAL_RCC_OscConfig+0x504>)
 8002728:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800272c:	4a3b      	ldr	r2, [pc, #236]	; (800281c <HAL_RCC_OscConfig+0x504>)
 800272e:	f023 0301 	bic.w	r3, r3, #1
 8002732:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002736:	f7fe fba5 	bl	8000e84 <HAL_GetTick>
 800273a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800273c:	e008      	b.n	8002750 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800273e:	f7fe fba1 	bl	8000e84 <HAL_GetTick>
 8002742:	4602      	mov	r2, r0
 8002744:	693b      	ldr	r3, [r7, #16]
 8002746:	1ad3      	subs	r3, r2, r3
 8002748:	2b02      	cmp	r3, #2
 800274a:	d901      	bls.n	8002750 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800274c:	2303      	movs	r3, #3
 800274e:	e1ef      	b.n	8002b30 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002750:	4b32      	ldr	r3, [pc, #200]	; (800281c <HAL_RCC_OscConfig+0x504>)
 8002752:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002756:	f003 0302 	and.w	r3, r3, #2
 800275a:	2b00      	cmp	r3, #0
 800275c:	d1ef      	bne.n	800273e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f003 0304 	and.w	r3, r3, #4
 8002766:	2b00      	cmp	r3, #0
 8002768:	f000 80a6 	beq.w	80028b8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800276c:	2300      	movs	r3, #0
 800276e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002770:	4b2a      	ldr	r3, [pc, #168]	; (800281c <HAL_RCC_OscConfig+0x504>)
 8002772:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002774:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002778:	2b00      	cmp	r3, #0
 800277a:	d10d      	bne.n	8002798 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800277c:	4b27      	ldr	r3, [pc, #156]	; (800281c <HAL_RCC_OscConfig+0x504>)
 800277e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002780:	4a26      	ldr	r2, [pc, #152]	; (800281c <HAL_RCC_OscConfig+0x504>)
 8002782:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002786:	6593      	str	r3, [r2, #88]	; 0x58
 8002788:	4b24      	ldr	r3, [pc, #144]	; (800281c <HAL_RCC_OscConfig+0x504>)
 800278a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800278c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002790:	60bb      	str	r3, [r7, #8]
 8002792:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002794:	2301      	movs	r3, #1
 8002796:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002798:	4b21      	ldr	r3, [pc, #132]	; (8002820 <HAL_RCC_OscConfig+0x508>)
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d118      	bne.n	80027d6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80027a4:	4b1e      	ldr	r3, [pc, #120]	; (8002820 <HAL_RCC_OscConfig+0x508>)
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	4a1d      	ldr	r2, [pc, #116]	; (8002820 <HAL_RCC_OscConfig+0x508>)
 80027aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027ae:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80027b0:	f7fe fb68 	bl	8000e84 <HAL_GetTick>
 80027b4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80027b6:	e008      	b.n	80027ca <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027b8:	f7fe fb64 	bl	8000e84 <HAL_GetTick>
 80027bc:	4602      	mov	r2, r0
 80027be:	693b      	ldr	r3, [r7, #16]
 80027c0:	1ad3      	subs	r3, r2, r3
 80027c2:	2b02      	cmp	r3, #2
 80027c4:	d901      	bls.n	80027ca <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80027c6:	2303      	movs	r3, #3
 80027c8:	e1b2      	b.n	8002b30 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80027ca:	4b15      	ldr	r3, [pc, #84]	; (8002820 <HAL_RCC_OscConfig+0x508>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d0f0      	beq.n	80027b8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	689b      	ldr	r3, [r3, #8]
 80027da:	2b01      	cmp	r3, #1
 80027dc:	d108      	bne.n	80027f0 <HAL_RCC_OscConfig+0x4d8>
 80027de:	4b0f      	ldr	r3, [pc, #60]	; (800281c <HAL_RCC_OscConfig+0x504>)
 80027e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027e4:	4a0d      	ldr	r2, [pc, #52]	; (800281c <HAL_RCC_OscConfig+0x504>)
 80027e6:	f043 0301 	orr.w	r3, r3, #1
 80027ea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80027ee:	e029      	b.n	8002844 <HAL_RCC_OscConfig+0x52c>
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	689b      	ldr	r3, [r3, #8]
 80027f4:	2b05      	cmp	r3, #5
 80027f6:	d115      	bne.n	8002824 <HAL_RCC_OscConfig+0x50c>
 80027f8:	4b08      	ldr	r3, [pc, #32]	; (800281c <HAL_RCC_OscConfig+0x504>)
 80027fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027fe:	4a07      	ldr	r2, [pc, #28]	; (800281c <HAL_RCC_OscConfig+0x504>)
 8002800:	f043 0304 	orr.w	r3, r3, #4
 8002804:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002808:	4b04      	ldr	r3, [pc, #16]	; (800281c <HAL_RCC_OscConfig+0x504>)
 800280a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800280e:	4a03      	ldr	r2, [pc, #12]	; (800281c <HAL_RCC_OscConfig+0x504>)
 8002810:	f043 0301 	orr.w	r3, r3, #1
 8002814:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002818:	e014      	b.n	8002844 <HAL_RCC_OscConfig+0x52c>
 800281a:	bf00      	nop
 800281c:	40021000 	.word	0x40021000
 8002820:	40007000 	.word	0x40007000
 8002824:	4b9a      	ldr	r3, [pc, #616]	; (8002a90 <HAL_RCC_OscConfig+0x778>)
 8002826:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800282a:	4a99      	ldr	r2, [pc, #612]	; (8002a90 <HAL_RCC_OscConfig+0x778>)
 800282c:	f023 0301 	bic.w	r3, r3, #1
 8002830:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002834:	4b96      	ldr	r3, [pc, #600]	; (8002a90 <HAL_RCC_OscConfig+0x778>)
 8002836:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800283a:	4a95      	ldr	r2, [pc, #596]	; (8002a90 <HAL_RCC_OscConfig+0x778>)
 800283c:	f023 0304 	bic.w	r3, r3, #4
 8002840:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	689b      	ldr	r3, [r3, #8]
 8002848:	2b00      	cmp	r3, #0
 800284a:	d016      	beq.n	800287a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800284c:	f7fe fb1a 	bl	8000e84 <HAL_GetTick>
 8002850:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002852:	e00a      	b.n	800286a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002854:	f7fe fb16 	bl	8000e84 <HAL_GetTick>
 8002858:	4602      	mov	r2, r0
 800285a:	693b      	ldr	r3, [r7, #16]
 800285c:	1ad3      	subs	r3, r2, r3
 800285e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002862:	4293      	cmp	r3, r2
 8002864:	d901      	bls.n	800286a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002866:	2303      	movs	r3, #3
 8002868:	e162      	b.n	8002b30 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800286a:	4b89      	ldr	r3, [pc, #548]	; (8002a90 <HAL_RCC_OscConfig+0x778>)
 800286c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002870:	f003 0302 	and.w	r3, r3, #2
 8002874:	2b00      	cmp	r3, #0
 8002876:	d0ed      	beq.n	8002854 <HAL_RCC_OscConfig+0x53c>
 8002878:	e015      	b.n	80028a6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800287a:	f7fe fb03 	bl	8000e84 <HAL_GetTick>
 800287e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002880:	e00a      	b.n	8002898 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002882:	f7fe faff 	bl	8000e84 <HAL_GetTick>
 8002886:	4602      	mov	r2, r0
 8002888:	693b      	ldr	r3, [r7, #16]
 800288a:	1ad3      	subs	r3, r2, r3
 800288c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002890:	4293      	cmp	r3, r2
 8002892:	d901      	bls.n	8002898 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002894:	2303      	movs	r3, #3
 8002896:	e14b      	b.n	8002b30 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002898:	4b7d      	ldr	r3, [pc, #500]	; (8002a90 <HAL_RCC_OscConfig+0x778>)
 800289a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800289e:	f003 0302 	and.w	r3, r3, #2
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d1ed      	bne.n	8002882 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80028a6:	7ffb      	ldrb	r3, [r7, #31]
 80028a8:	2b01      	cmp	r3, #1
 80028aa:	d105      	bne.n	80028b8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028ac:	4b78      	ldr	r3, [pc, #480]	; (8002a90 <HAL_RCC_OscConfig+0x778>)
 80028ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028b0:	4a77      	ldr	r2, [pc, #476]	; (8002a90 <HAL_RCC_OscConfig+0x778>)
 80028b2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80028b6:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f003 0320 	and.w	r3, r3, #32
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d03c      	beq.n	800293e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d01c      	beq.n	8002906 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80028cc:	4b70      	ldr	r3, [pc, #448]	; (8002a90 <HAL_RCC_OscConfig+0x778>)
 80028ce:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80028d2:	4a6f      	ldr	r2, [pc, #444]	; (8002a90 <HAL_RCC_OscConfig+0x778>)
 80028d4:	f043 0301 	orr.w	r3, r3, #1
 80028d8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028dc:	f7fe fad2 	bl	8000e84 <HAL_GetTick>
 80028e0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80028e2:	e008      	b.n	80028f6 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80028e4:	f7fe face 	bl	8000e84 <HAL_GetTick>
 80028e8:	4602      	mov	r2, r0
 80028ea:	693b      	ldr	r3, [r7, #16]
 80028ec:	1ad3      	subs	r3, r2, r3
 80028ee:	2b02      	cmp	r3, #2
 80028f0:	d901      	bls.n	80028f6 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80028f2:	2303      	movs	r3, #3
 80028f4:	e11c      	b.n	8002b30 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80028f6:	4b66      	ldr	r3, [pc, #408]	; (8002a90 <HAL_RCC_OscConfig+0x778>)
 80028f8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80028fc:	f003 0302 	and.w	r3, r3, #2
 8002900:	2b00      	cmp	r3, #0
 8002902:	d0ef      	beq.n	80028e4 <HAL_RCC_OscConfig+0x5cc>
 8002904:	e01b      	b.n	800293e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002906:	4b62      	ldr	r3, [pc, #392]	; (8002a90 <HAL_RCC_OscConfig+0x778>)
 8002908:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800290c:	4a60      	ldr	r2, [pc, #384]	; (8002a90 <HAL_RCC_OscConfig+0x778>)
 800290e:	f023 0301 	bic.w	r3, r3, #1
 8002912:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002916:	f7fe fab5 	bl	8000e84 <HAL_GetTick>
 800291a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800291c:	e008      	b.n	8002930 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800291e:	f7fe fab1 	bl	8000e84 <HAL_GetTick>
 8002922:	4602      	mov	r2, r0
 8002924:	693b      	ldr	r3, [r7, #16]
 8002926:	1ad3      	subs	r3, r2, r3
 8002928:	2b02      	cmp	r3, #2
 800292a:	d901      	bls.n	8002930 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 800292c:	2303      	movs	r3, #3
 800292e:	e0ff      	b.n	8002b30 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002930:	4b57      	ldr	r3, [pc, #348]	; (8002a90 <HAL_RCC_OscConfig+0x778>)
 8002932:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002936:	f003 0302 	and.w	r3, r3, #2
 800293a:	2b00      	cmp	r3, #0
 800293c:	d1ef      	bne.n	800291e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002942:	2b00      	cmp	r3, #0
 8002944:	f000 80f3 	beq.w	8002b2e <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800294c:	2b02      	cmp	r3, #2
 800294e:	f040 80c9 	bne.w	8002ae4 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002952:	4b4f      	ldr	r3, [pc, #316]	; (8002a90 <HAL_RCC_OscConfig+0x778>)
 8002954:	68db      	ldr	r3, [r3, #12]
 8002956:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002958:	697b      	ldr	r3, [r7, #20]
 800295a:	f003 0203 	and.w	r2, r3, #3
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002962:	429a      	cmp	r2, r3
 8002964:	d12c      	bne.n	80029c0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002966:	697b      	ldr	r3, [r7, #20]
 8002968:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002970:	3b01      	subs	r3, #1
 8002972:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002974:	429a      	cmp	r2, r3
 8002976:	d123      	bne.n	80029c0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002978:	697b      	ldr	r3, [r7, #20]
 800297a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002982:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002984:	429a      	cmp	r2, r3
 8002986:	d11b      	bne.n	80029c0 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002988:	697b      	ldr	r3, [r7, #20]
 800298a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002992:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002994:	429a      	cmp	r2, r3
 8002996:	d113      	bne.n	80029c0 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002998:	697b      	ldr	r3, [r7, #20]
 800299a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029a2:	085b      	lsrs	r3, r3, #1
 80029a4:	3b01      	subs	r3, #1
 80029a6:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80029a8:	429a      	cmp	r2, r3
 80029aa:	d109      	bne.n	80029c0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80029ac:	697b      	ldr	r3, [r7, #20]
 80029ae:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029b6:	085b      	lsrs	r3, r3, #1
 80029b8:	3b01      	subs	r3, #1
 80029ba:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80029bc:	429a      	cmp	r2, r3
 80029be:	d06b      	beq.n	8002a98 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80029c0:	69bb      	ldr	r3, [r7, #24]
 80029c2:	2b0c      	cmp	r3, #12
 80029c4:	d062      	beq.n	8002a8c <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80029c6:	4b32      	ldr	r3, [pc, #200]	; (8002a90 <HAL_RCC_OscConfig+0x778>)
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d001      	beq.n	80029d6 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 80029d2:	2301      	movs	r3, #1
 80029d4:	e0ac      	b.n	8002b30 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80029d6:	4b2e      	ldr	r3, [pc, #184]	; (8002a90 <HAL_RCC_OscConfig+0x778>)
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	4a2d      	ldr	r2, [pc, #180]	; (8002a90 <HAL_RCC_OscConfig+0x778>)
 80029dc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80029e0:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80029e2:	f7fe fa4f 	bl	8000e84 <HAL_GetTick>
 80029e6:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80029e8:	e008      	b.n	80029fc <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029ea:	f7fe fa4b 	bl	8000e84 <HAL_GetTick>
 80029ee:	4602      	mov	r2, r0
 80029f0:	693b      	ldr	r3, [r7, #16]
 80029f2:	1ad3      	subs	r3, r2, r3
 80029f4:	2b02      	cmp	r3, #2
 80029f6:	d901      	bls.n	80029fc <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 80029f8:	2303      	movs	r3, #3
 80029fa:	e099      	b.n	8002b30 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80029fc:	4b24      	ldr	r3, [pc, #144]	; (8002a90 <HAL_RCC_OscConfig+0x778>)
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d1f0      	bne.n	80029ea <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002a08:	4b21      	ldr	r3, [pc, #132]	; (8002a90 <HAL_RCC_OscConfig+0x778>)
 8002a0a:	68da      	ldr	r2, [r3, #12]
 8002a0c:	4b21      	ldr	r3, [pc, #132]	; (8002a94 <HAL_RCC_OscConfig+0x77c>)
 8002a0e:	4013      	ands	r3, r2
 8002a10:	687a      	ldr	r2, [r7, #4]
 8002a12:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002a14:	687a      	ldr	r2, [r7, #4]
 8002a16:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002a18:	3a01      	subs	r2, #1
 8002a1a:	0112      	lsls	r2, r2, #4
 8002a1c:	4311      	orrs	r1, r2
 8002a1e:	687a      	ldr	r2, [r7, #4]
 8002a20:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002a22:	0212      	lsls	r2, r2, #8
 8002a24:	4311      	orrs	r1, r2
 8002a26:	687a      	ldr	r2, [r7, #4]
 8002a28:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002a2a:	0852      	lsrs	r2, r2, #1
 8002a2c:	3a01      	subs	r2, #1
 8002a2e:	0552      	lsls	r2, r2, #21
 8002a30:	4311      	orrs	r1, r2
 8002a32:	687a      	ldr	r2, [r7, #4]
 8002a34:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002a36:	0852      	lsrs	r2, r2, #1
 8002a38:	3a01      	subs	r2, #1
 8002a3a:	0652      	lsls	r2, r2, #25
 8002a3c:	4311      	orrs	r1, r2
 8002a3e:	687a      	ldr	r2, [r7, #4]
 8002a40:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002a42:	06d2      	lsls	r2, r2, #27
 8002a44:	430a      	orrs	r2, r1
 8002a46:	4912      	ldr	r1, [pc, #72]	; (8002a90 <HAL_RCC_OscConfig+0x778>)
 8002a48:	4313      	orrs	r3, r2
 8002a4a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002a4c:	4b10      	ldr	r3, [pc, #64]	; (8002a90 <HAL_RCC_OscConfig+0x778>)
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	4a0f      	ldr	r2, [pc, #60]	; (8002a90 <HAL_RCC_OscConfig+0x778>)
 8002a52:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002a56:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002a58:	4b0d      	ldr	r3, [pc, #52]	; (8002a90 <HAL_RCC_OscConfig+0x778>)
 8002a5a:	68db      	ldr	r3, [r3, #12]
 8002a5c:	4a0c      	ldr	r2, [pc, #48]	; (8002a90 <HAL_RCC_OscConfig+0x778>)
 8002a5e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002a62:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002a64:	f7fe fa0e 	bl	8000e84 <HAL_GetTick>
 8002a68:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a6a:	e008      	b.n	8002a7e <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a6c:	f7fe fa0a 	bl	8000e84 <HAL_GetTick>
 8002a70:	4602      	mov	r2, r0
 8002a72:	693b      	ldr	r3, [r7, #16]
 8002a74:	1ad3      	subs	r3, r2, r3
 8002a76:	2b02      	cmp	r3, #2
 8002a78:	d901      	bls.n	8002a7e <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8002a7a:	2303      	movs	r3, #3
 8002a7c:	e058      	b.n	8002b30 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a7e:	4b04      	ldr	r3, [pc, #16]	; (8002a90 <HAL_RCC_OscConfig+0x778>)
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d0f0      	beq.n	8002a6c <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002a8a:	e050      	b.n	8002b2e <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002a8c:	2301      	movs	r3, #1
 8002a8e:	e04f      	b.n	8002b30 <HAL_RCC_OscConfig+0x818>
 8002a90:	40021000 	.word	0x40021000
 8002a94:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a98:	4b27      	ldr	r3, [pc, #156]	; (8002b38 <HAL_RCC_OscConfig+0x820>)
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d144      	bne.n	8002b2e <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002aa4:	4b24      	ldr	r3, [pc, #144]	; (8002b38 <HAL_RCC_OscConfig+0x820>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	4a23      	ldr	r2, [pc, #140]	; (8002b38 <HAL_RCC_OscConfig+0x820>)
 8002aaa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002aae:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002ab0:	4b21      	ldr	r3, [pc, #132]	; (8002b38 <HAL_RCC_OscConfig+0x820>)
 8002ab2:	68db      	ldr	r3, [r3, #12]
 8002ab4:	4a20      	ldr	r2, [pc, #128]	; (8002b38 <HAL_RCC_OscConfig+0x820>)
 8002ab6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002aba:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002abc:	f7fe f9e2 	bl	8000e84 <HAL_GetTick>
 8002ac0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ac2:	e008      	b.n	8002ad6 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ac4:	f7fe f9de 	bl	8000e84 <HAL_GetTick>
 8002ac8:	4602      	mov	r2, r0
 8002aca:	693b      	ldr	r3, [r7, #16]
 8002acc:	1ad3      	subs	r3, r2, r3
 8002ace:	2b02      	cmp	r3, #2
 8002ad0:	d901      	bls.n	8002ad6 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8002ad2:	2303      	movs	r3, #3
 8002ad4:	e02c      	b.n	8002b30 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ad6:	4b18      	ldr	r3, [pc, #96]	; (8002b38 <HAL_RCC_OscConfig+0x820>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d0f0      	beq.n	8002ac4 <HAL_RCC_OscConfig+0x7ac>
 8002ae2:	e024      	b.n	8002b2e <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002ae4:	69bb      	ldr	r3, [r7, #24]
 8002ae6:	2b0c      	cmp	r3, #12
 8002ae8:	d01f      	beq.n	8002b2a <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002aea:	4b13      	ldr	r3, [pc, #76]	; (8002b38 <HAL_RCC_OscConfig+0x820>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	4a12      	ldr	r2, [pc, #72]	; (8002b38 <HAL_RCC_OscConfig+0x820>)
 8002af0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002af4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002af6:	f7fe f9c5 	bl	8000e84 <HAL_GetTick>
 8002afa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002afc:	e008      	b.n	8002b10 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002afe:	f7fe f9c1 	bl	8000e84 <HAL_GetTick>
 8002b02:	4602      	mov	r2, r0
 8002b04:	693b      	ldr	r3, [r7, #16]
 8002b06:	1ad3      	subs	r3, r2, r3
 8002b08:	2b02      	cmp	r3, #2
 8002b0a:	d901      	bls.n	8002b10 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8002b0c:	2303      	movs	r3, #3
 8002b0e:	e00f      	b.n	8002b30 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b10:	4b09      	ldr	r3, [pc, #36]	; (8002b38 <HAL_RCC_OscConfig+0x820>)
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d1f0      	bne.n	8002afe <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8002b1c:	4b06      	ldr	r3, [pc, #24]	; (8002b38 <HAL_RCC_OscConfig+0x820>)
 8002b1e:	68da      	ldr	r2, [r3, #12]
 8002b20:	4905      	ldr	r1, [pc, #20]	; (8002b38 <HAL_RCC_OscConfig+0x820>)
 8002b22:	4b06      	ldr	r3, [pc, #24]	; (8002b3c <HAL_RCC_OscConfig+0x824>)
 8002b24:	4013      	ands	r3, r2
 8002b26:	60cb      	str	r3, [r1, #12]
 8002b28:	e001      	b.n	8002b2e <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002b2a:	2301      	movs	r3, #1
 8002b2c:	e000      	b.n	8002b30 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8002b2e:	2300      	movs	r3, #0
}
 8002b30:	4618      	mov	r0, r3
 8002b32:	3720      	adds	r7, #32
 8002b34:	46bd      	mov	sp, r7
 8002b36:	bd80      	pop	{r7, pc}
 8002b38:	40021000 	.word	0x40021000
 8002b3c:	feeefffc 	.word	0xfeeefffc

08002b40 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b084      	sub	sp, #16
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
 8002b48:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d101      	bne.n	8002b54 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b50:	2301      	movs	r3, #1
 8002b52:	e0e7      	b.n	8002d24 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002b54:	4b75      	ldr	r3, [pc, #468]	; (8002d2c <HAL_RCC_ClockConfig+0x1ec>)
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f003 0307 	and.w	r3, r3, #7
 8002b5c:	683a      	ldr	r2, [r7, #0]
 8002b5e:	429a      	cmp	r2, r3
 8002b60:	d910      	bls.n	8002b84 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b62:	4b72      	ldr	r3, [pc, #456]	; (8002d2c <HAL_RCC_ClockConfig+0x1ec>)
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f023 0207 	bic.w	r2, r3, #7
 8002b6a:	4970      	ldr	r1, [pc, #448]	; (8002d2c <HAL_RCC_ClockConfig+0x1ec>)
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	4313      	orrs	r3, r2
 8002b70:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b72:	4b6e      	ldr	r3, [pc, #440]	; (8002d2c <HAL_RCC_ClockConfig+0x1ec>)
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f003 0307 	and.w	r3, r3, #7
 8002b7a:	683a      	ldr	r2, [r7, #0]
 8002b7c:	429a      	cmp	r2, r3
 8002b7e:	d001      	beq.n	8002b84 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002b80:	2301      	movs	r3, #1
 8002b82:	e0cf      	b.n	8002d24 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f003 0302 	and.w	r3, r3, #2
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d010      	beq.n	8002bb2 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	689a      	ldr	r2, [r3, #8]
 8002b94:	4b66      	ldr	r3, [pc, #408]	; (8002d30 <HAL_RCC_ClockConfig+0x1f0>)
 8002b96:	689b      	ldr	r3, [r3, #8]
 8002b98:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002b9c:	429a      	cmp	r2, r3
 8002b9e:	d908      	bls.n	8002bb2 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ba0:	4b63      	ldr	r3, [pc, #396]	; (8002d30 <HAL_RCC_ClockConfig+0x1f0>)
 8002ba2:	689b      	ldr	r3, [r3, #8]
 8002ba4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	689b      	ldr	r3, [r3, #8]
 8002bac:	4960      	ldr	r1, [pc, #384]	; (8002d30 <HAL_RCC_ClockConfig+0x1f0>)
 8002bae:	4313      	orrs	r3, r2
 8002bb0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f003 0301 	and.w	r3, r3, #1
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d04c      	beq.n	8002c58 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	685b      	ldr	r3, [r3, #4]
 8002bc2:	2b03      	cmp	r3, #3
 8002bc4:	d107      	bne.n	8002bd6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002bc6:	4b5a      	ldr	r3, [pc, #360]	; (8002d30 <HAL_RCC_ClockConfig+0x1f0>)
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d121      	bne.n	8002c16 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002bd2:	2301      	movs	r3, #1
 8002bd4:	e0a6      	b.n	8002d24 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	685b      	ldr	r3, [r3, #4]
 8002bda:	2b02      	cmp	r3, #2
 8002bdc:	d107      	bne.n	8002bee <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002bde:	4b54      	ldr	r3, [pc, #336]	; (8002d30 <HAL_RCC_ClockConfig+0x1f0>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d115      	bne.n	8002c16 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002bea:	2301      	movs	r3, #1
 8002bec:	e09a      	b.n	8002d24 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	685b      	ldr	r3, [r3, #4]
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d107      	bne.n	8002c06 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002bf6:	4b4e      	ldr	r3, [pc, #312]	; (8002d30 <HAL_RCC_ClockConfig+0x1f0>)
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f003 0302 	and.w	r3, r3, #2
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d109      	bne.n	8002c16 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002c02:	2301      	movs	r3, #1
 8002c04:	e08e      	b.n	8002d24 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002c06:	4b4a      	ldr	r3, [pc, #296]	; (8002d30 <HAL_RCC_ClockConfig+0x1f0>)
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d101      	bne.n	8002c16 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002c12:	2301      	movs	r3, #1
 8002c14:	e086      	b.n	8002d24 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002c16:	4b46      	ldr	r3, [pc, #280]	; (8002d30 <HAL_RCC_ClockConfig+0x1f0>)
 8002c18:	689b      	ldr	r3, [r3, #8]
 8002c1a:	f023 0203 	bic.w	r2, r3, #3
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	685b      	ldr	r3, [r3, #4]
 8002c22:	4943      	ldr	r1, [pc, #268]	; (8002d30 <HAL_RCC_ClockConfig+0x1f0>)
 8002c24:	4313      	orrs	r3, r2
 8002c26:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c28:	f7fe f92c 	bl	8000e84 <HAL_GetTick>
 8002c2c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c2e:	e00a      	b.n	8002c46 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c30:	f7fe f928 	bl	8000e84 <HAL_GetTick>
 8002c34:	4602      	mov	r2, r0
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	1ad3      	subs	r3, r2, r3
 8002c3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c3e:	4293      	cmp	r3, r2
 8002c40:	d901      	bls.n	8002c46 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002c42:	2303      	movs	r3, #3
 8002c44:	e06e      	b.n	8002d24 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c46:	4b3a      	ldr	r3, [pc, #232]	; (8002d30 <HAL_RCC_ClockConfig+0x1f0>)
 8002c48:	689b      	ldr	r3, [r3, #8]
 8002c4a:	f003 020c 	and.w	r2, r3, #12
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	685b      	ldr	r3, [r3, #4]
 8002c52:	009b      	lsls	r3, r3, #2
 8002c54:	429a      	cmp	r2, r3
 8002c56:	d1eb      	bne.n	8002c30 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f003 0302 	and.w	r3, r3, #2
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d010      	beq.n	8002c86 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	689a      	ldr	r2, [r3, #8]
 8002c68:	4b31      	ldr	r3, [pc, #196]	; (8002d30 <HAL_RCC_ClockConfig+0x1f0>)
 8002c6a:	689b      	ldr	r3, [r3, #8]
 8002c6c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002c70:	429a      	cmp	r2, r3
 8002c72:	d208      	bcs.n	8002c86 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c74:	4b2e      	ldr	r3, [pc, #184]	; (8002d30 <HAL_RCC_ClockConfig+0x1f0>)
 8002c76:	689b      	ldr	r3, [r3, #8]
 8002c78:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	689b      	ldr	r3, [r3, #8]
 8002c80:	492b      	ldr	r1, [pc, #172]	; (8002d30 <HAL_RCC_ClockConfig+0x1f0>)
 8002c82:	4313      	orrs	r3, r2
 8002c84:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002c86:	4b29      	ldr	r3, [pc, #164]	; (8002d2c <HAL_RCC_ClockConfig+0x1ec>)
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f003 0307 	and.w	r3, r3, #7
 8002c8e:	683a      	ldr	r2, [r7, #0]
 8002c90:	429a      	cmp	r2, r3
 8002c92:	d210      	bcs.n	8002cb6 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c94:	4b25      	ldr	r3, [pc, #148]	; (8002d2c <HAL_RCC_ClockConfig+0x1ec>)
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f023 0207 	bic.w	r2, r3, #7
 8002c9c:	4923      	ldr	r1, [pc, #140]	; (8002d2c <HAL_RCC_ClockConfig+0x1ec>)
 8002c9e:	683b      	ldr	r3, [r7, #0]
 8002ca0:	4313      	orrs	r3, r2
 8002ca2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ca4:	4b21      	ldr	r3, [pc, #132]	; (8002d2c <HAL_RCC_ClockConfig+0x1ec>)
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f003 0307 	and.w	r3, r3, #7
 8002cac:	683a      	ldr	r2, [r7, #0]
 8002cae:	429a      	cmp	r2, r3
 8002cb0:	d001      	beq.n	8002cb6 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002cb2:	2301      	movs	r3, #1
 8002cb4:	e036      	b.n	8002d24 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f003 0304 	and.w	r3, r3, #4
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d008      	beq.n	8002cd4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002cc2:	4b1b      	ldr	r3, [pc, #108]	; (8002d30 <HAL_RCC_ClockConfig+0x1f0>)
 8002cc4:	689b      	ldr	r3, [r3, #8]
 8002cc6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	68db      	ldr	r3, [r3, #12]
 8002cce:	4918      	ldr	r1, [pc, #96]	; (8002d30 <HAL_RCC_ClockConfig+0x1f0>)
 8002cd0:	4313      	orrs	r3, r2
 8002cd2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f003 0308 	and.w	r3, r3, #8
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d009      	beq.n	8002cf4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002ce0:	4b13      	ldr	r3, [pc, #76]	; (8002d30 <HAL_RCC_ClockConfig+0x1f0>)
 8002ce2:	689b      	ldr	r3, [r3, #8]
 8002ce4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	691b      	ldr	r3, [r3, #16]
 8002cec:	00db      	lsls	r3, r3, #3
 8002cee:	4910      	ldr	r1, [pc, #64]	; (8002d30 <HAL_RCC_ClockConfig+0x1f0>)
 8002cf0:	4313      	orrs	r3, r2
 8002cf2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002cf4:	f000 f824 	bl	8002d40 <HAL_RCC_GetSysClockFreq>
 8002cf8:	4602      	mov	r2, r0
 8002cfa:	4b0d      	ldr	r3, [pc, #52]	; (8002d30 <HAL_RCC_ClockConfig+0x1f0>)
 8002cfc:	689b      	ldr	r3, [r3, #8]
 8002cfe:	091b      	lsrs	r3, r3, #4
 8002d00:	f003 030f 	and.w	r3, r3, #15
 8002d04:	490b      	ldr	r1, [pc, #44]	; (8002d34 <HAL_RCC_ClockConfig+0x1f4>)
 8002d06:	5ccb      	ldrb	r3, [r1, r3]
 8002d08:	f003 031f 	and.w	r3, r3, #31
 8002d0c:	fa22 f303 	lsr.w	r3, r2, r3
 8002d10:	4a09      	ldr	r2, [pc, #36]	; (8002d38 <HAL_RCC_ClockConfig+0x1f8>)
 8002d12:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002d14:	4b09      	ldr	r3, [pc, #36]	; (8002d3c <HAL_RCC_ClockConfig+0x1fc>)
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	4618      	mov	r0, r3
 8002d1a:	f7fd ff7f 	bl	8000c1c <HAL_InitTick>
 8002d1e:	4603      	mov	r3, r0
 8002d20:	72fb      	strb	r3, [r7, #11]

  return status;
 8002d22:	7afb      	ldrb	r3, [r7, #11]
}
 8002d24:	4618      	mov	r0, r3
 8002d26:	3710      	adds	r7, #16
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	bd80      	pop	{r7, pc}
 8002d2c:	40022000 	.word	0x40022000
 8002d30:	40021000 	.word	0x40021000
 8002d34:	08007948 	.word	0x08007948
 8002d38:	20000000 	.word	0x20000000
 8002d3c:	20000004 	.word	0x20000004

08002d40 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d40:	b480      	push	{r7}
 8002d42:	b089      	sub	sp, #36	; 0x24
 8002d44:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002d46:	2300      	movs	r3, #0
 8002d48:	61fb      	str	r3, [r7, #28]
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002d4e:	4b3e      	ldr	r3, [pc, #248]	; (8002e48 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d50:	689b      	ldr	r3, [r3, #8]
 8002d52:	f003 030c 	and.w	r3, r3, #12
 8002d56:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002d58:	4b3b      	ldr	r3, [pc, #236]	; (8002e48 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d5a:	68db      	ldr	r3, [r3, #12]
 8002d5c:	f003 0303 	and.w	r3, r3, #3
 8002d60:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002d62:	693b      	ldr	r3, [r7, #16]
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d005      	beq.n	8002d74 <HAL_RCC_GetSysClockFreq+0x34>
 8002d68:	693b      	ldr	r3, [r7, #16]
 8002d6a:	2b0c      	cmp	r3, #12
 8002d6c:	d121      	bne.n	8002db2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	2b01      	cmp	r3, #1
 8002d72:	d11e      	bne.n	8002db2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002d74:	4b34      	ldr	r3, [pc, #208]	; (8002e48 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f003 0308 	and.w	r3, r3, #8
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d107      	bne.n	8002d90 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002d80:	4b31      	ldr	r3, [pc, #196]	; (8002e48 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d82:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d86:	0a1b      	lsrs	r3, r3, #8
 8002d88:	f003 030f 	and.w	r3, r3, #15
 8002d8c:	61fb      	str	r3, [r7, #28]
 8002d8e:	e005      	b.n	8002d9c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002d90:	4b2d      	ldr	r3, [pc, #180]	; (8002e48 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	091b      	lsrs	r3, r3, #4
 8002d96:	f003 030f 	and.w	r3, r3, #15
 8002d9a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002d9c:	4a2b      	ldr	r2, [pc, #172]	; (8002e4c <HAL_RCC_GetSysClockFreq+0x10c>)
 8002d9e:	69fb      	ldr	r3, [r7, #28]
 8002da0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002da4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002da6:	693b      	ldr	r3, [r7, #16]
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d10d      	bne.n	8002dc8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002dac:	69fb      	ldr	r3, [r7, #28]
 8002dae:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002db0:	e00a      	b.n	8002dc8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002db2:	693b      	ldr	r3, [r7, #16]
 8002db4:	2b04      	cmp	r3, #4
 8002db6:	d102      	bne.n	8002dbe <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002db8:	4b25      	ldr	r3, [pc, #148]	; (8002e50 <HAL_RCC_GetSysClockFreq+0x110>)
 8002dba:	61bb      	str	r3, [r7, #24]
 8002dbc:	e004      	b.n	8002dc8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002dbe:	693b      	ldr	r3, [r7, #16]
 8002dc0:	2b08      	cmp	r3, #8
 8002dc2:	d101      	bne.n	8002dc8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002dc4:	4b22      	ldr	r3, [pc, #136]	; (8002e50 <HAL_RCC_GetSysClockFreq+0x110>)
 8002dc6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002dc8:	693b      	ldr	r3, [r7, #16]
 8002dca:	2b0c      	cmp	r3, #12
 8002dcc:	d134      	bne.n	8002e38 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002dce:	4b1e      	ldr	r3, [pc, #120]	; (8002e48 <HAL_RCC_GetSysClockFreq+0x108>)
 8002dd0:	68db      	ldr	r3, [r3, #12]
 8002dd2:	f003 0303 	and.w	r3, r3, #3
 8002dd6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002dd8:	68bb      	ldr	r3, [r7, #8]
 8002dda:	2b02      	cmp	r3, #2
 8002ddc:	d003      	beq.n	8002de6 <HAL_RCC_GetSysClockFreq+0xa6>
 8002dde:	68bb      	ldr	r3, [r7, #8]
 8002de0:	2b03      	cmp	r3, #3
 8002de2:	d003      	beq.n	8002dec <HAL_RCC_GetSysClockFreq+0xac>
 8002de4:	e005      	b.n	8002df2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002de6:	4b1a      	ldr	r3, [pc, #104]	; (8002e50 <HAL_RCC_GetSysClockFreq+0x110>)
 8002de8:	617b      	str	r3, [r7, #20]
      break;
 8002dea:	e005      	b.n	8002df8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002dec:	4b18      	ldr	r3, [pc, #96]	; (8002e50 <HAL_RCC_GetSysClockFreq+0x110>)
 8002dee:	617b      	str	r3, [r7, #20]
      break;
 8002df0:	e002      	b.n	8002df8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002df2:	69fb      	ldr	r3, [r7, #28]
 8002df4:	617b      	str	r3, [r7, #20]
      break;
 8002df6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002df8:	4b13      	ldr	r3, [pc, #76]	; (8002e48 <HAL_RCC_GetSysClockFreq+0x108>)
 8002dfa:	68db      	ldr	r3, [r3, #12]
 8002dfc:	091b      	lsrs	r3, r3, #4
 8002dfe:	f003 0307 	and.w	r3, r3, #7
 8002e02:	3301      	adds	r3, #1
 8002e04:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002e06:	4b10      	ldr	r3, [pc, #64]	; (8002e48 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e08:	68db      	ldr	r3, [r3, #12]
 8002e0a:	0a1b      	lsrs	r3, r3, #8
 8002e0c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002e10:	697a      	ldr	r2, [r7, #20]
 8002e12:	fb03 f202 	mul.w	r2, r3, r2
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e1c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002e1e:	4b0a      	ldr	r3, [pc, #40]	; (8002e48 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e20:	68db      	ldr	r3, [r3, #12]
 8002e22:	0e5b      	lsrs	r3, r3, #25
 8002e24:	f003 0303 	and.w	r3, r3, #3
 8002e28:	3301      	adds	r3, #1
 8002e2a:	005b      	lsls	r3, r3, #1
 8002e2c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002e2e:	697a      	ldr	r2, [r7, #20]
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e36:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002e38:	69bb      	ldr	r3, [r7, #24]
}
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	3724      	adds	r7, #36	; 0x24
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e44:	4770      	bx	lr
 8002e46:	bf00      	nop
 8002e48:	40021000 	.word	0x40021000
 8002e4c:	08007960 	.word	0x08007960
 8002e50:	00f42400 	.word	0x00f42400

08002e54 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e54:	b480      	push	{r7}
 8002e56:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002e58:	4b03      	ldr	r3, [pc, #12]	; (8002e68 <HAL_RCC_GetHCLKFreq+0x14>)
 8002e5a:	681b      	ldr	r3, [r3, #0]
}
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e64:	4770      	bx	lr
 8002e66:	bf00      	nop
 8002e68:	20000000 	.word	0x20000000

08002e6c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002e70:	f7ff fff0 	bl	8002e54 <HAL_RCC_GetHCLKFreq>
 8002e74:	4602      	mov	r2, r0
 8002e76:	4b06      	ldr	r3, [pc, #24]	; (8002e90 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002e78:	689b      	ldr	r3, [r3, #8]
 8002e7a:	0a1b      	lsrs	r3, r3, #8
 8002e7c:	f003 0307 	and.w	r3, r3, #7
 8002e80:	4904      	ldr	r1, [pc, #16]	; (8002e94 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002e82:	5ccb      	ldrb	r3, [r1, r3]
 8002e84:	f003 031f 	and.w	r3, r3, #31
 8002e88:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	bd80      	pop	{r7, pc}
 8002e90:	40021000 	.word	0x40021000
 8002e94:	08007958 	.word	0x08007958

08002e98 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002e9c:	f7ff ffda 	bl	8002e54 <HAL_RCC_GetHCLKFreq>
 8002ea0:	4602      	mov	r2, r0
 8002ea2:	4b06      	ldr	r3, [pc, #24]	; (8002ebc <HAL_RCC_GetPCLK2Freq+0x24>)
 8002ea4:	689b      	ldr	r3, [r3, #8]
 8002ea6:	0adb      	lsrs	r3, r3, #11
 8002ea8:	f003 0307 	and.w	r3, r3, #7
 8002eac:	4904      	ldr	r1, [pc, #16]	; (8002ec0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002eae:	5ccb      	ldrb	r3, [r1, r3]
 8002eb0:	f003 031f 	and.w	r3, r3, #31
 8002eb4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002eb8:	4618      	mov	r0, r3
 8002eba:	bd80      	pop	{r7, pc}
 8002ebc:	40021000 	.word	0x40021000
 8002ec0:	08007958 	.word	0x08007958

08002ec4 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002ec4:	b480      	push	{r7}
 8002ec6:	b083      	sub	sp, #12
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
 8002ecc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	220f      	movs	r2, #15
 8002ed2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8002ed4:	4b12      	ldr	r3, [pc, #72]	; (8002f20 <HAL_RCC_GetClockConfig+0x5c>)
 8002ed6:	689b      	ldr	r3, [r3, #8]
 8002ed8:	f003 0203 	and.w	r2, r3, #3
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8002ee0:	4b0f      	ldr	r3, [pc, #60]	; (8002f20 <HAL_RCC_GetClockConfig+0x5c>)
 8002ee2:	689b      	ldr	r3, [r3, #8]
 8002ee4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8002eec:	4b0c      	ldr	r3, [pc, #48]	; (8002f20 <HAL_RCC_GetClockConfig+0x5c>)
 8002eee:	689b      	ldr	r3, [r3, #8]
 8002ef0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8002ef8:	4b09      	ldr	r3, [pc, #36]	; (8002f20 <HAL_RCC_GetClockConfig+0x5c>)
 8002efa:	689b      	ldr	r3, [r3, #8]
 8002efc:	08db      	lsrs	r3, r3, #3
 8002efe:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8002f06:	4b07      	ldr	r3, [pc, #28]	; (8002f24 <HAL_RCC_GetClockConfig+0x60>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f003 0207 	and.w	r2, r3, #7
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	601a      	str	r2, [r3, #0]
}
 8002f12:	bf00      	nop
 8002f14:	370c      	adds	r7, #12
 8002f16:	46bd      	mov	sp, r7
 8002f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1c:	4770      	bx	lr
 8002f1e:	bf00      	nop
 8002f20:	40021000 	.word	0x40021000
 8002f24:	40022000 	.word	0x40022000

08002f28 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b086      	sub	sp, #24
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002f30:	2300      	movs	r3, #0
 8002f32:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002f34:	4b2a      	ldr	r3, [pc, #168]	; (8002fe0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002f36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d003      	beq.n	8002f48 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002f40:	f7ff f986 	bl	8002250 <HAL_PWREx_GetVoltageRange>
 8002f44:	6178      	str	r0, [r7, #20]
 8002f46:	e014      	b.n	8002f72 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002f48:	4b25      	ldr	r3, [pc, #148]	; (8002fe0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002f4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f4c:	4a24      	ldr	r2, [pc, #144]	; (8002fe0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002f4e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f52:	6593      	str	r3, [r2, #88]	; 0x58
 8002f54:	4b22      	ldr	r3, [pc, #136]	; (8002fe0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002f56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f5c:	60fb      	str	r3, [r7, #12]
 8002f5e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002f60:	f7ff f976 	bl	8002250 <HAL_PWREx_GetVoltageRange>
 8002f64:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002f66:	4b1e      	ldr	r3, [pc, #120]	; (8002fe0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002f68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f6a:	4a1d      	ldr	r2, [pc, #116]	; (8002fe0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002f6c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f70:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002f72:	697b      	ldr	r3, [r7, #20]
 8002f74:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002f78:	d10b      	bne.n	8002f92 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	2b80      	cmp	r3, #128	; 0x80
 8002f7e:	d919      	bls.n	8002fb4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2ba0      	cmp	r3, #160	; 0xa0
 8002f84:	d902      	bls.n	8002f8c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002f86:	2302      	movs	r3, #2
 8002f88:	613b      	str	r3, [r7, #16]
 8002f8a:	e013      	b.n	8002fb4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002f8c:	2301      	movs	r3, #1
 8002f8e:	613b      	str	r3, [r7, #16]
 8002f90:	e010      	b.n	8002fb4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	2b80      	cmp	r3, #128	; 0x80
 8002f96:	d902      	bls.n	8002f9e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002f98:	2303      	movs	r3, #3
 8002f9a:	613b      	str	r3, [r7, #16]
 8002f9c:	e00a      	b.n	8002fb4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	2b80      	cmp	r3, #128	; 0x80
 8002fa2:	d102      	bne.n	8002faa <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002fa4:	2302      	movs	r3, #2
 8002fa6:	613b      	str	r3, [r7, #16]
 8002fa8:	e004      	b.n	8002fb4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	2b70      	cmp	r3, #112	; 0x70
 8002fae:	d101      	bne.n	8002fb4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002fb0:	2301      	movs	r3, #1
 8002fb2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002fb4:	4b0b      	ldr	r3, [pc, #44]	; (8002fe4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f023 0207 	bic.w	r2, r3, #7
 8002fbc:	4909      	ldr	r1, [pc, #36]	; (8002fe4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002fbe:	693b      	ldr	r3, [r7, #16]
 8002fc0:	4313      	orrs	r3, r2
 8002fc2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002fc4:	4b07      	ldr	r3, [pc, #28]	; (8002fe4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f003 0307 	and.w	r3, r3, #7
 8002fcc:	693a      	ldr	r2, [r7, #16]
 8002fce:	429a      	cmp	r2, r3
 8002fd0:	d001      	beq.n	8002fd6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002fd2:	2301      	movs	r3, #1
 8002fd4:	e000      	b.n	8002fd8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002fd6:	2300      	movs	r3, #0
}
 8002fd8:	4618      	mov	r0, r3
 8002fda:	3718      	adds	r7, #24
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	bd80      	pop	{r7, pc}
 8002fe0:	40021000 	.word	0x40021000
 8002fe4:	40022000 	.word	0x40022000

08002fe8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b086      	sub	sp, #24
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002ff0:	2300      	movs	r3, #0
 8002ff2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003000:	2b00      	cmp	r3, #0
 8003002:	d031      	beq.n	8003068 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003008:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800300c:	d01a      	beq.n	8003044 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 800300e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003012:	d814      	bhi.n	800303e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003014:	2b00      	cmp	r3, #0
 8003016:	d009      	beq.n	800302c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003018:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800301c:	d10f      	bne.n	800303e <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 800301e:	4b5d      	ldr	r3, [pc, #372]	; (8003194 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003020:	68db      	ldr	r3, [r3, #12]
 8003022:	4a5c      	ldr	r2, [pc, #368]	; (8003194 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003024:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003028:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800302a:	e00c      	b.n	8003046 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	3304      	adds	r3, #4
 8003030:	2100      	movs	r1, #0
 8003032:	4618      	mov	r0, r3
 8003034:	f000 fa22 	bl	800347c <RCCEx_PLLSAI1_Config>
 8003038:	4603      	mov	r3, r0
 800303a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800303c:	e003      	b.n	8003046 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800303e:	2301      	movs	r3, #1
 8003040:	74fb      	strb	r3, [r7, #19]
      break;
 8003042:	e000      	b.n	8003046 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8003044:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003046:	7cfb      	ldrb	r3, [r7, #19]
 8003048:	2b00      	cmp	r3, #0
 800304a:	d10b      	bne.n	8003064 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800304c:	4b51      	ldr	r3, [pc, #324]	; (8003194 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800304e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003052:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800305a:	494e      	ldr	r1, [pc, #312]	; (8003194 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800305c:	4313      	orrs	r3, r2
 800305e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003062:	e001      	b.n	8003068 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003064:	7cfb      	ldrb	r3, [r7, #19]
 8003066:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003070:	2b00      	cmp	r3, #0
 8003072:	f000 809e 	beq.w	80031b2 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003076:	2300      	movs	r3, #0
 8003078:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800307a:	4b46      	ldr	r3, [pc, #280]	; (8003194 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800307c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800307e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003082:	2b00      	cmp	r3, #0
 8003084:	d101      	bne.n	800308a <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8003086:	2301      	movs	r3, #1
 8003088:	e000      	b.n	800308c <HAL_RCCEx_PeriphCLKConfig+0xa4>
 800308a:	2300      	movs	r3, #0
 800308c:	2b00      	cmp	r3, #0
 800308e:	d00d      	beq.n	80030ac <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003090:	4b40      	ldr	r3, [pc, #256]	; (8003194 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003092:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003094:	4a3f      	ldr	r2, [pc, #252]	; (8003194 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003096:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800309a:	6593      	str	r3, [r2, #88]	; 0x58
 800309c:	4b3d      	ldr	r3, [pc, #244]	; (8003194 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800309e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030a4:	60bb      	str	r3, [r7, #8]
 80030a6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80030a8:	2301      	movs	r3, #1
 80030aa:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80030ac:	4b3a      	ldr	r3, [pc, #232]	; (8003198 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	4a39      	ldr	r2, [pc, #228]	; (8003198 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80030b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030b6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80030b8:	f7fd fee4 	bl	8000e84 <HAL_GetTick>
 80030bc:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80030be:	e009      	b.n	80030d4 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030c0:	f7fd fee0 	bl	8000e84 <HAL_GetTick>
 80030c4:	4602      	mov	r2, r0
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	1ad3      	subs	r3, r2, r3
 80030ca:	2b02      	cmp	r3, #2
 80030cc:	d902      	bls.n	80030d4 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 80030ce:	2303      	movs	r3, #3
 80030d0:	74fb      	strb	r3, [r7, #19]
        break;
 80030d2:	e005      	b.n	80030e0 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80030d4:	4b30      	ldr	r3, [pc, #192]	; (8003198 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d0ef      	beq.n	80030c0 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 80030e0:	7cfb      	ldrb	r3, [r7, #19]
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d15a      	bne.n	800319c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80030e6:	4b2b      	ldr	r3, [pc, #172]	; (8003194 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80030e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030ec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80030f0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80030f2:	697b      	ldr	r3, [r7, #20]
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d01e      	beq.n	8003136 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030fc:	697a      	ldr	r2, [r7, #20]
 80030fe:	429a      	cmp	r2, r3
 8003100:	d019      	beq.n	8003136 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003102:	4b24      	ldr	r3, [pc, #144]	; (8003194 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003104:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003108:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800310c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800310e:	4b21      	ldr	r3, [pc, #132]	; (8003194 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003110:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003114:	4a1f      	ldr	r2, [pc, #124]	; (8003194 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003116:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800311a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800311e:	4b1d      	ldr	r3, [pc, #116]	; (8003194 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003120:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003124:	4a1b      	ldr	r2, [pc, #108]	; (8003194 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003126:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800312a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800312e:	4a19      	ldr	r2, [pc, #100]	; (8003194 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003130:	697b      	ldr	r3, [r7, #20]
 8003132:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003136:	697b      	ldr	r3, [r7, #20]
 8003138:	f003 0301 	and.w	r3, r3, #1
 800313c:	2b00      	cmp	r3, #0
 800313e:	d016      	beq.n	800316e <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003140:	f7fd fea0 	bl	8000e84 <HAL_GetTick>
 8003144:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003146:	e00b      	b.n	8003160 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003148:	f7fd fe9c 	bl	8000e84 <HAL_GetTick>
 800314c:	4602      	mov	r2, r0
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	1ad3      	subs	r3, r2, r3
 8003152:	f241 3288 	movw	r2, #5000	; 0x1388
 8003156:	4293      	cmp	r3, r2
 8003158:	d902      	bls.n	8003160 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 800315a:	2303      	movs	r3, #3
 800315c:	74fb      	strb	r3, [r7, #19]
            break;
 800315e:	e006      	b.n	800316e <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003160:	4b0c      	ldr	r3, [pc, #48]	; (8003194 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003162:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003166:	f003 0302 	and.w	r3, r3, #2
 800316a:	2b00      	cmp	r3, #0
 800316c:	d0ec      	beq.n	8003148 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 800316e:	7cfb      	ldrb	r3, [r7, #19]
 8003170:	2b00      	cmp	r3, #0
 8003172:	d10b      	bne.n	800318c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003174:	4b07      	ldr	r3, [pc, #28]	; (8003194 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003176:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800317a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003182:	4904      	ldr	r1, [pc, #16]	; (8003194 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003184:	4313      	orrs	r3, r2
 8003186:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800318a:	e009      	b.n	80031a0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800318c:	7cfb      	ldrb	r3, [r7, #19]
 800318e:	74bb      	strb	r3, [r7, #18]
 8003190:	e006      	b.n	80031a0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8003192:	bf00      	nop
 8003194:	40021000 	.word	0x40021000
 8003198:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800319c:	7cfb      	ldrb	r3, [r7, #19]
 800319e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80031a0:	7c7b      	ldrb	r3, [r7, #17]
 80031a2:	2b01      	cmp	r3, #1
 80031a4:	d105      	bne.n	80031b2 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80031a6:	4b8d      	ldr	r3, [pc, #564]	; (80033dc <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80031a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031aa:	4a8c      	ldr	r2, [pc, #560]	; (80033dc <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80031ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80031b0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f003 0301 	and.w	r3, r3, #1
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d00a      	beq.n	80031d4 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80031be:	4b87      	ldr	r3, [pc, #540]	; (80033dc <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80031c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031c4:	f023 0203 	bic.w	r2, r3, #3
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	6a1b      	ldr	r3, [r3, #32]
 80031cc:	4983      	ldr	r1, [pc, #524]	; (80033dc <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80031ce:	4313      	orrs	r3, r2
 80031d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f003 0302 	and.w	r3, r3, #2
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d00a      	beq.n	80031f6 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80031e0:	4b7e      	ldr	r3, [pc, #504]	; (80033dc <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80031e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031e6:	f023 020c 	bic.w	r2, r3, #12
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031ee:	497b      	ldr	r1, [pc, #492]	; (80033dc <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80031f0:	4313      	orrs	r3, r2
 80031f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f003 0304 	and.w	r3, r3, #4
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d00a      	beq.n	8003218 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003202:	4b76      	ldr	r3, [pc, #472]	; (80033dc <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003204:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003208:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003210:	4972      	ldr	r1, [pc, #456]	; (80033dc <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003212:	4313      	orrs	r3, r2
 8003214:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f003 0320 	and.w	r3, r3, #32
 8003220:	2b00      	cmp	r3, #0
 8003222:	d00a      	beq.n	800323a <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003224:	4b6d      	ldr	r3, [pc, #436]	; (80033dc <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003226:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800322a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003232:	496a      	ldr	r1, [pc, #424]	; (80033dc <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003234:	4313      	orrs	r3, r2
 8003236:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003242:	2b00      	cmp	r3, #0
 8003244:	d00a      	beq.n	800325c <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003246:	4b65      	ldr	r3, [pc, #404]	; (80033dc <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003248:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800324c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003254:	4961      	ldr	r1, [pc, #388]	; (80033dc <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003256:	4313      	orrs	r3, r2
 8003258:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003264:	2b00      	cmp	r3, #0
 8003266:	d00a      	beq.n	800327e <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003268:	4b5c      	ldr	r3, [pc, #368]	; (80033dc <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800326a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800326e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003276:	4959      	ldr	r1, [pc, #356]	; (80033dc <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003278:	4313      	orrs	r3, r2
 800327a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003286:	2b00      	cmp	r3, #0
 8003288:	d00a      	beq.n	80032a0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800328a:	4b54      	ldr	r3, [pc, #336]	; (80033dc <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800328c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003290:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003298:	4950      	ldr	r1, [pc, #320]	; (80033dc <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800329a:	4313      	orrs	r3, r2
 800329c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d00a      	beq.n	80032c2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80032ac:	4b4b      	ldr	r3, [pc, #300]	; (80033dc <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80032ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032b2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032ba:	4948      	ldr	r1, [pc, #288]	; (80033dc <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80032bc:	4313      	orrs	r3, r2
 80032be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d00a      	beq.n	80032e4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80032ce:	4b43      	ldr	r3, [pc, #268]	; (80033dc <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80032d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032d4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032dc:	493f      	ldr	r1, [pc, #252]	; (80033dc <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80032de:	4313      	orrs	r3, r2
 80032e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d028      	beq.n	8003342 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80032f0:	4b3a      	ldr	r3, [pc, #232]	; (80033dc <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80032f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032f6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80032fe:	4937      	ldr	r1, [pc, #220]	; (80033dc <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003300:	4313      	orrs	r3, r2
 8003302:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800330a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800330e:	d106      	bne.n	800331e <HAL_RCCEx_PeriphCLKConfig+0x336>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003310:	4b32      	ldr	r3, [pc, #200]	; (80033dc <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003312:	68db      	ldr	r3, [r3, #12]
 8003314:	4a31      	ldr	r2, [pc, #196]	; (80033dc <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003316:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800331a:	60d3      	str	r3, [r2, #12]
 800331c:	e011      	b.n	8003342 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003322:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003326:	d10c      	bne.n	8003342 <HAL_RCCEx_PeriphCLKConfig+0x35a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	3304      	adds	r3, #4
 800332c:	2101      	movs	r1, #1
 800332e:	4618      	mov	r0, r3
 8003330:	f000 f8a4 	bl	800347c <RCCEx_PLLSAI1_Config>
 8003334:	4603      	mov	r3, r0
 8003336:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003338:	7cfb      	ldrb	r3, [r7, #19]
 800333a:	2b00      	cmp	r3, #0
 800333c:	d001      	beq.n	8003342 <HAL_RCCEx_PeriphCLKConfig+0x35a>
        {
          /* set overall return value */
          status = ret;
 800333e:	7cfb      	ldrb	r3, [r7, #19]
 8003340:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800334a:	2b00      	cmp	r3, #0
 800334c:	d028      	beq.n	80033a0 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800334e:	4b23      	ldr	r3, [pc, #140]	; (80033dc <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003350:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003354:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800335c:	491f      	ldr	r1, [pc, #124]	; (80033dc <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800335e:	4313      	orrs	r3, r2
 8003360:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003368:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800336c:	d106      	bne.n	800337c <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800336e:	4b1b      	ldr	r3, [pc, #108]	; (80033dc <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003370:	68db      	ldr	r3, [r3, #12]
 8003372:	4a1a      	ldr	r2, [pc, #104]	; (80033dc <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003374:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003378:	60d3      	str	r3, [r2, #12]
 800337a:	e011      	b.n	80033a0 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003380:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003384:	d10c      	bne.n	80033a0 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	3304      	adds	r3, #4
 800338a:	2101      	movs	r1, #1
 800338c:	4618      	mov	r0, r3
 800338e:	f000 f875 	bl	800347c <RCCEx_PLLSAI1_Config>
 8003392:	4603      	mov	r3, r0
 8003394:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003396:	7cfb      	ldrb	r3, [r7, #19]
 8003398:	2b00      	cmp	r3, #0
 800339a:	d001      	beq.n	80033a0 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 800339c:	7cfb      	ldrb	r3, [r7, #19]
 800339e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d02b      	beq.n	8003404 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80033ac:	4b0b      	ldr	r3, [pc, #44]	; (80033dc <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80033ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033b2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80033ba:	4908      	ldr	r1, [pc, #32]	; (80033dc <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80033bc:	4313      	orrs	r3, r2
 80033be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80033c6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80033ca:	d109      	bne.n	80033e0 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80033cc:	4b03      	ldr	r3, [pc, #12]	; (80033dc <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80033ce:	68db      	ldr	r3, [r3, #12]
 80033d0:	4a02      	ldr	r2, [pc, #8]	; (80033dc <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80033d2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80033d6:	60d3      	str	r3, [r2, #12]
 80033d8:	e014      	b.n	8003404 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 80033da:	bf00      	nop
 80033dc:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80033e4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80033e8:	d10c      	bne.n	8003404 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	3304      	adds	r3, #4
 80033ee:	2101      	movs	r1, #1
 80033f0:	4618      	mov	r0, r3
 80033f2:	f000 f843 	bl	800347c <RCCEx_PLLSAI1_Config>
 80033f6:	4603      	mov	r3, r0
 80033f8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80033fa:	7cfb      	ldrb	r3, [r7, #19]
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d001      	beq.n	8003404 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      {
        /* set overall return value */
        status = ret;
 8003400:	7cfb      	ldrb	r3, [r7, #19]
 8003402:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800340c:	2b00      	cmp	r3, #0
 800340e:	d01c      	beq.n	800344a <HAL_RCCEx_PeriphCLKConfig+0x462>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003410:	4b19      	ldr	r3, [pc, #100]	; (8003478 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003412:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003416:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800341e:	4916      	ldr	r1, [pc, #88]	; (8003478 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003420:	4313      	orrs	r3, r2
 8003422:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800342a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800342e:	d10c      	bne.n	800344a <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	3304      	adds	r3, #4
 8003434:	2102      	movs	r1, #2
 8003436:	4618      	mov	r0, r3
 8003438:	f000 f820 	bl	800347c <RCCEx_PLLSAI1_Config>
 800343c:	4603      	mov	r3, r0
 800343e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003440:	7cfb      	ldrb	r3, [r7, #19]
 8003442:	2b00      	cmp	r3, #0
 8003444:	d001      	beq.n	800344a <HAL_RCCEx_PeriphCLKConfig+0x462>
      {
        /* set overall return value */
        status = ret;
 8003446:	7cfb      	ldrb	r3, [r7, #19]
 8003448:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003452:	2b00      	cmp	r3, #0
 8003454:	d00a      	beq.n	800346c <HAL_RCCEx_PeriphCLKConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003456:	4b08      	ldr	r3, [pc, #32]	; (8003478 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003458:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800345c:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003464:	4904      	ldr	r1, [pc, #16]	; (8003478 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003466:	4313      	orrs	r3, r2
 8003468:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800346c:	7cbb      	ldrb	r3, [r7, #18]
}
 800346e:	4618      	mov	r0, r3
 8003470:	3718      	adds	r7, #24
 8003472:	46bd      	mov	sp, r7
 8003474:	bd80      	pop	{r7, pc}
 8003476:	bf00      	nop
 8003478:	40021000 	.word	0x40021000

0800347c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800347c:	b580      	push	{r7, lr}
 800347e:	b084      	sub	sp, #16
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
 8003484:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003486:	2300      	movs	r3, #0
 8003488:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800348a:	4b74      	ldr	r3, [pc, #464]	; (800365c <RCCEx_PLLSAI1_Config+0x1e0>)
 800348c:	68db      	ldr	r3, [r3, #12]
 800348e:	f003 0303 	and.w	r3, r3, #3
 8003492:	2b00      	cmp	r3, #0
 8003494:	d018      	beq.n	80034c8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003496:	4b71      	ldr	r3, [pc, #452]	; (800365c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003498:	68db      	ldr	r3, [r3, #12]
 800349a:	f003 0203 	and.w	r2, r3, #3
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	429a      	cmp	r2, r3
 80034a4:	d10d      	bne.n	80034c2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
       ||
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d009      	beq.n	80034c2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80034ae:	4b6b      	ldr	r3, [pc, #428]	; (800365c <RCCEx_PLLSAI1_Config+0x1e0>)
 80034b0:	68db      	ldr	r3, [r3, #12]
 80034b2:	091b      	lsrs	r3, r3, #4
 80034b4:	f003 0307 	and.w	r3, r3, #7
 80034b8:	1c5a      	adds	r2, r3, #1
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	685b      	ldr	r3, [r3, #4]
       ||
 80034be:	429a      	cmp	r2, r3
 80034c0:	d047      	beq.n	8003552 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80034c2:	2301      	movs	r3, #1
 80034c4:	73fb      	strb	r3, [r7, #15]
 80034c6:	e044      	b.n	8003552 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	2b03      	cmp	r3, #3
 80034ce:	d018      	beq.n	8003502 <RCCEx_PLLSAI1_Config+0x86>
 80034d0:	2b03      	cmp	r3, #3
 80034d2:	d825      	bhi.n	8003520 <RCCEx_PLLSAI1_Config+0xa4>
 80034d4:	2b01      	cmp	r3, #1
 80034d6:	d002      	beq.n	80034de <RCCEx_PLLSAI1_Config+0x62>
 80034d8:	2b02      	cmp	r3, #2
 80034da:	d009      	beq.n	80034f0 <RCCEx_PLLSAI1_Config+0x74>
 80034dc:	e020      	b.n	8003520 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80034de:	4b5f      	ldr	r3, [pc, #380]	; (800365c <RCCEx_PLLSAI1_Config+0x1e0>)
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f003 0302 	and.w	r3, r3, #2
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d11d      	bne.n	8003526 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80034ea:	2301      	movs	r3, #1
 80034ec:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80034ee:	e01a      	b.n	8003526 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80034f0:	4b5a      	ldr	r3, [pc, #360]	; (800365c <RCCEx_PLLSAI1_Config+0x1e0>)
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d116      	bne.n	800352a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80034fc:	2301      	movs	r3, #1
 80034fe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003500:	e013      	b.n	800352a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003502:	4b56      	ldr	r3, [pc, #344]	; (800365c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800350a:	2b00      	cmp	r3, #0
 800350c:	d10f      	bne.n	800352e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800350e:	4b53      	ldr	r3, [pc, #332]	; (800365c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003516:	2b00      	cmp	r3, #0
 8003518:	d109      	bne.n	800352e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800351a:	2301      	movs	r3, #1
 800351c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800351e:	e006      	b.n	800352e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003520:	2301      	movs	r3, #1
 8003522:	73fb      	strb	r3, [r7, #15]
      break;
 8003524:	e004      	b.n	8003530 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003526:	bf00      	nop
 8003528:	e002      	b.n	8003530 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800352a:	bf00      	nop
 800352c:	e000      	b.n	8003530 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800352e:	bf00      	nop
    }

    if(status == HAL_OK)
 8003530:	7bfb      	ldrb	r3, [r7, #15]
 8003532:	2b00      	cmp	r3, #0
 8003534:	d10d      	bne.n	8003552 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003536:	4b49      	ldr	r3, [pc, #292]	; (800365c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003538:	68db      	ldr	r3, [r3, #12]
 800353a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6819      	ldr	r1, [r3, #0]
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	685b      	ldr	r3, [r3, #4]
 8003546:	3b01      	subs	r3, #1
 8003548:	011b      	lsls	r3, r3, #4
 800354a:	430b      	orrs	r3, r1
 800354c:	4943      	ldr	r1, [pc, #268]	; (800365c <RCCEx_PLLSAI1_Config+0x1e0>)
 800354e:	4313      	orrs	r3, r2
 8003550:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003552:	7bfb      	ldrb	r3, [r7, #15]
 8003554:	2b00      	cmp	r3, #0
 8003556:	d17c      	bne.n	8003652 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003558:	4b40      	ldr	r3, [pc, #256]	; (800365c <RCCEx_PLLSAI1_Config+0x1e0>)
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	4a3f      	ldr	r2, [pc, #252]	; (800365c <RCCEx_PLLSAI1_Config+0x1e0>)
 800355e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003562:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003564:	f7fd fc8e 	bl	8000e84 <HAL_GetTick>
 8003568:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800356a:	e009      	b.n	8003580 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800356c:	f7fd fc8a 	bl	8000e84 <HAL_GetTick>
 8003570:	4602      	mov	r2, r0
 8003572:	68bb      	ldr	r3, [r7, #8]
 8003574:	1ad3      	subs	r3, r2, r3
 8003576:	2b02      	cmp	r3, #2
 8003578:	d902      	bls.n	8003580 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800357a:	2303      	movs	r3, #3
 800357c:	73fb      	strb	r3, [r7, #15]
        break;
 800357e:	e005      	b.n	800358c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003580:	4b36      	ldr	r3, [pc, #216]	; (800365c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003588:	2b00      	cmp	r3, #0
 800358a:	d1ef      	bne.n	800356c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800358c:	7bfb      	ldrb	r3, [r7, #15]
 800358e:	2b00      	cmp	r3, #0
 8003590:	d15f      	bne.n	8003652 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003592:	683b      	ldr	r3, [r7, #0]
 8003594:	2b00      	cmp	r3, #0
 8003596:	d110      	bne.n	80035ba <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003598:	4b30      	ldr	r3, [pc, #192]	; (800365c <RCCEx_PLLSAI1_Config+0x1e0>)
 800359a:	691b      	ldr	r3, [r3, #16]
 800359c:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 80035a0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80035a4:	687a      	ldr	r2, [r7, #4]
 80035a6:	6892      	ldr	r2, [r2, #8]
 80035a8:	0211      	lsls	r1, r2, #8
 80035aa:	687a      	ldr	r2, [r7, #4]
 80035ac:	68d2      	ldr	r2, [r2, #12]
 80035ae:	06d2      	lsls	r2, r2, #27
 80035b0:	430a      	orrs	r2, r1
 80035b2:	492a      	ldr	r1, [pc, #168]	; (800365c <RCCEx_PLLSAI1_Config+0x1e0>)
 80035b4:	4313      	orrs	r3, r2
 80035b6:	610b      	str	r3, [r1, #16]
 80035b8:	e027      	b.n	800360a <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80035ba:	683b      	ldr	r3, [r7, #0]
 80035bc:	2b01      	cmp	r3, #1
 80035be:	d112      	bne.n	80035e6 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80035c0:	4b26      	ldr	r3, [pc, #152]	; (800365c <RCCEx_PLLSAI1_Config+0x1e0>)
 80035c2:	691b      	ldr	r3, [r3, #16]
 80035c4:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80035c8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80035cc:	687a      	ldr	r2, [r7, #4]
 80035ce:	6892      	ldr	r2, [r2, #8]
 80035d0:	0211      	lsls	r1, r2, #8
 80035d2:	687a      	ldr	r2, [r7, #4]
 80035d4:	6912      	ldr	r2, [r2, #16]
 80035d6:	0852      	lsrs	r2, r2, #1
 80035d8:	3a01      	subs	r2, #1
 80035da:	0552      	lsls	r2, r2, #21
 80035dc:	430a      	orrs	r2, r1
 80035de:	491f      	ldr	r1, [pc, #124]	; (800365c <RCCEx_PLLSAI1_Config+0x1e0>)
 80035e0:	4313      	orrs	r3, r2
 80035e2:	610b      	str	r3, [r1, #16]
 80035e4:	e011      	b.n	800360a <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80035e6:	4b1d      	ldr	r3, [pc, #116]	; (800365c <RCCEx_PLLSAI1_Config+0x1e0>)
 80035e8:	691b      	ldr	r3, [r3, #16]
 80035ea:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80035ee:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80035f2:	687a      	ldr	r2, [r7, #4]
 80035f4:	6892      	ldr	r2, [r2, #8]
 80035f6:	0211      	lsls	r1, r2, #8
 80035f8:	687a      	ldr	r2, [r7, #4]
 80035fa:	6952      	ldr	r2, [r2, #20]
 80035fc:	0852      	lsrs	r2, r2, #1
 80035fe:	3a01      	subs	r2, #1
 8003600:	0652      	lsls	r2, r2, #25
 8003602:	430a      	orrs	r2, r1
 8003604:	4915      	ldr	r1, [pc, #84]	; (800365c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003606:	4313      	orrs	r3, r2
 8003608:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800360a:	4b14      	ldr	r3, [pc, #80]	; (800365c <RCCEx_PLLSAI1_Config+0x1e0>)
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	4a13      	ldr	r2, [pc, #76]	; (800365c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003610:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003614:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003616:	f7fd fc35 	bl	8000e84 <HAL_GetTick>
 800361a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800361c:	e009      	b.n	8003632 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800361e:	f7fd fc31 	bl	8000e84 <HAL_GetTick>
 8003622:	4602      	mov	r2, r0
 8003624:	68bb      	ldr	r3, [r7, #8]
 8003626:	1ad3      	subs	r3, r2, r3
 8003628:	2b02      	cmp	r3, #2
 800362a:	d902      	bls.n	8003632 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 800362c:	2303      	movs	r3, #3
 800362e:	73fb      	strb	r3, [r7, #15]
          break;
 8003630:	e005      	b.n	800363e <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003632:	4b0a      	ldr	r3, [pc, #40]	; (800365c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800363a:	2b00      	cmp	r3, #0
 800363c:	d0ef      	beq.n	800361e <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 800363e:	7bfb      	ldrb	r3, [r7, #15]
 8003640:	2b00      	cmp	r3, #0
 8003642:	d106      	bne.n	8003652 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003644:	4b05      	ldr	r3, [pc, #20]	; (800365c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003646:	691a      	ldr	r2, [r3, #16]
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	699b      	ldr	r3, [r3, #24]
 800364c:	4903      	ldr	r1, [pc, #12]	; (800365c <RCCEx_PLLSAI1_Config+0x1e0>)
 800364e:	4313      	orrs	r3, r2
 8003650:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003652:	7bfb      	ldrb	r3, [r7, #15]
}
 8003654:	4618      	mov	r0, r3
 8003656:	3710      	adds	r7, #16
 8003658:	46bd      	mov	sp, r7
 800365a:	bd80      	pop	{r7, pc}
 800365c:	40021000 	.word	0x40021000

08003660 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003660:	b580      	push	{r7, lr}
 8003662:	b082      	sub	sp, #8
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2b00      	cmp	r3, #0
 800366c:	d101      	bne.n	8003672 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800366e:	2301      	movs	r3, #1
 8003670:	e049      	b.n	8003706 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003678:	b2db      	uxtb	r3, r3
 800367a:	2b00      	cmp	r3, #0
 800367c:	d106      	bne.n	800368c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	2200      	movs	r2, #0
 8003682:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003686:	6878      	ldr	r0, [r7, #4]
 8003688:	f000 f841 	bl	800370e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	2202      	movs	r2, #2
 8003690:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681a      	ldr	r2, [r3, #0]
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	3304      	adds	r3, #4
 800369c:	4619      	mov	r1, r3
 800369e:	4610      	mov	r0, r2
 80036a0:	f000 f9dc 	bl	8003a5c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2201      	movs	r2, #1
 80036a8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2201      	movs	r2, #1
 80036b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2201      	movs	r2, #1
 80036b8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2201      	movs	r2, #1
 80036c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2201      	movs	r2, #1
 80036c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2201      	movs	r2, #1
 80036d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2201      	movs	r2, #1
 80036d8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2201      	movs	r2, #1
 80036e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2201      	movs	r2, #1
 80036e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2201      	movs	r2, #1
 80036f0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2201      	movs	r2, #1
 80036f8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2201      	movs	r2, #1
 8003700:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003704:	2300      	movs	r3, #0
}
 8003706:	4618      	mov	r0, r3
 8003708:	3708      	adds	r7, #8
 800370a:	46bd      	mov	sp, r7
 800370c:	bd80      	pop	{r7, pc}

0800370e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800370e:	b480      	push	{r7}
 8003710:	b083      	sub	sp, #12
 8003712:	af00      	add	r7, sp, #0
 8003714:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003716:	bf00      	nop
 8003718:	370c      	adds	r7, #12
 800371a:	46bd      	mov	sp, r7
 800371c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003720:	4770      	bx	lr
	...

08003724 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003724:	b480      	push	{r7}
 8003726:	b085      	sub	sp, #20
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003732:	b2db      	uxtb	r3, r3
 8003734:	2b01      	cmp	r3, #1
 8003736:	d001      	beq.n	800373c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003738:	2301      	movs	r3, #1
 800373a:	e03b      	b.n	80037b4 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2202      	movs	r2, #2
 8003740:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	68da      	ldr	r2, [r3, #12]
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f042 0201 	orr.w	r2, r2, #1
 8003752:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	4a19      	ldr	r2, [pc, #100]	; (80037c0 <HAL_TIM_Base_Start_IT+0x9c>)
 800375a:	4293      	cmp	r3, r2
 800375c:	d009      	beq.n	8003772 <HAL_TIM_Base_Start_IT+0x4e>
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003766:	d004      	beq.n	8003772 <HAL_TIM_Base_Start_IT+0x4e>
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	4a15      	ldr	r2, [pc, #84]	; (80037c4 <HAL_TIM_Base_Start_IT+0xa0>)
 800376e:	4293      	cmp	r3, r2
 8003770:	d115      	bne.n	800379e <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	689a      	ldr	r2, [r3, #8]
 8003778:	4b13      	ldr	r3, [pc, #76]	; (80037c8 <HAL_TIM_Base_Start_IT+0xa4>)
 800377a:	4013      	ands	r3, r2
 800377c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	2b06      	cmp	r3, #6
 8003782:	d015      	beq.n	80037b0 <HAL_TIM_Base_Start_IT+0x8c>
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800378a:	d011      	beq.n	80037b0 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	681a      	ldr	r2, [r3, #0]
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f042 0201 	orr.w	r2, r2, #1
 800379a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800379c:	e008      	b.n	80037b0 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	681a      	ldr	r2, [r3, #0]
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f042 0201 	orr.w	r2, r2, #1
 80037ac:	601a      	str	r2, [r3, #0]
 80037ae:	e000      	b.n	80037b2 <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80037b0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80037b2:	2300      	movs	r3, #0
}
 80037b4:	4618      	mov	r0, r3
 80037b6:	3714      	adds	r7, #20
 80037b8:	46bd      	mov	sp, r7
 80037ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037be:	4770      	bx	lr
 80037c0:	40012c00 	.word	0x40012c00
 80037c4:	40014000 	.word	0x40014000
 80037c8:	00010007 	.word	0x00010007

080037cc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b082      	sub	sp, #8
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	691b      	ldr	r3, [r3, #16]
 80037da:	f003 0302 	and.w	r3, r3, #2
 80037de:	2b02      	cmp	r3, #2
 80037e0:	d122      	bne.n	8003828 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	68db      	ldr	r3, [r3, #12]
 80037e8:	f003 0302 	and.w	r3, r3, #2
 80037ec:	2b02      	cmp	r3, #2
 80037ee:	d11b      	bne.n	8003828 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f06f 0202 	mvn.w	r2, #2
 80037f8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	2201      	movs	r2, #1
 80037fe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	699b      	ldr	r3, [r3, #24]
 8003806:	f003 0303 	and.w	r3, r3, #3
 800380a:	2b00      	cmp	r3, #0
 800380c:	d003      	beq.n	8003816 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800380e:	6878      	ldr	r0, [r7, #4]
 8003810:	f000 f905 	bl	8003a1e <HAL_TIM_IC_CaptureCallback>
 8003814:	e005      	b.n	8003822 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003816:	6878      	ldr	r0, [r7, #4]
 8003818:	f000 f8f7 	bl	8003a0a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800381c:	6878      	ldr	r0, [r7, #4]
 800381e:	f000 f908 	bl	8003a32 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	2200      	movs	r2, #0
 8003826:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	691b      	ldr	r3, [r3, #16]
 800382e:	f003 0304 	and.w	r3, r3, #4
 8003832:	2b04      	cmp	r3, #4
 8003834:	d122      	bne.n	800387c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	68db      	ldr	r3, [r3, #12]
 800383c:	f003 0304 	and.w	r3, r3, #4
 8003840:	2b04      	cmp	r3, #4
 8003842:	d11b      	bne.n	800387c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f06f 0204 	mvn.w	r2, #4
 800384c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	2202      	movs	r2, #2
 8003852:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	699b      	ldr	r3, [r3, #24]
 800385a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800385e:	2b00      	cmp	r3, #0
 8003860:	d003      	beq.n	800386a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003862:	6878      	ldr	r0, [r7, #4]
 8003864:	f000 f8db 	bl	8003a1e <HAL_TIM_IC_CaptureCallback>
 8003868:	e005      	b.n	8003876 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800386a:	6878      	ldr	r0, [r7, #4]
 800386c:	f000 f8cd 	bl	8003a0a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003870:	6878      	ldr	r0, [r7, #4]
 8003872:	f000 f8de 	bl	8003a32 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	2200      	movs	r2, #0
 800387a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	691b      	ldr	r3, [r3, #16]
 8003882:	f003 0308 	and.w	r3, r3, #8
 8003886:	2b08      	cmp	r3, #8
 8003888:	d122      	bne.n	80038d0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	68db      	ldr	r3, [r3, #12]
 8003890:	f003 0308 	and.w	r3, r3, #8
 8003894:	2b08      	cmp	r3, #8
 8003896:	d11b      	bne.n	80038d0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f06f 0208 	mvn.w	r2, #8
 80038a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	2204      	movs	r2, #4
 80038a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	69db      	ldr	r3, [r3, #28]
 80038ae:	f003 0303 	and.w	r3, r3, #3
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d003      	beq.n	80038be <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80038b6:	6878      	ldr	r0, [r7, #4]
 80038b8:	f000 f8b1 	bl	8003a1e <HAL_TIM_IC_CaptureCallback>
 80038bc:	e005      	b.n	80038ca <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80038be:	6878      	ldr	r0, [r7, #4]
 80038c0:	f000 f8a3 	bl	8003a0a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038c4:	6878      	ldr	r0, [r7, #4]
 80038c6:	f000 f8b4 	bl	8003a32 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	2200      	movs	r2, #0
 80038ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	691b      	ldr	r3, [r3, #16]
 80038d6:	f003 0310 	and.w	r3, r3, #16
 80038da:	2b10      	cmp	r3, #16
 80038dc:	d122      	bne.n	8003924 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	68db      	ldr	r3, [r3, #12]
 80038e4:	f003 0310 	and.w	r3, r3, #16
 80038e8:	2b10      	cmp	r3, #16
 80038ea:	d11b      	bne.n	8003924 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f06f 0210 	mvn.w	r2, #16
 80038f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	2208      	movs	r2, #8
 80038fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	69db      	ldr	r3, [r3, #28]
 8003902:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003906:	2b00      	cmp	r3, #0
 8003908:	d003      	beq.n	8003912 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800390a:	6878      	ldr	r0, [r7, #4]
 800390c:	f000 f887 	bl	8003a1e <HAL_TIM_IC_CaptureCallback>
 8003910:	e005      	b.n	800391e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003912:	6878      	ldr	r0, [r7, #4]
 8003914:	f000 f879 	bl	8003a0a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003918:	6878      	ldr	r0, [r7, #4]
 800391a:	f000 f88a 	bl	8003a32 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	2200      	movs	r2, #0
 8003922:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	691b      	ldr	r3, [r3, #16]
 800392a:	f003 0301 	and.w	r3, r3, #1
 800392e:	2b01      	cmp	r3, #1
 8003930:	d10e      	bne.n	8003950 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	68db      	ldr	r3, [r3, #12]
 8003938:	f003 0301 	and.w	r3, r3, #1
 800393c:	2b01      	cmp	r3, #1
 800393e:	d107      	bne.n	8003950 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f06f 0201 	mvn.w	r2, #1
 8003948:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800394a:	6878      	ldr	r0, [r7, #4]
 800394c:	f7fc ff9e 	bl	800088c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	691b      	ldr	r3, [r3, #16]
 8003956:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800395a:	2b80      	cmp	r3, #128	; 0x80
 800395c:	d10e      	bne.n	800397c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	68db      	ldr	r3, [r3, #12]
 8003964:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003968:	2b80      	cmp	r3, #128	; 0x80
 800396a:	d107      	bne.n	800397c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003974:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003976:	6878      	ldr	r0, [r7, #4]
 8003978:	f000 f8de 	bl	8003b38 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	691b      	ldr	r3, [r3, #16]
 8003982:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003986:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800398a:	d10e      	bne.n	80039aa <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	68db      	ldr	r3, [r3, #12]
 8003992:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003996:	2b80      	cmp	r3, #128	; 0x80
 8003998:	d107      	bne.n	80039aa <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80039a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80039a4:	6878      	ldr	r0, [r7, #4]
 80039a6:	f000 f8d1 	bl	8003b4c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	691b      	ldr	r3, [r3, #16]
 80039b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039b4:	2b40      	cmp	r3, #64	; 0x40
 80039b6:	d10e      	bne.n	80039d6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	68db      	ldr	r3, [r3, #12]
 80039be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039c2:	2b40      	cmp	r3, #64	; 0x40
 80039c4:	d107      	bne.n	80039d6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80039ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80039d0:	6878      	ldr	r0, [r7, #4]
 80039d2:	f000 f838 	bl	8003a46 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	691b      	ldr	r3, [r3, #16]
 80039dc:	f003 0320 	and.w	r3, r3, #32
 80039e0:	2b20      	cmp	r3, #32
 80039e2:	d10e      	bne.n	8003a02 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	68db      	ldr	r3, [r3, #12]
 80039ea:	f003 0320 	and.w	r3, r3, #32
 80039ee:	2b20      	cmp	r3, #32
 80039f0:	d107      	bne.n	8003a02 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f06f 0220 	mvn.w	r2, #32
 80039fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80039fc:	6878      	ldr	r0, [r7, #4]
 80039fe:	f000 f891 	bl	8003b24 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003a02:	bf00      	nop
 8003a04:	3708      	adds	r7, #8
 8003a06:	46bd      	mov	sp, r7
 8003a08:	bd80      	pop	{r7, pc}

08003a0a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003a0a:	b480      	push	{r7}
 8003a0c:	b083      	sub	sp, #12
 8003a0e:	af00      	add	r7, sp, #0
 8003a10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003a12:	bf00      	nop
 8003a14:	370c      	adds	r7, #12
 8003a16:	46bd      	mov	sp, r7
 8003a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1c:	4770      	bx	lr

08003a1e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003a1e:	b480      	push	{r7}
 8003a20:	b083      	sub	sp, #12
 8003a22:	af00      	add	r7, sp, #0
 8003a24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003a26:	bf00      	nop
 8003a28:	370c      	adds	r7, #12
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a30:	4770      	bx	lr

08003a32 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003a32:	b480      	push	{r7}
 8003a34:	b083      	sub	sp, #12
 8003a36:	af00      	add	r7, sp, #0
 8003a38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003a3a:	bf00      	nop
 8003a3c:	370c      	adds	r7, #12
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a44:	4770      	bx	lr

08003a46 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003a46:	b480      	push	{r7}
 8003a48:	b083      	sub	sp, #12
 8003a4a:	af00      	add	r7, sp, #0
 8003a4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003a4e:	bf00      	nop
 8003a50:	370c      	adds	r7, #12
 8003a52:	46bd      	mov	sp, r7
 8003a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a58:	4770      	bx	lr
	...

08003a5c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003a5c:	b480      	push	{r7}
 8003a5e:	b085      	sub	sp, #20
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]
 8003a64:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	4a2a      	ldr	r2, [pc, #168]	; (8003b18 <TIM_Base_SetConfig+0xbc>)
 8003a70:	4293      	cmp	r3, r2
 8003a72:	d003      	beq.n	8003a7c <TIM_Base_SetConfig+0x20>
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a7a:	d108      	bne.n	8003a8e <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a82:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003a84:	683b      	ldr	r3, [r7, #0]
 8003a86:	685b      	ldr	r3, [r3, #4]
 8003a88:	68fa      	ldr	r2, [r7, #12]
 8003a8a:	4313      	orrs	r3, r2
 8003a8c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	4a21      	ldr	r2, [pc, #132]	; (8003b18 <TIM_Base_SetConfig+0xbc>)
 8003a92:	4293      	cmp	r3, r2
 8003a94:	d00b      	beq.n	8003aae <TIM_Base_SetConfig+0x52>
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a9c:	d007      	beq.n	8003aae <TIM_Base_SetConfig+0x52>
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	4a1e      	ldr	r2, [pc, #120]	; (8003b1c <TIM_Base_SetConfig+0xc0>)
 8003aa2:	4293      	cmp	r3, r2
 8003aa4:	d003      	beq.n	8003aae <TIM_Base_SetConfig+0x52>
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	4a1d      	ldr	r2, [pc, #116]	; (8003b20 <TIM_Base_SetConfig+0xc4>)
 8003aaa:	4293      	cmp	r3, r2
 8003aac:	d108      	bne.n	8003ac0 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ab4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003ab6:	683b      	ldr	r3, [r7, #0]
 8003ab8:	68db      	ldr	r3, [r3, #12]
 8003aba:	68fa      	ldr	r2, [r7, #12]
 8003abc:	4313      	orrs	r3, r2
 8003abe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003ac6:	683b      	ldr	r3, [r7, #0]
 8003ac8:	695b      	ldr	r3, [r3, #20]
 8003aca:	4313      	orrs	r3, r2
 8003acc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	68fa      	ldr	r2, [r7, #12]
 8003ad2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003ad4:	683b      	ldr	r3, [r7, #0]
 8003ad6:	689a      	ldr	r2, [r3, #8]
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003adc:	683b      	ldr	r3, [r7, #0]
 8003ade:	681a      	ldr	r2, [r3, #0]
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	4a0c      	ldr	r2, [pc, #48]	; (8003b18 <TIM_Base_SetConfig+0xbc>)
 8003ae8:	4293      	cmp	r3, r2
 8003aea:	d007      	beq.n	8003afc <TIM_Base_SetConfig+0xa0>
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	4a0b      	ldr	r2, [pc, #44]	; (8003b1c <TIM_Base_SetConfig+0xc0>)
 8003af0:	4293      	cmp	r3, r2
 8003af2:	d003      	beq.n	8003afc <TIM_Base_SetConfig+0xa0>
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	4a0a      	ldr	r2, [pc, #40]	; (8003b20 <TIM_Base_SetConfig+0xc4>)
 8003af8:	4293      	cmp	r3, r2
 8003afa:	d103      	bne.n	8003b04 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003afc:	683b      	ldr	r3, [r7, #0]
 8003afe:	691a      	ldr	r2, [r3, #16]
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2201      	movs	r2, #1
 8003b08:	615a      	str	r2, [r3, #20]
}
 8003b0a:	bf00      	nop
 8003b0c:	3714      	adds	r7, #20
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b14:	4770      	bx	lr
 8003b16:	bf00      	nop
 8003b18:	40012c00 	.word	0x40012c00
 8003b1c:	40014000 	.word	0x40014000
 8003b20:	40014400 	.word	0x40014400

08003b24 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003b24:	b480      	push	{r7}
 8003b26:	b083      	sub	sp, #12
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003b2c:	bf00      	nop
 8003b2e:	370c      	adds	r7, #12
 8003b30:	46bd      	mov	sp, r7
 8003b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b36:	4770      	bx	lr

08003b38 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003b38:	b480      	push	{r7}
 8003b3a:	b083      	sub	sp, #12
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003b40:	bf00      	nop
 8003b42:	370c      	adds	r7, #12
 8003b44:	46bd      	mov	sp, r7
 8003b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4a:	4770      	bx	lr

08003b4c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003b4c:	b480      	push	{r7}
 8003b4e:	b083      	sub	sp, #12
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003b54:	bf00      	nop
 8003b56:	370c      	adds	r7, #12
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5e:	4770      	bx	lr

08003b60 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003b60:	b580      	push	{r7, lr}
 8003b62:	b082      	sub	sp, #8
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d101      	bne.n	8003b72 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003b6e:	2301      	movs	r3, #1
 8003b70:	e040      	b.n	8003bf4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d106      	bne.n	8003b88 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003b82:	6878      	ldr	r0, [r7, #4]
 8003b84:	f7fc ff84 	bl	8000a90 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2224      	movs	r2, #36	; 0x24
 8003b8c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	681a      	ldr	r2, [r3, #0]
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f022 0201 	bic.w	r2, r2, #1
 8003b9c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003b9e:	6878      	ldr	r0, [r7, #4]
 8003ba0:	f000 fb2e 	bl	8004200 <UART_SetConfig>
 8003ba4:	4603      	mov	r3, r0
 8003ba6:	2b01      	cmp	r3, #1
 8003ba8:	d101      	bne.n	8003bae <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003baa:	2301      	movs	r3, #1
 8003bac:	e022      	b.n	8003bf4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d002      	beq.n	8003bbc <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003bb6:	6878      	ldr	r0, [r7, #4]
 8003bb8:	f000 fd7c 	bl	80046b4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	685a      	ldr	r2, [r3, #4]
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003bca:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	689a      	ldr	r2, [r3, #8]
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003bda:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	681a      	ldr	r2, [r3, #0]
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f042 0201 	orr.w	r2, r2, #1
 8003bea:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003bec:	6878      	ldr	r0, [r7, #4]
 8003bee:	f000 fe03 	bl	80047f8 <UART_CheckIdleState>
 8003bf2:	4603      	mov	r3, r0
}
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	3708      	adds	r7, #8
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	bd80      	pop	{r7, pc}

08003bfc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	b0ba      	sub	sp, #232	; 0xe8
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	69db      	ldr	r3, [r3, #28]
 8003c0a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	689b      	ldr	r3, [r3, #8]
 8003c1e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003c22:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8003c26:	f640 030f 	movw	r3, #2063	; 0x80f
 8003c2a:	4013      	ands	r3, r2
 8003c2c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8003c30:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d115      	bne.n	8003c64 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003c38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c3c:	f003 0320 	and.w	r3, r3, #32
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d00f      	beq.n	8003c64 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003c44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003c48:	f003 0320 	and.w	r3, r3, #32
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d009      	beq.n	8003c64 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	f000 82a6 	beq.w	80041a6 <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003c5e:	6878      	ldr	r0, [r7, #4]
 8003c60:	4798      	blx	r3
      }
      return;
 8003c62:	e2a0      	b.n	80041a6 <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8003c64:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	f000 8117 	beq.w	8003e9c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003c6e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003c72:	f003 0301 	and.w	r3, r3, #1
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d106      	bne.n	8003c88 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003c7a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8003c7e:	4b85      	ldr	r3, [pc, #532]	; (8003e94 <HAL_UART_IRQHandler+0x298>)
 8003c80:	4013      	ands	r3, r2
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	f000 810a 	beq.w	8003e9c <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003c88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c8c:	f003 0301 	and.w	r3, r3, #1
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d011      	beq.n	8003cb8 <HAL_UART_IRQHandler+0xbc>
 8003c94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003c98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d00b      	beq.n	8003cb8 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	2201      	movs	r2, #1
 8003ca6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003cae:	f043 0201 	orr.w	r2, r3, #1
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003cb8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003cbc:	f003 0302 	and.w	r3, r3, #2
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d011      	beq.n	8003ce8 <HAL_UART_IRQHandler+0xec>
 8003cc4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003cc8:	f003 0301 	and.w	r3, r3, #1
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d00b      	beq.n	8003ce8 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	2202      	movs	r2, #2
 8003cd6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003cde:	f043 0204 	orr.w	r2, r3, #4
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003ce8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003cec:	f003 0304 	and.w	r3, r3, #4
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d011      	beq.n	8003d18 <HAL_UART_IRQHandler+0x11c>
 8003cf4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003cf8:	f003 0301 	and.w	r3, r3, #1
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d00b      	beq.n	8003d18 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	2204      	movs	r2, #4
 8003d06:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003d0e:	f043 0202 	orr.w	r2, r3, #2
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003d18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d1c:	f003 0308 	and.w	r3, r3, #8
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d017      	beq.n	8003d54 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003d24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003d28:	f003 0320 	and.w	r3, r3, #32
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d105      	bne.n	8003d3c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003d30:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003d34:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d00b      	beq.n	8003d54 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	2208      	movs	r2, #8
 8003d42:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003d4a:	f043 0208 	orr.w	r2, r3, #8
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003d54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d58:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d012      	beq.n	8003d86 <HAL_UART_IRQHandler+0x18a>
 8003d60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003d64:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d00c      	beq.n	8003d86 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003d74:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003d7c:	f043 0220 	orr.w	r2, r3, #32
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	f000 820c 	beq.w	80041aa <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003d92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d96:	f003 0320 	and.w	r3, r3, #32
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d00d      	beq.n	8003dba <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003d9e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003da2:	f003 0320 	and.w	r3, r3, #32
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d007      	beq.n	8003dba <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d003      	beq.n	8003dba <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003db6:	6878      	ldr	r0, [r7, #4]
 8003db8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003dc0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	689b      	ldr	r3, [r3, #8]
 8003dca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dce:	2b40      	cmp	r3, #64	; 0x40
 8003dd0:	d005      	beq.n	8003dde <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003dd2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003dd6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d04f      	beq.n	8003e7e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003dde:	6878      	ldr	r0, [r7, #4]
 8003de0:	f000 fe17 	bl	8004a12 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	689b      	ldr	r3, [r3, #8]
 8003dea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dee:	2b40      	cmp	r3, #64	; 0x40
 8003df0:	d141      	bne.n	8003e76 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	3308      	adds	r3, #8
 8003df8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dfc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003e00:	e853 3f00 	ldrex	r3, [r3]
 8003e04:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003e08:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003e0c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003e10:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	3308      	adds	r3, #8
 8003e1a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003e1e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003e22:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e26:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003e2a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003e2e:	e841 2300 	strex	r3, r2, [r1]
 8003e32:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003e36:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d1d9      	bne.n	8003df2 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d013      	beq.n	8003e6e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e4a:	4a13      	ldr	r2, [pc, #76]	; (8003e98 <HAL_UART_IRQHandler+0x29c>)
 8003e4c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e52:	4618      	mov	r0, r3
 8003e54:	f7fd f942 	bl	80010dc <HAL_DMA_Abort_IT>
 8003e58:	4603      	mov	r3, r0
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d017      	beq.n	8003e8e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e64:	687a      	ldr	r2, [r7, #4]
 8003e66:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8003e68:	4610      	mov	r0, r2
 8003e6a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e6c:	e00f      	b.n	8003e8e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003e6e:	6878      	ldr	r0, [r7, #4]
 8003e70:	f000 f9b0 	bl	80041d4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e74:	e00b      	b.n	8003e8e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003e76:	6878      	ldr	r0, [r7, #4]
 8003e78:	f000 f9ac 	bl	80041d4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e7c:	e007      	b.n	8003e8e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003e7e:	6878      	ldr	r0, [r7, #4]
 8003e80:	f000 f9a8 	bl	80041d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	2200      	movs	r2, #0
 8003e88:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8003e8c:	e18d      	b.n	80041aa <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e8e:	bf00      	nop
    return;
 8003e90:	e18b      	b.n	80041aa <HAL_UART_IRQHandler+0x5ae>
 8003e92:	bf00      	nop
 8003e94:	04000120 	.word	0x04000120
 8003e98:	08004ad9 	.word	0x08004ad9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ea0:	2b01      	cmp	r3, #1
 8003ea2:	f040 8146 	bne.w	8004132 <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003ea6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003eaa:	f003 0310 	and.w	r3, r3, #16
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	f000 813f 	beq.w	8004132 <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003eb4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003eb8:	f003 0310 	and.w	r3, r3, #16
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	f000 8138 	beq.w	8004132 <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	2210      	movs	r2, #16
 8003ec8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	689b      	ldr	r3, [r3, #8]
 8003ed0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ed4:	2b40      	cmp	r3, #64	; 0x40
 8003ed6:	f040 80b4 	bne.w	8004042 <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	685b      	ldr	r3, [r3, #4]
 8003ee2:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003ee6:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	f000 815f 	beq.w	80041ae <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003ef6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003efa:	429a      	cmp	r2, r3
 8003efc:	f080 8157 	bcs.w	80041ae <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003f06:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f003 0320 	and.w	r3, r3, #32
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	f040 8085 	bne.w	8004026 <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f24:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003f28:	e853 3f00 	ldrex	r3, [r3]
 8003f2c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003f30:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003f34:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003f38:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	461a      	mov	r2, r3
 8003f42:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003f46:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003f4a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f4e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003f52:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003f56:	e841 2300 	strex	r3, r2, [r1]
 8003f5a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003f5e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d1da      	bne.n	8003f1c <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	3308      	adds	r3, #8
 8003f6c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f6e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003f70:	e853 3f00 	ldrex	r3, [r3]
 8003f74:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003f76:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003f78:	f023 0301 	bic.w	r3, r3, #1
 8003f7c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	3308      	adds	r3, #8
 8003f86:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003f8a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003f8e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f90:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003f92:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003f96:	e841 2300 	strex	r3, r2, [r1]
 8003f9a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003f9c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d1e1      	bne.n	8003f66 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	3308      	adds	r3, #8
 8003fa8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003faa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003fac:	e853 3f00 	ldrex	r3, [r3]
 8003fb0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003fb2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003fb4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003fb8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	3308      	adds	r3, #8
 8003fc2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003fc6:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003fc8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fca:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003fcc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003fce:	e841 2300 	strex	r3, r2, [r1]
 8003fd2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003fd4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d1e3      	bne.n	8003fa2 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	2220      	movs	r2, #32
 8003fde:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003fee:	e853 3f00 	ldrex	r3, [r3]
 8003ff2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003ff4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003ff6:	f023 0310 	bic.w	r3, r3, #16
 8003ffa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	461a      	mov	r2, r3
 8004004:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004008:	65bb      	str	r3, [r7, #88]	; 0x58
 800400a:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800400c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800400e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004010:	e841 2300 	strex	r3, r2, [r1]
 8004014:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004016:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004018:	2b00      	cmp	r3, #0
 800401a:	d1e4      	bne.n	8003fe6 <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004020:	4618      	mov	r0, r3
 8004022:	f7fd f81d 	bl	8001060 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004032:	b29b      	uxth	r3, r3
 8004034:	1ad3      	subs	r3, r2, r3
 8004036:	b29b      	uxth	r3, r3
 8004038:	4619      	mov	r1, r3
 800403a:	6878      	ldr	r0, [r7, #4]
 800403c:	f000 f8d4 	bl	80041e8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004040:	e0b5      	b.n	80041ae <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800404e:	b29b      	uxth	r3, r3
 8004050:	1ad3      	subs	r3, r2, r3
 8004052:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800405c:	b29b      	uxth	r3, r3
 800405e:	2b00      	cmp	r3, #0
 8004060:	f000 80a7 	beq.w	80041b2 <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 8004064:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004068:	2b00      	cmp	r3, #0
 800406a:	f000 80a2 	beq.w	80041b2 <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004074:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004076:	e853 3f00 	ldrex	r3, [r3]
 800407a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800407c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800407e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004082:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	461a      	mov	r2, r3
 800408c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004090:	647b      	str	r3, [r7, #68]	; 0x44
 8004092:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004094:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004096:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004098:	e841 2300 	strex	r3, r2, [r1]
 800409c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800409e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d1e4      	bne.n	800406e <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	3308      	adds	r3, #8
 80040aa:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040ae:	e853 3f00 	ldrex	r3, [r3]
 80040b2:	623b      	str	r3, [r7, #32]
   return(result);
 80040b4:	6a3b      	ldr	r3, [r7, #32]
 80040b6:	f023 0301 	bic.w	r3, r3, #1
 80040ba:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	3308      	adds	r3, #8
 80040c4:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80040c8:	633a      	str	r2, [r7, #48]	; 0x30
 80040ca:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040cc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80040ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80040d0:	e841 2300 	strex	r3, r2, [r1]
 80040d4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80040d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d1e3      	bne.n	80040a4 <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2220      	movs	r2, #32
 80040e0:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	2200      	movs	r2, #0
 80040e6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2200      	movs	r2, #0
 80040ec:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040f4:	693b      	ldr	r3, [r7, #16]
 80040f6:	e853 3f00 	ldrex	r3, [r3]
 80040fa:	60fb      	str	r3, [r7, #12]
   return(result);
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	f023 0310 	bic.w	r3, r3, #16
 8004102:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	461a      	mov	r2, r3
 800410c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004110:	61fb      	str	r3, [r7, #28]
 8004112:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004114:	69b9      	ldr	r1, [r7, #24]
 8004116:	69fa      	ldr	r2, [r7, #28]
 8004118:	e841 2300 	strex	r3, r2, [r1]
 800411c:	617b      	str	r3, [r7, #20]
   return(result);
 800411e:	697b      	ldr	r3, [r7, #20]
 8004120:	2b00      	cmp	r3, #0
 8004122:	d1e4      	bne.n	80040ee <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004124:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004128:	4619      	mov	r1, r3
 800412a:	6878      	ldr	r0, [r7, #4]
 800412c:	f000 f85c 	bl	80041e8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004130:	e03f      	b.n	80041b2 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004132:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004136:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800413a:	2b00      	cmp	r3, #0
 800413c:	d00e      	beq.n	800415c <HAL_UART_IRQHandler+0x560>
 800413e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004142:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004146:	2b00      	cmp	r3, #0
 8004148:	d008      	beq.n	800415c <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004152:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004154:	6878      	ldr	r0, [r7, #4]
 8004156:	f000 fcff 	bl	8004b58 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800415a:	e02d      	b.n	80041b8 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 800415c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004160:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004164:	2b00      	cmp	r3, #0
 8004166:	d00e      	beq.n	8004186 <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004168:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800416c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004170:	2b00      	cmp	r3, #0
 8004172:	d008      	beq.n	8004186 <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004178:	2b00      	cmp	r3, #0
 800417a:	d01c      	beq.n	80041b6 <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004180:	6878      	ldr	r0, [r7, #4]
 8004182:	4798      	blx	r3
    }
    return;
 8004184:	e017      	b.n	80041b6 <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004186:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800418a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800418e:	2b00      	cmp	r3, #0
 8004190:	d012      	beq.n	80041b8 <HAL_UART_IRQHandler+0x5bc>
 8004192:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004196:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800419a:	2b00      	cmp	r3, #0
 800419c:	d00c      	beq.n	80041b8 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 800419e:	6878      	ldr	r0, [r7, #4]
 80041a0:	f000 fcb0 	bl	8004b04 <UART_EndTransmit_IT>
    return;
 80041a4:	e008      	b.n	80041b8 <HAL_UART_IRQHandler+0x5bc>
      return;
 80041a6:	bf00      	nop
 80041a8:	e006      	b.n	80041b8 <HAL_UART_IRQHandler+0x5bc>
    return;
 80041aa:	bf00      	nop
 80041ac:	e004      	b.n	80041b8 <HAL_UART_IRQHandler+0x5bc>
      return;
 80041ae:	bf00      	nop
 80041b0:	e002      	b.n	80041b8 <HAL_UART_IRQHandler+0x5bc>
      return;
 80041b2:	bf00      	nop
 80041b4:	e000      	b.n	80041b8 <HAL_UART_IRQHandler+0x5bc>
    return;
 80041b6:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 80041b8:	37e8      	adds	r7, #232	; 0xe8
 80041ba:	46bd      	mov	sp, r7
 80041bc:	bd80      	pop	{r7, pc}
 80041be:	bf00      	nop

080041c0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80041c0:	b480      	push	{r7}
 80041c2:	b083      	sub	sp, #12
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80041c8:	bf00      	nop
 80041ca:	370c      	adds	r7, #12
 80041cc:	46bd      	mov	sp, r7
 80041ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d2:	4770      	bx	lr

080041d4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80041d4:	b480      	push	{r7}
 80041d6:	b083      	sub	sp, #12
 80041d8:	af00      	add	r7, sp, #0
 80041da:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80041dc:	bf00      	nop
 80041de:	370c      	adds	r7, #12
 80041e0:	46bd      	mov	sp, r7
 80041e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e6:	4770      	bx	lr

080041e8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80041e8:	b480      	push	{r7}
 80041ea:	b083      	sub	sp, #12
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	6078      	str	r0, [r7, #4]
 80041f0:	460b      	mov	r3, r1
 80041f2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80041f4:	bf00      	nop
 80041f6:	370c      	adds	r7, #12
 80041f8:	46bd      	mov	sp, r7
 80041fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fe:	4770      	bx	lr

08004200 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004200:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004204:	b08a      	sub	sp, #40	; 0x28
 8004206:	af00      	add	r7, sp, #0
 8004208:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800420a:	2300      	movs	r3, #0
 800420c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	689a      	ldr	r2, [r3, #8]
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	691b      	ldr	r3, [r3, #16]
 8004218:	431a      	orrs	r2, r3
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	695b      	ldr	r3, [r3, #20]
 800421e:	431a      	orrs	r2, r3
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	69db      	ldr	r3, [r3, #28]
 8004224:	4313      	orrs	r3, r2
 8004226:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	681a      	ldr	r2, [r3, #0]
 800422e:	4b9e      	ldr	r3, [pc, #632]	; (80044a8 <UART_SetConfig+0x2a8>)
 8004230:	4013      	ands	r3, r2
 8004232:	68fa      	ldr	r2, [r7, #12]
 8004234:	6812      	ldr	r2, [r2, #0]
 8004236:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004238:	430b      	orrs	r3, r1
 800423a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	685b      	ldr	r3, [r3, #4]
 8004242:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	68da      	ldr	r2, [r3, #12]
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	430a      	orrs	r2, r1
 8004250:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	699b      	ldr	r3, [r3, #24]
 8004256:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	4a93      	ldr	r2, [pc, #588]	; (80044ac <UART_SetConfig+0x2ac>)
 800425e:	4293      	cmp	r3, r2
 8004260:	d004      	beq.n	800426c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	6a1b      	ldr	r3, [r3, #32]
 8004266:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004268:	4313      	orrs	r3, r2
 800426a:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	689b      	ldr	r3, [r3, #8]
 8004272:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800427c:	430a      	orrs	r2, r1
 800427e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	4a8a      	ldr	r2, [pc, #552]	; (80044b0 <UART_SetConfig+0x2b0>)
 8004286:	4293      	cmp	r3, r2
 8004288:	d126      	bne.n	80042d8 <UART_SetConfig+0xd8>
 800428a:	4b8a      	ldr	r3, [pc, #552]	; (80044b4 <UART_SetConfig+0x2b4>)
 800428c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004290:	f003 0303 	and.w	r3, r3, #3
 8004294:	2b03      	cmp	r3, #3
 8004296:	d81b      	bhi.n	80042d0 <UART_SetConfig+0xd0>
 8004298:	a201      	add	r2, pc, #4	; (adr r2, 80042a0 <UART_SetConfig+0xa0>)
 800429a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800429e:	bf00      	nop
 80042a0:	080042b1 	.word	0x080042b1
 80042a4:	080042c1 	.word	0x080042c1
 80042a8:	080042b9 	.word	0x080042b9
 80042ac:	080042c9 	.word	0x080042c9
 80042b0:	2301      	movs	r3, #1
 80042b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80042b6:	e0ab      	b.n	8004410 <UART_SetConfig+0x210>
 80042b8:	2302      	movs	r3, #2
 80042ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80042be:	e0a7      	b.n	8004410 <UART_SetConfig+0x210>
 80042c0:	2304      	movs	r3, #4
 80042c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80042c6:	e0a3      	b.n	8004410 <UART_SetConfig+0x210>
 80042c8:	2308      	movs	r3, #8
 80042ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80042ce:	e09f      	b.n	8004410 <UART_SetConfig+0x210>
 80042d0:	2310      	movs	r3, #16
 80042d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80042d6:	e09b      	b.n	8004410 <UART_SetConfig+0x210>
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	4a76      	ldr	r2, [pc, #472]	; (80044b8 <UART_SetConfig+0x2b8>)
 80042de:	4293      	cmp	r3, r2
 80042e0:	d138      	bne.n	8004354 <UART_SetConfig+0x154>
 80042e2:	4b74      	ldr	r3, [pc, #464]	; (80044b4 <UART_SetConfig+0x2b4>)
 80042e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042e8:	f003 030c 	and.w	r3, r3, #12
 80042ec:	2b0c      	cmp	r3, #12
 80042ee:	d82d      	bhi.n	800434c <UART_SetConfig+0x14c>
 80042f0:	a201      	add	r2, pc, #4	; (adr r2, 80042f8 <UART_SetConfig+0xf8>)
 80042f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042f6:	bf00      	nop
 80042f8:	0800432d 	.word	0x0800432d
 80042fc:	0800434d 	.word	0x0800434d
 8004300:	0800434d 	.word	0x0800434d
 8004304:	0800434d 	.word	0x0800434d
 8004308:	0800433d 	.word	0x0800433d
 800430c:	0800434d 	.word	0x0800434d
 8004310:	0800434d 	.word	0x0800434d
 8004314:	0800434d 	.word	0x0800434d
 8004318:	08004335 	.word	0x08004335
 800431c:	0800434d 	.word	0x0800434d
 8004320:	0800434d 	.word	0x0800434d
 8004324:	0800434d 	.word	0x0800434d
 8004328:	08004345 	.word	0x08004345
 800432c:	2300      	movs	r3, #0
 800432e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004332:	e06d      	b.n	8004410 <UART_SetConfig+0x210>
 8004334:	2302      	movs	r3, #2
 8004336:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800433a:	e069      	b.n	8004410 <UART_SetConfig+0x210>
 800433c:	2304      	movs	r3, #4
 800433e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004342:	e065      	b.n	8004410 <UART_SetConfig+0x210>
 8004344:	2308      	movs	r3, #8
 8004346:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800434a:	e061      	b.n	8004410 <UART_SetConfig+0x210>
 800434c:	2310      	movs	r3, #16
 800434e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004352:	e05d      	b.n	8004410 <UART_SetConfig+0x210>
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	4a58      	ldr	r2, [pc, #352]	; (80044bc <UART_SetConfig+0x2bc>)
 800435a:	4293      	cmp	r3, r2
 800435c:	d125      	bne.n	80043aa <UART_SetConfig+0x1aa>
 800435e:	4b55      	ldr	r3, [pc, #340]	; (80044b4 <UART_SetConfig+0x2b4>)
 8004360:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004364:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004368:	2b30      	cmp	r3, #48	; 0x30
 800436a:	d016      	beq.n	800439a <UART_SetConfig+0x19a>
 800436c:	2b30      	cmp	r3, #48	; 0x30
 800436e:	d818      	bhi.n	80043a2 <UART_SetConfig+0x1a2>
 8004370:	2b20      	cmp	r3, #32
 8004372:	d00a      	beq.n	800438a <UART_SetConfig+0x18a>
 8004374:	2b20      	cmp	r3, #32
 8004376:	d814      	bhi.n	80043a2 <UART_SetConfig+0x1a2>
 8004378:	2b00      	cmp	r3, #0
 800437a:	d002      	beq.n	8004382 <UART_SetConfig+0x182>
 800437c:	2b10      	cmp	r3, #16
 800437e:	d008      	beq.n	8004392 <UART_SetConfig+0x192>
 8004380:	e00f      	b.n	80043a2 <UART_SetConfig+0x1a2>
 8004382:	2300      	movs	r3, #0
 8004384:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004388:	e042      	b.n	8004410 <UART_SetConfig+0x210>
 800438a:	2302      	movs	r3, #2
 800438c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004390:	e03e      	b.n	8004410 <UART_SetConfig+0x210>
 8004392:	2304      	movs	r3, #4
 8004394:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004398:	e03a      	b.n	8004410 <UART_SetConfig+0x210>
 800439a:	2308      	movs	r3, #8
 800439c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80043a0:	e036      	b.n	8004410 <UART_SetConfig+0x210>
 80043a2:	2310      	movs	r3, #16
 80043a4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80043a8:	e032      	b.n	8004410 <UART_SetConfig+0x210>
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	4a3f      	ldr	r2, [pc, #252]	; (80044ac <UART_SetConfig+0x2ac>)
 80043b0:	4293      	cmp	r3, r2
 80043b2:	d12a      	bne.n	800440a <UART_SetConfig+0x20a>
 80043b4:	4b3f      	ldr	r3, [pc, #252]	; (80044b4 <UART_SetConfig+0x2b4>)
 80043b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043ba:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80043be:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80043c2:	d01a      	beq.n	80043fa <UART_SetConfig+0x1fa>
 80043c4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80043c8:	d81b      	bhi.n	8004402 <UART_SetConfig+0x202>
 80043ca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80043ce:	d00c      	beq.n	80043ea <UART_SetConfig+0x1ea>
 80043d0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80043d4:	d815      	bhi.n	8004402 <UART_SetConfig+0x202>
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d003      	beq.n	80043e2 <UART_SetConfig+0x1e2>
 80043da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80043de:	d008      	beq.n	80043f2 <UART_SetConfig+0x1f2>
 80043e0:	e00f      	b.n	8004402 <UART_SetConfig+0x202>
 80043e2:	2300      	movs	r3, #0
 80043e4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80043e8:	e012      	b.n	8004410 <UART_SetConfig+0x210>
 80043ea:	2302      	movs	r3, #2
 80043ec:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80043f0:	e00e      	b.n	8004410 <UART_SetConfig+0x210>
 80043f2:	2304      	movs	r3, #4
 80043f4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80043f8:	e00a      	b.n	8004410 <UART_SetConfig+0x210>
 80043fa:	2308      	movs	r3, #8
 80043fc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004400:	e006      	b.n	8004410 <UART_SetConfig+0x210>
 8004402:	2310      	movs	r3, #16
 8004404:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004408:	e002      	b.n	8004410 <UART_SetConfig+0x210>
 800440a:	2310      	movs	r3, #16
 800440c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	4a25      	ldr	r2, [pc, #148]	; (80044ac <UART_SetConfig+0x2ac>)
 8004416:	4293      	cmp	r3, r2
 8004418:	f040 808a 	bne.w	8004530 <UART_SetConfig+0x330>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800441c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004420:	2b08      	cmp	r3, #8
 8004422:	d824      	bhi.n	800446e <UART_SetConfig+0x26e>
 8004424:	a201      	add	r2, pc, #4	; (adr r2, 800442c <UART_SetConfig+0x22c>)
 8004426:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800442a:	bf00      	nop
 800442c:	08004451 	.word	0x08004451
 8004430:	0800446f 	.word	0x0800446f
 8004434:	08004459 	.word	0x08004459
 8004438:	0800446f 	.word	0x0800446f
 800443c:	0800445f 	.word	0x0800445f
 8004440:	0800446f 	.word	0x0800446f
 8004444:	0800446f 	.word	0x0800446f
 8004448:	0800446f 	.word	0x0800446f
 800444c:	08004467 	.word	0x08004467
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004450:	f7fe fd0c 	bl	8002e6c <HAL_RCC_GetPCLK1Freq>
 8004454:	61f8      	str	r0, [r7, #28]
        break;
 8004456:	e010      	b.n	800447a <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004458:	4b19      	ldr	r3, [pc, #100]	; (80044c0 <UART_SetConfig+0x2c0>)
 800445a:	61fb      	str	r3, [r7, #28]
        break;
 800445c:	e00d      	b.n	800447a <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800445e:	f7fe fc6f 	bl	8002d40 <HAL_RCC_GetSysClockFreq>
 8004462:	61f8      	str	r0, [r7, #28]
        break;
 8004464:	e009      	b.n	800447a <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004466:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800446a:	61fb      	str	r3, [r7, #28]
        break;
 800446c:	e005      	b.n	800447a <UART_SetConfig+0x27a>
      default:
        pclk = 0U;
 800446e:	2300      	movs	r3, #0
 8004470:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004472:	2301      	movs	r3, #1
 8004474:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004478:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800447a:	69fb      	ldr	r3, [r7, #28]
 800447c:	2b00      	cmp	r3, #0
 800447e:	f000 8109 	beq.w	8004694 <UART_SetConfig+0x494>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	685a      	ldr	r2, [r3, #4]
 8004486:	4613      	mov	r3, r2
 8004488:	005b      	lsls	r3, r3, #1
 800448a:	4413      	add	r3, r2
 800448c:	69fa      	ldr	r2, [r7, #28]
 800448e:	429a      	cmp	r2, r3
 8004490:	d305      	bcc.n	800449e <UART_SetConfig+0x29e>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	685b      	ldr	r3, [r3, #4]
 8004496:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004498:	69fa      	ldr	r2, [r7, #28]
 800449a:	429a      	cmp	r2, r3
 800449c:	d912      	bls.n	80044c4 <UART_SetConfig+0x2c4>
      {
        ret = HAL_ERROR;
 800449e:	2301      	movs	r3, #1
 80044a0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80044a4:	e0f6      	b.n	8004694 <UART_SetConfig+0x494>
 80044a6:	bf00      	nop
 80044a8:	efff69f3 	.word	0xefff69f3
 80044ac:	40008000 	.word	0x40008000
 80044b0:	40013800 	.word	0x40013800
 80044b4:	40021000 	.word	0x40021000
 80044b8:	40004400 	.word	0x40004400
 80044bc:	40004800 	.word	0x40004800
 80044c0:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80044c4:	69fb      	ldr	r3, [r7, #28]
 80044c6:	2200      	movs	r2, #0
 80044c8:	461c      	mov	r4, r3
 80044ca:	4615      	mov	r5, r2
 80044cc:	f04f 0200 	mov.w	r2, #0
 80044d0:	f04f 0300 	mov.w	r3, #0
 80044d4:	022b      	lsls	r3, r5, #8
 80044d6:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80044da:	0222      	lsls	r2, r4, #8
 80044dc:	68f9      	ldr	r1, [r7, #12]
 80044de:	6849      	ldr	r1, [r1, #4]
 80044e0:	0849      	lsrs	r1, r1, #1
 80044e2:	2000      	movs	r0, #0
 80044e4:	4688      	mov	r8, r1
 80044e6:	4681      	mov	r9, r0
 80044e8:	eb12 0a08 	adds.w	sl, r2, r8
 80044ec:	eb43 0b09 	adc.w	fp, r3, r9
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	685b      	ldr	r3, [r3, #4]
 80044f4:	2200      	movs	r2, #0
 80044f6:	603b      	str	r3, [r7, #0]
 80044f8:	607a      	str	r2, [r7, #4]
 80044fa:	e9d7 2300 	ldrd	r2, r3, [r7]
 80044fe:	4650      	mov	r0, sl
 8004500:	4659      	mov	r1, fp
 8004502:	f7fb fe65 	bl	80001d0 <__aeabi_uldivmod>
 8004506:	4602      	mov	r2, r0
 8004508:	460b      	mov	r3, r1
 800450a:	4613      	mov	r3, r2
 800450c:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800450e:	69bb      	ldr	r3, [r7, #24]
 8004510:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004514:	d308      	bcc.n	8004528 <UART_SetConfig+0x328>
 8004516:	69bb      	ldr	r3, [r7, #24]
 8004518:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800451c:	d204      	bcs.n	8004528 <UART_SetConfig+0x328>
        {
          huart->Instance->BRR = usartdiv;
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	69ba      	ldr	r2, [r7, #24]
 8004524:	60da      	str	r2, [r3, #12]
 8004526:	e0b5      	b.n	8004694 <UART_SetConfig+0x494>
        }
        else
        {
          ret = HAL_ERROR;
 8004528:	2301      	movs	r3, #1
 800452a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800452e:	e0b1      	b.n	8004694 <UART_SetConfig+0x494>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	69db      	ldr	r3, [r3, #28]
 8004534:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004538:	d15d      	bne.n	80045f6 <UART_SetConfig+0x3f6>
  {
    switch (clocksource)
 800453a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800453e:	2b08      	cmp	r3, #8
 8004540:	d827      	bhi.n	8004592 <UART_SetConfig+0x392>
 8004542:	a201      	add	r2, pc, #4	; (adr r2, 8004548 <UART_SetConfig+0x348>)
 8004544:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004548:	0800456d 	.word	0x0800456d
 800454c:	08004575 	.word	0x08004575
 8004550:	0800457d 	.word	0x0800457d
 8004554:	08004593 	.word	0x08004593
 8004558:	08004583 	.word	0x08004583
 800455c:	08004593 	.word	0x08004593
 8004560:	08004593 	.word	0x08004593
 8004564:	08004593 	.word	0x08004593
 8004568:	0800458b 	.word	0x0800458b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800456c:	f7fe fc7e 	bl	8002e6c <HAL_RCC_GetPCLK1Freq>
 8004570:	61f8      	str	r0, [r7, #28]
        break;
 8004572:	e014      	b.n	800459e <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004574:	f7fe fc90 	bl	8002e98 <HAL_RCC_GetPCLK2Freq>
 8004578:	61f8      	str	r0, [r7, #28]
        break;
 800457a:	e010      	b.n	800459e <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800457c:	4b4c      	ldr	r3, [pc, #304]	; (80046b0 <UART_SetConfig+0x4b0>)
 800457e:	61fb      	str	r3, [r7, #28]
        break;
 8004580:	e00d      	b.n	800459e <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004582:	f7fe fbdd 	bl	8002d40 <HAL_RCC_GetSysClockFreq>
 8004586:	61f8      	str	r0, [r7, #28]
        break;
 8004588:	e009      	b.n	800459e <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800458a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800458e:	61fb      	str	r3, [r7, #28]
        break;
 8004590:	e005      	b.n	800459e <UART_SetConfig+0x39e>
      default:
        pclk = 0U;
 8004592:	2300      	movs	r3, #0
 8004594:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004596:	2301      	movs	r3, #1
 8004598:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800459c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800459e:	69fb      	ldr	r3, [r7, #28]
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d077      	beq.n	8004694 <UART_SetConfig+0x494>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80045a4:	69fb      	ldr	r3, [r7, #28]
 80045a6:	005a      	lsls	r2, r3, #1
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	685b      	ldr	r3, [r3, #4]
 80045ac:	085b      	lsrs	r3, r3, #1
 80045ae:	441a      	add	r2, r3
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	685b      	ldr	r3, [r3, #4]
 80045b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80045b8:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80045ba:	69bb      	ldr	r3, [r7, #24]
 80045bc:	2b0f      	cmp	r3, #15
 80045be:	d916      	bls.n	80045ee <UART_SetConfig+0x3ee>
 80045c0:	69bb      	ldr	r3, [r7, #24]
 80045c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80045c6:	d212      	bcs.n	80045ee <UART_SetConfig+0x3ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80045c8:	69bb      	ldr	r3, [r7, #24]
 80045ca:	b29b      	uxth	r3, r3
 80045cc:	f023 030f 	bic.w	r3, r3, #15
 80045d0:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80045d2:	69bb      	ldr	r3, [r7, #24]
 80045d4:	085b      	lsrs	r3, r3, #1
 80045d6:	b29b      	uxth	r3, r3
 80045d8:	f003 0307 	and.w	r3, r3, #7
 80045dc:	b29a      	uxth	r2, r3
 80045de:	8afb      	ldrh	r3, [r7, #22]
 80045e0:	4313      	orrs	r3, r2
 80045e2:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	8afa      	ldrh	r2, [r7, #22]
 80045ea:	60da      	str	r2, [r3, #12]
 80045ec:	e052      	b.n	8004694 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 80045ee:	2301      	movs	r3, #1
 80045f0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80045f4:	e04e      	b.n	8004694 <UART_SetConfig+0x494>
      }
    }
  }
  else
  {
    switch (clocksource)
 80045f6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80045fa:	2b08      	cmp	r3, #8
 80045fc:	d827      	bhi.n	800464e <UART_SetConfig+0x44e>
 80045fe:	a201      	add	r2, pc, #4	; (adr r2, 8004604 <UART_SetConfig+0x404>)
 8004600:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004604:	08004629 	.word	0x08004629
 8004608:	08004631 	.word	0x08004631
 800460c:	08004639 	.word	0x08004639
 8004610:	0800464f 	.word	0x0800464f
 8004614:	0800463f 	.word	0x0800463f
 8004618:	0800464f 	.word	0x0800464f
 800461c:	0800464f 	.word	0x0800464f
 8004620:	0800464f 	.word	0x0800464f
 8004624:	08004647 	.word	0x08004647
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004628:	f7fe fc20 	bl	8002e6c <HAL_RCC_GetPCLK1Freq>
 800462c:	61f8      	str	r0, [r7, #28]
        break;
 800462e:	e014      	b.n	800465a <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004630:	f7fe fc32 	bl	8002e98 <HAL_RCC_GetPCLK2Freq>
 8004634:	61f8      	str	r0, [r7, #28]
        break;
 8004636:	e010      	b.n	800465a <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004638:	4b1d      	ldr	r3, [pc, #116]	; (80046b0 <UART_SetConfig+0x4b0>)
 800463a:	61fb      	str	r3, [r7, #28]
        break;
 800463c:	e00d      	b.n	800465a <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800463e:	f7fe fb7f 	bl	8002d40 <HAL_RCC_GetSysClockFreq>
 8004642:	61f8      	str	r0, [r7, #28]
        break;
 8004644:	e009      	b.n	800465a <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004646:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800464a:	61fb      	str	r3, [r7, #28]
        break;
 800464c:	e005      	b.n	800465a <UART_SetConfig+0x45a>
      default:
        pclk = 0U;
 800464e:	2300      	movs	r3, #0
 8004650:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004652:	2301      	movs	r3, #1
 8004654:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004658:	bf00      	nop
    }

    if (pclk != 0U)
 800465a:	69fb      	ldr	r3, [r7, #28]
 800465c:	2b00      	cmp	r3, #0
 800465e:	d019      	beq.n	8004694 <UART_SetConfig+0x494>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	685b      	ldr	r3, [r3, #4]
 8004664:	085a      	lsrs	r2, r3, #1
 8004666:	69fb      	ldr	r3, [r7, #28]
 8004668:	441a      	add	r2, r3
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	685b      	ldr	r3, [r3, #4]
 800466e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004672:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004674:	69bb      	ldr	r3, [r7, #24]
 8004676:	2b0f      	cmp	r3, #15
 8004678:	d909      	bls.n	800468e <UART_SetConfig+0x48e>
 800467a:	69bb      	ldr	r3, [r7, #24]
 800467c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004680:	d205      	bcs.n	800468e <UART_SetConfig+0x48e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004682:	69bb      	ldr	r3, [r7, #24]
 8004684:	b29a      	uxth	r2, r3
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	60da      	str	r2, [r3, #12]
 800468c:	e002      	b.n	8004694 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 800468e:	2301      	movs	r3, #1
 8004690:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	2200      	movs	r2, #0
 8004698:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	2200      	movs	r2, #0
 800469e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80046a0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80046a4:	4618      	mov	r0, r3
 80046a6:	3728      	adds	r7, #40	; 0x28
 80046a8:	46bd      	mov	sp, r7
 80046aa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80046ae:	bf00      	nop
 80046b0:	00f42400 	.word	0x00f42400

080046b4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80046b4:	b480      	push	{r7}
 80046b6:	b083      	sub	sp, #12
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046c0:	f003 0301 	and.w	r3, r3, #1
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d00a      	beq.n	80046de <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	685b      	ldr	r3, [r3, #4]
 80046ce:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	430a      	orrs	r2, r1
 80046dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046e2:	f003 0302 	and.w	r3, r3, #2
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d00a      	beq.n	8004700 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	685b      	ldr	r3, [r3, #4]
 80046f0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	430a      	orrs	r2, r1
 80046fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004704:	f003 0304 	and.w	r3, r3, #4
 8004708:	2b00      	cmp	r3, #0
 800470a:	d00a      	beq.n	8004722 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	685b      	ldr	r3, [r3, #4]
 8004712:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	430a      	orrs	r2, r1
 8004720:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004726:	f003 0308 	and.w	r3, r3, #8
 800472a:	2b00      	cmp	r3, #0
 800472c:	d00a      	beq.n	8004744 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	685b      	ldr	r3, [r3, #4]
 8004734:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	430a      	orrs	r2, r1
 8004742:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004748:	f003 0310 	and.w	r3, r3, #16
 800474c:	2b00      	cmp	r3, #0
 800474e:	d00a      	beq.n	8004766 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	689b      	ldr	r3, [r3, #8]
 8004756:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	430a      	orrs	r2, r1
 8004764:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800476a:	f003 0320 	and.w	r3, r3, #32
 800476e:	2b00      	cmp	r3, #0
 8004770:	d00a      	beq.n	8004788 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	689b      	ldr	r3, [r3, #8]
 8004778:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	430a      	orrs	r2, r1
 8004786:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800478c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004790:	2b00      	cmp	r3, #0
 8004792:	d01a      	beq.n	80047ca <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	685b      	ldr	r3, [r3, #4]
 800479a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	430a      	orrs	r2, r1
 80047a8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047ae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80047b2:	d10a      	bne.n	80047ca <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	685b      	ldr	r3, [r3, #4]
 80047ba:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	430a      	orrs	r2, r1
 80047c8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d00a      	beq.n	80047ec <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	685b      	ldr	r3, [r3, #4]
 80047dc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	430a      	orrs	r2, r1
 80047ea:	605a      	str	r2, [r3, #4]
  }
}
 80047ec:	bf00      	nop
 80047ee:	370c      	adds	r7, #12
 80047f0:	46bd      	mov	sp, r7
 80047f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f6:	4770      	bx	lr

080047f8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80047f8:	b580      	push	{r7, lr}
 80047fa:	b086      	sub	sp, #24
 80047fc:	af02      	add	r7, sp, #8
 80047fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	2200      	movs	r2, #0
 8004804:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004808:	f7fc fb3c 	bl	8000e84 <HAL_GetTick>
 800480c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f003 0308 	and.w	r3, r3, #8
 8004818:	2b08      	cmp	r3, #8
 800481a:	d10e      	bne.n	800483a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800481c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004820:	9300      	str	r3, [sp, #0]
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	2200      	movs	r2, #0
 8004826:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800482a:	6878      	ldr	r0, [r7, #4]
 800482c:	f000 f82d 	bl	800488a <UART_WaitOnFlagUntilTimeout>
 8004830:	4603      	mov	r3, r0
 8004832:	2b00      	cmp	r3, #0
 8004834:	d001      	beq.n	800483a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004836:	2303      	movs	r3, #3
 8004838:	e023      	b.n	8004882 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f003 0304 	and.w	r3, r3, #4
 8004844:	2b04      	cmp	r3, #4
 8004846:	d10e      	bne.n	8004866 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004848:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800484c:	9300      	str	r3, [sp, #0]
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	2200      	movs	r2, #0
 8004852:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004856:	6878      	ldr	r0, [r7, #4]
 8004858:	f000 f817 	bl	800488a <UART_WaitOnFlagUntilTimeout>
 800485c:	4603      	mov	r3, r0
 800485e:	2b00      	cmp	r3, #0
 8004860:	d001      	beq.n	8004866 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004862:	2303      	movs	r3, #3
 8004864:	e00d      	b.n	8004882 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	2220      	movs	r2, #32
 800486a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2220      	movs	r2, #32
 8004870:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	2200      	movs	r2, #0
 8004876:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2200      	movs	r2, #0
 800487c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004880:	2300      	movs	r3, #0
}
 8004882:	4618      	mov	r0, r3
 8004884:	3710      	adds	r7, #16
 8004886:	46bd      	mov	sp, r7
 8004888:	bd80      	pop	{r7, pc}

0800488a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800488a:	b580      	push	{r7, lr}
 800488c:	b09c      	sub	sp, #112	; 0x70
 800488e:	af00      	add	r7, sp, #0
 8004890:	60f8      	str	r0, [r7, #12]
 8004892:	60b9      	str	r1, [r7, #8]
 8004894:	603b      	str	r3, [r7, #0]
 8004896:	4613      	mov	r3, r2
 8004898:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800489a:	e0a5      	b.n	80049e8 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800489c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800489e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048a2:	f000 80a1 	beq.w	80049e8 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80048a6:	f7fc faed 	bl	8000e84 <HAL_GetTick>
 80048aa:	4602      	mov	r2, r0
 80048ac:	683b      	ldr	r3, [r7, #0]
 80048ae:	1ad3      	subs	r3, r2, r3
 80048b0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80048b2:	429a      	cmp	r2, r3
 80048b4:	d302      	bcc.n	80048bc <UART_WaitOnFlagUntilTimeout+0x32>
 80048b6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d13e      	bne.n	800493a <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80048c4:	e853 3f00 	ldrex	r3, [r3]
 80048c8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80048ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80048cc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80048d0:	667b      	str	r3, [r7, #100]	; 0x64
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	461a      	mov	r2, r3
 80048d8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80048da:	65fb      	str	r3, [r7, #92]	; 0x5c
 80048dc:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048de:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80048e0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80048e2:	e841 2300 	strex	r3, r2, [r1]
 80048e6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80048e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d1e6      	bne.n	80048bc <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	3308      	adds	r3, #8
 80048f4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80048f8:	e853 3f00 	ldrex	r3, [r3]
 80048fc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80048fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004900:	f023 0301 	bic.w	r3, r3, #1
 8004904:	663b      	str	r3, [r7, #96]	; 0x60
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	3308      	adds	r3, #8
 800490c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800490e:	64ba      	str	r2, [r7, #72]	; 0x48
 8004910:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004912:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004914:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004916:	e841 2300 	strex	r3, r2, [r1]
 800491a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800491c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800491e:	2b00      	cmp	r3, #0
 8004920:	d1e5      	bne.n	80048ee <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	2220      	movs	r2, #32
 8004926:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	2220      	movs	r2, #32
 800492c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	2200      	movs	r2, #0
 8004932:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8004936:	2303      	movs	r3, #3
 8004938:	e067      	b.n	8004a0a <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f003 0304 	and.w	r3, r3, #4
 8004944:	2b00      	cmp	r3, #0
 8004946:	d04f      	beq.n	80049e8 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	69db      	ldr	r3, [r3, #28]
 800494e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004952:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004956:	d147      	bne.n	80049e8 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004960:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004968:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800496a:	e853 3f00 	ldrex	r3, [r3]
 800496e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004972:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004976:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	461a      	mov	r2, r3
 800497e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004980:	637b      	str	r3, [r7, #52]	; 0x34
 8004982:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004984:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004986:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004988:	e841 2300 	strex	r3, r2, [r1]
 800498c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800498e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004990:	2b00      	cmp	r3, #0
 8004992:	d1e6      	bne.n	8004962 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	3308      	adds	r3, #8
 800499a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800499c:	697b      	ldr	r3, [r7, #20]
 800499e:	e853 3f00 	ldrex	r3, [r3]
 80049a2:	613b      	str	r3, [r7, #16]
   return(result);
 80049a4:	693b      	ldr	r3, [r7, #16]
 80049a6:	f023 0301 	bic.w	r3, r3, #1
 80049aa:	66bb      	str	r3, [r7, #104]	; 0x68
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	3308      	adds	r3, #8
 80049b2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80049b4:	623a      	str	r2, [r7, #32]
 80049b6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049b8:	69f9      	ldr	r1, [r7, #28]
 80049ba:	6a3a      	ldr	r2, [r7, #32]
 80049bc:	e841 2300 	strex	r3, r2, [r1]
 80049c0:	61bb      	str	r3, [r7, #24]
   return(result);
 80049c2:	69bb      	ldr	r3, [r7, #24]
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d1e5      	bne.n	8004994 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	2220      	movs	r2, #32
 80049cc:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	2220      	movs	r2, #32
 80049d2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	2220      	movs	r2, #32
 80049d8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	2200      	movs	r2, #0
 80049e0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80049e4:	2303      	movs	r3, #3
 80049e6:	e010      	b.n	8004a0a <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	69da      	ldr	r2, [r3, #28]
 80049ee:	68bb      	ldr	r3, [r7, #8]
 80049f0:	4013      	ands	r3, r2
 80049f2:	68ba      	ldr	r2, [r7, #8]
 80049f4:	429a      	cmp	r2, r3
 80049f6:	bf0c      	ite	eq
 80049f8:	2301      	moveq	r3, #1
 80049fa:	2300      	movne	r3, #0
 80049fc:	b2db      	uxtb	r3, r3
 80049fe:	461a      	mov	r2, r3
 8004a00:	79fb      	ldrb	r3, [r7, #7]
 8004a02:	429a      	cmp	r2, r3
 8004a04:	f43f af4a 	beq.w	800489c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004a08:	2300      	movs	r3, #0
}
 8004a0a:	4618      	mov	r0, r3
 8004a0c:	3770      	adds	r7, #112	; 0x70
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	bd80      	pop	{r7, pc}

08004a12 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004a12:	b480      	push	{r7}
 8004a14:	b095      	sub	sp, #84	; 0x54
 8004a16:	af00      	add	r7, sp, #0
 8004a18:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a22:	e853 3f00 	ldrex	r3, [r3]
 8004a26:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004a28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a2a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004a2e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	461a      	mov	r2, r3
 8004a36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a38:	643b      	str	r3, [r7, #64]	; 0x40
 8004a3a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a3c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004a3e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004a40:	e841 2300 	strex	r3, r2, [r1]
 8004a44:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004a46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d1e6      	bne.n	8004a1a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	3308      	adds	r3, #8
 8004a52:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a54:	6a3b      	ldr	r3, [r7, #32]
 8004a56:	e853 3f00 	ldrex	r3, [r3]
 8004a5a:	61fb      	str	r3, [r7, #28]
   return(result);
 8004a5c:	69fb      	ldr	r3, [r7, #28]
 8004a5e:	f023 0301 	bic.w	r3, r3, #1
 8004a62:	64bb      	str	r3, [r7, #72]	; 0x48
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	3308      	adds	r3, #8
 8004a6a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004a6c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004a6e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a70:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004a72:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004a74:	e841 2300 	strex	r3, r2, [r1]
 8004a78:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d1e5      	bne.n	8004a4c <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a84:	2b01      	cmp	r3, #1
 8004a86:	d118      	bne.n	8004aba <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	e853 3f00 	ldrex	r3, [r3]
 8004a94:	60bb      	str	r3, [r7, #8]
   return(result);
 8004a96:	68bb      	ldr	r3, [r7, #8]
 8004a98:	f023 0310 	bic.w	r3, r3, #16
 8004a9c:	647b      	str	r3, [r7, #68]	; 0x44
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	461a      	mov	r2, r3
 8004aa4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004aa6:	61bb      	str	r3, [r7, #24]
 8004aa8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004aaa:	6979      	ldr	r1, [r7, #20]
 8004aac:	69ba      	ldr	r2, [r7, #24]
 8004aae:	e841 2300 	strex	r3, r2, [r1]
 8004ab2:	613b      	str	r3, [r7, #16]
   return(result);
 8004ab4:	693b      	ldr	r3, [r7, #16]
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d1e6      	bne.n	8004a88 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	2220      	movs	r2, #32
 8004abe:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	2200      	movs	r2, #0
 8004ac4:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	2200      	movs	r2, #0
 8004aca:	665a      	str	r2, [r3, #100]	; 0x64
}
 8004acc:	bf00      	nop
 8004ace:	3754      	adds	r7, #84	; 0x54
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad6:	4770      	bx	lr

08004ad8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004ad8:	b580      	push	{r7, lr}
 8004ada:	b084      	sub	sp, #16
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ae4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	2200      	movs	r2, #0
 8004aea:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	2200      	movs	r2, #0
 8004af2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004af6:	68f8      	ldr	r0, [r7, #12]
 8004af8:	f7ff fb6c 	bl	80041d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004afc:	bf00      	nop
 8004afe:	3710      	adds	r7, #16
 8004b00:	46bd      	mov	sp, r7
 8004b02:	bd80      	pop	{r7, pc}

08004b04 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004b04:	b580      	push	{r7, lr}
 8004b06:	b088      	sub	sp, #32
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	e853 3f00 	ldrex	r3, [r3]
 8004b18:	60bb      	str	r3, [r7, #8]
   return(result);
 8004b1a:	68bb      	ldr	r3, [r7, #8]
 8004b1c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004b20:	61fb      	str	r3, [r7, #28]
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	461a      	mov	r2, r3
 8004b28:	69fb      	ldr	r3, [r7, #28]
 8004b2a:	61bb      	str	r3, [r7, #24]
 8004b2c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b2e:	6979      	ldr	r1, [r7, #20]
 8004b30:	69ba      	ldr	r2, [r7, #24]
 8004b32:	e841 2300 	strex	r3, r2, [r1]
 8004b36:	613b      	str	r3, [r7, #16]
   return(result);
 8004b38:	693b      	ldr	r3, [r7, #16]
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d1e6      	bne.n	8004b0c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	2220      	movs	r2, #32
 8004b42:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2200      	movs	r2, #0
 8004b48:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004b4a:	6878      	ldr	r0, [r7, #4]
 8004b4c:	f7ff fb38 	bl	80041c0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004b50:	bf00      	nop
 8004b52:	3720      	adds	r7, #32
 8004b54:	46bd      	mov	sp, r7
 8004b56:	bd80      	pop	{r7, pc}

08004b58 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004b58:	b480      	push	{r7}
 8004b5a:	b083      	sub	sp, #12
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004b60:	bf00      	nop
 8004b62:	370c      	adds	r7, #12
 8004b64:	46bd      	mov	sp, r7
 8004b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6a:	4770      	bx	lr

08004b6c <__NVIC_SetPriority>:
{
 8004b6c:	b480      	push	{r7}
 8004b6e:	b083      	sub	sp, #12
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	4603      	mov	r3, r0
 8004b74:	6039      	str	r1, [r7, #0]
 8004b76:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004b78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	db0a      	blt.n	8004b96 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004b80:	683b      	ldr	r3, [r7, #0]
 8004b82:	b2da      	uxtb	r2, r3
 8004b84:	490c      	ldr	r1, [pc, #48]	; (8004bb8 <__NVIC_SetPriority+0x4c>)
 8004b86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b8a:	0112      	lsls	r2, r2, #4
 8004b8c:	b2d2      	uxtb	r2, r2
 8004b8e:	440b      	add	r3, r1
 8004b90:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004b94:	e00a      	b.n	8004bac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004b96:	683b      	ldr	r3, [r7, #0]
 8004b98:	b2da      	uxtb	r2, r3
 8004b9a:	4908      	ldr	r1, [pc, #32]	; (8004bbc <__NVIC_SetPriority+0x50>)
 8004b9c:	79fb      	ldrb	r3, [r7, #7]
 8004b9e:	f003 030f 	and.w	r3, r3, #15
 8004ba2:	3b04      	subs	r3, #4
 8004ba4:	0112      	lsls	r2, r2, #4
 8004ba6:	b2d2      	uxtb	r2, r2
 8004ba8:	440b      	add	r3, r1
 8004baa:	761a      	strb	r2, [r3, #24]
}
 8004bac:	bf00      	nop
 8004bae:	370c      	adds	r7, #12
 8004bb0:	46bd      	mov	sp, r7
 8004bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb6:	4770      	bx	lr
 8004bb8:	e000e100 	.word	0xe000e100
 8004bbc:	e000ed00 	.word	0xe000ed00

08004bc0 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8004bc0:	b580      	push	{r7, lr}
 8004bc2:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8004bc4:	4b05      	ldr	r3, [pc, #20]	; (8004bdc <SysTick_Handler+0x1c>)
 8004bc6:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8004bc8:	f001 fd28 	bl	800661c <xTaskGetSchedulerState>
 8004bcc:	4603      	mov	r3, r0
 8004bce:	2b01      	cmp	r3, #1
 8004bd0:	d001      	beq.n	8004bd6 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8004bd2:	f002 fb11 	bl	80071f8 <xPortSysTickHandler>
  }
}
 8004bd6:	bf00      	nop
 8004bd8:	bd80      	pop	{r7, pc}
 8004bda:	bf00      	nop
 8004bdc:	e000e010 	.word	0xe000e010

08004be0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8004be0:	b580      	push	{r7, lr}
 8004be2:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8004be4:	2100      	movs	r1, #0
 8004be6:	f06f 0004 	mvn.w	r0, #4
 8004bea:	f7ff ffbf 	bl	8004b6c <__NVIC_SetPriority>
#endif
}
 8004bee:	bf00      	nop
 8004bf0:	bd80      	pop	{r7, pc}
	...

08004bf4 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004bf4:	b480      	push	{r7}
 8004bf6:	b083      	sub	sp, #12
 8004bf8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004bfa:	f3ef 8305 	mrs	r3, IPSR
 8004bfe:	603b      	str	r3, [r7, #0]
  return(result);
 8004c00:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d003      	beq.n	8004c0e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8004c06:	f06f 0305 	mvn.w	r3, #5
 8004c0a:	607b      	str	r3, [r7, #4]
 8004c0c:	e00c      	b.n	8004c28 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8004c0e:	4b0a      	ldr	r3, [pc, #40]	; (8004c38 <osKernelInitialize+0x44>)
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d105      	bne.n	8004c22 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8004c16:	4b08      	ldr	r3, [pc, #32]	; (8004c38 <osKernelInitialize+0x44>)
 8004c18:	2201      	movs	r2, #1
 8004c1a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004c1c:	2300      	movs	r3, #0
 8004c1e:	607b      	str	r3, [r7, #4]
 8004c20:	e002      	b.n	8004c28 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8004c22:	f04f 33ff 	mov.w	r3, #4294967295
 8004c26:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004c28:	687b      	ldr	r3, [r7, #4]
}
 8004c2a:	4618      	mov	r0, r3
 8004c2c:	370c      	adds	r7, #12
 8004c2e:	46bd      	mov	sp, r7
 8004c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c34:	4770      	bx	lr
 8004c36:	bf00      	nop
 8004c38:	20000294 	.word	0x20000294

08004c3c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004c3c:	b580      	push	{r7, lr}
 8004c3e:	b082      	sub	sp, #8
 8004c40:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004c42:	f3ef 8305 	mrs	r3, IPSR
 8004c46:	603b      	str	r3, [r7, #0]
  return(result);
 8004c48:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d003      	beq.n	8004c56 <osKernelStart+0x1a>
    stat = osErrorISR;
 8004c4e:	f06f 0305 	mvn.w	r3, #5
 8004c52:	607b      	str	r3, [r7, #4]
 8004c54:	e010      	b.n	8004c78 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8004c56:	4b0b      	ldr	r3, [pc, #44]	; (8004c84 <osKernelStart+0x48>)
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	2b01      	cmp	r3, #1
 8004c5c:	d109      	bne.n	8004c72 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8004c5e:	f7ff ffbf 	bl	8004be0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8004c62:	4b08      	ldr	r3, [pc, #32]	; (8004c84 <osKernelStart+0x48>)
 8004c64:	2202      	movs	r2, #2
 8004c66:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8004c68:	f001 f87c 	bl	8005d64 <vTaskStartScheduler>
      stat = osOK;
 8004c6c:	2300      	movs	r3, #0
 8004c6e:	607b      	str	r3, [r7, #4]
 8004c70:	e002      	b.n	8004c78 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8004c72:	f04f 33ff 	mov.w	r3, #4294967295
 8004c76:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004c78:	687b      	ldr	r3, [r7, #4]
}
 8004c7a:	4618      	mov	r0, r3
 8004c7c:	3708      	adds	r7, #8
 8004c7e:	46bd      	mov	sp, r7
 8004c80:	bd80      	pop	{r7, pc}
 8004c82:	bf00      	nop
 8004c84:	20000294 	.word	0x20000294

08004c88 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004c88:	b580      	push	{r7, lr}
 8004c8a:	b08e      	sub	sp, #56	; 0x38
 8004c8c:	af04      	add	r7, sp, #16
 8004c8e:	60f8      	str	r0, [r7, #12]
 8004c90:	60b9      	str	r1, [r7, #8]
 8004c92:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004c94:	2300      	movs	r3, #0
 8004c96:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004c98:	f3ef 8305 	mrs	r3, IPSR
 8004c9c:	617b      	str	r3, [r7, #20]
  return(result);
 8004c9e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d17e      	bne.n	8004da2 <osThreadNew+0x11a>
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d07b      	beq.n	8004da2 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8004caa:	2380      	movs	r3, #128	; 0x80
 8004cac:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8004cae:	2318      	movs	r3, #24
 8004cb0:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8004cb2:	2300      	movs	r3, #0
 8004cb4:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8004cb6:	f04f 33ff 	mov.w	r3, #4294967295
 8004cba:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d045      	beq.n	8004d4e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d002      	beq.n	8004cd0 <osThreadNew+0x48>
        name = attr->name;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	699b      	ldr	r3, [r3, #24]
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d002      	beq.n	8004cde <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	699b      	ldr	r3, [r3, #24]
 8004cdc:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004cde:	69fb      	ldr	r3, [r7, #28]
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d008      	beq.n	8004cf6 <osThreadNew+0x6e>
 8004ce4:	69fb      	ldr	r3, [r7, #28]
 8004ce6:	2b38      	cmp	r3, #56	; 0x38
 8004ce8:	d805      	bhi.n	8004cf6 <osThreadNew+0x6e>
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	685b      	ldr	r3, [r3, #4]
 8004cee:	f003 0301 	and.w	r3, r3, #1
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d001      	beq.n	8004cfa <osThreadNew+0x72>
        return (NULL);
 8004cf6:	2300      	movs	r3, #0
 8004cf8:	e054      	b.n	8004da4 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	695b      	ldr	r3, [r3, #20]
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d003      	beq.n	8004d0a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	695b      	ldr	r3, [r3, #20]
 8004d06:	089b      	lsrs	r3, r3, #2
 8004d08:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	689b      	ldr	r3, [r3, #8]
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d00e      	beq.n	8004d30 <osThreadNew+0xa8>
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	68db      	ldr	r3, [r3, #12]
 8004d16:	2bbb      	cmp	r3, #187	; 0xbb
 8004d18:	d90a      	bls.n	8004d30 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d006      	beq.n	8004d30 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	695b      	ldr	r3, [r3, #20]
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d002      	beq.n	8004d30 <osThreadNew+0xa8>
        mem = 1;
 8004d2a:	2301      	movs	r3, #1
 8004d2c:	61bb      	str	r3, [r7, #24]
 8004d2e:	e010      	b.n	8004d52 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	689b      	ldr	r3, [r3, #8]
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d10c      	bne.n	8004d52 <osThreadNew+0xca>
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	68db      	ldr	r3, [r3, #12]
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d108      	bne.n	8004d52 <osThreadNew+0xca>
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	691b      	ldr	r3, [r3, #16]
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d104      	bne.n	8004d52 <osThreadNew+0xca>
          mem = 0;
 8004d48:	2300      	movs	r3, #0
 8004d4a:	61bb      	str	r3, [r7, #24]
 8004d4c:	e001      	b.n	8004d52 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8004d4e:	2300      	movs	r3, #0
 8004d50:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8004d52:	69bb      	ldr	r3, [r7, #24]
 8004d54:	2b01      	cmp	r3, #1
 8004d56:	d110      	bne.n	8004d7a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8004d5c:	687a      	ldr	r2, [r7, #4]
 8004d5e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004d60:	9202      	str	r2, [sp, #8]
 8004d62:	9301      	str	r3, [sp, #4]
 8004d64:	69fb      	ldr	r3, [r7, #28]
 8004d66:	9300      	str	r3, [sp, #0]
 8004d68:	68bb      	ldr	r3, [r7, #8]
 8004d6a:	6a3a      	ldr	r2, [r7, #32]
 8004d6c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004d6e:	68f8      	ldr	r0, [r7, #12]
 8004d70:	f000 fe0c 	bl	800598c <xTaskCreateStatic>
 8004d74:	4603      	mov	r3, r0
 8004d76:	613b      	str	r3, [r7, #16]
 8004d78:	e013      	b.n	8004da2 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8004d7a:	69bb      	ldr	r3, [r7, #24]
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d110      	bne.n	8004da2 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004d80:	6a3b      	ldr	r3, [r7, #32]
 8004d82:	b29a      	uxth	r2, r3
 8004d84:	f107 0310 	add.w	r3, r7, #16
 8004d88:	9301      	str	r3, [sp, #4]
 8004d8a:	69fb      	ldr	r3, [r7, #28]
 8004d8c:	9300      	str	r3, [sp, #0]
 8004d8e:	68bb      	ldr	r3, [r7, #8]
 8004d90:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004d92:	68f8      	ldr	r0, [r7, #12]
 8004d94:	f000 fe57 	bl	8005a46 <xTaskCreate>
 8004d98:	4603      	mov	r3, r0
 8004d9a:	2b01      	cmp	r3, #1
 8004d9c:	d001      	beq.n	8004da2 <osThreadNew+0x11a>
            hTask = NULL;
 8004d9e:	2300      	movs	r3, #0
 8004da0:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8004da2:	693b      	ldr	r3, [r7, #16]
}
 8004da4:	4618      	mov	r0, r3
 8004da6:	3728      	adds	r7, #40	; 0x28
 8004da8:	46bd      	mov	sp, r7
 8004daa:	bd80      	pop	{r7, pc}

08004dac <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8004dac:	b580      	push	{r7, lr}
 8004dae:	b084      	sub	sp, #16
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004db4:	f3ef 8305 	mrs	r3, IPSR
 8004db8:	60bb      	str	r3, [r7, #8]
  return(result);
 8004dba:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d003      	beq.n	8004dc8 <osDelay+0x1c>
    stat = osErrorISR;
 8004dc0:	f06f 0305 	mvn.w	r3, #5
 8004dc4:	60fb      	str	r3, [r7, #12]
 8004dc6:	e007      	b.n	8004dd8 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8004dc8:	2300      	movs	r3, #0
 8004dca:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d002      	beq.n	8004dd8 <osDelay+0x2c>
      vTaskDelay(ticks);
 8004dd2:	6878      	ldr	r0, [r7, #4]
 8004dd4:	f000 ff92 	bl	8005cfc <vTaskDelay>
    }
  }

  return (stat);
 8004dd8:	68fb      	ldr	r3, [r7, #12]
}
 8004dda:	4618      	mov	r0, r3
 8004ddc:	3710      	adds	r7, #16
 8004dde:	46bd      	mov	sp, r7
 8004de0:	bd80      	pop	{r7, pc}
	...

08004de4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004de4:	b480      	push	{r7}
 8004de6:	b085      	sub	sp, #20
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	60f8      	str	r0, [r7, #12]
 8004dec:	60b9      	str	r1, [r7, #8]
 8004dee:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	4a07      	ldr	r2, [pc, #28]	; (8004e10 <vApplicationGetIdleTaskMemory+0x2c>)
 8004df4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8004df6:	68bb      	ldr	r3, [r7, #8]
 8004df8:	4a06      	ldr	r2, [pc, #24]	; (8004e14 <vApplicationGetIdleTaskMemory+0x30>)
 8004dfa:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	2280      	movs	r2, #128	; 0x80
 8004e00:	601a      	str	r2, [r3, #0]
}
 8004e02:	bf00      	nop
 8004e04:	3714      	adds	r7, #20
 8004e06:	46bd      	mov	sp, r7
 8004e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e0c:	4770      	bx	lr
 8004e0e:	bf00      	nop
 8004e10:	20000298 	.word	0x20000298
 8004e14:	20000354 	.word	0x20000354

08004e18 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004e18:	b480      	push	{r7}
 8004e1a:	b085      	sub	sp, #20
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	60f8      	str	r0, [r7, #12]
 8004e20:	60b9      	str	r1, [r7, #8]
 8004e22:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	4a07      	ldr	r2, [pc, #28]	; (8004e44 <vApplicationGetTimerTaskMemory+0x2c>)
 8004e28:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004e2a:	68bb      	ldr	r3, [r7, #8]
 8004e2c:	4a06      	ldr	r2, [pc, #24]	; (8004e48 <vApplicationGetTimerTaskMemory+0x30>)
 8004e2e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004e36:	601a      	str	r2, [r3, #0]
}
 8004e38:	bf00      	nop
 8004e3a:	3714      	adds	r7, #20
 8004e3c:	46bd      	mov	sp, r7
 8004e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e42:	4770      	bx	lr
 8004e44:	20000554 	.word	0x20000554
 8004e48:	20000610 	.word	0x20000610

08004e4c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004e4c:	b480      	push	{r7}
 8004e4e:	b083      	sub	sp, #12
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	f103 0208 	add.w	r2, r3, #8
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	f04f 32ff 	mov.w	r2, #4294967295
 8004e64:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	f103 0208 	add.w	r2, r3, #8
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	f103 0208 	add.w	r2, r3, #8
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	2200      	movs	r2, #0
 8004e7e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004e80:	bf00      	nop
 8004e82:	370c      	adds	r7, #12
 8004e84:	46bd      	mov	sp, r7
 8004e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8a:	4770      	bx	lr

08004e8c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004e8c:	b480      	push	{r7}
 8004e8e:	b083      	sub	sp, #12
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	2200      	movs	r2, #0
 8004e98:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004e9a:	bf00      	nop
 8004e9c:	370c      	adds	r7, #12
 8004e9e:	46bd      	mov	sp, r7
 8004ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea4:	4770      	bx	lr

08004ea6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004ea6:	b480      	push	{r7}
 8004ea8:	b085      	sub	sp, #20
 8004eaa:	af00      	add	r7, sp, #0
 8004eac:	6078      	str	r0, [r7, #4]
 8004eae:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	685b      	ldr	r3, [r3, #4]
 8004eb4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004eb6:	683b      	ldr	r3, [r7, #0]
 8004eb8:	68fa      	ldr	r2, [r7, #12]
 8004eba:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	689a      	ldr	r2, [r3, #8]
 8004ec0:	683b      	ldr	r3, [r7, #0]
 8004ec2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	689b      	ldr	r3, [r3, #8]
 8004ec8:	683a      	ldr	r2, [r7, #0]
 8004eca:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	683a      	ldr	r2, [r7, #0]
 8004ed0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004ed2:	683b      	ldr	r3, [r7, #0]
 8004ed4:	687a      	ldr	r2, [r7, #4]
 8004ed6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	1c5a      	adds	r2, r3, #1
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	601a      	str	r2, [r3, #0]
}
 8004ee2:	bf00      	nop
 8004ee4:	3714      	adds	r7, #20
 8004ee6:	46bd      	mov	sp, r7
 8004ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eec:	4770      	bx	lr

08004eee <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004eee:	b480      	push	{r7}
 8004ef0:	b085      	sub	sp, #20
 8004ef2:	af00      	add	r7, sp, #0
 8004ef4:	6078      	str	r0, [r7, #4]
 8004ef6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004ef8:	683b      	ldr	r3, [r7, #0]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004efe:	68bb      	ldr	r3, [r7, #8]
 8004f00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f04:	d103      	bne.n	8004f0e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	691b      	ldr	r3, [r3, #16]
 8004f0a:	60fb      	str	r3, [r7, #12]
 8004f0c:	e00c      	b.n	8004f28 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	3308      	adds	r3, #8
 8004f12:	60fb      	str	r3, [r7, #12]
 8004f14:	e002      	b.n	8004f1c <vListInsert+0x2e>
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	685b      	ldr	r3, [r3, #4]
 8004f1a:	60fb      	str	r3, [r7, #12]
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	685b      	ldr	r3, [r3, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	68ba      	ldr	r2, [r7, #8]
 8004f24:	429a      	cmp	r2, r3
 8004f26:	d2f6      	bcs.n	8004f16 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	685a      	ldr	r2, [r3, #4]
 8004f2c:	683b      	ldr	r3, [r7, #0]
 8004f2e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004f30:	683b      	ldr	r3, [r7, #0]
 8004f32:	685b      	ldr	r3, [r3, #4]
 8004f34:	683a      	ldr	r2, [r7, #0]
 8004f36:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004f38:	683b      	ldr	r3, [r7, #0]
 8004f3a:	68fa      	ldr	r2, [r7, #12]
 8004f3c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	683a      	ldr	r2, [r7, #0]
 8004f42:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004f44:	683b      	ldr	r3, [r7, #0]
 8004f46:	687a      	ldr	r2, [r7, #4]
 8004f48:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	1c5a      	adds	r2, r3, #1
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	601a      	str	r2, [r3, #0]
}
 8004f54:	bf00      	nop
 8004f56:	3714      	adds	r7, #20
 8004f58:	46bd      	mov	sp, r7
 8004f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5e:	4770      	bx	lr

08004f60 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004f60:	b480      	push	{r7}
 8004f62:	b085      	sub	sp, #20
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	691b      	ldr	r3, [r3, #16]
 8004f6c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	685b      	ldr	r3, [r3, #4]
 8004f72:	687a      	ldr	r2, [r7, #4]
 8004f74:	6892      	ldr	r2, [r2, #8]
 8004f76:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	689b      	ldr	r3, [r3, #8]
 8004f7c:	687a      	ldr	r2, [r7, #4]
 8004f7e:	6852      	ldr	r2, [r2, #4]
 8004f80:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	685b      	ldr	r3, [r3, #4]
 8004f86:	687a      	ldr	r2, [r7, #4]
 8004f88:	429a      	cmp	r2, r3
 8004f8a:	d103      	bne.n	8004f94 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	689a      	ldr	r2, [r3, #8]
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2200      	movs	r2, #0
 8004f98:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	1e5a      	subs	r2, r3, #1
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	681b      	ldr	r3, [r3, #0]
}
 8004fa8:	4618      	mov	r0, r3
 8004faa:	3714      	adds	r7, #20
 8004fac:	46bd      	mov	sp, r7
 8004fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb2:	4770      	bx	lr

08004fb4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004fb4:	b580      	push	{r7, lr}
 8004fb6:	b084      	sub	sp, #16
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	6078      	str	r0, [r7, #4]
 8004fbc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d10a      	bne.n	8004fde <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004fc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fcc:	f383 8811 	msr	BASEPRI, r3
 8004fd0:	f3bf 8f6f 	isb	sy
 8004fd4:	f3bf 8f4f 	dsb	sy
 8004fd8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004fda:	bf00      	nop
 8004fdc:	e7fe      	b.n	8004fdc <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004fde:	f002 f879 	bl	80070d4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	681a      	ldr	r2, [r3, #0]
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fea:	68f9      	ldr	r1, [r7, #12]
 8004fec:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004fee:	fb01 f303 	mul.w	r3, r1, r3
 8004ff2:	441a      	add	r2, r3
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	2200      	movs	r2, #0
 8004ffc:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	681a      	ldr	r2, [r3, #0]
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	681a      	ldr	r2, [r3, #0]
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800500e:	3b01      	subs	r3, #1
 8005010:	68f9      	ldr	r1, [r7, #12]
 8005012:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005014:	fb01 f303 	mul.w	r3, r1, r3
 8005018:	441a      	add	r2, r3
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	22ff      	movs	r2, #255	; 0xff
 8005022:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	22ff      	movs	r2, #255	; 0xff
 800502a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800502e:	683b      	ldr	r3, [r7, #0]
 8005030:	2b00      	cmp	r3, #0
 8005032:	d114      	bne.n	800505e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	691b      	ldr	r3, [r3, #16]
 8005038:	2b00      	cmp	r3, #0
 800503a:	d01a      	beq.n	8005072 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	3310      	adds	r3, #16
 8005040:	4618      	mov	r0, r3
 8005042:	f001 f929 	bl	8006298 <xTaskRemoveFromEventList>
 8005046:	4603      	mov	r3, r0
 8005048:	2b00      	cmp	r3, #0
 800504a:	d012      	beq.n	8005072 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800504c:	4b0c      	ldr	r3, [pc, #48]	; (8005080 <xQueueGenericReset+0xcc>)
 800504e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005052:	601a      	str	r2, [r3, #0]
 8005054:	f3bf 8f4f 	dsb	sy
 8005058:	f3bf 8f6f 	isb	sy
 800505c:	e009      	b.n	8005072 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	3310      	adds	r3, #16
 8005062:	4618      	mov	r0, r3
 8005064:	f7ff fef2 	bl	8004e4c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	3324      	adds	r3, #36	; 0x24
 800506c:	4618      	mov	r0, r3
 800506e:	f7ff feed 	bl	8004e4c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005072:	f002 f85f 	bl	8007134 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005076:	2301      	movs	r3, #1
}
 8005078:	4618      	mov	r0, r3
 800507a:	3710      	adds	r7, #16
 800507c:	46bd      	mov	sp, r7
 800507e:	bd80      	pop	{r7, pc}
 8005080:	e000ed04 	.word	0xe000ed04

08005084 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005084:	b580      	push	{r7, lr}
 8005086:	b08e      	sub	sp, #56	; 0x38
 8005088:	af02      	add	r7, sp, #8
 800508a:	60f8      	str	r0, [r7, #12]
 800508c:	60b9      	str	r1, [r7, #8]
 800508e:	607a      	str	r2, [r7, #4]
 8005090:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	2b00      	cmp	r3, #0
 8005096:	d10a      	bne.n	80050ae <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8005098:	f04f 0350 	mov.w	r3, #80	; 0x50
 800509c:	f383 8811 	msr	BASEPRI, r3
 80050a0:	f3bf 8f6f 	isb	sy
 80050a4:	f3bf 8f4f 	dsb	sy
 80050a8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80050aa:	bf00      	nop
 80050ac:	e7fe      	b.n	80050ac <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80050ae:	683b      	ldr	r3, [r7, #0]
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d10a      	bne.n	80050ca <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80050b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050b8:	f383 8811 	msr	BASEPRI, r3
 80050bc:	f3bf 8f6f 	isb	sy
 80050c0:	f3bf 8f4f 	dsb	sy
 80050c4:	627b      	str	r3, [r7, #36]	; 0x24
}
 80050c6:	bf00      	nop
 80050c8:	e7fe      	b.n	80050c8 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d002      	beq.n	80050d6 <xQueueGenericCreateStatic+0x52>
 80050d0:	68bb      	ldr	r3, [r7, #8]
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d001      	beq.n	80050da <xQueueGenericCreateStatic+0x56>
 80050d6:	2301      	movs	r3, #1
 80050d8:	e000      	b.n	80050dc <xQueueGenericCreateStatic+0x58>
 80050da:	2300      	movs	r3, #0
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d10a      	bne.n	80050f6 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80050e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050e4:	f383 8811 	msr	BASEPRI, r3
 80050e8:	f3bf 8f6f 	isb	sy
 80050ec:	f3bf 8f4f 	dsb	sy
 80050f0:	623b      	str	r3, [r7, #32]
}
 80050f2:	bf00      	nop
 80050f4:	e7fe      	b.n	80050f4 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d102      	bne.n	8005102 <xQueueGenericCreateStatic+0x7e>
 80050fc:	68bb      	ldr	r3, [r7, #8]
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d101      	bne.n	8005106 <xQueueGenericCreateStatic+0x82>
 8005102:	2301      	movs	r3, #1
 8005104:	e000      	b.n	8005108 <xQueueGenericCreateStatic+0x84>
 8005106:	2300      	movs	r3, #0
 8005108:	2b00      	cmp	r3, #0
 800510a:	d10a      	bne.n	8005122 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800510c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005110:	f383 8811 	msr	BASEPRI, r3
 8005114:	f3bf 8f6f 	isb	sy
 8005118:	f3bf 8f4f 	dsb	sy
 800511c:	61fb      	str	r3, [r7, #28]
}
 800511e:	bf00      	nop
 8005120:	e7fe      	b.n	8005120 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005122:	2350      	movs	r3, #80	; 0x50
 8005124:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005126:	697b      	ldr	r3, [r7, #20]
 8005128:	2b50      	cmp	r3, #80	; 0x50
 800512a:	d00a      	beq.n	8005142 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800512c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005130:	f383 8811 	msr	BASEPRI, r3
 8005134:	f3bf 8f6f 	isb	sy
 8005138:	f3bf 8f4f 	dsb	sy
 800513c:	61bb      	str	r3, [r7, #24]
}
 800513e:	bf00      	nop
 8005140:	e7fe      	b.n	8005140 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005142:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005144:	683b      	ldr	r3, [r7, #0]
 8005146:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8005148:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800514a:	2b00      	cmp	r3, #0
 800514c:	d00d      	beq.n	800516a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800514e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005150:	2201      	movs	r2, #1
 8005152:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005156:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800515a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800515c:	9300      	str	r3, [sp, #0]
 800515e:	4613      	mov	r3, r2
 8005160:	687a      	ldr	r2, [r7, #4]
 8005162:	68b9      	ldr	r1, [r7, #8]
 8005164:	68f8      	ldr	r0, [r7, #12]
 8005166:	f000 f805 	bl	8005174 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800516a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800516c:	4618      	mov	r0, r3
 800516e:	3730      	adds	r7, #48	; 0x30
 8005170:	46bd      	mov	sp, r7
 8005172:	bd80      	pop	{r7, pc}

08005174 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005174:	b580      	push	{r7, lr}
 8005176:	b084      	sub	sp, #16
 8005178:	af00      	add	r7, sp, #0
 800517a:	60f8      	str	r0, [r7, #12]
 800517c:	60b9      	str	r1, [r7, #8]
 800517e:	607a      	str	r2, [r7, #4]
 8005180:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005182:	68bb      	ldr	r3, [r7, #8]
 8005184:	2b00      	cmp	r3, #0
 8005186:	d103      	bne.n	8005190 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005188:	69bb      	ldr	r3, [r7, #24]
 800518a:	69ba      	ldr	r2, [r7, #24]
 800518c:	601a      	str	r2, [r3, #0]
 800518e:	e002      	b.n	8005196 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005190:	69bb      	ldr	r3, [r7, #24]
 8005192:	687a      	ldr	r2, [r7, #4]
 8005194:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005196:	69bb      	ldr	r3, [r7, #24]
 8005198:	68fa      	ldr	r2, [r7, #12]
 800519a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800519c:	69bb      	ldr	r3, [r7, #24]
 800519e:	68ba      	ldr	r2, [r7, #8]
 80051a0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80051a2:	2101      	movs	r1, #1
 80051a4:	69b8      	ldr	r0, [r7, #24]
 80051a6:	f7ff ff05 	bl	8004fb4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80051aa:	69bb      	ldr	r3, [r7, #24]
 80051ac:	78fa      	ldrb	r2, [r7, #3]
 80051ae:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80051b2:	bf00      	nop
 80051b4:	3710      	adds	r7, #16
 80051b6:	46bd      	mov	sp, r7
 80051b8:	bd80      	pop	{r7, pc}
	...

080051bc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80051bc:	b580      	push	{r7, lr}
 80051be:	b08e      	sub	sp, #56	; 0x38
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	60f8      	str	r0, [r7, #12]
 80051c4:	60b9      	str	r1, [r7, #8]
 80051c6:	607a      	str	r2, [r7, #4]
 80051c8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80051ca:	2300      	movs	r3, #0
 80051cc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80051d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d10a      	bne.n	80051ee <xQueueGenericSend+0x32>
	__asm volatile
 80051d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051dc:	f383 8811 	msr	BASEPRI, r3
 80051e0:	f3bf 8f6f 	isb	sy
 80051e4:	f3bf 8f4f 	dsb	sy
 80051e8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80051ea:	bf00      	nop
 80051ec:	e7fe      	b.n	80051ec <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80051ee:	68bb      	ldr	r3, [r7, #8]
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d103      	bne.n	80051fc <xQueueGenericSend+0x40>
 80051f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d101      	bne.n	8005200 <xQueueGenericSend+0x44>
 80051fc:	2301      	movs	r3, #1
 80051fe:	e000      	b.n	8005202 <xQueueGenericSend+0x46>
 8005200:	2300      	movs	r3, #0
 8005202:	2b00      	cmp	r3, #0
 8005204:	d10a      	bne.n	800521c <xQueueGenericSend+0x60>
	__asm volatile
 8005206:	f04f 0350 	mov.w	r3, #80	; 0x50
 800520a:	f383 8811 	msr	BASEPRI, r3
 800520e:	f3bf 8f6f 	isb	sy
 8005212:	f3bf 8f4f 	dsb	sy
 8005216:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005218:	bf00      	nop
 800521a:	e7fe      	b.n	800521a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800521c:	683b      	ldr	r3, [r7, #0]
 800521e:	2b02      	cmp	r3, #2
 8005220:	d103      	bne.n	800522a <xQueueGenericSend+0x6e>
 8005222:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005224:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005226:	2b01      	cmp	r3, #1
 8005228:	d101      	bne.n	800522e <xQueueGenericSend+0x72>
 800522a:	2301      	movs	r3, #1
 800522c:	e000      	b.n	8005230 <xQueueGenericSend+0x74>
 800522e:	2300      	movs	r3, #0
 8005230:	2b00      	cmp	r3, #0
 8005232:	d10a      	bne.n	800524a <xQueueGenericSend+0x8e>
	__asm volatile
 8005234:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005238:	f383 8811 	msr	BASEPRI, r3
 800523c:	f3bf 8f6f 	isb	sy
 8005240:	f3bf 8f4f 	dsb	sy
 8005244:	623b      	str	r3, [r7, #32]
}
 8005246:	bf00      	nop
 8005248:	e7fe      	b.n	8005248 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800524a:	f001 f9e7 	bl	800661c <xTaskGetSchedulerState>
 800524e:	4603      	mov	r3, r0
 8005250:	2b00      	cmp	r3, #0
 8005252:	d102      	bne.n	800525a <xQueueGenericSend+0x9e>
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	2b00      	cmp	r3, #0
 8005258:	d101      	bne.n	800525e <xQueueGenericSend+0xa2>
 800525a:	2301      	movs	r3, #1
 800525c:	e000      	b.n	8005260 <xQueueGenericSend+0xa4>
 800525e:	2300      	movs	r3, #0
 8005260:	2b00      	cmp	r3, #0
 8005262:	d10a      	bne.n	800527a <xQueueGenericSend+0xbe>
	__asm volatile
 8005264:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005268:	f383 8811 	msr	BASEPRI, r3
 800526c:	f3bf 8f6f 	isb	sy
 8005270:	f3bf 8f4f 	dsb	sy
 8005274:	61fb      	str	r3, [r7, #28]
}
 8005276:	bf00      	nop
 8005278:	e7fe      	b.n	8005278 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800527a:	f001 ff2b 	bl	80070d4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800527e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005280:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005282:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005284:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005286:	429a      	cmp	r2, r3
 8005288:	d302      	bcc.n	8005290 <xQueueGenericSend+0xd4>
 800528a:	683b      	ldr	r3, [r7, #0]
 800528c:	2b02      	cmp	r3, #2
 800528e:	d129      	bne.n	80052e4 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005290:	683a      	ldr	r2, [r7, #0]
 8005292:	68b9      	ldr	r1, [r7, #8]
 8005294:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005296:	f000 fa0b 	bl	80056b0 <prvCopyDataToQueue>
 800529a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800529c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800529e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d010      	beq.n	80052c6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80052a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052a6:	3324      	adds	r3, #36	; 0x24
 80052a8:	4618      	mov	r0, r3
 80052aa:	f000 fff5 	bl	8006298 <xTaskRemoveFromEventList>
 80052ae:	4603      	mov	r3, r0
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d013      	beq.n	80052dc <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80052b4:	4b3f      	ldr	r3, [pc, #252]	; (80053b4 <xQueueGenericSend+0x1f8>)
 80052b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80052ba:	601a      	str	r2, [r3, #0]
 80052bc:	f3bf 8f4f 	dsb	sy
 80052c0:	f3bf 8f6f 	isb	sy
 80052c4:	e00a      	b.n	80052dc <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80052c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d007      	beq.n	80052dc <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80052cc:	4b39      	ldr	r3, [pc, #228]	; (80053b4 <xQueueGenericSend+0x1f8>)
 80052ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80052d2:	601a      	str	r2, [r3, #0]
 80052d4:	f3bf 8f4f 	dsb	sy
 80052d8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80052dc:	f001 ff2a 	bl	8007134 <vPortExitCritical>
				return pdPASS;
 80052e0:	2301      	movs	r3, #1
 80052e2:	e063      	b.n	80053ac <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d103      	bne.n	80052f2 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80052ea:	f001 ff23 	bl	8007134 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80052ee:	2300      	movs	r3, #0
 80052f0:	e05c      	b.n	80053ac <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80052f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d106      	bne.n	8005306 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80052f8:	f107 0314 	add.w	r3, r7, #20
 80052fc:	4618      	mov	r0, r3
 80052fe:	f001 f82f 	bl	8006360 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005302:	2301      	movs	r3, #1
 8005304:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005306:	f001 ff15 	bl	8007134 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800530a:	f000 fd9b 	bl	8005e44 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800530e:	f001 fee1 	bl	80070d4 <vPortEnterCritical>
 8005312:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005314:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005318:	b25b      	sxtb	r3, r3
 800531a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800531e:	d103      	bne.n	8005328 <xQueueGenericSend+0x16c>
 8005320:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005322:	2200      	movs	r2, #0
 8005324:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005328:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800532a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800532e:	b25b      	sxtb	r3, r3
 8005330:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005334:	d103      	bne.n	800533e <xQueueGenericSend+0x182>
 8005336:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005338:	2200      	movs	r2, #0
 800533a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800533e:	f001 fef9 	bl	8007134 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005342:	1d3a      	adds	r2, r7, #4
 8005344:	f107 0314 	add.w	r3, r7, #20
 8005348:	4611      	mov	r1, r2
 800534a:	4618      	mov	r0, r3
 800534c:	f001 f81e 	bl	800638c <xTaskCheckForTimeOut>
 8005350:	4603      	mov	r3, r0
 8005352:	2b00      	cmp	r3, #0
 8005354:	d124      	bne.n	80053a0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005356:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005358:	f000 faa2 	bl	80058a0 <prvIsQueueFull>
 800535c:	4603      	mov	r3, r0
 800535e:	2b00      	cmp	r3, #0
 8005360:	d018      	beq.n	8005394 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005362:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005364:	3310      	adds	r3, #16
 8005366:	687a      	ldr	r2, [r7, #4]
 8005368:	4611      	mov	r1, r2
 800536a:	4618      	mov	r0, r3
 800536c:	f000 ff44 	bl	80061f8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005370:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005372:	f000 fa2d 	bl	80057d0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005376:	f000 fd73 	bl	8005e60 <xTaskResumeAll>
 800537a:	4603      	mov	r3, r0
 800537c:	2b00      	cmp	r3, #0
 800537e:	f47f af7c 	bne.w	800527a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8005382:	4b0c      	ldr	r3, [pc, #48]	; (80053b4 <xQueueGenericSend+0x1f8>)
 8005384:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005388:	601a      	str	r2, [r3, #0]
 800538a:	f3bf 8f4f 	dsb	sy
 800538e:	f3bf 8f6f 	isb	sy
 8005392:	e772      	b.n	800527a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005394:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005396:	f000 fa1b 	bl	80057d0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800539a:	f000 fd61 	bl	8005e60 <xTaskResumeAll>
 800539e:	e76c      	b.n	800527a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80053a0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80053a2:	f000 fa15 	bl	80057d0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80053a6:	f000 fd5b 	bl	8005e60 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80053aa:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80053ac:	4618      	mov	r0, r3
 80053ae:	3738      	adds	r7, #56	; 0x38
 80053b0:	46bd      	mov	sp, r7
 80053b2:	bd80      	pop	{r7, pc}
 80053b4:	e000ed04 	.word	0xe000ed04

080053b8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80053b8:	b580      	push	{r7, lr}
 80053ba:	b090      	sub	sp, #64	; 0x40
 80053bc:	af00      	add	r7, sp, #0
 80053be:	60f8      	str	r0, [r7, #12]
 80053c0:	60b9      	str	r1, [r7, #8]
 80053c2:	607a      	str	r2, [r7, #4]
 80053c4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80053ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d10a      	bne.n	80053e6 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80053d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053d4:	f383 8811 	msr	BASEPRI, r3
 80053d8:	f3bf 8f6f 	isb	sy
 80053dc:	f3bf 8f4f 	dsb	sy
 80053e0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80053e2:	bf00      	nop
 80053e4:	e7fe      	b.n	80053e4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80053e6:	68bb      	ldr	r3, [r7, #8]
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d103      	bne.n	80053f4 <xQueueGenericSendFromISR+0x3c>
 80053ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d101      	bne.n	80053f8 <xQueueGenericSendFromISR+0x40>
 80053f4:	2301      	movs	r3, #1
 80053f6:	e000      	b.n	80053fa <xQueueGenericSendFromISR+0x42>
 80053f8:	2300      	movs	r3, #0
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d10a      	bne.n	8005414 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80053fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005402:	f383 8811 	msr	BASEPRI, r3
 8005406:	f3bf 8f6f 	isb	sy
 800540a:	f3bf 8f4f 	dsb	sy
 800540e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005410:	bf00      	nop
 8005412:	e7fe      	b.n	8005412 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005414:	683b      	ldr	r3, [r7, #0]
 8005416:	2b02      	cmp	r3, #2
 8005418:	d103      	bne.n	8005422 <xQueueGenericSendFromISR+0x6a>
 800541a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800541c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800541e:	2b01      	cmp	r3, #1
 8005420:	d101      	bne.n	8005426 <xQueueGenericSendFromISR+0x6e>
 8005422:	2301      	movs	r3, #1
 8005424:	e000      	b.n	8005428 <xQueueGenericSendFromISR+0x70>
 8005426:	2300      	movs	r3, #0
 8005428:	2b00      	cmp	r3, #0
 800542a:	d10a      	bne.n	8005442 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800542c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005430:	f383 8811 	msr	BASEPRI, r3
 8005434:	f3bf 8f6f 	isb	sy
 8005438:	f3bf 8f4f 	dsb	sy
 800543c:	623b      	str	r3, [r7, #32]
}
 800543e:	bf00      	nop
 8005440:	e7fe      	b.n	8005440 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005442:	f001 ff29 	bl	8007298 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005446:	f3ef 8211 	mrs	r2, BASEPRI
 800544a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800544e:	f383 8811 	msr	BASEPRI, r3
 8005452:	f3bf 8f6f 	isb	sy
 8005456:	f3bf 8f4f 	dsb	sy
 800545a:	61fa      	str	r2, [r7, #28]
 800545c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800545e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005460:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005462:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005464:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005466:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005468:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800546a:	429a      	cmp	r2, r3
 800546c:	d302      	bcc.n	8005474 <xQueueGenericSendFromISR+0xbc>
 800546e:	683b      	ldr	r3, [r7, #0]
 8005470:	2b02      	cmp	r3, #2
 8005472:	d12f      	bne.n	80054d4 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005474:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005476:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800547a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800547e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005480:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005482:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005484:	683a      	ldr	r2, [r7, #0]
 8005486:	68b9      	ldr	r1, [r7, #8]
 8005488:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800548a:	f000 f911 	bl	80056b0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800548e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8005492:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005496:	d112      	bne.n	80054be <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005498:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800549a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800549c:	2b00      	cmp	r3, #0
 800549e:	d016      	beq.n	80054ce <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80054a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054a2:	3324      	adds	r3, #36	; 0x24
 80054a4:	4618      	mov	r0, r3
 80054a6:	f000 fef7 	bl	8006298 <xTaskRemoveFromEventList>
 80054aa:	4603      	mov	r3, r0
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d00e      	beq.n	80054ce <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d00b      	beq.n	80054ce <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	2201      	movs	r2, #1
 80054ba:	601a      	str	r2, [r3, #0]
 80054bc:	e007      	b.n	80054ce <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80054be:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80054c2:	3301      	adds	r3, #1
 80054c4:	b2db      	uxtb	r3, r3
 80054c6:	b25a      	sxtb	r2, r3
 80054c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80054ce:	2301      	movs	r3, #1
 80054d0:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80054d2:	e001      	b.n	80054d8 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80054d4:	2300      	movs	r3, #0
 80054d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80054d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054da:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80054dc:	697b      	ldr	r3, [r7, #20]
 80054de:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80054e2:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80054e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80054e6:	4618      	mov	r0, r3
 80054e8:	3740      	adds	r7, #64	; 0x40
 80054ea:	46bd      	mov	sp, r7
 80054ec:	bd80      	pop	{r7, pc}
	...

080054f0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80054f0:	b580      	push	{r7, lr}
 80054f2:	b08c      	sub	sp, #48	; 0x30
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	60f8      	str	r0, [r7, #12]
 80054f8:	60b9      	str	r1, [r7, #8]
 80054fa:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80054fc:	2300      	movs	r3, #0
 80054fe:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005504:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005506:	2b00      	cmp	r3, #0
 8005508:	d10a      	bne.n	8005520 <xQueueReceive+0x30>
	__asm volatile
 800550a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800550e:	f383 8811 	msr	BASEPRI, r3
 8005512:	f3bf 8f6f 	isb	sy
 8005516:	f3bf 8f4f 	dsb	sy
 800551a:	623b      	str	r3, [r7, #32]
}
 800551c:	bf00      	nop
 800551e:	e7fe      	b.n	800551e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005520:	68bb      	ldr	r3, [r7, #8]
 8005522:	2b00      	cmp	r3, #0
 8005524:	d103      	bne.n	800552e <xQueueReceive+0x3e>
 8005526:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800552a:	2b00      	cmp	r3, #0
 800552c:	d101      	bne.n	8005532 <xQueueReceive+0x42>
 800552e:	2301      	movs	r3, #1
 8005530:	e000      	b.n	8005534 <xQueueReceive+0x44>
 8005532:	2300      	movs	r3, #0
 8005534:	2b00      	cmp	r3, #0
 8005536:	d10a      	bne.n	800554e <xQueueReceive+0x5e>
	__asm volatile
 8005538:	f04f 0350 	mov.w	r3, #80	; 0x50
 800553c:	f383 8811 	msr	BASEPRI, r3
 8005540:	f3bf 8f6f 	isb	sy
 8005544:	f3bf 8f4f 	dsb	sy
 8005548:	61fb      	str	r3, [r7, #28]
}
 800554a:	bf00      	nop
 800554c:	e7fe      	b.n	800554c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800554e:	f001 f865 	bl	800661c <xTaskGetSchedulerState>
 8005552:	4603      	mov	r3, r0
 8005554:	2b00      	cmp	r3, #0
 8005556:	d102      	bne.n	800555e <xQueueReceive+0x6e>
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	2b00      	cmp	r3, #0
 800555c:	d101      	bne.n	8005562 <xQueueReceive+0x72>
 800555e:	2301      	movs	r3, #1
 8005560:	e000      	b.n	8005564 <xQueueReceive+0x74>
 8005562:	2300      	movs	r3, #0
 8005564:	2b00      	cmp	r3, #0
 8005566:	d10a      	bne.n	800557e <xQueueReceive+0x8e>
	__asm volatile
 8005568:	f04f 0350 	mov.w	r3, #80	; 0x50
 800556c:	f383 8811 	msr	BASEPRI, r3
 8005570:	f3bf 8f6f 	isb	sy
 8005574:	f3bf 8f4f 	dsb	sy
 8005578:	61bb      	str	r3, [r7, #24]
}
 800557a:	bf00      	nop
 800557c:	e7fe      	b.n	800557c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800557e:	f001 fda9 	bl	80070d4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005582:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005584:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005586:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800558a:	2b00      	cmp	r3, #0
 800558c:	d01f      	beq.n	80055ce <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800558e:	68b9      	ldr	r1, [r7, #8]
 8005590:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005592:	f000 f8f7 	bl	8005784 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005598:	1e5a      	subs	r2, r3, #1
 800559a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800559c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800559e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055a0:	691b      	ldr	r3, [r3, #16]
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d00f      	beq.n	80055c6 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80055a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055a8:	3310      	adds	r3, #16
 80055aa:	4618      	mov	r0, r3
 80055ac:	f000 fe74 	bl	8006298 <xTaskRemoveFromEventList>
 80055b0:	4603      	mov	r3, r0
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d007      	beq.n	80055c6 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80055b6:	4b3d      	ldr	r3, [pc, #244]	; (80056ac <xQueueReceive+0x1bc>)
 80055b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80055bc:	601a      	str	r2, [r3, #0]
 80055be:	f3bf 8f4f 	dsb	sy
 80055c2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80055c6:	f001 fdb5 	bl	8007134 <vPortExitCritical>
				return pdPASS;
 80055ca:	2301      	movs	r3, #1
 80055cc:	e069      	b.n	80056a2 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d103      	bne.n	80055dc <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80055d4:	f001 fdae 	bl	8007134 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80055d8:	2300      	movs	r3, #0
 80055da:	e062      	b.n	80056a2 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80055dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d106      	bne.n	80055f0 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80055e2:	f107 0310 	add.w	r3, r7, #16
 80055e6:	4618      	mov	r0, r3
 80055e8:	f000 feba 	bl	8006360 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80055ec:	2301      	movs	r3, #1
 80055ee:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80055f0:	f001 fda0 	bl	8007134 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80055f4:	f000 fc26 	bl	8005e44 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80055f8:	f001 fd6c 	bl	80070d4 <vPortEnterCritical>
 80055fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055fe:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005602:	b25b      	sxtb	r3, r3
 8005604:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005608:	d103      	bne.n	8005612 <xQueueReceive+0x122>
 800560a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800560c:	2200      	movs	r2, #0
 800560e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005612:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005614:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005618:	b25b      	sxtb	r3, r3
 800561a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800561e:	d103      	bne.n	8005628 <xQueueReceive+0x138>
 8005620:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005622:	2200      	movs	r2, #0
 8005624:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005628:	f001 fd84 	bl	8007134 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800562c:	1d3a      	adds	r2, r7, #4
 800562e:	f107 0310 	add.w	r3, r7, #16
 8005632:	4611      	mov	r1, r2
 8005634:	4618      	mov	r0, r3
 8005636:	f000 fea9 	bl	800638c <xTaskCheckForTimeOut>
 800563a:	4603      	mov	r3, r0
 800563c:	2b00      	cmp	r3, #0
 800563e:	d123      	bne.n	8005688 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005640:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005642:	f000 f917 	bl	8005874 <prvIsQueueEmpty>
 8005646:	4603      	mov	r3, r0
 8005648:	2b00      	cmp	r3, #0
 800564a:	d017      	beq.n	800567c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800564c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800564e:	3324      	adds	r3, #36	; 0x24
 8005650:	687a      	ldr	r2, [r7, #4]
 8005652:	4611      	mov	r1, r2
 8005654:	4618      	mov	r0, r3
 8005656:	f000 fdcf 	bl	80061f8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800565a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800565c:	f000 f8b8 	bl	80057d0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005660:	f000 fbfe 	bl	8005e60 <xTaskResumeAll>
 8005664:	4603      	mov	r3, r0
 8005666:	2b00      	cmp	r3, #0
 8005668:	d189      	bne.n	800557e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800566a:	4b10      	ldr	r3, [pc, #64]	; (80056ac <xQueueReceive+0x1bc>)
 800566c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005670:	601a      	str	r2, [r3, #0]
 8005672:	f3bf 8f4f 	dsb	sy
 8005676:	f3bf 8f6f 	isb	sy
 800567a:	e780      	b.n	800557e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800567c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800567e:	f000 f8a7 	bl	80057d0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005682:	f000 fbed 	bl	8005e60 <xTaskResumeAll>
 8005686:	e77a      	b.n	800557e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005688:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800568a:	f000 f8a1 	bl	80057d0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800568e:	f000 fbe7 	bl	8005e60 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005692:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005694:	f000 f8ee 	bl	8005874 <prvIsQueueEmpty>
 8005698:	4603      	mov	r3, r0
 800569a:	2b00      	cmp	r3, #0
 800569c:	f43f af6f 	beq.w	800557e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80056a0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80056a2:	4618      	mov	r0, r3
 80056a4:	3730      	adds	r7, #48	; 0x30
 80056a6:	46bd      	mov	sp, r7
 80056a8:	bd80      	pop	{r7, pc}
 80056aa:	bf00      	nop
 80056ac:	e000ed04 	.word	0xe000ed04

080056b0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80056b0:	b580      	push	{r7, lr}
 80056b2:	b086      	sub	sp, #24
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	60f8      	str	r0, [r7, #12]
 80056b8:	60b9      	str	r1, [r7, #8]
 80056ba:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80056bc:	2300      	movs	r3, #0
 80056be:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056c4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d10d      	bne.n	80056ea <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d14d      	bne.n	8005772 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	689b      	ldr	r3, [r3, #8]
 80056da:	4618      	mov	r0, r3
 80056dc:	f000 ffbc 	bl	8006658 <xTaskPriorityDisinherit>
 80056e0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	2200      	movs	r2, #0
 80056e6:	609a      	str	r2, [r3, #8]
 80056e8:	e043      	b.n	8005772 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d119      	bne.n	8005724 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	6858      	ldr	r0, [r3, #4]
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056f8:	461a      	mov	r2, r3
 80056fa:	68b9      	ldr	r1, [r7, #8]
 80056fc:	f002 f81c 	bl	8007738 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	685a      	ldr	r2, [r3, #4]
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005708:	441a      	add	r2, r3
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	685a      	ldr	r2, [r3, #4]
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	689b      	ldr	r3, [r3, #8]
 8005716:	429a      	cmp	r2, r3
 8005718:	d32b      	bcc.n	8005772 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	681a      	ldr	r2, [r3, #0]
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	605a      	str	r2, [r3, #4]
 8005722:	e026      	b.n	8005772 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	68d8      	ldr	r0, [r3, #12]
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800572c:	461a      	mov	r2, r3
 800572e:	68b9      	ldr	r1, [r7, #8]
 8005730:	f002 f802 	bl	8007738 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	68da      	ldr	r2, [r3, #12]
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800573c:	425b      	negs	r3, r3
 800573e:	441a      	add	r2, r3
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	68da      	ldr	r2, [r3, #12]
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	429a      	cmp	r2, r3
 800574e:	d207      	bcs.n	8005760 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	689a      	ldr	r2, [r3, #8]
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005758:	425b      	negs	r3, r3
 800575a:	441a      	add	r2, r3
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	2b02      	cmp	r3, #2
 8005764:	d105      	bne.n	8005772 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005766:	693b      	ldr	r3, [r7, #16]
 8005768:	2b00      	cmp	r3, #0
 800576a:	d002      	beq.n	8005772 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800576c:	693b      	ldr	r3, [r7, #16]
 800576e:	3b01      	subs	r3, #1
 8005770:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005772:	693b      	ldr	r3, [r7, #16]
 8005774:	1c5a      	adds	r2, r3, #1
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800577a:	697b      	ldr	r3, [r7, #20]
}
 800577c:	4618      	mov	r0, r3
 800577e:	3718      	adds	r7, #24
 8005780:	46bd      	mov	sp, r7
 8005782:	bd80      	pop	{r7, pc}

08005784 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005784:	b580      	push	{r7, lr}
 8005786:	b082      	sub	sp, #8
 8005788:	af00      	add	r7, sp, #0
 800578a:	6078      	str	r0, [r7, #4]
 800578c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005792:	2b00      	cmp	r3, #0
 8005794:	d018      	beq.n	80057c8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	68da      	ldr	r2, [r3, #12]
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800579e:	441a      	add	r2, r3
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	68da      	ldr	r2, [r3, #12]
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	689b      	ldr	r3, [r3, #8]
 80057ac:	429a      	cmp	r2, r3
 80057ae:	d303      	bcc.n	80057b8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681a      	ldr	r2, [r3, #0]
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	68d9      	ldr	r1, [r3, #12]
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057c0:	461a      	mov	r2, r3
 80057c2:	6838      	ldr	r0, [r7, #0]
 80057c4:	f001 ffb8 	bl	8007738 <memcpy>
	}
}
 80057c8:	bf00      	nop
 80057ca:	3708      	adds	r7, #8
 80057cc:	46bd      	mov	sp, r7
 80057ce:	bd80      	pop	{r7, pc}

080057d0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80057d0:	b580      	push	{r7, lr}
 80057d2:	b084      	sub	sp, #16
 80057d4:	af00      	add	r7, sp, #0
 80057d6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80057d8:	f001 fc7c 	bl	80070d4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80057e2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80057e4:	e011      	b.n	800580a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d012      	beq.n	8005814 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	3324      	adds	r3, #36	; 0x24
 80057f2:	4618      	mov	r0, r3
 80057f4:	f000 fd50 	bl	8006298 <xTaskRemoveFromEventList>
 80057f8:	4603      	mov	r3, r0
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d001      	beq.n	8005802 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80057fe:	f000 fe27 	bl	8006450 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005802:	7bfb      	ldrb	r3, [r7, #15]
 8005804:	3b01      	subs	r3, #1
 8005806:	b2db      	uxtb	r3, r3
 8005808:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800580a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800580e:	2b00      	cmp	r3, #0
 8005810:	dce9      	bgt.n	80057e6 <prvUnlockQueue+0x16>
 8005812:	e000      	b.n	8005816 <prvUnlockQueue+0x46>
					break;
 8005814:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	22ff      	movs	r2, #255	; 0xff
 800581a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800581e:	f001 fc89 	bl	8007134 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005822:	f001 fc57 	bl	80070d4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800582c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800582e:	e011      	b.n	8005854 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	691b      	ldr	r3, [r3, #16]
 8005834:	2b00      	cmp	r3, #0
 8005836:	d012      	beq.n	800585e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	3310      	adds	r3, #16
 800583c:	4618      	mov	r0, r3
 800583e:	f000 fd2b 	bl	8006298 <xTaskRemoveFromEventList>
 8005842:	4603      	mov	r3, r0
 8005844:	2b00      	cmp	r3, #0
 8005846:	d001      	beq.n	800584c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005848:	f000 fe02 	bl	8006450 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800584c:	7bbb      	ldrb	r3, [r7, #14]
 800584e:	3b01      	subs	r3, #1
 8005850:	b2db      	uxtb	r3, r3
 8005852:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005854:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005858:	2b00      	cmp	r3, #0
 800585a:	dce9      	bgt.n	8005830 <prvUnlockQueue+0x60>
 800585c:	e000      	b.n	8005860 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800585e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	22ff      	movs	r2, #255	; 0xff
 8005864:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005868:	f001 fc64 	bl	8007134 <vPortExitCritical>
}
 800586c:	bf00      	nop
 800586e:	3710      	adds	r7, #16
 8005870:	46bd      	mov	sp, r7
 8005872:	bd80      	pop	{r7, pc}

08005874 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005874:	b580      	push	{r7, lr}
 8005876:	b084      	sub	sp, #16
 8005878:	af00      	add	r7, sp, #0
 800587a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800587c:	f001 fc2a 	bl	80070d4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005884:	2b00      	cmp	r3, #0
 8005886:	d102      	bne.n	800588e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005888:	2301      	movs	r3, #1
 800588a:	60fb      	str	r3, [r7, #12]
 800588c:	e001      	b.n	8005892 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800588e:	2300      	movs	r3, #0
 8005890:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005892:	f001 fc4f 	bl	8007134 <vPortExitCritical>

	return xReturn;
 8005896:	68fb      	ldr	r3, [r7, #12]
}
 8005898:	4618      	mov	r0, r3
 800589a:	3710      	adds	r7, #16
 800589c:	46bd      	mov	sp, r7
 800589e:	bd80      	pop	{r7, pc}

080058a0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80058a0:	b580      	push	{r7, lr}
 80058a2:	b084      	sub	sp, #16
 80058a4:	af00      	add	r7, sp, #0
 80058a6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80058a8:	f001 fc14 	bl	80070d4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058b4:	429a      	cmp	r2, r3
 80058b6:	d102      	bne.n	80058be <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80058b8:	2301      	movs	r3, #1
 80058ba:	60fb      	str	r3, [r7, #12]
 80058bc:	e001      	b.n	80058c2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80058be:	2300      	movs	r3, #0
 80058c0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80058c2:	f001 fc37 	bl	8007134 <vPortExitCritical>

	return xReturn;
 80058c6:	68fb      	ldr	r3, [r7, #12]
}
 80058c8:	4618      	mov	r0, r3
 80058ca:	3710      	adds	r7, #16
 80058cc:	46bd      	mov	sp, r7
 80058ce:	bd80      	pop	{r7, pc}

080058d0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80058d0:	b480      	push	{r7}
 80058d2:	b085      	sub	sp, #20
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	6078      	str	r0, [r7, #4]
 80058d8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80058da:	2300      	movs	r3, #0
 80058dc:	60fb      	str	r3, [r7, #12]
 80058de:	e014      	b.n	800590a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80058e0:	4a0f      	ldr	r2, [pc, #60]	; (8005920 <vQueueAddToRegistry+0x50>)
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d10b      	bne.n	8005904 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80058ec:	490c      	ldr	r1, [pc, #48]	; (8005920 <vQueueAddToRegistry+0x50>)
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	683a      	ldr	r2, [r7, #0]
 80058f2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80058f6:	4a0a      	ldr	r2, [pc, #40]	; (8005920 <vQueueAddToRegistry+0x50>)
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	00db      	lsls	r3, r3, #3
 80058fc:	4413      	add	r3, r2
 80058fe:	687a      	ldr	r2, [r7, #4]
 8005900:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005902:	e006      	b.n	8005912 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	3301      	adds	r3, #1
 8005908:	60fb      	str	r3, [r7, #12]
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	2b07      	cmp	r3, #7
 800590e:	d9e7      	bls.n	80058e0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005910:	bf00      	nop
 8005912:	bf00      	nop
 8005914:	3714      	adds	r7, #20
 8005916:	46bd      	mov	sp, r7
 8005918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800591c:	4770      	bx	lr
 800591e:	bf00      	nop
 8005920:	20000a10 	.word	0x20000a10

08005924 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005924:	b580      	push	{r7, lr}
 8005926:	b086      	sub	sp, #24
 8005928:	af00      	add	r7, sp, #0
 800592a:	60f8      	str	r0, [r7, #12]
 800592c:	60b9      	str	r1, [r7, #8]
 800592e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005934:	f001 fbce 	bl	80070d4 <vPortEnterCritical>
 8005938:	697b      	ldr	r3, [r7, #20]
 800593a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800593e:	b25b      	sxtb	r3, r3
 8005940:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005944:	d103      	bne.n	800594e <vQueueWaitForMessageRestricted+0x2a>
 8005946:	697b      	ldr	r3, [r7, #20]
 8005948:	2200      	movs	r2, #0
 800594a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800594e:	697b      	ldr	r3, [r7, #20]
 8005950:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005954:	b25b      	sxtb	r3, r3
 8005956:	f1b3 3fff 	cmp.w	r3, #4294967295
 800595a:	d103      	bne.n	8005964 <vQueueWaitForMessageRestricted+0x40>
 800595c:	697b      	ldr	r3, [r7, #20]
 800595e:	2200      	movs	r2, #0
 8005960:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005964:	f001 fbe6 	bl	8007134 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005968:	697b      	ldr	r3, [r7, #20]
 800596a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800596c:	2b00      	cmp	r3, #0
 800596e:	d106      	bne.n	800597e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005970:	697b      	ldr	r3, [r7, #20]
 8005972:	3324      	adds	r3, #36	; 0x24
 8005974:	687a      	ldr	r2, [r7, #4]
 8005976:	68b9      	ldr	r1, [r7, #8]
 8005978:	4618      	mov	r0, r3
 800597a:	f000 fc61 	bl	8006240 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800597e:	6978      	ldr	r0, [r7, #20]
 8005980:	f7ff ff26 	bl	80057d0 <prvUnlockQueue>
	}
 8005984:	bf00      	nop
 8005986:	3718      	adds	r7, #24
 8005988:	46bd      	mov	sp, r7
 800598a:	bd80      	pop	{r7, pc}

0800598c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800598c:	b580      	push	{r7, lr}
 800598e:	b08e      	sub	sp, #56	; 0x38
 8005990:	af04      	add	r7, sp, #16
 8005992:	60f8      	str	r0, [r7, #12]
 8005994:	60b9      	str	r1, [r7, #8]
 8005996:	607a      	str	r2, [r7, #4]
 8005998:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800599a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800599c:	2b00      	cmp	r3, #0
 800599e:	d10a      	bne.n	80059b6 <xTaskCreateStatic+0x2a>
	__asm volatile
 80059a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059a4:	f383 8811 	msr	BASEPRI, r3
 80059a8:	f3bf 8f6f 	isb	sy
 80059ac:	f3bf 8f4f 	dsb	sy
 80059b0:	623b      	str	r3, [r7, #32]
}
 80059b2:	bf00      	nop
 80059b4:	e7fe      	b.n	80059b4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80059b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d10a      	bne.n	80059d2 <xTaskCreateStatic+0x46>
	__asm volatile
 80059bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059c0:	f383 8811 	msr	BASEPRI, r3
 80059c4:	f3bf 8f6f 	isb	sy
 80059c8:	f3bf 8f4f 	dsb	sy
 80059cc:	61fb      	str	r3, [r7, #28]
}
 80059ce:	bf00      	nop
 80059d0:	e7fe      	b.n	80059d0 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80059d2:	23bc      	movs	r3, #188	; 0xbc
 80059d4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80059d6:	693b      	ldr	r3, [r7, #16]
 80059d8:	2bbc      	cmp	r3, #188	; 0xbc
 80059da:	d00a      	beq.n	80059f2 <xTaskCreateStatic+0x66>
	__asm volatile
 80059dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059e0:	f383 8811 	msr	BASEPRI, r3
 80059e4:	f3bf 8f6f 	isb	sy
 80059e8:	f3bf 8f4f 	dsb	sy
 80059ec:	61bb      	str	r3, [r7, #24]
}
 80059ee:	bf00      	nop
 80059f0:	e7fe      	b.n	80059f0 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80059f2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80059f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d01e      	beq.n	8005a38 <xTaskCreateStatic+0xac>
 80059fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d01b      	beq.n	8005a38 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005a00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a02:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a06:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005a08:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a0c:	2202      	movs	r2, #2
 8005a0e:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005a12:	2300      	movs	r3, #0
 8005a14:	9303      	str	r3, [sp, #12]
 8005a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a18:	9302      	str	r3, [sp, #8]
 8005a1a:	f107 0314 	add.w	r3, r7, #20
 8005a1e:	9301      	str	r3, [sp, #4]
 8005a20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a22:	9300      	str	r3, [sp, #0]
 8005a24:	683b      	ldr	r3, [r7, #0]
 8005a26:	687a      	ldr	r2, [r7, #4]
 8005a28:	68b9      	ldr	r1, [r7, #8]
 8005a2a:	68f8      	ldr	r0, [r7, #12]
 8005a2c:	f000 f850 	bl	8005ad0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005a30:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005a32:	f000 f8f3 	bl	8005c1c <prvAddNewTaskToReadyList>
 8005a36:	e001      	b.n	8005a3c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8005a38:	2300      	movs	r3, #0
 8005a3a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005a3c:	697b      	ldr	r3, [r7, #20]
	}
 8005a3e:	4618      	mov	r0, r3
 8005a40:	3728      	adds	r7, #40	; 0x28
 8005a42:	46bd      	mov	sp, r7
 8005a44:	bd80      	pop	{r7, pc}

08005a46 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005a46:	b580      	push	{r7, lr}
 8005a48:	b08c      	sub	sp, #48	; 0x30
 8005a4a:	af04      	add	r7, sp, #16
 8005a4c:	60f8      	str	r0, [r7, #12]
 8005a4e:	60b9      	str	r1, [r7, #8]
 8005a50:	603b      	str	r3, [r7, #0]
 8005a52:	4613      	mov	r3, r2
 8005a54:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005a56:	88fb      	ldrh	r3, [r7, #6]
 8005a58:	009b      	lsls	r3, r3, #2
 8005a5a:	4618      	mov	r0, r3
 8005a5c:	f001 fc5c 	bl	8007318 <pvPortMalloc>
 8005a60:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005a62:	697b      	ldr	r3, [r7, #20]
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d00e      	beq.n	8005a86 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005a68:	20bc      	movs	r0, #188	; 0xbc
 8005a6a:	f001 fc55 	bl	8007318 <pvPortMalloc>
 8005a6e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005a70:	69fb      	ldr	r3, [r7, #28]
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d003      	beq.n	8005a7e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005a76:	69fb      	ldr	r3, [r7, #28]
 8005a78:	697a      	ldr	r2, [r7, #20]
 8005a7a:	631a      	str	r2, [r3, #48]	; 0x30
 8005a7c:	e005      	b.n	8005a8a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005a7e:	6978      	ldr	r0, [r7, #20]
 8005a80:	f001 fd16 	bl	80074b0 <vPortFree>
 8005a84:	e001      	b.n	8005a8a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005a86:	2300      	movs	r3, #0
 8005a88:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005a8a:	69fb      	ldr	r3, [r7, #28]
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d017      	beq.n	8005ac0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005a90:	69fb      	ldr	r3, [r7, #28]
 8005a92:	2200      	movs	r2, #0
 8005a94:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005a98:	88fa      	ldrh	r2, [r7, #6]
 8005a9a:	2300      	movs	r3, #0
 8005a9c:	9303      	str	r3, [sp, #12]
 8005a9e:	69fb      	ldr	r3, [r7, #28]
 8005aa0:	9302      	str	r3, [sp, #8]
 8005aa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005aa4:	9301      	str	r3, [sp, #4]
 8005aa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005aa8:	9300      	str	r3, [sp, #0]
 8005aaa:	683b      	ldr	r3, [r7, #0]
 8005aac:	68b9      	ldr	r1, [r7, #8]
 8005aae:	68f8      	ldr	r0, [r7, #12]
 8005ab0:	f000 f80e 	bl	8005ad0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005ab4:	69f8      	ldr	r0, [r7, #28]
 8005ab6:	f000 f8b1 	bl	8005c1c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005aba:	2301      	movs	r3, #1
 8005abc:	61bb      	str	r3, [r7, #24]
 8005abe:	e002      	b.n	8005ac6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005ac0:	f04f 33ff 	mov.w	r3, #4294967295
 8005ac4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005ac6:	69bb      	ldr	r3, [r7, #24]
	}
 8005ac8:	4618      	mov	r0, r3
 8005aca:	3720      	adds	r7, #32
 8005acc:	46bd      	mov	sp, r7
 8005ace:	bd80      	pop	{r7, pc}

08005ad0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005ad0:	b580      	push	{r7, lr}
 8005ad2:	b088      	sub	sp, #32
 8005ad4:	af00      	add	r7, sp, #0
 8005ad6:	60f8      	str	r0, [r7, #12]
 8005ad8:	60b9      	str	r1, [r7, #8]
 8005ada:	607a      	str	r2, [r7, #4]
 8005adc:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005ade:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ae0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	009b      	lsls	r3, r3, #2
 8005ae6:	461a      	mov	r2, r3
 8005ae8:	21a5      	movs	r1, #165	; 0xa5
 8005aea:	f001 fe33 	bl	8007754 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005aee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005af0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005af8:	3b01      	subs	r3, #1
 8005afa:	009b      	lsls	r3, r3, #2
 8005afc:	4413      	add	r3, r2
 8005afe:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005b00:	69bb      	ldr	r3, [r7, #24]
 8005b02:	f023 0307 	bic.w	r3, r3, #7
 8005b06:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005b08:	69bb      	ldr	r3, [r7, #24]
 8005b0a:	f003 0307 	and.w	r3, r3, #7
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d00a      	beq.n	8005b28 <prvInitialiseNewTask+0x58>
	__asm volatile
 8005b12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b16:	f383 8811 	msr	BASEPRI, r3
 8005b1a:	f3bf 8f6f 	isb	sy
 8005b1e:	f3bf 8f4f 	dsb	sy
 8005b22:	617b      	str	r3, [r7, #20]
}
 8005b24:	bf00      	nop
 8005b26:	e7fe      	b.n	8005b26 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005b28:	68bb      	ldr	r3, [r7, #8]
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d01f      	beq.n	8005b6e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005b2e:	2300      	movs	r3, #0
 8005b30:	61fb      	str	r3, [r7, #28]
 8005b32:	e012      	b.n	8005b5a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005b34:	68ba      	ldr	r2, [r7, #8]
 8005b36:	69fb      	ldr	r3, [r7, #28]
 8005b38:	4413      	add	r3, r2
 8005b3a:	7819      	ldrb	r1, [r3, #0]
 8005b3c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005b3e:	69fb      	ldr	r3, [r7, #28]
 8005b40:	4413      	add	r3, r2
 8005b42:	3334      	adds	r3, #52	; 0x34
 8005b44:	460a      	mov	r2, r1
 8005b46:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005b48:	68ba      	ldr	r2, [r7, #8]
 8005b4a:	69fb      	ldr	r3, [r7, #28]
 8005b4c:	4413      	add	r3, r2
 8005b4e:	781b      	ldrb	r3, [r3, #0]
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d006      	beq.n	8005b62 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005b54:	69fb      	ldr	r3, [r7, #28]
 8005b56:	3301      	adds	r3, #1
 8005b58:	61fb      	str	r3, [r7, #28]
 8005b5a:	69fb      	ldr	r3, [r7, #28]
 8005b5c:	2b0f      	cmp	r3, #15
 8005b5e:	d9e9      	bls.n	8005b34 <prvInitialiseNewTask+0x64>
 8005b60:	e000      	b.n	8005b64 <prvInitialiseNewTask+0x94>
			{
				break;
 8005b62:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005b64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b66:	2200      	movs	r2, #0
 8005b68:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005b6c:	e003      	b.n	8005b76 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005b6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b70:	2200      	movs	r2, #0
 8005b72:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005b76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b78:	2b37      	cmp	r3, #55	; 0x37
 8005b7a:	d901      	bls.n	8005b80 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005b7c:	2337      	movs	r3, #55	; 0x37
 8005b7e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005b80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b82:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005b84:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005b86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b88:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005b8a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005b8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b8e:	2200      	movs	r2, #0
 8005b90:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005b92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b94:	3304      	adds	r3, #4
 8005b96:	4618      	mov	r0, r3
 8005b98:	f7ff f978 	bl	8004e8c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005b9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b9e:	3318      	adds	r3, #24
 8005ba0:	4618      	mov	r0, r3
 8005ba2:	f7ff f973 	bl	8004e8c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005ba6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ba8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005baa:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005bac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bae:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005bb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bb4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005bb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bb8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005bba:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005bbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bbe:	2200      	movs	r2, #0
 8005bc0:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005bc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bc6:	2200      	movs	r2, #0
 8005bc8:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8005bcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bce:	3354      	adds	r3, #84	; 0x54
 8005bd0:	2260      	movs	r2, #96	; 0x60
 8005bd2:	2100      	movs	r1, #0
 8005bd4:	4618      	mov	r0, r3
 8005bd6:	f001 fdbd 	bl	8007754 <memset>
 8005bda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bdc:	4a0c      	ldr	r2, [pc, #48]	; (8005c10 <prvInitialiseNewTask+0x140>)
 8005bde:	659a      	str	r2, [r3, #88]	; 0x58
 8005be0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005be2:	4a0c      	ldr	r2, [pc, #48]	; (8005c14 <prvInitialiseNewTask+0x144>)
 8005be4:	65da      	str	r2, [r3, #92]	; 0x5c
 8005be6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005be8:	4a0b      	ldr	r2, [pc, #44]	; (8005c18 <prvInitialiseNewTask+0x148>)
 8005bea:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005bec:	683a      	ldr	r2, [r7, #0]
 8005bee:	68f9      	ldr	r1, [r7, #12]
 8005bf0:	69b8      	ldr	r0, [r7, #24]
 8005bf2:	f001 f941 	bl	8006e78 <pxPortInitialiseStack>
 8005bf6:	4602      	mov	r2, r0
 8005bf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bfa:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005bfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d002      	beq.n	8005c08 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005c02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c04:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005c06:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005c08:	bf00      	nop
 8005c0a:	3720      	adds	r7, #32
 8005c0c:	46bd      	mov	sp, r7
 8005c0e:	bd80      	pop	{r7, pc}
 8005c10:	080079b0 	.word	0x080079b0
 8005c14:	080079d0 	.word	0x080079d0
 8005c18:	08007990 	.word	0x08007990

08005c1c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005c1c:	b580      	push	{r7, lr}
 8005c1e:	b082      	sub	sp, #8
 8005c20:	af00      	add	r7, sp, #0
 8005c22:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005c24:	f001 fa56 	bl	80070d4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005c28:	4b2d      	ldr	r3, [pc, #180]	; (8005ce0 <prvAddNewTaskToReadyList+0xc4>)
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	3301      	adds	r3, #1
 8005c2e:	4a2c      	ldr	r2, [pc, #176]	; (8005ce0 <prvAddNewTaskToReadyList+0xc4>)
 8005c30:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005c32:	4b2c      	ldr	r3, [pc, #176]	; (8005ce4 <prvAddNewTaskToReadyList+0xc8>)
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d109      	bne.n	8005c4e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005c3a:	4a2a      	ldr	r2, [pc, #168]	; (8005ce4 <prvAddNewTaskToReadyList+0xc8>)
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005c40:	4b27      	ldr	r3, [pc, #156]	; (8005ce0 <prvAddNewTaskToReadyList+0xc4>)
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	2b01      	cmp	r3, #1
 8005c46:	d110      	bne.n	8005c6a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005c48:	f000 fc26 	bl	8006498 <prvInitialiseTaskLists>
 8005c4c:	e00d      	b.n	8005c6a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005c4e:	4b26      	ldr	r3, [pc, #152]	; (8005ce8 <prvAddNewTaskToReadyList+0xcc>)
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d109      	bne.n	8005c6a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005c56:	4b23      	ldr	r3, [pc, #140]	; (8005ce4 <prvAddNewTaskToReadyList+0xc8>)
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c60:	429a      	cmp	r2, r3
 8005c62:	d802      	bhi.n	8005c6a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005c64:	4a1f      	ldr	r2, [pc, #124]	; (8005ce4 <prvAddNewTaskToReadyList+0xc8>)
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005c6a:	4b20      	ldr	r3, [pc, #128]	; (8005cec <prvAddNewTaskToReadyList+0xd0>)
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	3301      	adds	r3, #1
 8005c70:	4a1e      	ldr	r2, [pc, #120]	; (8005cec <prvAddNewTaskToReadyList+0xd0>)
 8005c72:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005c74:	4b1d      	ldr	r3, [pc, #116]	; (8005cec <prvAddNewTaskToReadyList+0xd0>)
 8005c76:	681a      	ldr	r2, [r3, #0]
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c80:	4b1b      	ldr	r3, [pc, #108]	; (8005cf0 <prvAddNewTaskToReadyList+0xd4>)
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	429a      	cmp	r2, r3
 8005c86:	d903      	bls.n	8005c90 <prvAddNewTaskToReadyList+0x74>
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c8c:	4a18      	ldr	r2, [pc, #96]	; (8005cf0 <prvAddNewTaskToReadyList+0xd4>)
 8005c8e:	6013      	str	r3, [r2, #0]
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c94:	4613      	mov	r3, r2
 8005c96:	009b      	lsls	r3, r3, #2
 8005c98:	4413      	add	r3, r2
 8005c9a:	009b      	lsls	r3, r3, #2
 8005c9c:	4a15      	ldr	r2, [pc, #84]	; (8005cf4 <prvAddNewTaskToReadyList+0xd8>)
 8005c9e:	441a      	add	r2, r3
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	3304      	adds	r3, #4
 8005ca4:	4619      	mov	r1, r3
 8005ca6:	4610      	mov	r0, r2
 8005ca8:	f7ff f8fd 	bl	8004ea6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005cac:	f001 fa42 	bl	8007134 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005cb0:	4b0d      	ldr	r3, [pc, #52]	; (8005ce8 <prvAddNewTaskToReadyList+0xcc>)
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d00e      	beq.n	8005cd6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005cb8:	4b0a      	ldr	r3, [pc, #40]	; (8005ce4 <prvAddNewTaskToReadyList+0xc8>)
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cc2:	429a      	cmp	r2, r3
 8005cc4:	d207      	bcs.n	8005cd6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005cc6:	4b0c      	ldr	r3, [pc, #48]	; (8005cf8 <prvAddNewTaskToReadyList+0xdc>)
 8005cc8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005ccc:	601a      	str	r2, [r3, #0]
 8005cce:	f3bf 8f4f 	dsb	sy
 8005cd2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005cd6:	bf00      	nop
 8005cd8:	3708      	adds	r7, #8
 8005cda:	46bd      	mov	sp, r7
 8005cdc:	bd80      	pop	{r7, pc}
 8005cde:	bf00      	nop
 8005ce0:	20000f24 	.word	0x20000f24
 8005ce4:	20000a50 	.word	0x20000a50
 8005ce8:	20000f30 	.word	0x20000f30
 8005cec:	20000f40 	.word	0x20000f40
 8005cf0:	20000f2c 	.word	0x20000f2c
 8005cf4:	20000a54 	.word	0x20000a54
 8005cf8:	e000ed04 	.word	0xe000ed04

08005cfc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005cfc:	b580      	push	{r7, lr}
 8005cfe:	b084      	sub	sp, #16
 8005d00:	af00      	add	r7, sp, #0
 8005d02:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005d04:	2300      	movs	r3, #0
 8005d06:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d017      	beq.n	8005d3e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005d0e:	4b13      	ldr	r3, [pc, #76]	; (8005d5c <vTaskDelay+0x60>)
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d00a      	beq.n	8005d2c <vTaskDelay+0x30>
	__asm volatile
 8005d16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d1a:	f383 8811 	msr	BASEPRI, r3
 8005d1e:	f3bf 8f6f 	isb	sy
 8005d22:	f3bf 8f4f 	dsb	sy
 8005d26:	60bb      	str	r3, [r7, #8]
}
 8005d28:	bf00      	nop
 8005d2a:	e7fe      	b.n	8005d2a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005d2c:	f000 f88a 	bl	8005e44 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005d30:	2100      	movs	r1, #0
 8005d32:	6878      	ldr	r0, [r7, #4]
 8005d34:	f000 fcfe 	bl	8006734 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005d38:	f000 f892 	bl	8005e60 <xTaskResumeAll>
 8005d3c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d107      	bne.n	8005d54 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8005d44:	4b06      	ldr	r3, [pc, #24]	; (8005d60 <vTaskDelay+0x64>)
 8005d46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d4a:	601a      	str	r2, [r3, #0]
 8005d4c:	f3bf 8f4f 	dsb	sy
 8005d50:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005d54:	bf00      	nop
 8005d56:	3710      	adds	r7, #16
 8005d58:	46bd      	mov	sp, r7
 8005d5a:	bd80      	pop	{r7, pc}
 8005d5c:	20000f4c 	.word	0x20000f4c
 8005d60:	e000ed04 	.word	0xe000ed04

08005d64 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005d64:	b580      	push	{r7, lr}
 8005d66:	b08a      	sub	sp, #40	; 0x28
 8005d68:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005d6a:	2300      	movs	r3, #0
 8005d6c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005d6e:	2300      	movs	r3, #0
 8005d70:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005d72:	463a      	mov	r2, r7
 8005d74:	1d39      	adds	r1, r7, #4
 8005d76:	f107 0308 	add.w	r3, r7, #8
 8005d7a:	4618      	mov	r0, r3
 8005d7c:	f7ff f832 	bl	8004de4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005d80:	6839      	ldr	r1, [r7, #0]
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	68ba      	ldr	r2, [r7, #8]
 8005d86:	9202      	str	r2, [sp, #8]
 8005d88:	9301      	str	r3, [sp, #4]
 8005d8a:	2300      	movs	r3, #0
 8005d8c:	9300      	str	r3, [sp, #0]
 8005d8e:	2300      	movs	r3, #0
 8005d90:	460a      	mov	r2, r1
 8005d92:	4924      	ldr	r1, [pc, #144]	; (8005e24 <vTaskStartScheduler+0xc0>)
 8005d94:	4824      	ldr	r0, [pc, #144]	; (8005e28 <vTaskStartScheduler+0xc4>)
 8005d96:	f7ff fdf9 	bl	800598c <xTaskCreateStatic>
 8005d9a:	4603      	mov	r3, r0
 8005d9c:	4a23      	ldr	r2, [pc, #140]	; (8005e2c <vTaskStartScheduler+0xc8>)
 8005d9e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005da0:	4b22      	ldr	r3, [pc, #136]	; (8005e2c <vTaskStartScheduler+0xc8>)
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d002      	beq.n	8005dae <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005da8:	2301      	movs	r3, #1
 8005daa:	617b      	str	r3, [r7, #20]
 8005dac:	e001      	b.n	8005db2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005dae:	2300      	movs	r3, #0
 8005db0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005db2:	697b      	ldr	r3, [r7, #20]
 8005db4:	2b01      	cmp	r3, #1
 8005db6:	d102      	bne.n	8005dbe <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005db8:	f000 fd10 	bl	80067dc <xTimerCreateTimerTask>
 8005dbc:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005dbe:	697b      	ldr	r3, [r7, #20]
 8005dc0:	2b01      	cmp	r3, #1
 8005dc2:	d11b      	bne.n	8005dfc <vTaskStartScheduler+0x98>
	__asm volatile
 8005dc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dc8:	f383 8811 	msr	BASEPRI, r3
 8005dcc:	f3bf 8f6f 	isb	sy
 8005dd0:	f3bf 8f4f 	dsb	sy
 8005dd4:	613b      	str	r3, [r7, #16]
}
 8005dd6:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005dd8:	4b15      	ldr	r3, [pc, #84]	; (8005e30 <vTaskStartScheduler+0xcc>)
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	3354      	adds	r3, #84	; 0x54
 8005dde:	4a15      	ldr	r2, [pc, #84]	; (8005e34 <vTaskStartScheduler+0xd0>)
 8005de0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005de2:	4b15      	ldr	r3, [pc, #84]	; (8005e38 <vTaskStartScheduler+0xd4>)
 8005de4:	f04f 32ff 	mov.w	r2, #4294967295
 8005de8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005dea:	4b14      	ldr	r3, [pc, #80]	; (8005e3c <vTaskStartScheduler+0xd8>)
 8005dec:	2201      	movs	r2, #1
 8005dee:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005df0:	4b13      	ldr	r3, [pc, #76]	; (8005e40 <vTaskStartScheduler+0xdc>)
 8005df2:	2200      	movs	r2, #0
 8005df4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005df6:	f001 f8cb 	bl	8006f90 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005dfa:	e00e      	b.n	8005e1a <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005dfc:	697b      	ldr	r3, [r7, #20]
 8005dfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e02:	d10a      	bne.n	8005e1a <vTaskStartScheduler+0xb6>
	__asm volatile
 8005e04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e08:	f383 8811 	msr	BASEPRI, r3
 8005e0c:	f3bf 8f6f 	isb	sy
 8005e10:	f3bf 8f4f 	dsb	sy
 8005e14:	60fb      	str	r3, [r7, #12]
}
 8005e16:	bf00      	nop
 8005e18:	e7fe      	b.n	8005e18 <vTaskStartScheduler+0xb4>
}
 8005e1a:	bf00      	nop
 8005e1c:	3718      	adds	r7, #24
 8005e1e:	46bd      	mov	sp, r7
 8005e20:	bd80      	pop	{r7, pc}
 8005e22:	bf00      	nop
 8005e24:	0800790c 	.word	0x0800790c
 8005e28:	08006469 	.word	0x08006469
 8005e2c:	20000f48 	.word	0x20000f48
 8005e30:	20000a50 	.word	0x20000a50
 8005e34:	20000010 	.word	0x20000010
 8005e38:	20000f44 	.word	0x20000f44
 8005e3c:	20000f30 	.word	0x20000f30
 8005e40:	20000f28 	.word	0x20000f28

08005e44 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005e44:	b480      	push	{r7}
 8005e46:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005e48:	4b04      	ldr	r3, [pc, #16]	; (8005e5c <vTaskSuspendAll+0x18>)
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	3301      	adds	r3, #1
 8005e4e:	4a03      	ldr	r2, [pc, #12]	; (8005e5c <vTaskSuspendAll+0x18>)
 8005e50:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005e52:	bf00      	nop
 8005e54:	46bd      	mov	sp, r7
 8005e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e5a:	4770      	bx	lr
 8005e5c:	20000f4c 	.word	0x20000f4c

08005e60 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005e60:	b580      	push	{r7, lr}
 8005e62:	b084      	sub	sp, #16
 8005e64:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005e66:	2300      	movs	r3, #0
 8005e68:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005e6a:	2300      	movs	r3, #0
 8005e6c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005e6e:	4b42      	ldr	r3, [pc, #264]	; (8005f78 <xTaskResumeAll+0x118>)
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d10a      	bne.n	8005e8c <xTaskResumeAll+0x2c>
	__asm volatile
 8005e76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e7a:	f383 8811 	msr	BASEPRI, r3
 8005e7e:	f3bf 8f6f 	isb	sy
 8005e82:	f3bf 8f4f 	dsb	sy
 8005e86:	603b      	str	r3, [r7, #0]
}
 8005e88:	bf00      	nop
 8005e8a:	e7fe      	b.n	8005e8a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005e8c:	f001 f922 	bl	80070d4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005e90:	4b39      	ldr	r3, [pc, #228]	; (8005f78 <xTaskResumeAll+0x118>)
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	3b01      	subs	r3, #1
 8005e96:	4a38      	ldr	r2, [pc, #224]	; (8005f78 <xTaskResumeAll+0x118>)
 8005e98:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005e9a:	4b37      	ldr	r3, [pc, #220]	; (8005f78 <xTaskResumeAll+0x118>)
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d162      	bne.n	8005f68 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005ea2:	4b36      	ldr	r3, [pc, #216]	; (8005f7c <xTaskResumeAll+0x11c>)
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d05e      	beq.n	8005f68 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005eaa:	e02f      	b.n	8005f0c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005eac:	4b34      	ldr	r3, [pc, #208]	; (8005f80 <xTaskResumeAll+0x120>)
 8005eae:	68db      	ldr	r3, [r3, #12]
 8005eb0:	68db      	ldr	r3, [r3, #12]
 8005eb2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	3318      	adds	r3, #24
 8005eb8:	4618      	mov	r0, r3
 8005eba:	f7ff f851 	bl	8004f60 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	3304      	adds	r3, #4
 8005ec2:	4618      	mov	r0, r3
 8005ec4:	f7ff f84c 	bl	8004f60 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ecc:	4b2d      	ldr	r3, [pc, #180]	; (8005f84 <xTaskResumeAll+0x124>)
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	429a      	cmp	r2, r3
 8005ed2:	d903      	bls.n	8005edc <xTaskResumeAll+0x7c>
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ed8:	4a2a      	ldr	r2, [pc, #168]	; (8005f84 <xTaskResumeAll+0x124>)
 8005eda:	6013      	str	r3, [r2, #0]
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ee0:	4613      	mov	r3, r2
 8005ee2:	009b      	lsls	r3, r3, #2
 8005ee4:	4413      	add	r3, r2
 8005ee6:	009b      	lsls	r3, r3, #2
 8005ee8:	4a27      	ldr	r2, [pc, #156]	; (8005f88 <xTaskResumeAll+0x128>)
 8005eea:	441a      	add	r2, r3
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	3304      	adds	r3, #4
 8005ef0:	4619      	mov	r1, r3
 8005ef2:	4610      	mov	r0, r2
 8005ef4:	f7fe ffd7 	bl	8004ea6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005efc:	4b23      	ldr	r3, [pc, #140]	; (8005f8c <xTaskResumeAll+0x12c>)
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f02:	429a      	cmp	r2, r3
 8005f04:	d302      	bcc.n	8005f0c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8005f06:	4b22      	ldr	r3, [pc, #136]	; (8005f90 <xTaskResumeAll+0x130>)
 8005f08:	2201      	movs	r2, #1
 8005f0a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005f0c:	4b1c      	ldr	r3, [pc, #112]	; (8005f80 <xTaskResumeAll+0x120>)
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d1cb      	bne.n	8005eac <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d001      	beq.n	8005f1e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005f1a:	f000 fb5f 	bl	80065dc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005f1e:	4b1d      	ldr	r3, [pc, #116]	; (8005f94 <xTaskResumeAll+0x134>)
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d010      	beq.n	8005f4c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005f2a:	f000 f847 	bl	8005fbc <xTaskIncrementTick>
 8005f2e:	4603      	mov	r3, r0
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d002      	beq.n	8005f3a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8005f34:	4b16      	ldr	r3, [pc, #88]	; (8005f90 <xTaskResumeAll+0x130>)
 8005f36:	2201      	movs	r2, #1
 8005f38:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	3b01      	subs	r3, #1
 8005f3e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d1f1      	bne.n	8005f2a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8005f46:	4b13      	ldr	r3, [pc, #76]	; (8005f94 <xTaskResumeAll+0x134>)
 8005f48:	2200      	movs	r2, #0
 8005f4a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005f4c:	4b10      	ldr	r3, [pc, #64]	; (8005f90 <xTaskResumeAll+0x130>)
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d009      	beq.n	8005f68 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005f54:	2301      	movs	r3, #1
 8005f56:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005f58:	4b0f      	ldr	r3, [pc, #60]	; (8005f98 <xTaskResumeAll+0x138>)
 8005f5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f5e:	601a      	str	r2, [r3, #0]
 8005f60:	f3bf 8f4f 	dsb	sy
 8005f64:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005f68:	f001 f8e4 	bl	8007134 <vPortExitCritical>

	return xAlreadyYielded;
 8005f6c:	68bb      	ldr	r3, [r7, #8]
}
 8005f6e:	4618      	mov	r0, r3
 8005f70:	3710      	adds	r7, #16
 8005f72:	46bd      	mov	sp, r7
 8005f74:	bd80      	pop	{r7, pc}
 8005f76:	bf00      	nop
 8005f78:	20000f4c 	.word	0x20000f4c
 8005f7c:	20000f24 	.word	0x20000f24
 8005f80:	20000ee4 	.word	0x20000ee4
 8005f84:	20000f2c 	.word	0x20000f2c
 8005f88:	20000a54 	.word	0x20000a54
 8005f8c:	20000a50 	.word	0x20000a50
 8005f90:	20000f38 	.word	0x20000f38
 8005f94:	20000f34 	.word	0x20000f34
 8005f98:	e000ed04 	.word	0xe000ed04

08005f9c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005f9c:	b480      	push	{r7}
 8005f9e:	b083      	sub	sp, #12
 8005fa0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005fa2:	4b05      	ldr	r3, [pc, #20]	; (8005fb8 <xTaskGetTickCount+0x1c>)
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005fa8:	687b      	ldr	r3, [r7, #4]
}
 8005faa:	4618      	mov	r0, r3
 8005fac:	370c      	adds	r7, #12
 8005fae:	46bd      	mov	sp, r7
 8005fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb4:	4770      	bx	lr
 8005fb6:	bf00      	nop
 8005fb8:	20000f28 	.word	0x20000f28

08005fbc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005fbc:	b580      	push	{r7, lr}
 8005fbe:	b086      	sub	sp, #24
 8005fc0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005fc2:	2300      	movs	r3, #0
 8005fc4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005fc6:	4b4f      	ldr	r3, [pc, #316]	; (8006104 <xTaskIncrementTick+0x148>)
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	f040 808f 	bne.w	80060ee <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005fd0:	4b4d      	ldr	r3, [pc, #308]	; (8006108 <xTaskIncrementTick+0x14c>)
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	3301      	adds	r3, #1
 8005fd6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005fd8:	4a4b      	ldr	r2, [pc, #300]	; (8006108 <xTaskIncrementTick+0x14c>)
 8005fda:	693b      	ldr	r3, [r7, #16]
 8005fdc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005fde:	693b      	ldr	r3, [r7, #16]
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d120      	bne.n	8006026 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8005fe4:	4b49      	ldr	r3, [pc, #292]	; (800610c <xTaskIncrementTick+0x150>)
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d00a      	beq.n	8006004 <xTaskIncrementTick+0x48>
	__asm volatile
 8005fee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ff2:	f383 8811 	msr	BASEPRI, r3
 8005ff6:	f3bf 8f6f 	isb	sy
 8005ffa:	f3bf 8f4f 	dsb	sy
 8005ffe:	603b      	str	r3, [r7, #0]
}
 8006000:	bf00      	nop
 8006002:	e7fe      	b.n	8006002 <xTaskIncrementTick+0x46>
 8006004:	4b41      	ldr	r3, [pc, #260]	; (800610c <xTaskIncrementTick+0x150>)
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	60fb      	str	r3, [r7, #12]
 800600a:	4b41      	ldr	r3, [pc, #260]	; (8006110 <xTaskIncrementTick+0x154>)
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	4a3f      	ldr	r2, [pc, #252]	; (800610c <xTaskIncrementTick+0x150>)
 8006010:	6013      	str	r3, [r2, #0]
 8006012:	4a3f      	ldr	r2, [pc, #252]	; (8006110 <xTaskIncrementTick+0x154>)
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	6013      	str	r3, [r2, #0]
 8006018:	4b3e      	ldr	r3, [pc, #248]	; (8006114 <xTaskIncrementTick+0x158>)
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	3301      	adds	r3, #1
 800601e:	4a3d      	ldr	r2, [pc, #244]	; (8006114 <xTaskIncrementTick+0x158>)
 8006020:	6013      	str	r3, [r2, #0]
 8006022:	f000 fadb 	bl	80065dc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006026:	4b3c      	ldr	r3, [pc, #240]	; (8006118 <xTaskIncrementTick+0x15c>)
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	693a      	ldr	r2, [r7, #16]
 800602c:	429a      	cmp	r2, r3
 800602e:	d349      	bcc.n	80060c4 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006030:	4b36      	ldr	r3, [pc, #216]	; (800610c <xTaskIncrementTick+0x150>)
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	2b00      	cmp	r3, #0
 8006038:	d104      	bne.n	8006044 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800603a:	4b37      	ldr	r3, [pc, #220]	; (8006118 <xTaskIncrementTick+0x15c>)
 800603c:	f04f 32ff 	mov.w	r2, #4294967295
 8006040:	601a      	str	r2, [r3, #0]
					break;
 8006042:	e03f      	b.n	80060c4 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006044:	4b31      	ldr	r3, [pc, #196]	; (800610c <xTaskIncrementTick+0x150>)
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	68db      	ldr	r3, [r3, #12]
 800604a:	68db      	ldr	r3, [r3, #12]
 800604c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800604e:	68bb      	ldr	r3, [r7, #8]
 8006050:	685b      	ldr	r3, [r3, #4]
 8006052:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006054:	693a      	ldr	r2, [r7, #16]
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	429a      	cmp	r2, r3
 800605a:	d203      	bcs.n	8006064 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800605c:	4a2e      	ldr	r2, [pc, #184]	; (8006118 <xTaskIncrementTick+0x15c>)
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006062:	e02f      	b.n	80060c4 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006064:	68bb      	ldr	r3, [r7, #8]
 8006066:	3304      	adds	r3, #4
 8006068:	4618      	mov	r0, r3
 800606a:	f7fe ff79 	bl	8004f60 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800606e:	68bb      	ldr	r3, [r7, #8]
 8006070:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006072:	2b00      	cmp	r3, #0
 8006074:	d004      	beq.n	8006080 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006076:	68bb      	ldr	r3, [r7, #8]
 8006078:	3318      	adds	r3, #24
 800607a:	4618      	mov	r0, r3
 800607c:	f7fe ff70 	bl	8004f60 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006080:	68bb      	ldr	r3, [r7, #8]
 8006082:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006084:	4b25      	ldr	r3, [pc, #148]	; (800611c <xTaskIncrementTick+0x160>)
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	429a      	cmp	r2, r3
 800608a:	d903      	bls.n	8006094 <xTaskIncrementTick+0xd8>
 800608c:	68bb      	ldr	r3, [r7, #8]
 800608e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006090:	4a22      	ldr	r2, [pc, #136]	; (800611c <xTaskIncrementTick+0x160>)
 8006092:	6013      	str	r3, [r2, #0]
 8006094:	68bb      	ldr	r3, [r7, #8]
 8006096:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006098:	4613      	mov	r3, r2
 800609a:	009b      	lsls	r3, r3, #2
 800609c:	4413      	add	r3, r2
 800609e:	009b      	lsls	r3, r3, #2
 80060a0:	4a1f      	ldr	r2, [pc, #124]	; (8006120 <xTaskIncrementTick+0x164>)
 80060a2:	441a      	add	r2, r3
 80060a4:	68bb      	ldr	r3, [r7, #8]
 80060a6:	3304      	adds	r3, #4
 80060a8:	4619      	mov	r1, r3
 80060aa:	4610      	mov	r0, r2
 80060ac:	f7fe fefb 	bl	8004ea6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80060b0:	68bb      	ldr	r3, [r7, #8]
 80060b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060b4:	4b1b      	ldr	r3, [pc, #108]	; (8006124 <xTaskIncrementTick+0x168>)
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060ba:	429a      	cmp	r2, r3
 80060bc:	d3b8      	bcc.n	8006030 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80060be:	2301      	movs	r3, #1
 80060c0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80060c2:	e7b5      	b.n	8006030 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80060c4:	4b17      	ldr	r3, [pc, #92]	; (8006124 <xTaskIncrementTick+0x168>)
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060ca:	4915      	ldr	r1, [pc, #84]	; (8006120 <xTaskIncrementTick+0x164>)
 80060cc:	4613      	mov	r3, r2
 80060ce:	009b      	lsls	r3, r3, #2
 80060d0:	4413      	add	r3, r2
 80060d2:	009b      	lsls	r3, r3, #2
 80060d4:	440b      	add	r3, r1
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	2b01      	cmp	r3, #1
 80060da:	d901      	bls.n	80060e0 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80060dc:	2301      	movs	r3, #1
 80060de:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80060e0:	4b11      	ldr	r3, [pc, #68]	; (8006128 <xTaskIncrementTick+0x16c>)
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d007      	beq.n	80060f8 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80060e8:	2301      	movs	r3, #1
 80060ea:	617b      	str	r3, [r7, #20]
 80060ec:	e004      	b.n	80060f8 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80060ee:	4b0f      	ldr	r3, [pc, #60]	; (800612c <xTaskIncrementTick+0x170>)
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	3301      	adds	r3, #1
 80060f4:	4a0d      	ldr	r2, [pc, #52]	; (800612c <xTaskIncrementTick+0x170>)
 80060f6:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80060f8:	697b      	ldr	r3, [r7, #20]
}
 80060fa:	4618      	mov	r0, r3
 80060fc:	3718      	adds	r7, #24
 80060fe:	46bd      	mov	sp, r7
 8006100:	bd80      	pop	{r7, pc}
 8006102:	bf00      	nop
 8006104:	20000f4c 	.word	0x20000f4c
 8006108:	20000f28 	.word	0x20000f28
 800610c:	20000edc 	.word	0x20000edc
 8006110:	20000ee0 	.word	0x20000ee0
 8006114:	20000f3c 	.word	0x20000f3c
 8006118:	20000f44 	.word	0x20000f44
 800611c:	20000f2c 	.word	0x20000f2c
 8006120:	20000a54 	.word	0x20000a54
 8006124:	20000a50 	.word	0x20000a50
 8006128:	20000f38 	.word	0x20000f38
 800612c:	20000f34 	.word	0x20000f34

08006130 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006130:	b480      	push	{r7}
 8006132:	b085      	sub	sp, #20
 8006134:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006136:	4b2a      	ldr	r3, [pc, #168]	; (80061e0 <vTaskSwitchContext+0xb0>)
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	2b00      	cmp	r3, #0
 800613c:	d003      	beq.n	8006146 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800613e:	4b29      	ldr	r3, [pc, #164]	; (80061e4 <vTaskSwitchContext+0xb4>)
 8006140:	2201      	movs	r2, #1
 8006142:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006144:	e046      	b.n	80061d4 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8006146:	4b27      	ldr	r3, [pc, #156]	; (80061e4 <vTaskSwitchContext+0xb4>)
 8006148:	2200      	movs	r2, #0
 800614a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800614c:	4b26      	ldr	r3, [pc, #152]	; (80061e8 <vTaskSwitchContext+0xb8>)
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	60fb      	str	r3, [r7, #12]
 8006152:	e010      	b.n	8006176 <vTaskSwitchContext+0x46>
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	2b00      	cmp	r3, #0
 8006158:	d10a      	bne.n	8006170 <vTaskSwitchContext+0x40>
	__asm volatile
 800615a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800615e:	f383 8811 	msr	BASEPRI, r3
 8006162:	f3bf 8f6f 	isb	sy
 8006166:	f3bf 8f4f 	dsb	sy
 800616a:	607b      	str	r3, [r7, #4]
}
 800616c:	bf00      	nop
 800616e:	e7fe      	b.n	800616e <vTaskSwitchContext+0x3e>
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	3b01      	subs	r3, #1
 8006174:	60fb      	str	r3, [r7, #12]
 8006176:	491d      	ldr	r1, [pc, #116]	; (80061ec <vTaskSwitchContext+0xbc>)
 8006178:	68fa      	ldr	r2, [r7, #12]
 800617a:	4613      	mov	r3, r2
 800617c:	009b      	lsls	r3, r3, #2
 800617e:	4413      	add	r3, r2
 8006180:	009b      	lsls	r3, r3, #2
 8006182:	440b      	add	r3, r1
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	2b00      	cmp	r3, #0
 8006188:	d0e4      	beq.n	8006154 <vTaskSwitchContext+0x24>
 800618a:	68fa      	ldr	r2, [r7, #12]
 800618c:	4613      	mov	r3, r2
 800618e:	009b      	lsls	r3, r3, #2
 8006190:	4413      	add	r3, r2
 8006192:	009b      	lsls	r3, r3, #2
 8006194:	4a15      	ldr	r2, [pc, #84]	; (80061ec <vTaskSwitchContext+0xbc>)
 8006196:	4413      	add	r3, r2
 8006198:	60bb      	str	r3, [r7, #8]
 800619a:	68bb      	ldr	r3, [r7, #8]
 800619c:	685b      	ldr	r3, [r3, #4]
 800619e:	685a      	ldr	r2, [r3, #4]
 80061a0:	68bb      	ldr	r3, [r7, #8]
 80061a2:	605a      	str	r2, [r3, #4]
 80061a4:	68bb      	ldr	r3, [r7, #8]
 80061a6:	685a      	ldr	r2, [r3, #4]
 80061a8:	68bb      	ldr	r3, [r7, #8]
 80061aa:	3308      	adds	r3, #8
 80061ac:	429a      	cmp	r2, r3
 80061ae:	d104      	bne.n	80061ba <vTaskSwitchContext+0x8a>
 80061b0:	68bb      	ldr	r3, [r7, #8]
 80061b2:	685b      	ldr	r3, [r3, #4]
 80061b4:	685a      	ldr	r2, [r3, #4]
 80061b6:	68bb      	ldr	r3, [r7, #8]
 80061b8:	605a      	str	r2, [r3, #4]
 80061ba:	68bb      	ldr	r3, [r7, #8]
 80061bc:	685b      	ldr	r3, [r3, #4]
 80061be:	68db      	ldr	r3, [r3, #12]
 80061c0:	4a0b      	ldr	r2, [pc, #44]	; (80061f0 <vTaskSwitchContext+0xc0>)
 80061c2:	6013      	str	r3, [r2, #0]
 80061c4:	4a08      	ldr	r2, [pc, #32]	; (80061e8 <vTaskSwitchContext+0xb8>)
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80061ca:	4b09      	ldr	r3, [pc, #36]	; (80061f0 <vTaskSwitchContext+0xc0>)
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	3354      	adds	r3, #84	; 0x54
 80061d0:	4a08      	ldr	r2, [pc, #32]	; (80061f4 <vTaskSwitchContext+0xc4>)
 80061d2:	6013      	str	r3, [r2, #0]
}
 80061d4:	bf00      	nop
 80061d6:	3714      	adds	r7, #20
 80061d8:	46bd      	mov	sp, r7
 80061da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061de:	4770      	bx	lr
 80061e0:	20000f4c 	.word	0x20000f4c
 80061e4:	20000f38 	.word	0x20000f38
 80061e8:	20000f2c 	.word	0x20000f2c
 80061ec:	20000a54 	.word	0x20000a54
 80061f0:	20000a50 	.word	0x20000a50
 80061f4:	20000010 	.word	0x20000010

080061f8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80061f8:	b580      	push	{r7, lr}
 80061fa:	b084      	sub	sp, #16
 80061fc:	af00      	add	r7, sp, #0
 80061fe:	6078      	str	r0, [r7, #4]
 8006200:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	2b00      	cmp	r3, #0
 8006206:	d10a      	bne.n	800621e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8006208:	f04f 0350 	mov.w	r3, #80	; 0x50
 800620c:	f383 8811 	msr	BASEPRI, r3
 8006210:	f3bf 8f6f 	isb	sy
 8006214:	f3bf 8f4f 	dsb	sy
 8006218:	60fb      	str	r3, [r7, #12]
}
 800621a:	bf00      	nop
 800621c:	e7fe      	b.n	800621c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800621e:	4b07      	ldr	r3, [pc, #28]	; (800623c <vTaskPlaceOnEventList+0x44>)
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	3318      	adds	r3, #24
 8006224:	4619      	mov	r1, r3
 8006226:	6878      	ldr	r0, [r7, #4]
 8006228:	f7fe fe61 	bl	8004eee <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800622c:	2101      	movs	r1, #1
 800622e:	6838      	ldr	r0, [r7, #0]
 8006230:	f000 fa80 	bl	8006734 <prvAddCurrentTaskToDelayedList>
}
 8006234:	bf00      	nop
 8006236:	3710      	adds	r7, #16
 8006238:	46bd      	mov	sp, r7
 800623a:	bd80      	pop	{r7, pc}
 800623c:	20000a50 	.word	0x20000a50

08006240 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006240:	b580      	push	{r7, lr}
 8006242:	b086      	sub	sp, #24
 8006244:	af00      	add	r7, sp, #0
 8006246:	60f8      	str	r0, [r7, #12]
 8006248:	60b9      	str	r1, [r7, #8]
 800624a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	2b00      	cmp	r3, #0
 8006250:	d10a      	bne.n	8006268 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8006252:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006256:	f383 8811 	msr	BASEPRI, r3
 800625a:	f3bf 8f6f 	isb	sy
 800625e:	f3bf 8f4f 	dsb	sy
 8006262:	617b      	str	r3, [r7, #20]
}
 8006264:	bf00      	nop
 8006266:	e7fe      	b.n	8006266 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006268:	4b0a      	ldr	r3, [pc, #40]	; (8006294 <vTaskPlaceOnEventListRestricted+0x54>)
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	3318      	adds	r3, #24
 800626e:	4619      	mov	r1, r3
 8006270:	68f8      	ldr	r0, [r7, #12]
 8006272:	f7fe fe18 	bl	8004ea6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	2b00      	cmp	r3, #0
 800627a:	d002      	beq.n	8006282 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800627c:	f04f 33ff 	mov.w	r3, #4294967295
 8006280:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006282:	6879      	ldr	r1, [r7, #4]
 8006284:	68b8      	ldr	r0, [r7, #8]
 8006286:	f000 fa55 	bl	8006734 <prvAddCurrentTaskToDelayedList>
	}
 800628a:	bf00      	nop
 800628c:	3718      	adds	r7, #24
 800628e:	46bd      	mov	sp, r7
 8006290:	bd80      	pop	{r7, pc}
 8006292:	bf00      	nop
 8006294:	20000a50 	.word	0x20000a50

08006298 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006298:	b580      	push	{r7, lr}
 800629a:	b086      	sub	sp, #24
 800629c:	af00      	add	r7, sp, #0
 800629e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	68db      	ldr	r3, [r3, #12]
 80062a4:	68db      	ldr	r3, [r3, #12]
 80062a6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80062a8:	693b      	ldr	r3, [r7, #16]
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d10a      	bne.n	80062c4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80062ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062b2:	f383 8811 	msr	BASEPRI, r3
 80062b6:	f3bf 8f6f 	isb	sy
 80062ba:	f3bf 8f4f 	dsb	sy
 80062be:	60fb      	str	r3, [r7, #12]
}
 80062c0:	bf00      	nop
 80062c2:	e7fe      	b.n	80062c2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80062c4:	693b      	ldr	r3, [r7, #16]
 80062c6:	3318      	adds	r3, #24
 80062c8:	4618      	mov	r0, r3
 80062ca:	f7fe fe49 	bl	8004f60 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80062ce:	4b1e      	ldr	r3, [pc, #120]	; (8006348 <xTaskRemoveFromEventList+0xb0>)
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d11d      	bne.n	8006312 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80062d6:	693b      	ldr	r3, [r7, #16]
 80062d8:	3304      	adds	r3, #4
 80062da:	4618      	mov	r0, r3
 80062dc:	f7fe fe40 	bl	8004f60 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80062e0:	693b      	ldr	r3, [r7, #16]
 80062e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062e4:	4b19      	ldr	r3, [pc, #100]	; (800634c <xTaskRemoveFromEventList+0xb4>)
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	429a      	cmp	r2, r3
 80062ea:	d903      	bls.n	80062f4 <xTaskRemoveFromEventList+0x5c>
 80062ec:	693b      	ldr	r3, [r7, #16]
 80062ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062f0:	4a16      	ldr	r2, [pc, #88]	; (800634c <xTaskRemoveFromEventList+0xb4>)
 80062f2:	6013      	str	r3, [r2, #0]
 80062f4:	693b      	ldr	r3, [r7, #16]
 80062f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062f8:	4613      	mov	r3, r2
 80062fa:	009b      	lsls	r3, r3, #2
 80062fc:	4413      	add	r3, r2
 80062fe:	009b      	lsls	r3, r3, #2
 8006300:	4a13      	ldr	r2, [pc, #76]	; (8006350 <xTaskRemoveFromEventList+0xb8>)
 8006302:	441a      	add	r2, r3
 8006304:	693b      	ldr	r3, [r7, #16]
 8006306:	3304      	adds	r3, #4
 8006308:	4619      	mov	r1, r3
 800630a:	4610      	mov	r0, r2
 800630c:	f7fe fdcb 	bl	8004ea6 <vListInsertEnd>
 8006310:	e005      	b.n	800631e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006312:	693b      	ldr	r3, [r7, #16]
 8006314:	3318      	adds	r3, #24
 8006316:	4619      	mov	r1, r3
 8006318:	480e      	ldr	r0, [pc, #56]	; (8006354 <xTaskRemoveFromEventList+0xbc>)
 800631a:	f7fe fdc4 	bl	8004ea6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800631e:	693b      	ldr	r3, [r7, #16]
 8006320:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006322:	4b0d      	ldr	r3, [pc, #52]	; (8006358 <xTaskRemoveFromEventList+0xc0>)
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006328:	429a      	cmp	r2, r3
 800632a:	d905      	bls.n	8006338 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800632c:	2301      	movs	r3, #1
 800632e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006330:	4b0a      	ldr	r3, [pc, #40]	; (800635c <xTaskRemoveFromEventList+0xc4>)
 8006332:	2201      	movs	r2, #1
 8006334:	601a      	str	r2, [r3, #0]
 8006336:	e001      	b.n	800633c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8006338:	2300      	movs	r3, #0
 800633a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800633c:	697b      	ldr	r3, [r7, #20]
}
 800633e:	4618      	mov	r0, r3
 8006340:	3718      	adds	r7, #24
 8006342:	46bd      	mov	sp, r7
 8006344:	bd80      	pop	{r7, pc}
 8006346:	bf00      	nop
 8006348:	20000f4c 	.word	0x20000f4c
 800634c:	20000f2c 	.word	0x20000f2c
 8006350:	20000a54 	.word	0x20000a54
 8006354:	20000ee4 	.word	0x20000ee4
 8006358:	20000a50 	.word	0x20000a50
 800635c:	20000f38 	.word	0x20000f38

08006360 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006360:	b480      	push	{r7}
 8006362:	b083      	sub	sp, #12
 8006364:	af00      	add	r7, sp, #0
 8006366:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006368:	4b06      	ldr	r3, [pc, #24]	; (8006384 <vTaskInternalSetTimeOutState+0x24>)
 800636a:	681a      	ldr	r2, [r3, #0]
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006370:	4b05      	ldr	r3, [pc, #20]	; (8006388 <vTaskInternalSetTimeOutState+0x28>)
 8006372:	681a      	ldr	r2, [r3, #0]
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	605a      	str	r2, [r3, #4]
}
 8006378:	bf00      	nop
 800637a:	370c      	adds	r7, #12
 800637c:	46bd      	mov	sp, r7
 800637e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006382:	4770      	bx	lr
 8006384:	20000f3c 	.word	0x20000f3c
 8006388:	20000f28 	.word	0x20000f28

0800638c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800638c:	b580      	push	{r7, lr}
 800638e:	b088      	sub	sp, #32
 8006390:	af00      	add	r7, sp, #0
 8006392:	6078      	str	r0, [r7, #4]
 8006394:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	2b00      	cmp	r3, #0
 800639a:	d10a      	bne.n	80063b2 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800639c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063a0:	f383 8811 	msr	BASEPRI, r3
 80063a4:	f3bf 8f6f 	isb	sy
 80063a8:	f3bf 8f4f 	dsb	sy
 80063ac:	613b      	str	r3, [r7, #16]
}
 80063ae:	bf00      	nop
 80063b0:	e7fe      	b.n	80063b0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80063b2:	683b      	ldr	r3, [r7, #0]
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d10a      	bne.n	80063ce <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80063b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063bc:	f383 8811 	msr	BASEPRI, r3
 80063c0:	f3bf 8f6f 	isb	sy
 80063c4:	f3bf 8f4f 	dsb	sy
 80063c8:	60fb      	str	r3, [r7, #12]
}
 80063ca:	bf00      	nop
 80063cc:	e7fe      	b.n	80063cc <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80063ce:	f000 fe81 	bl	80070d4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80063d2:	4b1d      	ldr	r3, [pc, #116]	; (8006448 <xTaskCheckForTimeOut+0xbc>)
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	685b      	ldr	r3, [r3, #4]
 80063dc:	69ba      	ldr	r2, [r7, #24]
 80063de:	1ad3      	subs	r3, r2, r3
 80063e0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80063e2:	683b      	ldr	r3, [r7, #0]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063ea:	d102      	bne.n	80063f2 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80063ec:	2300      	movs	r3, #0
 80063ee:	61fb      	str	r3, [r7, #28]
 80063f0:	e023      	b.n	800643a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681a      	ldr	r2, [r3, #0]
 80063f6:	4b15      	ldr	r3, [pc, #84]	; (800644c <xTaskCheckForTimeOut+0xc0>)
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	429a      	cmp	r2, r3
 80063fc:	d007      	beq.n	800640e <xTaskCheckForTimeOut+0x82>
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	685b      	ldr	r3, [r3, #4]
 8006402:	69ba      	ldr	r2, [r7, #24]
 8006404:	429a      	cmp	r2, r3
 8006406:	d302      	bcc.n	800640e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006408:	2301      	movs	r3, #1
 800640a:	61fb      	str	r3, [r7, #28]
 800640c:	e015      	b.n	800643a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800640e:	683b      	ldr	r3, [r7, #0]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	697a      	ldr	r2, [r7, #20]
 8006414:	429a      	cmp	r2, r3
 8006416:	d20b      	bcs.n	8006430 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006418:	683b      	ldr	r3, [r7, #0]
 800641a:	681a      	ldr	r2, [r3, #0]
 800641c:	697b      	ldr	r3, [r7, #20]
 800641e:	1ad2      	subs	r2, r2, r3
 8006420:	683b      	ldr	r3, [r7, #0]
 8006422:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006424:	6878      	ldr	r0, [r7, #4]
 8006426:	f7ff ff9b 	bl	8006360 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800642a:	2300      	movs	r3, #0
 800642c:	61fb      	str	r3, [r7, #28]
 800642e:	e004      	b.n	800643a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8006430:	683b      	ldr	r3, [r7, #0]
 8006432:	2200      	movs	r2, #0
 8006434:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006436:	2301      	movs	r3, #1
 8006438:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800643a:	f000 fe7b 	bl	8007134 <vPortExitCritical>

	return xReturn;
 800643e:	69fb      	ldr	r3, [r7, #28]
}
 8006440:	4618      	mov	r0, r3
 8006442:	3720      	adds	r7, #32
 8006444:	46bd      	mov	sp, r7
 8006446:	bd80      	pop	{r7, pc}
 8006448:	20000f28 	.word	0x20000f28
 800644c:	20000f3c 	.word	0x20000f3c

08006450 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006450:	b480      	push	{r7}
 8006452:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006454:	4b03      	ldr	r3, [pc, #12]	; (8006464 <vTaskMissedYield+0x14>)
 8006456:	2201      	movs	r2, #1
 8006458:	601a      	str	r2, [r3, #0]
}
 800645a:	bf00      	nop
 800645c:	46bd      	mov	sp, r7
 800645e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006462:	4770      	bx	lr
 8006464:	20000f38 	.word	0x20000f38

08006468 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006468:	b580      	push	{r7, lr}
 800646a:	b082      	sub	sp, #8
 800646c:	af00      	add	r7, sp, #0
 800646e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006470:	f000 f852 	bl	8006518 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006474:	4b06      	ldr	r3, [pc, #24]	; (8006490 <prvIdleTask+0x28>)
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	2b01      	cmp	r3, #1
 800647a:	d9f9      	bls.n	8006470 <prvIdleTask+0x8>
			{
				taskYIELD();
 800647c:	4b05      	ldr	r3, [pc, #20]	; (8006494 <prvIdleTask+0x2c>)
 800647e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006482:	601a      	str	r2, [r3, #0]
 8006484:	f3bf 8f4f 	dsb	sy
 8006488:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800648c:	e7f0      	b.n	8006470 <prvIdleTask+0x8>
 800648e:	bf00      	nop
 8006490:	20000a54 	.word	0x20000a54
 8006494:	e000ed04 	.word	0xe000ed04

08006498 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006498:	b580      	push	{r7, lr}
 800649a:	b082      	sub	sp, #8
 800649c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800649e:	2300      	movs	r3, #0
 80064a0:	607b      	str	r3, [r7, #4]
 80064a2:	e00c      	b.n	80064be <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80064a4:	687a      	ldr	r2, [r7, #4]
 80064a6:	4613      	mov	r3, r2
 80064a8:	009b      	lsls	r3, r3, #2
 80064aa:	4413      	add	r3, r2
 80064ac:	009b      	lsls	r3, r3, #2
 80064ae:	4a12      	ldr	r2, [pc, #72]	; (80064f8 <prvInitialiseTaskLists+0x60>)
 80064b0:	4413      	add	r3, r2
 80064b2:	4618      	mov	r0, r3
 80064b4:	f7fe fcca 	bl	8004e4c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	3301      	adds	r3, #1
 80064bc:	607b      	str	r3, [r7, #4]
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	2b37      	cmp	r3, #55	; 0x37
 80064c2:	d9ef      	bls.n	80064a4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80064c4:	480d      	ldr	r0, [pc, #52]	; (80064fc <prvInitialiseTaskLists+0x64>)
 80064c6:	f7fe fcc1 	bl	8004e4c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80064ca:	480d      	ldr	r0, [pc, #52]	; (8006500 <prvInitialiseTaskLists+0x68>)
 80064cc:	f7fe fcbe 	bl	8004e4c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80064d0:	480c      	ldr	r0, [pc, #48]	; (8006504 <prvInitialiseTaskLists+0x6c>)
 80064d2:	f7fe fcbb 	bl	8004e4c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80064d6:	480c      	ldr	r0, [pc, #48]	; (8006508 <prvInitialiseTaskLists+0x70>)
 80064d8:	f7fe fcb8 	bl	8004e4c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80064dc:	480b      	ldr	r0, [pc, #44]	; (800650c <prvInitialiseTaskLists+0x74>)
 80064de:	f7fe fcb5 	bl	8004e4c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80064e2:	4b0b      	ldr	r3, [pc, #44]	; (8006510 <prvInitialiseTaskLists+0x78>)
 80064e4:	4a05      	ldr	r2, [pc, #20]	; (80064fc <prvInitialiseTaskLists+0x64>)
 80064e6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80064e8:	4b0a      	ldr	r3, [pc, #40]	; (8006514 <prvInitialiseTaskLists+0x7c>)
 80064ea:	4a05      	ldr	r2, [pc, #20]	; (8006500 <prvInitialiseTaskLists+0x68>)
 80064ec:	601a      	str	r2, [r3, #0]
}
 80064ee:	bf00      	nop
 80064f0:	3708      	adds	r7, #8
 80064f2:	46bd      	mov	sp, r7
 80064f4:	bd80      	pop	{r7, pc}
 80064f6:	bf00      	nop
 80064f8:	20000a54 	.word	0x20000a54
 80064fc:	20000eb4 	.word	0x20000eb4
 8006500:	20000ec8 	.word	0x20000ec8
 8006504:	20000ee4 	.word	0x20000ee4
 8006508:	20000ef8 	.word	0x20000ef8
 800650c:	20000f10 	.word	0x20000f10
 8006510:	20000edc 	.word	0x20000edc
 8006514:	20000ee0 	.word	0x20000ee0

08006518 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006518:	b580      	push	{r7, lr}
 800651a:	b082      	sub	sp, #8
 800651c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800651e:	e019      	b.n	8006554 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006520:	f000 fdd8 	bl	80070d4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006524:	4b10      	ldr	r3, [pc, #64]	; (8006568 <prvCheckTasksWaitingTermination+0x50>)
 8006526:	68db      	ldr	r3, [r3, #12]
 8006528:	68db      	ldr	r3, [r3, #12]
 800652a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	3304      	adds	r3, #4
 8006530:	4618      	mov	r0, r3
 8006532:	f7fe fd15 	bl	8004f60 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006536:	4b0d      	ldr	r3, [pc, #52]	; (800656c <prvCheckTasksWaitingTermination+0x54>)
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	3b01      	subs	r3, #1
 800653c:	4a0b      	ldr	r2, [pc, #44]	; (800656c <prvCheckTasksWaitingTermination+0x54>)
 800653e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006540:	4b0b      	ldr	r3, [pc, #44]	; (8006570 <prvCheckTasksWaitingTermination+0x58>)
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	3b01      	subs	r3, #1
 8006546:	4a0a      	ldr	r2, [pc, #40]	; (8006570 <prvCheckTasksWaitingTermination+0x58>)
 8006548:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800654a:	f000 fdf3 	bl	8007134 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800654e:	6878      	ldr	r0, [r7, #4]
 8006550:	f000 f810 	bl	8006574 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006554:	4b06      	ldr	r3, [pc, #24]	; (8006570 <prvCheckTasksWaitingTermination+0x58>)
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	2b00      	cmp	r3, #0
 800655a:	d1e1      	bne.n	8006520 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800655c:	bf00      	nop
 800655e:	bf00      	nop
 8006560:	3708      	adds	r7, #8
 8006562:	46bd      	mov	sp, r7
 8006564:	bd80      	pop	{r7, pc}
 8006566:	bf00      	nop
 8006568:	20000ef8 	.word	0x20000ef8
 800656c:	20000f24 	.word	0x20000f24
 8006570:	20000f0c 	.word	0x20000f0c

08006574 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006574:	b580      	push	{r7, lr}
 8006576:	b084      	sub	sp, #16
 8006578:	af00      	add	r7, sp, #0
 800657a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	3354      	adds	r3, #84	; 0x54
 8006580:	4618      	mov	r0, r3
 8006582:	f001 f8fd 	bl	8007780 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800658c:	2b00      	cmp	r3, #0
 800658e:	d108      	bne.n	80065a2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006594:	4618      	mov	r0, r3
 8006596:	f000 ff8b 	bl	80074b0 <vPortFree>
				vPortFree( pxTCB );
 800659a:	6878      	ldr	r0, [r7, #4]
 800659c:	f000 ff88 	bl	80074b0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80065a0:	e018      	b.n	80065d4 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80065a8:	2b01      	cmp	r3, #1
 80065aa:	d103      	bne.n	80065b4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80065ac:	6878      	ldr	r0, [r7, #4]
 80065ae:	f000 ff7f 	bl	80074b0 <vPortFree>
	}
 80065b2:	e00f      	b.n	80065d4 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80065ba:	2b02      	cmp	r3, #2
 80065bc:	d00a      	beq.n	80065d4 <prvDeleteTCB+0x60>
	__asm volatile
 80065be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065c2:	f383 8811 	msr	BASEPRI, r3
 80065c6:	f3bf 8f6f 	isb	sy
 80065ca:	f3bf 8f4f 	dsb	sy
 80065ce:	60fb      	str	r3, [r7, #12]
}
 80065d0:	bf00      	nop
 80065d2:	e7fe      	b.n	80065d2 <prvDeleteTCB+0x5e>
	}
 80065d4:	bf00      	nop
 80065d6:	3710      	adds	r7, #16
 80065d8:	46bd      	mov	sp, r7
 80065da:	bd80      	pop	{r7, pc}

080065dc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80065dc:	b480      	push	{r7}
 80065de:	b083      	sub	sp, #12
 80065e0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80065e2:	4b0c      	ldr	r3, [pc, #48]	; (8006614 <prvResetNextTaskUnblockTime+0x38>)
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d104      	bne.n	80065f6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80065ec:	4b0a      	ldr	r3, [pc, #40]	; (8006618 <prvResetNextTaskUnblockTime+0x3c>)
 80065ee:	f04f 32ff 	mov.w	r2, #4294967295
 80065f2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80065f4:	e008      	b.n	8006608 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80065f6:	4b07      	ldr	r3, [pc, #28]	; (8006614 <prvResetNextTaskUnblockTime+0x38>)
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	68db      	ldr	r3, [r3, #12]
 80065fc:	68db      	ldr	r3, [r3, #12]
 80065fe:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	685b      	ldr	r3, [r3, #4]
 8006604:	4a04      	ldr	r2, [pc, #16]	; (8006618 <prvResetNextTaskUnblockTime+0x3c>)
 8006606:	6013      	str	r3, [r2, #0]
}
 8006608:	bf00      	nop
 800660a:	370c      	adds	r7, #12
 800660c:	46bd      	mov	sp, r7
 800660e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006612:	4770      	bx	lr
 8006614:	20000edc 	.word	0x20000edc
 8006618:	20000f44 	.word	0x20000f44

0800661c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800661c:	b480      	push	{r7}
 800661e:	b083      	sub	sp, #12
 8006620:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006622:	4b0b      	ldr	r3, [pc, #44]	; (8006650 <xTaskGetSchedulerState+0x34>)
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	2b00      	cmp	r3, #0
 8006628:	d102      	bne.n	8006630 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800662a:	2301      	movs	r3, #1
 800662c:	607b      	str	r3, [r7, #4]
 800662e:	e008      	b.n	8006642 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006630:	4b08      	ldr	r3, [pc, #32]	; (8006654 <xTaskGetSchedulerState+0x38>)
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	2b00      	cmp	r3, #0
 8006636:	d102      	bne.n	800663e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006638:	2302      	movs	r3, #2
 800663a:	607b      	str	r3, [r7, #4]
 800663c:	e001      	b.n	8006642 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800663e:	2300      	movs	r3, #0
 8006640:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006642:	687b      	ldr	r3, [r7, #4]
	}
 8006644:	4618      	mov	r0, r3
 8006646:	370c      	adds	r7, #12
 8006648:	46bd      	mov	sp, r7
 800664a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800664e:	4770      	bx	lr
 8006650:	20000f30 	.word	0x20000f30
 8006654:	20000f4c 	.word	0x20000f4c

08006658 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006658:	b580      	push	{r7, lr}
 800665a:	b086      	sub	sp, #24
 800665c:	af00      	add	r7, sp, #0
 800665e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006664:	2300      	movs	r3, #0
 8006666:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	2b00      	cmp	r3, #0
 800666c:	d056      	beq.n	800671c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800666e:	4b2e      	ldr	r3, [pc, #184]	; (8006728 <xTaskPriorityDisinherit+0xd0>)
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	693a      	ldr	r2, [r7, #16]
 8006674:	429a      	cmp	r2, r3
 8006676:	d00a      	beq.n	800668e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8006678:	f04f 0350 	mov.w	r3, #80	; 0x50
 800667c:	f383 8811 	msr	BASEPRI, r3
 8006680:	f3bf 8f6f 	isb	sy
 8006684:	f3bf 8f4f 	dsb	sy
 8006688:	60fb      	str	r3, [r7, #12]
}
 800668a:	bf00      	nop
 800668c:	e7fe      	b.n	800668c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800668e:	693b      	ldr	r3, [r7, #16]
 8006690:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006692:	2b00      	cmp	r3, #0
 8006694:	d10a      	bne.n	80066ac <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8006696:	f04f 0350 	mov.w	r3, #80	; 0x50
 800669a:	f383 8811 	msr	BASEPRI, r3
 800669e:	f3bf 8f6f 	isb	sy
 80066a2:	f3bf 8f4f 	dsb	sy
 80066a6:	60bb      	str	r3, [r7, #8]
}
 80066a8:	bf00      	nop
 80066aa:	e7fe      	b.n	80066aa <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80066ac:	693b      	ldr	r3, [r7, #16]
 80066ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80066b0:	1e5a      	subs	r2, r3, #1
 80066b2:	693b      	ldr	r3, [r7, #16]
 80066b4:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80066b6:	693b      	ldr	r3, [r7, #16]
 80066b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066ba:	693b      	ldr	r3, [r7, #16]
 80066bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80066be:	429a      	cmp	r2, r3
 80066c0:	d02c      	beq.n	800671c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80066c2:	693b      	ldr	r3, [r7, #16]
 80066c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d128      	bne.n	800671c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80066ca:	693b      	ldr	r3, [r7, #16]
 80066cc:	3304      	adds	r3, #4
 80066ce:	4618      	mov	r0, r3
 80066d0:	f7fe fc46 	bl	8004f60 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80066d4:	693b      	ldr	r3, [r7, #16]
 80066d6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80066d8:	693b      	ldr	r3, [r7, #16]
 80066da:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80066dc:	693b      	ldr	r3, [r7, #16]
 80066de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066e0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80066e4:	693b      	ldr	r3, [r7, #16]
 80066e6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80066e8:	693b      	ldr	r3, [r7, #16]
 80066ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066ec:	4b0f      	ldr	r3, [pc, #60]	; (800672c <xTaskPriorityDisinherit+0xd4>)
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	429a      	cmp	r2, r3
 80066f2:	d903      	bls.n	80066fc <xTaskPriorityDisinherit+0xa4>
 80066f4:	693b      	ldr	r3, [r7, #16]
 80066f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066f8:	4a0c      	ldr	r2, [pc, #48]	; (800672c <xTaskPriorityDisinherit+0xd4>)
 80066fa:	6013      	str	r3, [r2, #0]
 80066fc:	693b      	ldr	r3, [r7, #16]
 80066fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006700:	4613      	mov	r3, r2
 8006702:	009b      	lsls	r3, r3, #2
 8006704:	4413      	add	r3, r2
 8006706:	009b      	lsls	r3, r3, #2
 8006708:	4a09      	ldr	r2, [pc, #36]	; (8006730 <xTaskPriorityDisinherit+0xd8>)
 800670a:	441a      	add	r2, r3
 800670c:	693b      	ldr	r3, [r7, #16]
 800670e:	3304      	adds	r3, #4
 8006710:	4619      	mov	r1, r3
 8006712:	4610      	mov	r0, r2
 8006714:	f7fe fbc7 	bl	8004ea6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006718:	2301      	movs	r3, #1
 800671a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800671c:	697b      	ldr	r3, [r7, #20]
	}
 800671e:	4618      	mov	r0, r3
 8006720:	3718      	adds	r7, #24
 8006722:	46bd      	mov	sp, r7
 8006724:	bd80      	pop	{r7, pc}
 8006726:	bf00      	nop
 8006728:	20000a50 	.word	0x20000a50
 800672c:	20000f2c 	.word	0x20000f2c
 8006730:	20000a54 	.word	0x20000a54

08006734 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006734:	b580      	push	{r7, lr}
 8006736:	b084      	sub	sp, #16
 8006738:	af00      	add	r7, sp, #0
 800673a:	6078      	str	r0, [r7, #4]
 800673c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800673e:	4b21      	ldr	r3, [pc, #132]	; (80067c4 <prvAddCurrentTaskToDelayedList+0x90>)
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006744:	4b20      	ldr	r3, [pc, #128]	; (80067c8 <prvAddCurrentTaskToDelayedList+0x94>)
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	3304      	adds	r3, #4
 800674a:	4618      	mov	r0, r3
 800674c:	f7fe fc08 	bl	8004f60 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006756:	d10a      	bne.n	800676e <prvAddCurrentTaskToDelayedList+0x3a>
 8006758:	683b      	ldr	r3, [r7, #0]
 800675a:	2b00      	cmp	r3, #0
 800675c:	d007      	beq.n	800676e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800675e:	4b1a      	ldr	r3, [pc, #104]	; (80067c8 <prvAddCurrentTaskToDelayedList+0x94>)
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	3304      	adds	r3, #4
 8006764:	4619      	mov	r1, r3
 8006766:	4819      	ldr	r0, [pc, #100]	; (80067cc <prvAddCurrentTaskToDelayedList+0x98>)
 8006768:	f7fe fb9d 	bl	8004ea6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800676c:	e026      	b.n	80067bc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800676e:	68fa      	ldr	r2, [r7, #12]
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	4413      	add	r3, r2
 8006774:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006776:	4b14      	ldr	r3, [pc, #80]	; (80067c8 <prvAddCurrentTaskToDelayedList+0x94>)
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	68ba      	ldr	r2, [r7, #8]
 800677c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800677e:	68ba      	ldr	r2, [r7, #8]
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	429a      	cmp	r2, r3
 8006784:	d209      	bcs.n	800679a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006786:	4b12      	ldr	r3, [pc, #72]	; (80067d0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8006788:	681a      	ldr	r2, [r3, #0]
 800678a:	4b0f      	ldr	r3, [pc, #60]	; (80067c8 <prvAddCurrentTaskToDelayedList+0x94>)
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	3304      	adds	r3, #4
 8006790:	4619      	mov	r1, r3
 8006792:	4610      	mov	r0, r2
 8006794:	f7fe fbab 	bl	8004eee <vListInsert>
}
 8006798:	e010      	b.n	80067bc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800679a:	4b0e      	ldr	r3, [pc, #56]	; (80067d4 <prvAddCurrentTaskToDelayedList+0xa0>)
 800679c:	681a      	ldr	r2, [r3, #0]
 800679e:	4b0a      	ldr	r3, [pc, #40]	; (80067c8 <prvAddCurrentTaskToDelayedList+0x94>)
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	3304      	adds	r3, #4
 80067a4:	4619      	mov	r1, r3
 80067a6:	4610      	mov	r0, r2
 80067a8:	f7fe fba1 	bl	8004eee <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80067ac:	4b0a      	ldr	r3, [pc, #40]	; (80067d8 <prvAddCurrentTaskToDelayedList+0xa4>)
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	68ba      	ldr	r2, [r7, #8]
 80067b2:	429a      	cmp	r2, r3
 80067b4:	d202      	bcs.n	80067bc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80067b6:	4a08      	ldr	r2, [pc, #32]	; (80067d8 <prvAddCurrentTaskToDelayedList+0xa4>)
 80067b8:	68bb      	ldr	r3, [r7, #8]
 80067ba:	6013      	str	r3, [r2, #0]
}
 80067bc:	bf00      	nop
 80067be:	3710      	adds	r7, #16
 80067c0:	46bd      	mov	sp, r7
 80067c2:	bd80      	pop	{r7, pc}
 80067c4:	20000f28 	.word	0x20000f28
 80067c8:	20000a50 	.word	0x20000a50
 80067cc:	20000f10 	.word	0x20000f10
 80067d0:	20000ee0 	.word	0x20000ee0
 80067d4:	20000edc 	.word	0x20000edc
 80067d8:	20000f44 	.word	0x20000f44

080067dc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80067dc:	b580      	push	{r7, lr}
 80067de:	b08a      	sub	sp, #40	; 0x28
 80067e0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80067e2:	2300      	movs	r3, #0
 80067e4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80067e6:	f000 fb07 	bl	8006df8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80067ea:	4b1c      	ldr	r3, [pc, #112]	; (800685c <xTimerCreateTimerTask+0x80>)
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d021      	beq.n	8006836 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80067f2:	2300      	movs	r3, #0
 80067f4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80067f6:	2300      	movs	r3, #0
 80067f8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80067fa:	1d3a      	adds	r2, r7, #4
 80067fc:	f107 0108 	add.w	r1, r7, #8
 8006800:	f107 030c 	add.w	r3, r7, #12
 8006804:	4618      	mov	r0, r3
 8006806:	f7fe fb07 	bl	8004e18 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800680a:	6879      	ldr	r1, [r7, #4]
 800680c:	68bb      	ldr	r3, [r7, #8]
 800680e:	68fa      	ldr	r2, [r7, #12]
 8006810:	9202      	str	r2, [sp, #8]
 8006812:	9301      	str	r3, [sp, #4]
 8006814:	2302      	movs	r3, #2
 8006816:	9300      	str	r3, [sp, #0]
 8006818:	2300      	movs	r3, #0
 800681a:	460a      	mov	r2, r1
 800681c:	4910      	ldr	r1, [pc, #64]	; (8006860 <xTimerCreateTimerTask+0x84>)
 800681e:	4811      	ldr	r0, [pc, #68]	; (8006864 <xTimerCreateTimerTask+0x88>)
 8006820:	f7ff f8b4 	bl	800598c <xTaskCreateStatic>
 8006824:	4603      	mov	r3, r0
 8006826:	4a10      	ldr	r2, [pc, #64]	; (8006868 <xTimerCreateTimerTask+0x8c>)
 8006828:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800682a:	4b0f      	ldr	r3, [pc, #60]	; (8006868 <xTimerCreateTimerTask+0x8c>)
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	2b00      	cmp	r3, #0
 8006830:	d001      	beq.n	8006836 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8006832:	2301      	movs	r3, #1
 8006834:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006836:	697b      	ldr	r3, [r7, #20]
 8006838:	2b00      	cmp	r3, #0
 800683a:	d10a      	bne.n	8006852 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800683c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006840:	f383 8811 	msr	BASEPRI, r3
 8006844:	f3bf 8f6f 	isb	sy
 8006848:	f3bf 8f4f 	dsb	sy
 800684c:	613b      	str	r3, [r7, #16]
}
 800684e:	bf00      	nop
 8006850:	e7fe      	b.n	8006850 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8006852:	697b      	ldr	r3, [r7, #20]
}
 8006854:	4618      	mov	r0, r3
 8006856:	3718      	adds	r7, #24
 8006858:	46bd      	mov	sp, r7
 800685a:	bd80      	pop	{r7, pc}
 800685c:	20000f80 	.word	0x20000f80
 8006860:	08007914 	.word	0x08007914
 8006864:	080069a1 	.word	0x080069a1
 8006868:	20000f84 	.word	0x20000f84

0800686c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800686c:	b580      	push	{r7, lr}
 800686e:	b08a      	sub	sp, #40	; 0x28
 8006870:	af00      	add	r7, sp, #0
 8006872:	60f8      	str	r0, [r7, #12]
 8006874:	60b9      	str	r1, [r7, #8]
 8006876:	607a      	str	r2, [r7, #4]
 8006878:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800687a:	2300      	movs	r3, #0
 800687c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	2b00      	cmp	r3, #0
 8006882:	d10a      	bne.n	800689a <xTimerGenericCommand+0x2e>
	__asm volatile
 8006884:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006888:	f383 8811 	msr	BASEPRI, r3
 800688c:	f3bf 8f6f 	isb	sy
 8006890:	f3bf 8f4f 	dsb	sy
 8006894:	623b      	str	r3, [r7, #32]
}
 8006896:	bf00      	nop
 8006898:	e7fe      	b.n	8006898 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800689a:	4b1a      	ldr	r3, [pc, #104]	; (8006904 <xTimerGenericCommand+0x98>)
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d02a      	beq.n	80068f8 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80068a2:	68bb      	ldr	r3, [r7, #8]
 80068a4:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80068ae:	68bb      	ldr	r3, [r7, #8]
 80068b0:	2b05      	cmp	r3, #5
 80068b2:	dc18      	bgt.n	80068e6 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80068b4:	f7ff feb2 	bl	800661c <xTaskGetSchedulerState>
 80068b8:	4603      	mov	r3, r0
 80068ba:	2b02      	cmp	r3, #2
 80068bc:	d109      	bne.n	80068d2 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80068be:	4b11      	ldr	r3, [pc, #68]	; (8006904 <xTimerGenericCommand+0x98>)
 80068c0:	6818      	ldr	r0, [r3, #0]
 80068c2:	f107 0110 	add.w	r1, r7, #16
 80068c6:	2300      	movs	r3, #0
 80068c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80068ca:	f7fe fc77 	bl	80051bc <xQueueGenericSend>
 80068ce:	6278      	str	r0, [r7, #36]	; 0x24
 80068d0:	e012      	b.n	80068f8 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80068d2:	4b0c      	ldr	r3, [pc, #48]	; (8006904 <xTimerGenericCommand+0x98>)
 80068d4:	6818      	ldr	r0, [r3, #0]
 80068d6:	f107 0110 	add.w	r1, r7, #16
 80068da:	2300      	movs	r3, #0
 80068dc:	2200      	movs	r2, #0
 80068de:	f7fe fc6d 	bl	80051bc <xQueueGenericSend>
 80068e2:	6278      	str	r0, [r7, #36]	; 0x24
 80068e4:	e008      	b.n	80068f8 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80068e6:	4b07      	ldr	r3, [pc, #28]	; (8006904 <xTimerGenericCommand+0x98>)
 80068e8:	6818      	ldr	r0, [r3, #0]
 80068ea:	f107 0110 	add.w	r1, r7, #16
 80068ee:	2300      	movs	r3, #0
 80068f0:	683a      	ldr	r2, [r7, #0]
 80068f2:	f7fe fd61 	bl	80053b8 <xQueueGenericSendFromISR>
 80068f6:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80068f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80068fa:	4618      	mov	r0, r3
 80068fc:	3728      	adds	r7, #40	; 0x28
 80068fe:	46bd      	mov	sp, r7
 8006900:	bd80      	pop	{r7, pc}
 8006902:	bf00      	nop
 8006904:	20000f80 	.word	0x20000f80

08006908 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006908:	b580      	push	{r7, lr}
 800690a:	b088      	sub	sp, #32
 800690c:	af02      	add	r7, sp, #8
 800690e:	6078      	str	r0, [r7, #4]
 8006910:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006912:	4b22      	ldr	r3, [pc, #136]	; (800699c <prvProcessExpiredTimer+0x94>)
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	68db      	ldr	r3, [r3, #12]
 8006918:	68db      	ldr	r3, [r3, #12]
 800691a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800691c:	697b      	ldr	r3, [r7, #20]
 800691e:	3304      	adds	r3, #4
 8006920:	4618      	mov	r0, r3
 8006922:	f7fe fb1d 	bl	8004f60 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006926:	697b      	ldr	r3, [r7, #20]
 8006928:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800692c:	f003 0304 	and.w	r3, r3, #4
 8006930:	2b00      	cmp	r3, #0
 8006932:	d022      	beq.n	800697a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006934:	697b      	ldr	r3, [r7, #20]
 8006936:	699a      	ldr	r2, [r3, #24]
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	18d1      	adds	r1, r2, r3
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	683a      	ldr	r2, [r7, #0]
 8006940:	6978      	ldr	r0, [r7, #20]
 8006942:	f000 f8d1 	bl	8006ae8 <prvInsertTimerInActiveList>
 8006946:	4603      	mov	r3, r0
 8006948:	2b00      	cmp	r3, #0
 800694a:	d01f      	beq.n	800698c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800694c:	2300      	movs	r3, #0
 800694e:	9300      	str	r3, [sp, #0]
 8006950:	2300      	movs	r3, #0
 8006952:	687a      	ldr	r2, [r7, #4]
 8006954:	2100      	movs	r1, #0
 8006956:	6978      	ldr	r0, [r7, #20]
 8006958:	f7ff ff88 	bl	800686c <xTimerGenericCommand>
 800695c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800695e:	693b      	ldr	r3, [r7, #16]
 8006960:	2b00      	cmp	r3, #0
 8006962:	d113      	bne.n	800698c <prvProcessExpiredTimer+0x84>
	__asm volatile
 8006964:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006968:	f383 8811 	msr	BASEPRI, r3
 800696c:	f3bf 8f6f 	isb	sy
 8006970:	f3bf 8f4f 	dsb	sy
 8006974:	60fb      	str	r3, [r7, #12]
}
 8006976:	bf00      	nop
 8006978:	e7fe      	b.n	8006978 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800697a:	697b      	ldr	r3, [r7, #20]
 800697c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006980:	f023 0301 	bic.w	r3, r3, #1
 8006984:	b2da      	uxtb	r2, r3
 8006986:	697b      	ldr	r3, [r7, #20]
 8006988:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800698c:	697b      	ldr	r3, [r7, #20]
 800698e:	6a1b      	ldr	r3, [r3, #32]
 8006990:	6978      	ldr	r0, [r7, #20]
 8006992:	4798      	blx	r3
}
 8006994:	bf00      	nop
 8006996:	3718      	adds	r7, #24
 8006998:	46bd      	mov	sp, r7
 800699a:	bd80      	pop	{r7, pc}
 800699c:	20000f78 	.word	0x20000f78

080069a0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80069a0:	b580      	push	{r7, lr}
 80069a2:	b084      	sub	sp, #16
 80069a4:	af00      	add	r7, sp, #0
 80069a6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80069a8:	f107 0308 	add.w	r3, r7, #8
 80069ac:	4618      	mov	r0, r3
 80069ae:	f000 f857 	bl	8006a60 <prvGetNextExpireTime>
 80069b2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80069b4:	68bb      	ldr	r3, [r7, #8]
 80069b6:	4619      	mov	r1, r3
 80069b8:	68f8      	ldr	r0, [r7, #12]
 80069ba:	f000 f803 	bl	80069c4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80069be:	f000 f8d5 	bl	8006b6c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80069c2:	e7f1      	b.n	80069a8 <prvTimerTask+0x8>

080069c4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80069c4:	b580      	push	{r7, lr}
 80069c6:	b084      	sub	sp, #16
 80069c8:	af00      	add	r7, sp, #0
 80069ca:	6078      	str	r0, [r7, #4]
 80069cc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80069ce:	f7ff fa39 	bl	8005e44 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80069d2:	f107 0308 	add.w	r3, r7, #8
 80069d6:	4618      	mov	r0, r3
 80069d8:	f000 f866 	bl	8006aa8 <prvSampleTimeNow>
 80069dc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80069de:	68bb      	ldr	r3, [r7, #8]
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d130      	bne.n	8006a46 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80069e4:	683b      	ldr	r3, [r7, #0]
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d10a      	bne.n	8006a00 <prvProcessTimerOrBlockTask+0x3c>
 80069ea:	687a      	ldr	r2, [r7, #4]
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	429a      	cmp	r2, r3
 80069f0:	d806      	bhi.n	8006a00 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80069f2:	f7ff fa35 	bl	8005e60 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80069f6:	68f9      	ldr	r1, [r7, #12]
 80069f8:	6878      	ldr	r0, [r7, #4]
 80069fa:	f7ff ff85 	bl	8006908 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80069fe:	e024      	b.n	8006a4a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006a00:	683b      	ldr	r3, [r7, #0]
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d008      	beq.n	8006a18 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006a06:	4b13      	ldr	r3, [pc, #76]	; (8006a54 <prvProcessTimerOrBlockTask+0x90>)
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d101      	bne.n	8006a14 <prvProcessTimerOrBlockTask+0x50>
 8006a10:	2301      	movs	r3, #1
 8006a12:	e000      	b.n	8006a16 <prvProcessTimerOrBlockTask+0x52>
 8006a14:	2300      	movs	r3, #0
 8006a16:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006a18:	4b0f      	ldr	r3, [pc, #60]	; (8006a58 <prvProcessTimerOrBlockTask+0x94>)
 8006a1a:	6818      	ldr	r0, [r3, #0]
 8006a1c:	687a      	ldr	r2, [r7, #4]
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	1ad3      	subs	r3, r2, r3
 8006a22:	683a      	ldr	r2, [r7, #0]
 8006a24:	4619      	mov	r1, r3
 8006a26:	f7fe ff7d 	bl	8005924 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006a2a:	f7ff fa19 	bl	8005e60 <xTaskResumeAll>
 8006a2e:	4603      	mov	r3, r0
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d10a      	bne.n	8006a4a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006a34:	4b09      	ldr	r3, [pc, #36]	; (8006a5c <prvProcessTimerOrBlockTask+0x98>)
 8006a36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006a3a:	601a      	str	r2, [r3, #0]
 8006a3c:	f3bf 8f4f 	dsb	sy
 8006a40:	f3bf 8f6f 	isb	sy
}
 8006a44:	e001      	b.n	8006a4a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006a46:	f7ff fa0b 	bl	8005e60 <xTaskResumeAll>
}
 8006a4a:	bf00      	nop
 8006a4c:	3710      	adds	r7, #16
 8006a4e:	46bd      	mov	sp, r7
 8006a50:	bd80      	pop	{r7, pc}
 8006a52:	bf00      	nop
 8006a54:	20000f7c 	.word	0x20000f7c
 8006a58:	20000f80 	.word	0x20000f80
 8006a5c:	e000ed04 	.word	0xe000ed04

08006a60 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006a60:	b480      	push	{r7}
 8006a62:	b085      	sub	sp, #20
 8006a64:	af00      	add	r7, sp, #0
 8006a66:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006a68:	4b0e      	ldr	r3, [pc, #56]	; (8006aa4 <prvGetNextExpireTime+0x44>)
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d101      	bne.n	8006a76 <prvGetNextExpireTime+0x16>
 8006a72:	2201      	movs	r2, #1
 8006a74:	e000      	b.n	8006a78 <prvGetNextExpireTime+0x18>
 8006a76:	2200      	movs	r2, #0
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d105      	bne.n	8006a90 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006a84:	4b07      	ldr	r3, [pc, #28]	; (8006aa4 <prvGetNextExpireTime+0x44>)
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	68db      	ldr	r3, [r3, #12]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	60fb      	str	r3, [r7, #12]
 8006a8e:	e001      	b.n	8006a94 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006a90:	2300      	movs	r3, #0
 8006a92:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006a94:	68fb      	ldr	r3, [r7, #12]
}
 8006a96:	4618      	mov	r0, r3
 8006a98:	3714      	adds	r7, #20
 8006a9a:	46bd      	mov	sp, r7
 8006a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa0:	4770      	bx	lr
 8006aa2:	bf00      	nop
 8006aa4:	20000f78 	.word	0x20000f78

08006aa8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006aa8:	b580      	push	{r7, lr}
 8006aaa:	b084      	sub	sp, #16
 8006aac:	af00      	add	r7, sp, #0
 8006aae:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006ab0:	f7ff fa74 	bl	8005f9c <xTaskGetTickCount>
 8006ab4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006ab6:	4b0b      	ldr	r3, [pc, #44]	; (8006ae4 <prvSampleTimeNow+0x3c>)
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	68fa      	ldr	r2, [r7, #12]
 8006abc:	429a      	cmp	r2, r3
 8006abe:	d205      	bcs.n	8006acc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006ac0:	f000 f936 	bl	8006d30 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	2201      	movs	r2, #1
 8006ac8:	601a      	str	r2, [r3, #0]
 8006aca:	e002      	b.n	8006ad2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	2200      	movs	r2, #0
 8006ad0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006ad2:	4a04      	ldr	r2, [pc, #16]	; (8006ae4 <prvSampleTimeNow+0x3c>)
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006ad8:	68fb      	ldr	r3, [r7, #12]
}
 8006ada:	4618      	mov	r0, r3
 8006adc:	3710      	adds	r7, #16
 8006ade:	46bd      	mov	sp, r7
 8006ae0:	bd80      	pop	{r7, pc}
 8006ae2:	bf00      	nop
 8006ae4:	20000f88 	.word	0x20000f88

08006ae8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006ae8:	b580      	push	{r7, lr}
 8006aea:	b086      	sub	sp, #24
 8006aec:	af00      	add	r7, sp, #0
 8006aee:	60f8      	str	r0, [r7, #12]
 8006af0:	60b9      	str	r1, [r7, #8]
 8006af2:	607a      	str	r2, [r7, #4]
 8006af4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006af6:	2300      	movs	r3, #0
 8006af8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	68ba      	ldr	r2, [r7, #8]
 8006afe:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	68fa      	ldr	r2, [r7, #12]
 8006b04:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006b06:	68ba      	ldr	r2, [r7, #8]
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	429a      	cmp	r2, r3
 8006b0c:	d812      	bhi.n	8006b34 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006b0e:	687a      	ldr	r2, [r7, #4]
 8006b10:	683b      	ldr	r3, [r7, #0]
 8006b12:	1ad2      	subs	r2, r2, r3
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	699b      	ldr	r3, [r3, #24]
 8006b18:	429a      	cmp	r2, r3
 8006b1a:	d302      	bcc.n	8006b22 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006b1c:	2301      	movs	r3, #1
 8006b1e:	617b      	str	r3, [r7, #20]
 8006b20:	e01b      	b.n	8006b5a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006b22:	4b10      	ldr	r3, [pc, #64]	; (8006b64 <prvInsertTimerInActiveList+0x7c>)
 8006b24:	681a      	ldr	r2, [r3, #0]
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	3304      	adds	r3, #4
 8006b2a:	4619      	mov	r1, r3
 8006b2c:	4610      	mov	r0, r2
 8006b2e:	f7fe f9de 	bl	8004eee <vListInsert>
 8006b32:	e012      	b.n	8006b5a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006b34:	687a      	ldr	r2, [r7, #4]
 8006b36:	683b      	ldr	r3, [r7, #0]
 8006b38:	429a      	cmp	r2, r3
 8006b3a:	d206      	bcs.n	8006b4a <prvInsertTimerInActiveList+0x62>
 8006b3c:	68ba      	ldr	r2, [r7, #8]
 8006b3e:	683b      	ldr	r3, [r7, #0]
 8006b40:	429a      	cmp	r2, r3
 8006b42:	d302      	bcc.n	8006b4a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006b44:	2301      	movs	r3, #1
 8006b46:	617b      	str	r3, [r7, #20]
 8006b48:	e007      	b.n	8006b5a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006b4a:	4b07      	ldr	r3, [pc, #28]	; (8006b68 <prvInsertTimerInActiveList+0x80>)
 8006b4c:	681a      	ldr	r2, [r3, #0]
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	3304      	adds	r3, #4
 8006b52:	4619      	mov	r1, r3
 8006b54:	4610      	mov	r0, r2
 8006b56:	f7fe f9ca 	bl	8004eee <vListInsert>
		}
	}

	return xProcessTimerNow;
 8006b5a:	697b      	ldr	r3, [r7, #20]
}
 8006b5c:	4618      	mov	r0, r3
 8006b5e:	3718      	adds	r7, #24
 8006b60:	46bd      	mov	sp, r7
 8006b62:	bd80      	pop	{r7, pc}
 8006b64:	20000f7c 	.word	0x20000f7c
 8006b68:	20000f78 	.word	0x20000f78

08006b6c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006b6c:	b580      	push	{r7, lr}
 8006b6e:	b08e      	sub	sp, #56	; 0x38
 8006b70:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006b72:	e0ca      	b.n	8006d0a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	da18      	bge.n	8006bac <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8006b7a:	1d3b      	adds	r3, r7, #4
 8006b7c:	3304      	adds	r3, #4
 8006b7e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006b80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d10a      	bne.n	8006b9c <prvProcessReceivedCommands+0x30>
	__asm volatile
 8006b86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b8a:	f383 8811 	msr	BASEPRI, r3
 8006b8e:	f3bf 8f6f 	isb	sy
 8006b92:	f3bf 8f4f 	dsb	sy
 8006b96:	61fb      	str	r3, [r7, #28]
}
 8006b98:	bf00      	nop
 8006b9a:	e7fe      	b.n	8006b9a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006b9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006ba2:	6850      	ldr	r0, [r2, #4]
 8006ba4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006ba6:	6892      	ldr	r2, [r2, #8]
 8006ba8:	4611      	mov	r1, r2
 8006baa:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	f2c0 80aa 	blt.w	8006d08 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006bb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bba:	695b      	ldr	r3, [r3, #20]
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d004      	beq.n	8006bca <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006bc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bc2:	3304      	adds	r3, #4
 8006bc4:	4618      	mov	r0, r3
 8006bc6:	f7fe f9cb 	bl	8004f60 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006bca:	463b      	mov	r3, r7
 8006bcc:	4618      	mov	r0, r3
 8006bce:	f7ff ff6b 	bl	8006aa8 <prvSampleTimeNow>
 8006bd2:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	2b09      	cmp	r3, #9
 8006bd8:	f200 8097 	bhi.w	8006d0a <prvProcessReceivedCommands+0x19e>
 8006bdc:	a201      	add	r2, pc, #4	; (adr r2, 8006be4 <prvProcessReceivedCommands+0x78>)
 8006bde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006be2:	bf00      	nop
 8006be4:	08006c0d 	.word	0x08006c0d
 8006be8:	08006c0d 	.word	0x08006c0d
 8006bec:	08006c0d 	.word	0x08006c0d
 8006bf0:	08006c81 	.word	0x08006c81
 8006bf4:	08006c95 	.word	0x08006c95
 8006bf8:	08006cdf 	.word	0x08006cdf
 8006bfc:	08006c0d 	.word	0x08006c0d
 8006c00:	08006c0d 	.word	0x08006c0d
 8006c04:	08006c81 	.word	0x08006c81
 8006c08:	08006c95 	.word	0x08006c95
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006c0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c0e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006c12:	f043 0301 	orr.w	r3, r3, #1
 8006c16:	b2da      	uxtb	r2, r3
 8006c18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c1a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006c1e:	68ba      	ldr	r2, [r7, #8]
 8006c20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c22:	699b      	ldr	r3, [r3, #24]
 8006c24:	18d1      	adds	r1, r2, r3
 8006c26:	68bb      	ldr	r3, [r7, #8]
 8006c28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c2a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006c2c:	f7ff ff5c 	bl	8006ae8 <prvInsertTimerInActiveList>
 8006c30:	4603      	mov	r3, r0
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d069      	beq.n	8006d0a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006c36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c38:	6a1b      	ldr	r3, [r3, #32]
 8006c3a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006c3c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006c3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c40:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006c44:	f003 0304 	and.w	r3, r3, #4
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d05e      	beq.n	8006d0a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006c4c:	68ba      	ldr	r2, [r7, #8]
 8006c4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c50:	699b      	ldr	r3, [r3, #24]
 8006c52:	441a      	add	r2, r3
 8006c54:	2300      	movs	r3, #0
 8006c56:	9300      	str	r3, [sp, #0]
 8006c58:	2300      	movs	r3, #0
 8006c5a:	2100      	movs	r1, #0
 8006c5c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006c5e:	f7ff fe05 	bl	800686c <xTimerGenericCommand>
 8006c62:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006c64:	6a3b      	ldr	r3, [r7, #32]
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d14f      	bne.n	8006d0a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8006c6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c6e:	f383 8811 	msr	BASEPRI, r3
 8006c72:	f3bf 8f6f 	isb	sy
 8006c76:	f3bf 8f4f 	dsb	sy
 8006c7a:	61bb      	str	r3, [r7, #24]
}
 8006c7c:	bf00      	nop
 8006c7e:	e7fe      	b.n	8006c7e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006c80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c82:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006c86:	f023 0301 	bic.w	r3, r3, #1
 8006c8a:	b2da      	uxtb	r2, r3
 8006c8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c8e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8006c92:	e03a      	b.n	8006d0a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006c94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c96:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006c9a:	f043 0301 	orr.w	r3, r3, #1
 8006c9e:	b2da      	uxtb	r2, r3
 8006ca0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ca2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006ca6:	68ba      	ldr	r2, [r7, #8]
 8006ca8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006caa:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006cac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cae:	699b      	ldr	r3, [r3, #24]
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d10a      	bne.n	8006cca <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8006cb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cb8:	f383 8811 	msr	BASEPRI, r3
 8006cbc:	f3bf 8f6f 	isb	sy
 8006cc0:	f3bf 8f4f 	dsb	sy
 8006cc4:	617b      	str	r3, [r7, #20]
}
 8006cc6:	bf00      	nop
 8006cc8:	e7fe      	b.n	8006cc8 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006cca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ccc:	699a      	ldr	r2, [r3, #24]
 8006cce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cd0:	18d1      	adds	r1, r2, r3
 8006cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cd4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006cd6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006cd8:	f7ff ff06 	bl	8006ae8 <prvInsertTimerInActiveList>
					break;
 8006cdc:	e015      	b.n	8006d0a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8006cde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ce0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006ce4:	f003 0302 	and.w	r3, r3, #2
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d103      	bne.n	8006cf4 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8006cec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006cee:	f000 fbdf 	bl	80074b0 <vPortFree>
 8006cf2:	e00a      	b.n	8006d0a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006cf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cf6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006cfa:	f023 0301 	bic.w	r3, r3, #1
 8006cfe:	b2da      	uxtb	r2, r3
 8006d00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d02:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8006d06:	e000      	b.n	8006d0a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8006d08:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006d0a:	4b08      	ldr	r3, [pc, #32]	; (8006d2c <prvProcessReceivedCommands+0x1c0>)
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	1d39      	adds	r1, r7, #4
 8006d10:	2200      	movs	r2, #0
 8006d12:	4618      	mov	r0, r3
 8006d14:	f7fe fbec 	bl	80054f0 <xQueueReceive>
 8006d18:	4603      	mov	r3, r0
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	f47f af2a 	bne.w	8006b74 <prvProcessReceivedCommands+0x8>
	}
}
 8006d20:	bf00      	nop
 8006d22:	bf00      	nop
 8006d24:	3730      	adds	r7, #48	; 0x30
 8006d26:	46bd      	mov	sp, r7
 8006d28:	bd80      	pop	{r7, pc}
 8006d2a:	bf00      	nop
 8006d2c:	20000f80 	.word	0x20000f80

08006d30 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006d30:	b580      	push	{r7, lr}
 8006d32:	b088      	sub	sp, #32
 8006d34:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006d36:	e048      	b.n	8006dca <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006d38:	4b2d      	ldr	r3, [pc, #180]	; (8006df0 <prvSwitchTimerLists+0xc0>)
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	68db      	ldr	r3, [r3, #12]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006d42:	4b2b      	ldr	r3, [pc, #172]	; (8006df0 <prvSwitchTimerLists+0xc0>)
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	68db      	ldr	r3, [r3, #12]
 8006d48:	68db      	ldr	r3, [r3, #12]
 8006d4a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	3304      	adds	r3, #4
 8006d50:	4618      	mov	r0, r3
 8006d52:	f7fe f905 	bl	8004f60 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	6a1b      	ldr	r3, [r3, #32]
 8006d5a:	68f8      	ldr	r0, [r7, #12]
 8006d5c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006d64:	f003 0304 	and.w	r3, r3, #4
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d02e      	beq.n	8006dca <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	699b      	ldr	r3, [r3, #24]
 8006d70:	693a      	ldr	r2, [r7, #16]
 8006d72:	4413      	add	r3, r2
 8006d74:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006d76:	68ba      	ldr	r2, [r7, #8]
 8006d78:	693b      	ldr	r3, [r7, #16]
 8006d7a:	429a      	cmp	r2, r3
 8006d7c:	d90e      	bls.n	8006d9c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	68ba      	ldr	r2, [r7, #8]
 8006d82:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	68fa      	ldr	r2, [r7, #12]
 8006d88:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006d8a:	4b19      	ldr	r3, [pc, #100]	; (8006df0 <prvSwitchTimerLists+0xc0>)
 8006d8c:	681a      	ldr	r2, [r3, #0]
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	3304      	adds	r3, #4
 8006d92:	4619      	mov	r1, r3
 8006d94:	4610      	mov	r0, r2
 8006d96:	f7fe f8aa 	bl	8004eee <vListInsert>
 8006d9a:	e016      	b.n	8006dca <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006d9c:	2300      	movs	r3, #0
 8006d9e:	9300      	str	r3, [sp, #0]
 8006da0:	2300      	movs	r3, #0
 8006da2:	693a      	ldr	r2, [r7, #16]
 8006da4:	2100      	movs	r1, #0
 8006da6:	68f8      	ldr	r0, [r7, #12]
 8006da8:	f7ff fd60 	bl	800686c <xTimerGenericCommand>
 8006dac:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d10a      	bne.n	8006dca <prvSwitchTimerLists+0x9a>
	__asm volatile
 8006db4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006db8:	f383 8811 	msr	BASEPRI, r3
 8006dbc:	f3bf 8f6f 	isb	sy
 8006dc0:	f3bf 8f4f 	dsb	sy
 8006dc4:	603b      	str	r3, [r7, #0]
}
 8006dc6:	bf00      	nop
 8006dc8:	e7fe      	b.n	8006dc8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006dca:	4b09      	ldr	r3, [pc, #36]	; (8006df0 <prvSwitchTimerLists+0xc0>)
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d1b1      	bne.n	8006d38 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006dd4:	4b06      	ldr	r3, [pc, #24]	; (8006df0 <prvSwitchTimerLists+0xc0>)
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006dda:	4b06      	ldr	r3, [pc, #24]	; (8006df4 <prvSwitchTimerLists+0xc4>)
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	4a04      	ldr	r2, [pc, #16]	; (8006df0 <prvSwitchTimerLists+0xc0>)
 8006de0:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006de2:	4a04      	ldr	r2, [pc, #16]	; (8006df4 <prvSwitchTimerLists+0xc4>)
 8006de4:	697b      	ldr	r3, [r7, #20]
 8006de6:	6013      	str	r3, [r2, #0]
}
 8006de8:	bf00      	nop
 8006dea:	3718      	adds	r7, #24
 8006dec:	46bd      	mov	sp, r7
 8006dee:	bd80      	pop	{r7, pc}
 8006df0:	20000f78 	.word	0x20000f78
 8006df4:	20000f7c 	.word	0x20000f7c

08006df8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006df8:	b580      	push	{r7, lr}
 8006dfa:	b082      	sub	sp, #8
 8006dfc:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006dfe:	f000 f969 	bl	80070d4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006e02:	4b15      	ldr	r3, [pc, #84]	; (8006e58 <prvCheckForValidListAndQueue+0x60>)
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d120      	bne.n	8006e4c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8006e0a:	4814      	ldr	r0, [pc, #80]	; (8006e5c <prvCheckForValidListAndQueue+0x64>)
 8006e0c:	f7fe f81e 	bl	8004e4c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006e10:	4813      	ldr	r0, [pc, #76]	; (8006e60 <prvCheckForValidListAndQueue+0x68>)
 8006e12:	f7fe f81b 	bl	8004e4c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006e16:	4b13      	ldr	r3, [pc, #76]	; (8006e64 <prvCheckForValidListAndQueue+0x6c>)
 8006e18:	4a10      	ldr	r2, [pc, #64]	; (8006e5c <prvCheckForValidListAndQueue+0x64>)
 8006e1a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006e1c:	4b12      	ldr	r3, [pc, #72]	; (8006e68 <prvCheckForValidListAndQueue+0x70>)
 8006e1e:	4a10      	ldr	r2, [pc, #64]	; (8006e60 <prvCheckForValidListAndQueue+0x68>)
 8006e20:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006e22:	2300      	movs	r3, #0
 8006e24:	9300      	str	r3, [sp, #0]
 8006e26:	4b11      	ldr	r3, [pc, #68]	; (8006e6c <prvCheckForValidListAndQueue+0x74>)
 8006e28:	4a11      	ldr	r2, [pc, #68]	; (8006e70 <prvCheckForValidListAndQueue+0x78>)
 8006e2a:	2110      	movs	r1, #16
 8006e2c:	200a      	movs	r0, #10
 8006e2e:	f7fe f929 	bl	8005084 <xQueueGenericCreateStatic>
 8006e32:	4603      	mov	r3, r0
 8006e34:	4a08      	ldr	r2, [pc, #32]	; (8006e58 <prvCheckForValidListAndQueue+0x60>)
 8006e36:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006e38:	4b07      	ldr	r3, [pc, #28]	; (8006e58 <prvCheckForValidListAndQueue+0x60>)
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d005      	beq.n	8006e4c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006e40:	4b05      	ldr	r3, [pc, #20]	; (8006e58 <prvCheckForValidListAndQueue+0x60>)
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	490b      	ldr	r1, [pc, #44]	; (8006e74 <prvCheckForValidListAndQueue+0x7c>)
 8006e46:	4618      	mov	r0, r3
 8006e48:	f7fe fd42 	bl	80058d0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006e4c:	f000 f972 	bl	8007134 <vPortExitCritical>
}
 8006e50:	bf00      	nop
 8006e52:	46bd      	mov	sp, r7
 8006e54:	bd80      	pop	{r7, pc}
 8006e56:	bf00      	nop
 8006e58:	20000f80 	.word	0x20000f80
 8006e5c:	20000f50 	.word	0x20000f50
 8006e60:	20000f64 	.word	0x20000f64
 8006e64:	20000f78 	.word	0x20000f78
 8006e68:	20000f7c 	.word	0x20000f7c
 8006e6c:	2000102c 	.word	0x2000102c
 8006e70:	20000f8c 	.word	0x20000f8c
 8006e74:	0800791c 	.word	0x0800791c

08006e78 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006e78:	b480      	push	{r7}
 8006e7a:	b085      	sub	sp, #20
 8006e7c:	af00      	add	r7, sp, #0
 8006e7e:	60f8      	str	r0, [r7, #12]
 8006e80:	60b9      	str	r1, [r7, #8]
 8006e82:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	3b04      	subs	r3, #4
 8006e88:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006e90:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	3b04      	subs	r3, #4
 8006e96:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006e98:	68bb      	ldr	r3, [r7, #8]
 8006e9a:	f023 0201 	bic.w	r2, r3, #1
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	3b04      	subs	r3, #4
 8006ea6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006ea8:	4a0c      	ldr	r2, [pc, #48]	; (8006edc <pxPortInitialiseStack+0x64>)
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	3b14      	subs	r3, #20
 8006eb2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006eb4:	687a      	ldr	r2, [r7, #4]
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	3b04      	subs	r3, #4
 8006ebe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	f06f 0202 	mvn.w	r2, #2
 8006ec6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	3b20      	subs	r3, #32
 8006ecc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006ece:	68fb      	ldr	r3, [r7, #12]
}
 8006ed0:	4618      	mov	r0, r3
 8006ed2:	3714      	adds	r7, #20
 8006ed4:	46bd      	mov	sp, r7
 8006ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eda:	4770      	bx	lr
 8006edc:	08006ee1 	.word	0x08006ee1

08006ee0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006ee0:	b480      	push	{r7}
 8006ee2:	b085      	sub	sp, #20
 8006ee4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006ee6:	2300      	movs	r3, #0
 8006ee8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006eea:	4b12      	ldr	r3, [pc, #72]	; (8006f34 <prvTaskExitError+0x54>)
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ef2:	d00a      	beq.n	8006f0a <prvTaskExitError+0x2a>
	__asm volatile
 8006ef4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ef8:	f383 8811 	msr	BASEPRI, r3
 8006efc:	f3bf 8f6f 	isb	sy
 8006f00:	f3bf 8f4f 	dsb	sy
 8006f04:	60fb      	str	r3, [r7, #12]
}
 8006f06:	bf00      	nop
 8006f08:	e7fe      	b.n	8006f08 <prvTaskExitError+0x28>
	__asm volatile
 8006f0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f0e:	f383 8811 	msr	BASEPRI, r3
 8006f12:	f3bf 8f6f 	isb	sy
 8006f16:	f3bf 8f4f 	dsb	sy
 8006f1a:	60bb      	str	r3, [r7, #8]
}
 8006f1c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006f1e:	bf00      	nop
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d0fc      	beq.n	8006f20 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006f26:	bf00      	nop
 8006f28:	bf00      	nop
 8006f2a:	3714      	adds	r7, #20
 8006f2c:	46bd      	mov	sp, r7
 8006f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f32:	4770      	bx	lr
 8006f34:	2000000c 	.word	0x2000000c
	...

08006f40 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006f40:	4b07      	ldr	r3, [pc, #28]	; (8006f60 <pxCurrentTCBConst2>)
 8006f42:	6819      	ldr	r1, [r3, #0]
 8006f44:	6808      	ldr	r0, [r1, #0]
 8006f46:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f4a:	f380 8809 	msr	PSP, r0
 8006f4e:	f3bf 8f6f 	isb	sy
 8006f52:	f04f 0000 	mov.w	r0, #0
 8006f56:	f380 8811 	msr	BASEPRI, r0
 8006f5a:	4770      	bx	lr
 8006f5c:	f3af 8000 	nop.w

08006f60 <pxCurrentTCBConst2>:
 8006f60:	20000a50 	.word	0x20000a50
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006f64:	bf00      	nop
 8006f66:	bf00      	nop

08006f68 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006f68:	4808      	ldr	r0, [pc, #32]	; (8006f8c <prvPortStartFirstTask+0x24>)
 8006f6a:	6800      	ldr	r0, [r0, #0]
 8006f6c:	6800      	ldr	r0, [r0, #0]
 8006f6e:	f380 8808 	msr	MSP, r0
 8006f72:	f04f 0000 	mov.w	r0, #0
 8006f76:	f380 8814 	msr	CONTROL, r0
 8006f7a:	b662      	cpsie	i
 8006f7c:	b661      	cpsie	f
 8006f7e:	f3bf 8f4f 	dsb	sy
 8006f82:	f3bf 8f6f 	isb	sy
 8006f86:	df00      	svc	0
 8006f88:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006f8a:	bf00      	nop
 8006f8c:	e000ed08 	.word	0xe000ed08

08006f90 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006f90:	b580      	push	{r7, lr}
 8006f92:	b086      	sub	sp, #24
 8006f94:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006f96:	4b46      	ldr	r3, [pc, #280]	; (80070b0 <xPortStartScheduler+0x120>)
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	4a46      	ldr	r2, [pc, #280]	; (80070b4 <xPortStartScheduler+0x124>)
 8006f9c:	4293      	cmp	r3, r2
 8006f9e:	d10a      	bne.n	8006fb6 <xPortStartScheduler+0x26>
	__asm volatile
 8006fa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fa4:	f383 8811 	msr	BASEPRI, r3
 8006fa8:	f3bf 8f6f 	isb	sy
 8006fac:	f3bf 8f4f 	dsb	sy
 8006fb0:	613b      	str	r3, [r7, #16]
}
 8006fb2:	bf00      	nop
 8006fb4:	e7fe      	b.n	8006fb4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006fb6:	4b3e      	ldr	r3, [pc, #248]	; (80070b0 <xPortStartScheduler+0x120>)
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	4a3f      	ldr	r2, [pc, #252]	; (80070b8 <xPortStartScheduler+0x128>)
 8006fbc:	4293      	cmp	r3, r2
 8006fbe:	d10a      	bne.n	8006fd6 <xPortStartScheduler+0x46>
	__asm volatile
 8006fc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fc4:	f383 8811 	msr	BASEPRI, r3
 8006fc8:	f3bf 8f6f 	isb	sy
 8006fcc:	f3bf 8f4f 	dsb	sy
 8006fd0:	60fb      	str	r3, [r7, #12]
}
 8006fd2:	bf00      	nop
 8006fd4:	e7fe      	b.n	8006fd4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006fd6:	4b39      	ldr	r3, [pc, #228]	; (80070bc <xPortStartScheduler+0x12c>)
 8006fd8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006fda:	697b      	ldr	r3, [r7, #20]
 8006fdc:	781b      	ldrb	r3, [r3, #0]
 8006fde:	b2db      	uxtb	r3, r3
 8006fe0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006fe2:	697b      	ldr	r3, [r7, #20]
 8006fe4:	22ff      	movs	r2, #255	; 0xff
 8006fe6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006fe8:	697b      	ldr	r3, [r7, #20]
 8006fea:	781b      	ldrb	r3, [r3, #0]
 8006fec:	b2db      	uxtb	r3, r3
 8006fee:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006ff0:	78fb      	ldrb	r3, [r7, #3]
 8006ff2:	b2db      	uxtb	r3, r3
 8006ff4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006ff8:	b2da      	uxtb	r2, r3
 8006ffa:	4b31      	ldr	r3, [pc, #196]	; (80070c0 <xPortStartScheduler+0x130>)
 8006ffc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006ffe:	4b31      	ldr	r3, [pc, #196]	; (80070c4 <xPortStartScheduler+0x134>)
 8007000:	2207      	movs	r2, #7
 8007002:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007004:	e009      	b.n	800701a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8007006:	4b2f      	ldr	r3, [pc, #188]	; (80070c4 <xPortStartScheduler+0x134>)
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	3b01      	subs	r3, #1
 800700c:	4a2d      	ldr	r2, [pc, #180]	; (80070c4 <xPortStartScheduler+0x134>)
 800700e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007010:	78fb      	ldrb	r3, [r7, #3]
 8007012:	b2db      	uxtb	r3, r3
 8007014:	005b      	lsls	r3, r3, #1
 8007016:	b2db      	uxtb	r3, r3
 8007018:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800701a:	78fb      	ldrb	r3, [r7, #3]
 800701c:	b2db      	uxtb	r3, r3
 800701e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007022:	2b80      	cmp	r3, #128	; 0x80
 8007024:	d0ef      	beq.n	8007006 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007026:	4b27      	ldr	r3, [pc, #156]	; (80070c4 <xPortStartScheduler+0x134>)
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	f1c3 0307 	rsb	r3, r3, #7
 800702e:	2b04      	cmp	r3, #4
 8007030:	d00a      	beq.n	8007048 <xPortStartScheduler+0xb8>
	__asm volatile
 8007032:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007036:	f383 8811 	msr	BASEPRI, r3
 800703a:	f3bf 8f6f 	isb	sy
 800703e:	f3bf 8f4f 	dsb	sy
 8007042:	60bb      	str	r3, [r7, #8]
}
 8007044:	bf00      	nop
 8007046:	e7fe      	b.n	8007046 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007048:	4b1e      	ldr	r3, [pc, #120]	; (80070c4 <xPortStartScheduler+0x134>)
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	021b      	lsls	r3, r3, #8
 800704e:	4a1d      	ldr	r2, [pc, #116]	; (80070c4 <xPortStartScheduler+0x134>)
 8007050:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007052:	4b1c      	ldr	r3, [pc, #112]	; (80070c4 <xPortStartScheduler+0x134>)
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800705a:	4a1a      	ldr	r2, [pc, #104]	; (80070c4 <xPortStartScheduler+0x134>)
 800705c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	b2da      	uxtb	r2, r3
 8007062:	697b      	ldr	r3, [r7, #20]
 8007064:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007066:	4b18      	ldr	r3, [pc, #96]	; (80070c8 <xPortStartScheduler+0x138>)
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	4a17      	ldr	r2, [pc, #92]	; (80070c8 <xPortStartScheduler+0x138>)
 800706c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007070:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007072:	4b15      	ldr	r3, [pc, #84]	; (80070c8 <xPortStartScheduler+0x138>)
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	4a14      	ldr	r2, [pc, #80]	; (80070c8 <xPortStartScheduler+0x138>)
 8007078:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800707c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800707e:	f000 f8dd 	bl	800723c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007082:	4b12      	ldr	r3, [pc, #72]	; (80070cc <xPortStartScheduler+0x13c>)
 8007084:	2200      	movs	r2, #0
 8007086:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007088:	f000 f8fc 	bl	8007284 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800708c:	4b10      	ldr	r3, [pc, #64]	; (80070d0 <xPortStartScheduler+0x140>)
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	4a0f      	ldr	r2, [pc, #60]	; (80070d0 <xPortStartScheduler+0x140>)
 8007092:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007096:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007098:	f7ff ff66 	bl	8006f68 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800709c:	f7ff f848 	bl	8006130 <vTaskSwitchContext>
	prvTaskExitError();
 80070a0:	f7ff ff1e 	bl	8006ee0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80070a4:	2300      	movs	r3, #0
}
 80070a6:	4618      	mov	r0, r3
 80070a8:	3718      	adds	r7, #24
 80070aa:	46bd      	mov	sp, r7
 80070ac:	bd80      	pop	{r7, pc}
 80070ae:	bf00      	nop
 80070b0:	e000ed00 	.word	0xe000ed00
 80070b4:	410fc271 	.word	0x410fc271
 80070b8:	410fc270 	.word	0x410fc270
 80070bc:	e000e400 	.word	0xe000e400
 80070c0:	2000107c 	.word	0x2000107c
 80070c4:	20001080 	.word	0x20001080
 80070c8:	e000ed20 	.word	0xe000ed20
 80070cc:	2000000c 	.word	0x2000000c
 80070d0:	e000ef34 	.word	0xe000ef34

080070d4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80070d4:	b480      	push	{r7}
 80070d6:	b083      	sub	sp, #12
 80070d8:	af00      	add	r7, sp, #0
	__asm volatile
 80070da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070de:	f383 8811 	msr	BASEPRI, r3
 80070e2:	f3bf 8f6f 	isb	sy
 80070e6:	f3bf 8f4f 	dsb	sy
 80070ea:	607b      	str	r3, [r7, #4]
}
 80070ec:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80070ee:	4b0f      	ldr	r3, [pc, #60]	; (800712c <vPortEnterCritical+0x58>)
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	3301      	adds	r3, #1
 80070f4:	4a0d      	ldr	r2, [pc, #52]	; (800712c <vPortEnterCritical+0x58>)
 80070f6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80070f8:	4b0c      	ldr	r3, [pc, #48]	; (800712c <vPortEnterCritical+0x58>)
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	2b01      	cmp	r3, #1
 80070fe:	d10f      	bne.n	8007120 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007100:	4b0b      	ldr	r3, [pc, #44]	; (8007130 <vPortEnterCritical+0x5c>)
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	b2db      	uxtb	r3, r3
 8007106:	2b00      	cmp	r3, #0
 8007108:	d00a      	beq.n	8007120 <vPortEnterCritical+0x4c>
	__asm volatile
 800710a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800710e:	f383 8811 	msr	BASEPRI, r3
 8007112:	f3bf 8f6f 	isb	sy
 8007116:	f3bf 8f4f 	dsb	sy
 800711a:	603b      	str	r3, [r7, #0]
}
 800711c:	bf00      	nop
 800711e:	e7fe      	b.n	800711e <vPortEnterCritical+0x4a>
	}
}
 8007120:	bf00      	nop
 8007122:	370c      	adds	r7, #12
 8007124:	46bd      	mov	sp, r7
 8007126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800712a:	4770      	bx	lr
 800712c:	2000000c 	.word	0x2000000c
 8007130:	e000ed04 	.word	0xe000ed04

08007134 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007134:	b480      	push	{r7}
 8007136:	b083      	sub	sp, #12
 8007138:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800713a:	4b12      	ldr	r3, [pc, #72]	; (8007184 <vPortExitCritical+0x50>)
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	2b00      	cmp	r3, #0
 8007140:	d10a      	bne.n	8007158 <vPortExitCritical+0x24>
	__asm volatile
 8007142:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007146:	f383 8811 	msr	BASEPRI, r3
 800714a:	f3bf 8f6f 	isb	sy
 800714e:	f3bf 8f4f 	dsb	sy
 8007152:	607b      	str	r3, [r7, #4]
}
 8007154:	bf00      	nop
 8007156:	e7fe      	b.n	8007156 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007158:	4b0a      	ldr	r3, [pc, #40]	; (8007184 <vPortExitCritical+0x50>)
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	3b01      	subs	r3, #1
 800715e:	4a09      	ldr	r2, [pc, #36]	; (8007184 <vPortExitCritical+0x50>)
 8007160:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007162:	4b08      	ldr	r3, [pc, #32]	; (8007184 <vPortExitCritical+0x50>)
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	2b00      	cmp	r3, #0
 8007168:	d105      	bne.n	8007176 <vPortExitCritical+0x42>
 800716a:	2300      	movs	r3, #0
 800716c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800716e:	683b      	ldr	r3, [r7, #0]
 8007170:	f383 8811 	msr	BASEPRI, r3
}
 8007174:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007176:	bf00      	nop
 8007178:	370c      	adds	r7, #12
 800717a:	46bd      	mov	sp, r7
 800717c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007180:	4770      	bx	lr
 8007182:	bf00      	nop
 8007184:	2000000c 	.word	0x2000000c
	...

08007190 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007190:	f3ef 8009 	mrs	r0, PSP
 8007194:	f3bf 8f6f 	isb	sy
 8007198:	4b15      	ldr	r3, [pc, #84]	; (80071f0 <pxCurrentTCBConst>)
 800719a:	681a      	ldr	r2, [r3, #0]
 800719c:	f01e 0f10 	tst.w	lr, #16
 80071a0:	bf08      	it	eq
 80071a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80071a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071aa:	6010      	str	r0, [r2, #0]
 80071ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 80071b0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80071b4:	f380 8811 	msr	BASEPRI, r0
 80071b8:	f3bf 8f4f 	dsb	sy
 80071bc:	f3bf 8f6f 	isb	sy
 80071c0:	f7fe ffb6 	bl	8006130 <vTaskSwitchContext>
 80071c4:	f04f 0000 	mov.w	r0, #0
 80071c8:	f380 8811 	msr	BASEPRI, r0
 80071cc:	bc09      	pop	{r0, r3}
 80071ce:	6819      	ldr	r1, [r3, #0]
 80071d0:	6808      	ldr	r0, [r1, #0]
 80071d2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071d6:	f01e 0f10 	tst.w	lr, #16
 80071da:	bf08      	it	eq
 80071dc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80071e0:	f380 8809 	msr	PSP, r0
 80071e4:	f3bf 8f6f 	isb	sy
 80071e8:	4770      	bx	lr
 80071ea:	bf00      	nop
 80071ec:	f3af 8000 	nop.w

080071f0 <pxCurrentTCBConst>:
 80071f0:	20000a50 	.word	0x20000a50
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80071f4:	bf00      	nop
 80071f6:	bf00      	nop

080071f8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80071f8:	b580      	push	{r7, lr}
 80071fa:	b082      	sub	sp, #8
 80071fc:	af00      	add	r7, sp, #0
	__asm volatile
 80071fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007202:	f383 8811 	msr	BASEPRI, r3
 8007206:	f3bf 8f6f 	isb	sy
 800720a:	f3bf 8f4f 	dsb	sy
 800720e:	607b      	str	r3, [r7, #4]
}
 8007210:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007212:	f7fe fed3 	bl	8005fbc <xTaskIncrementTick>
 8007216:	4603      	mov	r3, r0
 8007218:	2b00      	cmp	r3, #0
 800721a:	d003      	beq.n	8007224 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800721c:	4b06      	ldr	r3, [pc, #24]	; (8007238 <xPortSysTickHandler+0x40>)
 800721e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007222:	601a      	str	r2, [r3, #0]
 8007224:	2300      	movs	r3, #0
 8007226:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007228:	683b      	ldr	r3, [r7, #0]
 800722a:	f383 8811 	msr	BASEPRI, r3
}
 800722e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007230:	bf00      	nop
 8007232:	3708      	adds	r7, #8
 8007234:	46bd      	mov	sp, r7
 8007236:	bd80      	pop	{r7, pc}
 8007238:	e000ed04 	.word	0xe000ed04

0800723c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800723c:	b480      	push	{r7}
 800723e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007240:	4b0b      	ldr	r3, [pc, #44]	; (8007270 <vPortSetupTimerInterrupt+0x34>)
 8007242:	2200      	movs	r2, #0
 8007244:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007246:	4b0b      	ldr	r3, [pc, #44]	; (8007274 <vPortSetupTimerInterrupt+0x38>)
 8007248:	2200      	movs	r2, #0
 800724a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800724c:	4b0a      	ldr	r3, [pc, #40]	; (8007278 <vPortSetupTimerInterrupt+0x3c>)
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	4a0a      	ldr	r2, [pc, #40]	; (800727c <vPortSetupTimerInterrupt+0x40>)
 8007252:	fba2 2303 	umull	r2, r3, r2, r3
 8007256:	099b      	lsrs	r3, r3, #6
 8007258:	4a09      	ldr	r2, [pc, #36]	; (8007280 <vPortSetupTimerInterrupt+0x44>)
 800725a:	3b01      	subs	r3, #1
 800725c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800725e:	4b04      	ldr	r3, [pc, #16]	; (8007270 <vPortSetupTimerInterrupt+0x34>)
 8007260:	2207      	movs	r2, #7
 8007262:	601a      	str	r2, [r3, #0]
}
 8007264:	bf00      	nop
 8007266:	46bd      	mov	sp, r7
 8007268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800726c:	4770      	bx	lr
 800726e:	bf00      	nop
 8007270:	e000e010 	.word	0xe000e010
 8007274:	e000e018 	.word	0xe000e018
 8007278:	20000000 	.word	0x20000000
 800727c:	10624dd3 	.word	0x10624dd3
 8007280:	e000e014 	.word	0xe000e014

08007284 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007284:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007294 <vPortEnableVFP+0x10>
 8007288:	6801      	ldr	r1, [r0, #0]
 800728a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800728e:	6001      	str	r1, [r0, #0]
 8007290:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007292:	bf00      	nop
 8007294:	e000ed88 	.word	0xe000ed88

08007298 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007298:	b480      	push	{r7}
 800729a:	b085      	sub	sp, #20
 800729c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800729e:	f3ef 8305 	mrs	r3, IPSR
 80072a2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	2b0f      	cmp	r3, #15
 80072a8:	d914      	bls.n	80072d4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80072aa:	4a17      	ldr	r2, [pc, #92]	; (8007308 <vPortValidateInterruptPriority+0x70>)
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	4413      	add	r3, r2
 80072b0:	781b      	ldrb	r3, [r3, #0]
 80072b2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80072b4:	4b15      	ldr	r3, [pc, #84]	; (800730c <vPortValidateInterruptPriority+0x74>)
 80072b6:	781b      	ldrb	r3, [r3, #0]
 80072b8:	7afa      	ldrb	r2, [r7, #11]
 80072ba:	429a      	cmp	r2, r3
 80072bc:	d20a      	bcs.n	80072d4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80072be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072c2:	f383 8811 	msr	BASEPRI, r3
 80072c6:	f3bf 8f6f 	isb	sy
 80072ca:	f3bf 8f4f 	dsb	sy
 80072ce:	607b      	str	r3, [r7, #4]
}
 80072d0:	bf00      	nop
 80072d2:	e7fe      	b.n	80072d2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80072d4:	4b0e      	ldr	r3, [pc, #56]	; (8007310 <vPortValidateInterruptPriority+0x78>)
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80072dc:	4b0d      	ldr	r3, [pc, #52]	; (8007314 <vPortValidateInterruptPriority+0x7c>)
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	429a      	cmp	r2, r3
 80072e2:	d90a      	bls.n	80072fa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80072e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072e8:	f383 8811 	msr	BASEPRI, r3
 80072ec:	f3bf 8f6f 	isb	sy
 80072f0:	f3bf 8f4f 	dsb	sy
 80072f4:	603b      	str	r3, [r7, #0]
}
 80072f6:	bf00      	nop
 80072f8:	e7fe      	b.n	80072f8 <vPortValidateInterruptPriority+0x60>
	}
 80072fa:	bf00      	nop
 80072fc:	3714      	adds	r7, #20
 80072fe:	46bd      	mov	sp, r7
 8007300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007304:	4770      	bx	lr
 8007306:	bf00      	nop
 8007308:	e000e3f0 	.word	0xe000e3f0
 800730c:	2000107c 	.word	0x2000107c
 8007310:	e000ed0c 	.word	0xe000ed0c
 8007314:	20001080 	.word	0x20001080

08007318 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007318:	b580      	push	{r7, lr}
 800731a:	b08a      	sub	sp, #40	; 0x28
 800731c:	af00      	add	r7, sp, #0
 800731e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007320:	2300      	movs	r3, #0
 8007322:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007324:	f7fe fd8e 	bl	8005e44 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007328:	4b5b      	ldr	r3, [pc, #364]	; (8007498 <pvPortMalloc+0x180>)
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	2b00      	cmp	r3, #0
 800732e:	d101      	bne.n	8007334 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007330:	f000 f920 	bl	8007574 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007334:	4b59      	ldr	r3, [pc, #356]	; (800749c <pvPortMalloc+0x184>)
 8007336:	681a      	ldr	r2, [r3, #0]
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	4013      	ands	r3, r2
 800733c:	2b00      	cmp	r3, #0
 800733e:	f040 8093 	bne.w	8007468 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	2b00      	cmp	r3, #0
 8007346:	d01d      	beq.n	8007384 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8007348:	2208      	movs	r2, #8
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	4413      	add	r3, r2
 800734e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	f003 0307 	and.w	r3, r3, #7
 8007356:	2b00      	cmp	r3, #0
 8007358:	d014      	beq.n	8007384 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	f023 0307 	bic.w	r3, r3, #7
 8007360:	3308      	adds	r3, #8
 8007362:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	f003 0307 	and.w	r3, r3, #7
 800736a:	2b00      	cmp	r3, #0
 800736c:	d00a      	beq.n	8007384 <pvPortMalloc+0x6c>
	__asm volatile
 800736e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007372:	f383 8811 	msr	BASEPRI, r3
 8007376:	f3bf 8f6f 	isb	sy
 800737a:	f3bf 8f4f 	dsb	sy
 800737e:	617b      	str	r3, [r7, #20]
}
 8007380:	bf00      	nop
 8007382:	e7fe      	b.n	8007382 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	2b00      	cmp	r3, #0
 8007388:	d06e      	beq.n	8007468 <pvPortMalloc+0x150>
 800738a:	4b45      	ldr	r3, [pc, #276]	; (80074a0 <pvPortMalloc+0x188>)
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	687a      	ldr	r2, [r7, #4]
 8007390:	429a      	cmp	r2, r3
 8007392:	d869      	bhi.n	8007468 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007394:	4b43      	ldr	r3, [pc, #268]	; (80074a4 <pvPortMalloc+0x18c>)
 8007396:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007398:	4b42      	ldr	r3, [pc, #264]	; (80074a4 <pvPortMalloc+0x18c>)
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800739e:	e004      	b.n	80073aa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80073a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073a2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80073a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80073aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073ac:	685b      	ldr	r3, [r3, #4]
 80073ae:	687a      	ldr	r2, [r7, #4]
 80073b0:	429a      	cmp	r2, r3
 80073b2:	d903      	bls.n	80073bc <pvPortMalloc+0xa4>
 80073b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d1f1      	bne.n	80073a0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80073bc:	4b36      	ldr	r3, [pc, #216]	; (8007498 <pvPortMalloc+0x180>)
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80073c2:	429a      	cmp	r2, r3
 80073c4:	d050      	beq.n	8007468 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80073c6:	6a3b      	ldr	r3, [r7, #32]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	2208      	movs	r2, #8
 80073cc:	4413      	add	r3, r2
 80073ce:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80073d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073d2:	681a      	ldr	r2, [r3, #0]
 80073d4:	6a3b      	ldr	r3, [r7, #32]
 80073d6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80073d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073da:	685a      	ldr	r2, [r3, #4]
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	1ad2      	subs	r2, r2, r3
 80073e0:	2308      	movs	r3, #8
 80073e2:	005b      	lsls	r3, r3, #1
 80073e4:	429a      	cmp	r2, r3
 80073e6:	d91f      	bls.n	8007428 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80073e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	4413      	add	r3, r2
 80073ee:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80073f0:	69bb      	ldr	r3, [r7, #24]
 80073f2:	f003 0307 	and.w	r3, r3, #7
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d00a      	beq.n	8007410 <pvPortMalloc+0xf8>
	__asm volatile
 80073fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073fe:	f383 8811 	msr	BASEPRI, r3
 8007402:	f3bf 8f6f 	isb	sy
 8007406:	f3bf 8f4f 	dsb	sy
 800740a:	613b      	str	r3, [r7, #16]
}
 800740c:	bf00      	nop
 800740e:	e7fe      	b.n	800740e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007412:	685a      	ldr	r2, [r3, #4]
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	1ad2      	subs	r2, r2, r3
 8007418:	69bb      	ldr	r3, [r7, #24]
 800741a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800741c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800741e:	687a      	ldr	r2, [r7, #4]
 8007420:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007422:	69b8      	ldr	r0, [r7, #24]
 8007424:	f000 f908 	bl	8007638 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007428:	4b1d      	ldr	r3, [pc, #116]	; (80074a0 <pvPortMalloc+0x188>)
 800742a:	681a      	ldr	r2, [r3, #0]
 800742c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800742e:	685b      	ldr	r3, [r3, #4]
 8007430:	1ad3      	subs	r3, r2, r3
 8007432:	4a1b      	ldr	r2, [pc, #108]	; (80074a0 <pvPortMalloc+0x188>)
 8007434:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007436:	4b1a      	ldr	r3, [pc, #104]	; (80074a0 <pvPortMalloc+0x188>)
 8007438:	681a      	ldr	r2, [r3, #0]
 800743a:	4b1b      	ldr	r3, [pc, #108]	; (80074a8 <pvPortMalloc+0x190>)
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	429a      	cmp	r2, r3
 8007440:	d203      	bcs.n	800744a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007442:	4b17      	ldr	r3, [pc, #92]	; (80074a0 <pvPortMalloc+0x188>)
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	4a18      	ldr	r2, [pc, #96]	; (80074a8 <pvPortMalloc+0x190>)
 8007448:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800744a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800744c:	685a      	ldr	r2, [r3, #4]
 800744e:	4b13      	ldr	r3, [pc, #76]	; (800749c <pvPortMalloc+0x184>)
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	431a      	orrs	r2, r3
 8007454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007456:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800745a:	2200      	movs	r2, #0
 800745c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800745e:	4b13      	ldr	r3, [pc, #76]	; (80074ac <pvPortMalloc+0x194>)
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	3301      	adds	r3, #1
 8007464:	4a11      	ldr	r2, [pc, #68]	; (80074ac <pvPortMalloc+0x194>)
 8007466:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007468:	f7fe fcfa 	bl	8005e60 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800746c:	69fb      	ldr	r3, [r7, #28]
 800746e:	f003 0307 	and.w	r3, r3, #7
 8007472:	2b00      	cmp	r3, #0
 8007474:	d00a      	beq.n	800748c <pvPortMalloc+0x174>
	__asm volatile
 8007476:	f04f 0350 	mov.w	r3, #80	; 0x50
 800747a:	f383 8811 	msr	BASEPRI, r3
 800747e:	f3bf 8f6f 	isb	sy
 8007482:	f3bf 8f4f 	dsb	sy
 8007486:	60fb      	str	r3, [r7, #12]
}
 8007488:	bf00      	nop
 800748a:	e7fe      	b.n	800748a <pvPortMalloc+0x172>
	return pvReturn;
 800748c:	69fb      	ldr	r3, [r7, #28]
}
 800748e:	4618      	mov	r0, r3
 8007490:	3728      	adds	r7, #40	; 0x28
 8007492:	46bd      	mov	sp, r7
 8007494:	bd80      	pop	{r7, pc}
 8007496:	bf00      	nop
 8007498:	20001c44 	.word	0x20001c44
 800749c:	20001c58 	.word	0x20001c58
 80074a0:	20001c48 	.word	0x20001c48
 80074a4:	20001c3c 	.word	0x20001c3c
 80074a8:	20001c4c 	.word	0x20001c4c
 80074ac:	20001c50 	.word	0x20001c50

080074b0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80074b0:	b580      	push	{r7, lr}
 80074b2:	b086      	sub	sp, #24
 80074b4:	af00      	add	r7, sp, #0
 80074b6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d04d      	beq.n	800755e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80074c2:	2308      	movs	r3, #8
 80074c4:	425b      	negs	r3, r3
 80074c6:	697a      	ldr	r2, [r7, #20]
 80074c8:	4413      	add	r3, r2
 80074ca:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80074cc:	697b      	ldr	r3, [r7, #20]
 80074ce:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80074d0:	693b      	ldr	r3, [r7, #16]
 80074d2:	685a      	ldr	r2, [r3, #4]
 80074d4:	4b24      	ldr	r3, [pc, #144]	; (8007568 <vPortFree+0xb8>)
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	4013      	ands	r3, r2
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d10a      	bne.n	80074f4 <vPortFree+0x44>
	__asm volatile
 80074de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074e2:	f383 8811 	msr	BASEPRI, r3
 80074e6:	f3bf 8f6f 	isb	sy
 80074ea:	f3bf 8f4f 	dsb	sy
 80074ee:	60fb      	str	r3, [r7, #12]
}
 80074f0:	bf00      	nop
 80074f2:	e7fe      	b.n	80074f2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80074f4:	693b      	ldr	r3, [r7, #16]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d00a      	beq.n	8007512 <vPortFree+0x62>
	__asm volatile
 80074fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007500:	f383 8811 	msr	BASEPRI, r3
 8007504:	f3bf 8f6f 	isb	sy
 8007508:	f3bf 8f4f 	dsb	sy
 800750c:	60bb      	str	r3, [r7, #8]
}
 800750e:	bf00      	nop
 8007510:	e7fe      	b.n	8007510 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007512:	693b      	ldr	r3, [r7, #16]
 8007514:	685a      	ldr	r2, [r3, #4]
 8007516:	4b14      	ldr	r3, [pc, #80]	; (8007568 <vPortFree+0xb8>)
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	4013      	ands	r3, r2
 800751c:	2b00      	cmp	r3, #0
 800751e:	d01e      	beq.n	800755e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007520:	693b      	ldr	r3, [r7, #16]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	2b00      	cmp	r3, #0
 8007526:	d11a      	bne.n	800755e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007528:	693b      	ldr	r3, [r7, #16]
 800752a:	685a      	ldr	r2, [r3, #4]
 800752c:	4b0e      	ldr	r3, [pc, #56]	; (8007568 <vPortFree+0xb8>)
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	43db      	mvns	r3, r3
 8007532:	401a      	ands	r2, r3
 8007534:	693b      	ldr	r3, [r7, #16]
 8007536:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007538:	f7fe fc84 	bl	8005e44 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800753c:	693b      	ldr	r3, [r7, #16]
 800753e:	685a      	ldr	r2, [r3, #4]
 8007540:	4b0a      	ldr	r3, [pc, #40]	; (800756c <vPortFree+0xbc>)
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	4413      	add	r3, r2
 8007546:	4a09      	ldr	r2, [pc, #36]	; (800756c <vPortFree+0xbc>)
 8007548:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800754a:	6938      	ldr	r0, [r7, #16]
 800754c:	f000 f874 	bl	8007638 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007550:	4b07      	ldr	r3, [pc, #28]	; (8007570 <vPortFree+0xc0>)
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	3301      	adds	r3, #1
 8007556:	4a06      	ldr	r2, [pc, #24]	; (8007570 <vPortFree+0xc0>)
 8007558:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800755a:	f7fe fc81 	bl	8005e60 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800755e:	bf00      	nop
 8007560:	3718      	adds	r7, #24
 8007562:	46bd      	mov	sp, r7
 8007564:	bd80      	pop	{r7, pc}
 8007566:	bf00      	nop
 8007568:	20001c58 	.word	0x20001c58
 800756c:	20001c48 	.word	0x20001c48
 8007570:	20001c54 	.word	0x20001c54

08007574 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007574:	b480      	push	{r7}
 8007576:	b085      	sub	sp, #20
 8007578:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800757a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800757e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007580:	4b27      	ldr	r3, [pc, #156]	; (8007620 <prvHeapInit+0xac>)
 8007582:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	f003 0307 	and.w	r3, r3, #7
 800758a:	2b00      	cmp	r3, #0
 800758c:	d00c      	beq.n	80075a8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	3307      	adds	r3, #7
 8007592:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	f023 0307 	bic.w	r3, r3, #7
 800759a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800759c:	68ba      	ldr	r2, [r7, #8]
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	1ad3      	subs	r3, r2, r3
 80075a2:	4a1f      	ldr	r2, [pc, #124]	; (8007620 <prvHeapInit+0xac>)
 80075a4:	4413      	add	r3, r2
 80075a6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80075ac:	4a1d      	ldr	r2, [pc, #116]	; (8007624 <prvHeapInit+0xb0>)
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80075b2:	4b1c      	ldr	r3, [pc, #112]	; (8007624 <prvHeapInit+0xb0>)
 80075b4:	2200      	movs	r2, #0
 80075b6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	68ba      	ldr	r2, [r7, #8]
 80075bc:	4413      	add	r3, r2
 80075be:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80075c0:	2208      	movs	r2, #8
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	1a9b      	subs	r3, r3, r2
 80075c6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	f023 0307 	bic.w	r3, r3, #7
 80075ce:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	4a15      	ldr	r2, [pc, #84]	; (8007628 <prvHeapInit+0xb4>)
 80075d4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80075d6:	4b14      	ldr	r3, [pc, #80]	; (8007628 <prvHeapInit+0xb4>)
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	2200      	movs	r2, #0
 80075dc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80075de:	4b12      	ldr	r3, [pc, #72]	; (8007628 <prvHeapInit+0xb4>)
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	2200      	movs	r2, #0
 80075e4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80075ea:	683b      	ldr	r3, [r7, #0]
 80075ec:	68fa      	ldr	r2, [r7, #12]
 80075ee:	1ad2      	subs	r2, r2, r3
 80075f0:	683b      	ldr	r3, [r7, #0]
 80075f2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80075f4:	4b0c      	ldr	r3, [pc, #48]	; (8007628 <prvHeapInit+0xb4>)
 80075f6:	681a      	ldr	r2, [r3, #0]
 80075f8:	683b      	ldr	r3, [r7, #0]
 80075fa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80075fc:	683b      	ldr	r3, [r7, #0]
 80075fe:	685b      	ldr	r3, [r3, #4]
 8007600:	4a0a      	ldr	r2, [pc, #40]	; (800762c <prvHeapInit+0xb8>)
 8007602:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007604:	683b      	ldr	r3, [r7, #0]
 8007606:	685b      	ldr	r3, [r3, #4]
 8007608:	4a09      	ldr	r2, [pc, #36]	; (8007630 <prvHeapInit+0xbc>)
 800760a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800760c:	4b09      	ldr	r3, [pc, #36]	; (8007634 <prvHeapInit+0xc0>)
 800760e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007612:	601a      	str	r2, [r3, #0]
}
 8007614:	bf00      	nop
 8007616:	3714      	adds	r7, #20
 8007618:	46bd      	mov	sp, r7
 800761a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800761e:	4770      	bx	lr
 8007620:	20001084 	.word	0x20001084
 8007624:	20001c3c 	.word	0x20001c3c
 8007628:	20001c44 	.word	0x20001c44
 800762c:	20001c4c 	.word	0x20001c4c
 8007630:	20001c48 	.word	0x20001c48
 8007634:	20001c58 	.word	0x20001c58

08007638 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007638:	b480      	push	{r7}
 800763a:	b085      	sub	sp, #20
 800763c:	af00      	add	r7, sp, #0
 800763e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007640:	4b28      	ldr	r3, [pc, #160]	; (80076e4 <prvInsertBlockIntoFreeList+0xac>)
 8007642:	60fb      	str	r3, [r7, #12]
 8007644:	e002      	b.n	800764c <prvInsertBlockIntoFreeList+0x14>
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	60fb      	str	r3, [r7, #12]
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	687a      	ldr	r2, [r7, #4]
 8007652:	429a      	cmp	r2, r3
 8007654:	d8f7      	bhi.n	8007646 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	685b      	ldr	r3, [r3, #4]
 800765e:	68ba      	ldr	r2, [r7, #8]
 8007660:	4413      	add	r3, r2
 8007662:	687a      	ldr	r2, [r7, #4]
 8007664:	429a      	cmp	r2, r3
 8007666:	d108      	bne.n	800767a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	685a      	ldr	r2, [r3, #4]
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	685b      	ldr	r3, [r3, #4]
 8007670:	441a      	add	r2, r3
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	685b      	ldr	r3, [r3, #4]
 8007682:	68ba      	ldr	r2, [r7, #8]
 8007684:	441a      	add	r2, r3
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	429a      	cmp	r2, r3
 800768c:	d118      	bne.n	80076c0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	681a      	ldr	r2, [r3, #0]
 8007692:	4b15      	ldr	r3, [pc, #84]	; (80076e8 <prvInsertBlockIntoFreeList+0xb0>)
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	429a      	cmp	r2, r3
 8007698:	d00d      	beq.n	80076b6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	685a      	ldr	r2, [r3, #4]
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	685b      	ldr	r3, [r3, #4]
 80076a4:	441a      	add	r2, r3
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	681a      	ldr	r2, [r3, #0]
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	601a      	str	r2, [r3, #0]
 80076b4:	e008      	b.n	80076c8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80076b6:	4b0c      	ldr	r3, [pc, #48]	; (80076e8 <prvInsertBlockIntoFreeList+0xb0>)
 80076b8:	681a      	ldr	r2, [r3, #0]
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	601a      	str	r2, [r3, #0]
 80076be:	e003      	b.n	80076c8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	681a      	ldr	r2, [r3, #0]
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80076c8:	68fa      	ldr	r2, [r7, #12]
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	429a      	cmp	r2, r3
 80076ce:	d002      	beq.n	80076d6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	687a      	ldr	r2, [r7, #4]
 80076d4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80076d6:	bf00      	nop
 80076d8:	3714      	adds	r7, #20
 80076da:	46bd      	mov	sp, r7
 80076dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e0:	4770      	bx	lr
 80076e2:	bf00      	nop
 80076e4:	20001c3c 	.word	0x20001c3c
 80076e8:	20001c44 	.word	0x20001c44

080076ec <__libc_init_array>:
 80076ec:	b570      	push	{r4, r5, r6, lr}
 80076ee:	4d0d      	ldr	r5, [pc, #52]	; (8007724 <__libc_init_array+0x38>)
 80076f0:	4c0d      	ldr	r4, [pc, #52]	; (8007728 <__libc_init_array+0x3c>)
 80076f2:	1b64      	subs	r4, r4, r5
 80076f4:	10a4      	asrs	r4, r4, #2
 80076f6:	2600      	movs	r6, #0
 80076f8:	42a6      	cmp	r6, r4
 80076fa:	d109      	bne.n	8007710 <__libc_init_array+0x24>
 80076fc:	4d0b      	ldr	r5, [pc, #44]	; (800772c <__libc_init_array+0x40>)
 80076fe:	4c0c      	ldr	r4, [pc, #48]	; (8007730 <__libc_init_array+0x44>)
 8007700:	f000 f8f2 	bl	80078e8 <_init>
 8007704:	1b64      	subs	r4, r4, r5
 8007706:	10a4      	asrs	r4, r4, #2
 8007708:	2600      	movs	r6, #0
 800770a:	42a6      	cmp	r6, r4
 800770c:	d105      	bne.n	800771a <__libc_init_array+0x2e>
 800770e:	bd70      	pop	{r4, r5, r6, pc}
 8007710:	f855 3b04 	ldr.w	r3, [r5], #4
 8007714:	4798      	blx	r3
 8007716:	3601      	adds	r6, #1
 8007718:	e7ee      	b.n	80076f8 <__libc_init_array+0xc>
 800771a:	f855 3b04 	ldr.w	r3, [r5], #4
 800771e:	4798      	blx	r3
 8007720:	3601      	adds	r6, #1
 8007722:	e7f2      	b.n	800770a <__libc_init_array+0x1e>
 8007724:	080079f8 	.word	0x080079f8
 8007728:	080079f8 	.word	0x080079f8
 800772c:	080079f8 	.word	0x080079f8
 8007730:	080079fc 	.word	0x080079fc

08007734 <__retarget_lock_acquire_recursive>:
 8007734:	4770      	bx	lr

08007736 <__retarget_lock_release_recursive>:
 8007736:	4770      	bx	lr

08007738 <memcpy>:
 8007738:	440a      	add	r2, r1
 800773a:	4291      	cmp	r1, r2
 800773c:	f100 33ff 	add.w	r3, r0, #4294967295
 8007740:	d100      	bne.n	8007744 <memcpy+0xc>
 8007742:	4770      	bx	lr
 8007744:	b510      	push	{r4, lr}
 8007746:	f811 4b01 	ldrb.w	r4, [r1], #1
 800774a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800774e:	4291      	cmp	r1, r2
 8007750:	d1f9      	bne.n	8007746 <memcpy+0xe>
 8007752:	bd10      	pop	{r4, pc}

08007754 <memset>:
 8007754:	4402      	add	r2, r0
 8007756:	4603      	mov	r3, r0
 8007758:	4293      	cmp	r3, r2
 800775a:	d100      	bne.n	800775e <memset+0xa>
 800775c:	4770      	bx	lr
 800775e:	f803 1b01 	strb.w	r1, [r3], #1
 8007762:	e7f9      	b.n	8007758 <memset+0x4>

08007764 <cleanup_glue>:
 8007764:	b538      	push	{r3, r4, r5, lr}
 8007766:	460c      	mov	r4, r1
 8007768:	6809      	ldr	r1, [r1, #0]
 800776a:	4605      	mov	r5, r0
 800776c:	b109      	cbz	r1, 8007772 <cleanup_glue+0xe>
 800776e:	f7ff fff9 	bl	8007764 <cleanup_glue>
 8007772:	4621      	mov	r1, r4
 8007774:	4628      	mov	r0, r5
 8007776:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800777a:	f000 b869 	b.w	8007850 <_free_r>
	...

08007780 <_reclaim_reent>:
 8007780:	4b2c      	ldr	r3, [pc, #176]	; (8007834 <_reclaim_reent+0xb4>)
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	4283      	cmp	r3, r0
 8007786:	b570      	push	{r4, r5, r6, lr}
 8007788:	4604      	mov	r4, r0
 800778a:	d051      	beq.n	8007830 <_reclaim_reent+0xb0>
 800778c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800778e:	b143      	cbz	r3, 80077a2 <_reclaim_reent+0x22>
 8007790:	68db      	ldr	r3, [r3, #12]
 8007792:	2b00      	cmp	r3, #0
 8007794:	d14a      	bne.n	800782c <_reclaim_reent+0xac>
 8007796:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007798:	6819      	ldr	r1, [r3, #0]
 800779a:	b111      	cbz	r1, 80077a2 <_reclaim_reent+0x22>
 800779c:	4620      	mov	r0, r4
 800779e:	f000 f857 	bl	8007850 <_free_r>
 80077a2:	6961      	ldr	r1, [r4, #20]
 80077a4:	b111      	cbz	r1, 80077ac <_reclaim_reent+0x2c>
 80077a6:	4620      	mov	r0, r4
 80077a8:	f000 f852 	bl	8007850 <_free_r>
 80077ac:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80077ae:	b111      	cbz	r1, 80077b6 <_reclaim_reent+0x36>
 80077b0:	4620      	mov	r0, r4
 80077b2:	f000 f84d 	bl	8007850 <_free_r>
 80077b6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80077b8:	b111      	cbz	r1, 80077c0 <_reclaim_reent+0x40>
 80077ba:	4620      	mov	r0, r4
 80077bc:	f000 f848 	bl	8007850 <_free_r>
 80077c0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80077c2:	b111      	cbz	r1, 80077ca <_reclaim_reent+0x4a>
 80077c4:	4620      	mov	r0, r4
 80077c6:	f000 f843 	bl	8007850 <_free_r>
 80077ca:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80077cc:	b111      	cbz	r1, 80077d4 <_reclaim_reent+0x54>
 80077ce:	4620      	mov	r0, r4
 80077d0:	f000 f83e 	bl	8007850 <_free_r>
 80077d4:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80077d6:	b111      	cbz	r1, 80077de <_reclaim_reent+0x5e>
 80077d8:	4620      	mov	r0, r4
 80077da:	f000 f839 	bl	8007850 <_free_r>
 80077de:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80077e0:	b111      	cbz	r1, 80077e8 <_reclaim_reent+0x68>
 80077e2:	4620      	mov	r0, r4
 80077e4:	f000 f834 	bl	8007850 <_free_r>
 80077e8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80077ea:	b111      	cbz	r1, 80077f2 <_reclaim_reent+0x72>
 80077ec:	4620      	mov	r0, r4
 80077ee:	f000 f82f 	bl	8007850 <_free_r>
 80077f2:	69a3      	ldr	r3, [r4, #24]
 80077f4:	b1e3      	cbz	r3, 8007830 <_reclaim_reent+0xb0>
 80077f6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80077f8:	4620      	mov	r0, r4
 80077fa:	4798      	blx	r3
 80077fc:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80077fe:	b1b9      	cbz	r1, 8007830 <_reclaim_reent+0xb0>
 8007800:	4620      	mov	r0, r4
 8007802:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007806:	f7ff bfad 	b.w	8007764 <cleanup_glue>
 800780a:	5949      	ldr	r1, [r1, r5]
 800780c:	b941      	cbnz	r1, 8007820 <_reclaim_reent+0xa0>
 800780e:	3504      	adds	r5, #4
 8007810:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007812:	2d80      	cmp	r5, #128	; 0x80
 8007814:	68d9      	ldr	r1, [r3, #12]
 8007816:	d1f8      	bne.n	800780a <_reclaim_reent+0x8a>
 8007818:	4620      	mov	r0, r4
 800781a:	f000 f819 	bl	8007850 <_free_r>
 800781e:	e7ba      	b.n	8007796 <_reclaim_reent+0x16>
 8007820:	680e      	ldr	r6, [r1, #0]
 8007822:	4620      	mov	r0, r4
 8007824:	f000 f814 	bl	8007850 <_free_r>
 8007828:	4631      	mov	r1, r6
 800782a:	e7ef      	b.n	800780c <_reclaim_reent+0x8c>
 800782c:	2500      	movs	r5, #0
 800782e:	e7ef      	b.n	8007810 <_reclaim_reent+0x90>
 8007830:	bd70      	pop	{r4, r5, r6, pc}
 8007832:	bf00      	nop
 8007834:	20000010 	.word	0x20000010

08007838 <__malloc_lock>:
 8007838:	4801      	ldr	r0, [pc, #4]	; (8007840 <__malloc_lock+0x8>)
 800783a:	f7ff bf7b 	b.w	8007734 <__retarget_lock_acquire_recursive>
 800783e:	bf00      	nop
 8007840:	20001c5c 	.word	0x20001c5c

08007844 <__malloc_unlock>:
 8007844:	4801      	ldr	r0, [pc, #4]	; (800784c <__malloc_unlock+0x8>)
 8007846:	f7ff bf76 	b.w	8007736 <__retarget_lock_release_recursive>
 800784a:	bf00      	nop
 800784c:	20001c5c 	.word	0x20001c5c

08007850 <_free_r>:
 8007850:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007852:	2900      	cmp	r1, #0
 8007854:	d044      	beq.n	80078e0 <_free_r+0x90>
 8007856:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800785a:	9001      	str	r0, [sp, #4]
 800785c:	2b00      	cmp	r3, #0
 800785e:	f1a1 0404 	sub.w	r4, r1, #4
 8007862:	bfb8      	it	lt
 8007864:	18e4      	addlt	r4, r4, r3
 8007866:	f7ff ffe7 	bl	8007838 <__malloc_lock>
 800786a:	4a1e      	ldr	r2, [pc, #120]	; (80078e4 <_free_r+0x94>)
 800786c:	9801      	ldr	r0, [sp, #4]
 800786e:	6813      	ldr	r3, [r2, #0]
 8007870:	b933      	cbnz	r3, 8007880 <_free_r+0x30>
 8007872:	6063      	str	r3, [r4, #4]
 8007874:	6014      	str	r4, [r2, #0]
 8007876:	b003      	add	sp, #12
 8007878:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800787c:	f7ff bfe2 	b.w	8007844 <__malloc_unlock>
 8007880:	42a3      	cmp	r3, r4
 8007882:	d908      	bls.n	8007896 <_free_r+0x46>
 8007884:	6825      	ldr	r5, [r4, #0]
 8007886:	1961      	adds	r1, r4, r5
 8007888:	428b      	cmp	r3, r1
 800788a:	bf01      	itttt	eq
 800788c:	6819      	ldreq	r1, [r3, #0]
 800788e:	685b      	ldreq	r3, [r3, #4]
 8007890:	1949      	addeq	r1, r1, r5
 8007892:	6021      	streq	r1, [r4, #0]
 8007894:	e7ed      	b.n	8007872 <_free_r+0x22>
 8007896:	461a      	mov	r2, r3
 8007898:	685b      	ldr	r3, [r3, #4]
 800789a:	b10b      	cbz	r3, 80078a0 <_free_r+0x50>
 800789c:	42a3      	cmp	r3, r4
 800789e:	d9fa      	bls.n	8007896 <_free_r+0x46>
 80078a0:	6811      	ldr	r1, [r2, #0]
 80078a2:	1855      	adds	r5, r2, r1
 80078a4:	42a5      	cmp	r5, r4
 80078a6:	d10b      	bne.n	80078c0 <_free_r+0x70>
 80078a8:	6824      	ldr	r4, [r4, #0]
 80078aa:	4421      	add	r1, r4
 80078ac:	1854      	adds	r4, r2, r1
 80078ae:	42a3      	cmp	r3, r4
 80078b0:	6011      	str	r1, [r2, #0]
 80078b2:	d1e0      	bne.n	8007876 <_free_r+0x26>
 80078b4:	681c      	ldr	r4, [r3, #0]
 80078b6:	685b      	ldr	r3, [r3, #4]
 80078b8:	6053      	str	r3, [r2, #4]
 80078ba:	4421      	add	r1, r4
 80078bc:	6011      	str	r1, [r2, #0]
 80078be:	e7da      	b.n	8007876 <_free_r+0x26>
 80078c0:	d902      	bls.n	80078c8 <_free_r+0x78>
 80078c2:	230c      	movs	r3, #12
 80078c4:	6003      	str	r3, [r0, #0]
 80078c6:	e7d6      	b.n	8007876 <_free_r+0x26>
 80078c8:	6825      	ldr	r5, [r4, #0]
 80078ca:	1961      	adds	r1, r4, r5
 80078cc:	428b      	cmp	r3, r1
 80078ce:	bf04      	itt	eq
 80078d0:	6819      	ldreq	r1, [r3, #0]
 80078d2:	685b      	ldreq	r3, [r3, #4]
 80078d4:	6063      	str	r3, [r4, #4]
 80078d6:	bf04      	itt	eq
 80078d8:	1949      	addeq	r1, r1, r5
 80078da:	6021      	streq	r1, [r4, #0]
 80078dc:	6054      	str	r4, [r2, #4]
 80078de:	e7ca      	b.n	8007876 <_free_r+0x26>
 80078e0:	b003      	add	sp, #12
 80078e2:	bd30      	pop	{r4, r5, pc}
 80078e4:	20001c60 	.word	0x20001c60

080078e8 <_init>:
 80078e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078ea:	bf00      	nop
 80078ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80078ee:	bc08      	pop	{r3}
 80078f0:	469e      	mov	lr, r3
 80078f2:	4770      	bx	lr

080078f4 <_fini>:
 80078f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078f6:	bf00      	nop
 80078f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80078fa:	bc08      	pop	{r3}
 80078fc:	469e      	mov	lr, r3
 80078fe:	4770      	bx	lr
