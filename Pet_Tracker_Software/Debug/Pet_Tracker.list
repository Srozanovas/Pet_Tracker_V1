
Pet_Tracker.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008260  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004e4  080083f0  080083f0  000183f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080088d4  080088d4  000201b8  2**0
                  CONTENTS
  4 .ARM          00000008  080088d4  080088d4  000188d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080088dc  080088dc  000201b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080088dc  080088dc  000188dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080088e0  080088e0  000188e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001b8  20000000  080088e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001c20  200001b8  08008a9c  000201b8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001dd8  08008a9c  00021dd8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201b8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002171d  00000000  00000000  0002022b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004a96  00000000  00000000  00041948  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001bf8  00000000  00000000  000463e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000015c5  00000000  00000000  00047fd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000629c  00000000  00000000  0004959d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00023019  00000000  00000000  0004f839  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e3d31  00000000  00000000  00072852  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000078a4  00000000  00000000  00156584  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007a  00000000  00000000  0015de28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001b8 	.word	0x200001b8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080083d8 	.word	0x080083d8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001bc 	.word	0x200001bc
 80001cc:	080083d8 	.word	0x080083d8

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b970 	b.w	80004c8 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9e08      	ldr	r6, [sp, #32]
 8000206:	460d      	mov	r5, r1
 8000208:	4604      	mov	r4, r0
 800020a:	460f      	mov	r7, r1
 800020c:	2b00      	cmp	r3, #0
 800020e:	d14a      	bne.n	80002a6 <__udivmoddi4+0xa6>
 8000210:	428a      	cmp	r2, r1
 8000212:	4694      	mov	ip, r2
 8000214:	d965      	bls.n	80002e2 <__udivmoddi4+0xe2>
 8000216:	fab2 f382 	clz	r3, r2
 800021a:	b143      	cbz	r3, 800022e <__udivmoddi4+0x2e>
 800021c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000220:	f1c3 0220 	rsb	r2, r3, #32
 8000224:	409f      	lsls	r7, r3
 8000226:	fa20 f202 	lsr.w	r2, r0, r2
 800022a:	4317      	orrs	r7, r2
 800022c:	409c      	lsls	r4, r3
 800022e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000232:	fa1f f58c 	uxth.w	r5, ip
 8000236:	fbb7 f1fe 	udiv	r1, r7, lr
 800023a:	0c22      	lsrs	r2, r4, #16
 800023c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000240:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000244:	fb01 f005 	mul.w	r0, r1, r5
 8000248:	4290      	cmp	r0, r2
 800024a:	d90a      	bls.n	8000262 <__udivmoddi4+0x62>
 800024c:	eb1c 0202 	adds.w	r2, ip, r2
 8000250:	f101 37ff 	add.w	r7, r1, #4294967295
 8000254:	f080 811c 	bcs.w	8000490 <__udivmoddi4+0x290>
 8000258:	4290      	cmp	r0, r2
 800025a:	f240 8119 	bls.w	8000490 <__udivmoddi4+0x290>
 800025e:	3902      	subs	r1, #2
 8000260:	4462      	add	r2, ip
 8000262:	1a12      	subs	r2, r2, r0
 8000264:	b2a4      	uxth	r4, r4
 8000266:	fbb2 f0fe 	udiv	r0, r2, lr
 800026a:	fb0e 2210 	mls	r2, lr, r0, r2
 800026e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000272:	fb00 f505 	mul.w	r5, r0, r5
 8000276:	42a5      	cmp	r5, r4
 8000278:	d90a      	bls.n	8000290 <__udivmoddi4+0x90>
 800027a:	eb1c 0404 	adds.w	r4, ip, r4
 800027e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000282:	f080 8107 	bcs.w	8000494 <__udivmoddi4+0x294>
 8000286:	42a5      	cmp	r5, r4
 8000288:	f240 8104 	bls.w	8000494 <__udivmoddi4+0x294>
 800028c:	4464      	add	r4, ip
 800028e:	3802      	subs	r0, #2
 8000290:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000294:	1b64      	subs	r4, r4, r5
 8000296:	2100      	movs	r1, #0
 8000298:	b11e      	cbz	r6, 80002a2 <__udivmoddi4+0xa2>
 800029a:	40dc      	lsrs	r4, r3
 800029c:	2300      	movs	r3, #0
 800029e:	e9c6 4300 	strd	r4, r3, [r6]
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	428b      	cmp	r3, r1
 80002a8:	d908      	bls.n	80002bc <__udivmoddi4+0xbc>
 80002aa:	2e00      	cmp	r6, #0
 80002ac:	f000 80ed 	beq.w	800048a <__udivmoddi4+0x28a>
 80002b0:	2100      	movs	r1, #0
 80002b2:	e9c6 0500 	strd	r0, r5, [r6]
 80002b6:	4608      	mov	r0, r1
 80002b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002bc:	fab3 f183 	clz	r1, r3
 80002c0:	2900      	cmp	r1, #0
 80002c2:	d149      	bne.n	8000358 <__udivmoddi4+0x158>
 80002c4:	42ab      	cmp	r3, r5
 80002c6:	d302      	bcc.n	80002ce <__udivmoddi4+0xce>
 80002c8:	4282      	cmp	r2, r0
 80002ca:	f200 80f8 	bhi.w	80004be <__udivmoddi4+0x2be>
 80002ce:	1a84      	subs	r4, r0, r2
 80002d0:	eb65 0203 	sbc.w	r2, r5, r3
 80002d4:	2001      	movs	r0, #1
 80002d6:	4617      	mov	r7, r2
 80002d8:	2e00      	cmp	r6, #0
 80002da:	d0e2      	beq.n	80002a2 <__udivmoddi4+0xa2>
 80002dc:	e9c6 4700 	strd	r4, r7, [r6]
 80002e0:	e7df      	b.n	80002a2 <__udivmoddi4+0xa2>
 80002e2:	b902      	cbnz	r2, 80002e6 <__udivmoddi4+0xe6>
 80002e4:	deff      	udf	#255	; 0xff
 80002e6:	fab2 f382 	clz	r3, r2
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	f040 8090 	bne.w	8000410 <__udivmoddi4+0x210>
 80002f0:	1a8a      	subs	r2, r1, r2
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2101      	movs	r1, #1
 80002fc:	fbb2 f5f7 	udiv	r5, r2, r7
 8000300:	fb07 2015 	mls	r0, r7, r5, r2
 8000304:	0c22      	lsrs	r2, r4, #16
 8000306:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800030a:	fb0e f005 	mul.w	r0, lr, r5
 800030e:	4290      	cmp	r0, r2
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x124>
 8000312:	eb1c 0202 	adds.w	r2, ip, r2
 8000316:	f105 38ff 	add.w	r8, r5, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x122>
 800031c:	4290      	cmp	r0, r2
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2b8>
 8000322:	4645      	mov	r5, r8
 8000324:	1a12      	subs	r2, r2, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb2 f0f7 	udiv	r0, r2, r7
 800032c:	fb07 2210 	mls	r2, r7, r0, r2
 8000330:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x14e>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 32ff 	add.w	r2, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x14c>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2c2>
 800034c:	4610      	mov	r0, r2
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000356:	e79f      	b.n	8000298 <__udivmoddi4+0x98>
 8000358:	f1c1 0720 	rsb	r7, r1, #32
 800035c:	408b      	lsls	r3, r1
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa05 f401 	lsl.w	r4, r5, r1
 800036a:	fa20 f307 	lsr.w	r3, r0, r7
 800036e:	40fd      	lsrs	r5, r7
 8000370:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000374:	4323      	orrs	r3, r4
 8000376:	fbb5 f8f9 	udiv	r8, r5, r9
 800037a:	fa1f fe8c 	uxth.w	lr, ip
 800037e:	fb09 5518 	mls	r5, r9, r8, r5
 8000382:	0c1c      	lsrs	r4, r3, #16
 8000384:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000388:	fb08 f50e 	mul.w	r5, r8, lr
 800038c:	42a5      	cmp	r5, r4
 800038e:	fa02 f201 	lsl.w	r2, r2, r1
 8000392:	fa00 f001 	lsl.w	r0, r0, r1
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b0>
 8000398:	eb1c 0404 	adds.w	r4, ip, r4
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2b4>
 80003a4:	42a5      	cmp	r5, r4
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2b4>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4464      	add	r4, ip
 80003b0:	1b64      	subs	r4, r4, r5
 80003b2:	b29d      	uxth	r5, r3
 80003b4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b8:	fb09 4413 	mls	r4, r9, r3, r4
 80003bc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003c0:	fb03 fe0e 	mul.w	lr, r3, lr
 80003c4:	45a6      	cmp	lr, r4
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1da>
 80003c8:	eb1c 0404 	adds.w	r4, ip, r4
 80003cc:	f103 35ff 	add.w	r5, r3, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2ac>
 80003d2:	45a6      	cmp	lr, r4
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2ac>
 80003d6:	3b02      	subs	r3, #2
 80003d8:	4464      	add	r4, ip
 80003da:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003de:	fba3 9502 	umull	r9, r5, r3, r2
 80003e2:	eba4 040e 	sub.w	r4, r4, lr
 80003e6:	42ac      	cmp	r4, r5
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46ae      	mov	lr, r5
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x29c>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x298>
 80003f0:	b156      	cbz	r6, 8000408 <__udivmoddi4+0x208>
 80003f2:	ebb0 0208 	subs.w	r2, r0, r8
 80003f6:	eb64 040e 	sbc.w	r4, r4, lr
 80003fa:	fa04 f707 	lsl.w	r7, r4, r7
 80003fe:	40ca      	lsrs	r2, r1
 8000400:	40cc      	lsrs	r4, r1
 8000402:	4317      	orrs	r7, r2
 8000404:	e9c6 7400 	strd	r7, r4, [r6]
 8000408:	4618      	mov	r0, r3
 800040a:	2100      	movs	r1, #0
 800040c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000410:	f1c3 0120 	rsb	r1, r3, #32
 8000414:	fa02 fc03 	lsl.w	ip, r2, r3
 8000418:	fa20 f201 	lsr.w	r2, r0, r1
 800041c:	fa25 f101 	lsr.w	r1, r5, r1
 8000420:	409d      	lsls	r5, r3
 8000422:	432a      	orrs	r2, r5
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000430:	fb07 1510 	mls	r5, r7, r0, r1
 8000434:	0c11      	lsrs	r1, r2, #16
 8000436:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800043a:	fb00 f50e 	mul.w	r5, r0, lr
 800043e:	428d      	cmp	r5, r1
 8000440:	fa04 f403 	lsl.w	r4, r4, r3
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x258>
 8000446:	eb1c 0101 	adds.w	r1, ip, r1
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b0>
 8000450:	428d      	cmp	r5, r1
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b0>
 8000454:	3802      	subs	r0, #2
 8000456:	4461      	add	r1, ip
 8000458:	1b49      	subs	r1, r1, r5
 800045a:	b292      	uxth	r2, r2
 800045c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000460:	fb07 1115 	mls	r1, r7, r5, r1
 8000464:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000468:	fb05 f10e 	mul.w	r1, r5, lr
 800046c:	4291      	cmp	r1, r2
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x282>
 8000470:	eb1c 0202 	adds.w	r2, ip, r2
 8000474:	f105 38ff 	add.w	r8, r5, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2a8>
 800047a:	4291      	cmp	r1, r2
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2a8>
 800047e:	3d02      	subs	r5, #2
 8000480:	4462      	add	r2, ip
 8000482:	1a52      	subs	r2, r2, r1
 8000484:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0xfc>
 800048a:	4631      	mov	r1, r6
 800048c:	4630      	mov	r0, r6
 800048e:	e708      	b.n	80002a2 <__udivmoddi4+0xa2>
 8000490:	4639      	mov	r1, r7
 8000492:	e6e6      	b.n	8000262 <__udivmoddi4+0x62>
 8000494:	4610      	mov	r0, r2
 8000496:	e6fb      	b.n	8000290 <__udivmoddi4+0x90>
 8000498:	4548      	cmp	r0, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f0>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004a4:	3b01      	subs	r3, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f0>
 80004a8:	4645      	mov	r5, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x282>
 80004ac:	462b      	mov	r3, r5
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1da>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x258>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b0>
 80004b8:	3d02      	subs	r5, #2
 80004ba:	4462      	add	r2, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x124>
 80004be:	4608      	mov	r0, r1
 80004c0:	e70a      	b.n	80002d8 <__udivmoddi4+0xd8>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x14e>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <CMD_API_Thread>:

bool CMD_API_MessageCut (sCommandParameters_t *cli_app_message_buffer);



void CMD_API_Thread (void *argument) {
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b082      	sub	sp, #8
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	6078      	str	r0, [r7, #4]
    while(1){ 
        osDelay(500);
 80004d4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80004d8:	f004 fb8a 	bl	8004bf0 <osDelay>
 80004dc:	e7fa      	b.n	80004d4 <CMD_API_Thread+0x8>
	...

080004e0 <CMD_API_ThreadInit>:
    }
    osThreadTerminate(cmd_api_thread_id);
}


bool CMD_API_ThreadInit(void) {
 80004e0:	b580      	push	{r7, lr}
 80004e2:	af00      	add	r7, sp, #0
    cmd_api_thread_id = osThreadNew(CMD_API_Thread, NULL, &cmd_api_thread_atr);
 80004e4:	4a08      	ldr	r2, [pc, #32]	; (8000508 <CMD_API_ThreadInit+0x28>)
 80004e6:	2100      	movs	r1, #0
 80004e8:	4808      	ldr	r0, [pc, #32]	; (800050c <CMD_API_ThreadInit+0x2c>)
 80004ea:	f004 faef 	bl	8004acc <osThreadNew>
 80004ee:	4603      	mov	r3, r0
 80004f0:	4a07      	ldr	r2, [pc, #28]	; (8000510 <CMD_API_ThreadInit+0x30>)
 80004f2:	6013      	str	r3, [r2, #0]
    if (cmd_api_thread_id == NULL) return false; 
 80004f4:	4b06      	ldr	r3, [pc, #24]	; (8000510 <CMD_API_ThreadInit+0x30>)
 80004f6:	681b      	ldr	r3, [r3, #0]
 80004f8:	2b00      	cmp	r3, #0
 80004fa:	d101      	bne.n	8000500 <CMD_API_ThreadInit+0x20>
 80004fc:	2300      	movs	r3, #0
 80004fe:	e000      	b.n	8000502 <CMD_API_ThreadInit+0x22>
    return true;  
 8000500:	2301      	movs	r3, #1
}
 8000502:	4618      	mov	r0, r3
 8000504:	bd80      	pop	{r7, pc}
 8000506:	bf00      	nop
 8000508:	08008474 	.word	0x08008474
 800050c:	080004cd 	.word	0x080004cd
 8000510:	200001d4 	.word	0x200001d4

08000514 <UART_API_Init>:

//FUNCTIONS 
uint32_t UART_API_WaitFlag ();


bool UART_API_Init (eUart_t uart_id, eBaudRate_t baudrate) {
 8000514:	b590      	push	{r4, r7, lr}
 8000516:	b083      	sub	sp, #12
 8000518:	af00      	add	r7, sp, #0
 800051a:	4603      	mov	r3, r0
 800051c:	460a      	mov	r2, r1
 800051e:	71fb      	strb	r3, [r7, #7]
 8000520:	4613      	mov	r3, r2
 8000522:	71bb      	strb	r3, [r7, #6]
    
    //INITIALIZE UART FLAGS TO KNOW WHEN EXTRACT MESSAGES

    if (uart_flags == NULL) {
 8000524:	4b3e      	ldr	r3, [pc, #248]	; (8000620 <UART_API_Init+0x10c>)
 8000526:	681b      	ldr	r3, [r3, #0]
 8000528:	2b00      	cmp	r3, #0
 800052a:	d10b      	bne.n	8000544 <UART_API_Init+0x30>
        uart_flags = osEventFlagsNew(NULL);
 800052c:	2000      	movs	r0, #0
 800052e:	f004 fb7a 	bl	8004c26 <osEventFlagsNew>
 8000532:	4603      	mov	r3, r0
 8000534:	4a3a      	ldr	r2, [pc, #232]	; (8000620 <UART_API_Init+0x10c>)
 8000536:	6013      	str	r3, [r2, #0]
        if (uart_flags == NULL) {
 8000538:	4b39      	ldr	r3, [pc, #228]	; (8000620 <UART_API_Init+0x10c>)
 800053a:	681b      	ldr	r3, [r3, #0]
 800053c:	2b00      	cmp	r3, #0
 800053e:	d101      	bne.n	8000544 <UART_API_Init+0x30>
            return false;
 8000540:	2300      	movs	r3, #0
 8000542:	e069      	b.n	8000618 <UART_API_Init+0x104>
        }
    }

    //INITIALIZE UART DRIVER AND GIVE SETFLAG FUNCTION 
    if (UART_Driver_Init(uart_id, baudrate, &UART_API_SetFlag) != true) {
 8000544:	79b9      	ldrb	r1, [r7, #6]
 8000546:	79fb      	ldrb	r3, [r7, #7]
 8000548:	4a36      	ldr	r2, [pc, #216]	; (8000624 <UART_API_Init+0x110>)
 800054a:	4618      	mov	r0, r3
 800054c:	f000 fb12 	bl	8000b74 <UART_Driver_Init>
 8000550:	4603      	mov	r3, r0
 8000552:	f083 0301 	eor.w	r3, r3, #1
 8000556:	b2db      	uxtb	r3, r3
 8000558:	2b00      	cmp	r3, #0
 800055a:	d001      	beq.n	8000560 <UART_API_Init+0x4c>
        return false;
 800055c:	2300      	movs	r3, #0
 800055e:	e05b      	b.n	8000618 <UART_API_Init+0x104>
    }


    //CREATE MUTEX'ES FOR THREADS TO USE 
    uart_buffer_lut[uart_id].mutex_id = osMutexNew(uart_buffer_lut[uart_id].mutex_atr);
 8000560:	79fa      	ldrb	r2, [r7, #7]
 8000562:	4931      	ldr	r1, [pc, #196]	; (8000628 <UART_API_Init+0x114>)
 8000564:	4613      	mov	r3, r2
 8000566:	005b      	lsls	r3, r3, #1
 8000568:	4413      	add	r3, r2
 800056a:	00db      	lsls	r3, r3, #3
 800056c:	440b      	add	r3, r1
 800056e:	330c      	adds	r3, #12
 8000570:	681b      	ldr	r3, [r3, #0]
 8000572:	79fc      	ldrb	r4, [r7, #7]
 8000574:	4618      	mov	r0, r3
 8000576:	f004 fc3f 	bl	8004df8 <osMutexNew>
 800057a:	4602      	mov	r2, r0
 800057c:	492a      	ldr	r1, [pc, #168]	; (8000628 <UART_API_Init+0x114>)
 800057e:	4623      	mov	r3, r4
 8000580:	005b      	lsls	r3, r3, #1
 8000582:	4423      	add	r3, r4
 8000584:	00db      	lsls	r3, r3, #3
 8000586:	440b      	add	r3, r1
 8000588:	3310      	adds	r3, #16
 800058a:	601a      	str	r2, [r3, #0]
    if (uart_buffer_lut[uart_id].mutex_id == NULL) {
 800058c:	79fa      	ldrb	r2, [r7, #7]
 800058e:	4926      	ldr	r1, [pc, #152]	; (8000628 <UART_API_Init+0x114>)
 8000590:	4613      	mov	r3, r2
 8000592:	005b      	lsls	r3, r3, #1
 8000594:	4413      	add	r3, r2
 8000596:	00db      	lsls	r3, r3, #3
 8000598:	440b      	add	r3, r1
 800059a:	3310      	adds	r3, #16
 800059c:	681b      	ldr	r3, [r3, #0]
 800059e:	2b00      	cmp	r3, #0
 80005a0:	d101      	bne.n	80005a6 <UART_API_Init+0x92>
        return false;
 80005a2:	2300      	movs	r3, #0
 80005a4:	e038      	b.n	8000618 <UART_API_Init+0x104>
    }

    //CREATE MESSAGE QUEES TO PUT MESSAGES FOR CMD API 
    if (uart_data_queue_id == NULL){ 
 80005a6:	4b21      	ldr	r3, [pc, #132]	; (800062c <UART_API_Init+0x118>)
 80005a8:	681b      	ldr	r3, [r3, #0]
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	d10d      	bne.n	80005ca <UART_API_Init+0xb6>
        uart_data_queue_id = osMessageQueueNew(UART_QUEUE_SIZE, sizeof(sUartData_t), &uart_data_queue_atr_debug);
 80005ae:	4a20      	ldr	r2, [pc, #128]	; (8000630 <UART_API_Init+0x11c>)
 80005b0:	2108      	movs	r1, #8
 80005b2:	2014      	movs	r0, #20
 80005b4:	f004 fca6 	bl	8004f04 <osMessageQueueNew>
 80005b8:	4603      	mov	r3, r0
 80005ba:	4a1c      	ldr	r2, [pc, #112]	; (800062c <UART_API_Init+0x118>)
 80005bc:	6013      	str	r3, [r2, #0]
        if (uart_data_queue_id == NULL) {
 80005be:	4b1b      	ldr	r3, [pc, #108]	; (800062c <UART_API_Init+0x118>)
 80005c0:	681b      	ldr	r3, [r3, #0]
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	d101      	bne.n	80005ca <UART_API_Init+0xb6>
            return false;
 80005c6:	2300      	movs	r3, #0
 80005c8:	e026      	b.n	8000618 <UART_API_Init+0x104>
    }
    

    //INITIALIZE CMD THREAD FOR CUTTING UART DATA INTO COMMANDS 

    if (CMD_API_ThreadInit() == false){ 
 80005ca:	f7ff ff89 	bl	80004e0 <CMD_API_ThreadInit>
 80005ce:	4603      	mov	r3, r0
 80005d0:	f083 0301 	eor.w	r3, r3, #1
 80005d4:	b2db      	uxtb	r3, r3
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d001      	beq.n	80005de <UART_API_Init+0xca>
        return false; 
 80005da:	2300      	movs	r3, #0
 80005dc:	e01c      	b.n	8000618 <UART_API_Init+0x104>
    }


    //INITIALIZE STATE MACHINE AS INIT 
    uart_buffer_lut[uart_id].state = eUartStateInit;
 80005de:	79fa      	ldrb	r2, [r7, #7]
 80005e0:	4911      	ldr	r1, [pc, #68]	; (8000628 <UART_API_Init+0x114>)
 80005e2:	4613      	mov	r3, r2
 80005e4:	005b      	lsls	r3, r3, #1
 80005e6:	4413      	add	r3, r2
 80005e8:	00db      	lsls	r3, r3, #3
 80005ea:	440b      	add	r3, r1
 80005ec:	330a      	adds	r3, #10
 80005ee:	2200      	movs	r2, #0
 80005f0:	701a      	strb	r2, [r3, #0]
    if (uart_thread_id == NULL) {
 80005f2:	4b10      	ldr	r3, [pc, #64]	; (8000634 <UART_API_Init+0x120>)
 80005f4:	681b      	ldr	r3, [r3, #0]
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d10d      	bne.n	8000616 <UART_API_Init+0x102>
        uart_thread_id = osThreadNew(UART_API_Thread, NULL, &uart_api_thread_atr);
 80005fa:	4a0f      	ldr	r2, [pc, #60]	; (8000638 <UART_API_Init+0x124>)
 80005fc:	2100      	movs	r1, #0
 80005fe:	480f      	ldr	r0, [pc, #60]	; (800063c <UART_API_Init+0x128>)
 8000600:	f004 fa64 	bl	8004acc <osThreadNew>
 8000604:	4603      	mov	r3, r0
 8000606:	4a0b      	ldr	r2, [pc, #44]	; (8000634 <UART_API_Init+0x120>)
 8000608:	6013      	str	r3, [r2, #0]
        if (uart_thread_id == NULL) {
 800060a:	4b0a      	ldr	r3, [pc, #40]	; (8000634 <UART_API_Init+0x120>)
 800060c:	681b      	ldr	r3, [r3, #0]
 800060e:	2b00      	cmp	r3, #0
 8000610:	d101      	bne.n	8000616 <UART_API_Init+0x102>
            //error("Cannot Innitialize UART_API_Thread");
            return false;
 8000612:	2300      	movs	r3, #0
 8000614:	e000      	b.n	8000618 <UART_API_Init+0x104>
     //   uart_interupt_id = osThreadNew(UART_Interupt_Thread, NULL, &uart_interupt_thread_atr);
    //    if (uart_interupt_id == NULL){
      //      return false;
   //     }
   // }
    return true;
 8000616:	2301      	movs	r3, #1
}
 8000618:	4618      	mov	r0, r3
 800061a:	370c      	adds	r7, #12
 800061c:	46bd      	mov	sp, r7
 800061e:	bd90      	pop	{r4, r7, pc}
 8000620:	200001dc 	.word	0x200001dc
 8000624:	08000869 	.word	0x08000869
 8000628:	20000000 	.word	0x20000000
 800062c:	200001d8 	.word	0x200001d8
 8000630:	080084bc 	.word	0x080084bc
 8000634:	200001e0 	.word	0x200001e0
 8000638:	08008498 	.word	0x08008498
 800063c:	08000641 	.word	0x08000641

08000640 <UART_API_Thread>:

void UART_API_Thread (void *argument) {
 8000640:	b590      	push	{r4, r7, lr}
 8000642:	b087      	sub	sp, #28
 8000644:	af00      	add	r7, sp, #0
 8000646:	6078      	str	r0, [r7, #4]
    uint32_t uart_got_message = 0;
 8000648:	2300      	movs	r3, #0
 800064a:	613b      	str	r3, [r7, #16]
	while (true) {
		uart_got_message = 0;
 800064c:	2300      	movs	r3, #0
 800064e:	613b      	str	r3, [r7, #16]
        uart_got_message = UART_API_WaitFlag();
 8000650:	f000 f8f6 	bl	8000840 <UART_API_WaitFlag>
 8000654:	6138      	str	r0, [r7, #16]
        if (uart_got_message != 0){
 8000656:	693b      	ldr	r3, [r7, #16]
 8000658:	2b00      	cmp	r3, #0
 800065a:	d0f7      	beq.n	800064c <UART_API_Thread+0xc>
            eUart_t uart; 
            if ((uart_got_message & DEBUG_UART_GOT_MESSAGE) != 0) uart = eUartDebug; 
 800065c:	693b      	ldr	r3, [r7, #16]
 800065e:	f003 0301 	and.w	r3, r3, #1
 8000662:	2b00      	cmp	r3, #0
 8000664:	d002      	beq.n	800066c <UART_API_Thread+0x2c>
 8000666:	2300      	movs	r3, #0
 8000668:	75fb      	strb	r3, [r7, #23]
 800066a:	e006      	b.n	800067a <UART_API_Thread+0x3a>
            else if ((uart_got_message & MODEM_UART_GOT_MESSAGE) != 0) uart = eUartModem; 
 800066c:	693b      	ldr	r3, [r7, #16]
 800066e:	f003 0302 	and.w	r3, r3, #2
 8000672:	2b00      	cmp	r3, #0
 8000674:	d001      	beq.n	800067a <UART_API_Thread+0x3a>
 8000676:	2301      	movs	r3, #1
 8000678:	75fb      	strb	r3, [r7, #23]
            switch (uart_buffer_lut[uart].state) {
 800067a:	7dfa      	ldrb	r2, [r7, #23]
 800067c:	496d      	ldr	r1, [pc, #436]	; (8000834 <UART_API_Thread+0x1f4>)
 800067e:	4613      	mov	r3, r2
 8000680:	005b      	lsls	r3, r3, #1
 8000682:	4413      	add	r3, r2
 8000684:	00db      	lsls	r3, r3, #3
 8000686:	440b      	add	r3, r1
 8000688:	330a      	adds	r3, #10
 800068a:	781b      	ldrb	r3, [r3, #0]
 800068c:	2b03      	cmp	r3, #3
 800068e:	f000 80a4 	beq.w	80007da <UART_API_Thread+0x19a>
 8000692:	2b03      	cmp	r3, #3
 8000694:	f300 80c9 	bgt.w	800082a <UART_API_Thread+0x1ea>
 8000698:	2b00      	cmp	r3, #0
 800069a:	d002      	beq.n	80006a2 <UART_API_Thread+0x62>
 800069c:	2b02      	cmp	r3, #2
 800069e:	d02b      	beq.n	80006f8 <UART_API_Thread+0xb8>

                    }
                    uart_buffer_lut[uart].state = eUartStateInit;
                    break;
                default:
                    break;
 80006a0:	e0c3      	b.n	800082a <UART_API_Thread+0x1ea>
                    uart_buffer_lut[uart].buffer = (uint8_t*) calloc(uart_buffer_lut[uart].size, sizeof(uint8_t));
 80006a2:	7dfa      	ldrb	r2, [r7, #23]
 80006a4:	4963      	ldr	r1, [pc, #396]	; (8000834 <UART_API_Thread+0x1f4>)
 80006a6:	4613      	mov	r3, r2
 80006a8:	005b      	lsls	r3, r3, #1
 80006aa:	4413      	add	r3, r2
 80006ac:	00db      	lsls	r3, r3, #3
 80006ae:	440b      	add	r3, r1
 80006b0:	3308      	adds	r3, #8
 80006b2:	881b      	ldrh	r3, [r3, #0]
 80006b4:	7dfc      	ldrb	r4, [r7, #23]
 80006b6:	2101      	movs	r1, #1
 80006b8:	4618      	mov	r0, r3
 80006ba:	f007 fcc7 	bl	800804c <calloc>
 80006be:	4603      	mov	r3, r0
 80006c0:	4619      	mov	r1, r3
 80006c2:	4a5c      	ldr	r2, [pc, #368]	; (8000834 <UART_API_Thread+0x1f4>)
 80006c4:	4623      	mov	r3, r4
 80006c6:	005b      	lsls	r3, r3, #1
 80006c8:	4423      	add	r3, r4
 80006ca:	00db      	lsls	r3, r3, #3
 80006cc:	4413      	add	r3, r2
 80006ce:	3304      	adds	r3, #4
 80006d0:	6019      	str	r1, [r3, #0]
                    uart_buffer_lut[uart].index = 0;
 80006d2:	7dfa      	ldrb	r2, [r7, #23]
 80006d4:	4957      	ldr	r1, [pc, #348]	; (8000834 <UART_API_Thread+0x1f4>)
 80006d6:	4613      	mov	r3, r2
 80006d8:	005b      	lsls	r3, r3, #1
 80006da:	4413      	add	r3, r2
 80006dc:	00db      	lsls	r3, r3, #3
 80006de:	440b      	add	r3, r1
 80006e0:	2200      	movs	r2, #0
 80006e2:	601a      	str	r2, [r3, #0]
                    uart_buffer_lut[uart].state = eUartStateRead;
 80006e4:	7dfa      	ldrb	r2, [r7, #23]
 80006e6:	4953      	ldr	r1, [pc, #332]	; (8000834 <UART_API_Thread+0x1f4>)
 80006e8:	4613      	mov	r3, r2
 80006ea:	005b      	lsls	r3, r3, #1
 80006ec:	4413      	add	r3, r2
 80006ee:	00db      	lsls	r3, r3, #3
 80006f0:	440b      	add	r3, r1
 80006f2:	330a      	adds	r3, #10
 80006f4:	2202      	movs	r2, #2
 80006f6:	701a      	strb	r2, [r3, #0]
                    uint8_t byte = 0;
 80006f8:	2300      	movs	r3, #0
 80006fa:	73fb      	strb	r3, [r7, #15]
                    while (UART_Driver_GetByte(uart, &byte) == true) {
 80006fc:	e058      	b.n	80007b0 <UART_API_Thread+0x170>
                        if (byte == END_SYMBOL || byte == END_SYMBOL2) {
 80006fe:	7bfb      	ldrb	r3, [r7, #15]
 8000700:	2b0a      	cmp	r3, #10
 8000702:	d002      	beq.n	800070a <UART_API_Thread+0xca>
 8000704:	7bfb      	ldrb	r3, [r7, #15]
 8000706:	2b3e      	cmp	r3, #62	; 0x3e
 8000708:	d12e      	bne.n	8000768 <UART_API_Thread+0x128>
                            uart_buffer_lut[uart].buffer[uart_buffer_lut[uart].index] = byte;
 800070a:	7dfa      	ldrb	r2, [r7, #23]
 800070c:	4949      	ldr	r1, [pc, #292]	; (8000834 <UART_API_Thread+0x1f4>)
 800070e:	4613      	mov	r3, r2
 8000710:	005b      	lsls	r3, r3, #1
 8000712:	4413      	add	r3, r2
 8000714:	00db      	lsls	r3, r3, #3
 8000716:	440b      	add	r3, r1
 8000718:	3304      	adds	r3, #4
 800071a:	6819      	ldr	r1, [r3, #0]
 800071c:	7dfa      	ldrb	r2, [r7, #23]
 800071e:	4845      	ldr	r0, [pc, #276]	; (8000834 <UART_API_Thread+0x1f4>)
 8000720:	4613      	mov	r3, r2
 8000722:	005b      	lsls	r3, r3, #1
 8000724:	4413      	add	r3, r2
 8000726:	00db      	lsls	r3, r3, #3
 8000728:	4403      	add	r3, r0
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	440b      	add	r3, r1
 800072e:	7bfa      	ldrb	r2, [r7, #15]
 8000730:	701a      	strb	r2, [r3, #0]
                            uart_buffer_lut[uart].index++;
 8000732:	7dfa      	ldrb	r2, [r7, #23]
 8000734:	493f      	ldr	r1, [pc, #252]	; (8000834 <UART_API_Thread+0x1f4>)
 8000736:	4613      	mov	r3, r2
 8000738:	005b      	lsls	r3, r3, #1
 800073a:	4413      	add	r3, r2
 800073c:	00db      	lsls	r3, r3, #3
 800073e:	440b      	add	r3, r1
 8000740:	681b      	ldr	r3, [r3, #0]
 8000742:	1c59      	adds	r1, r3, #1
 8000744:	483b      	ldr	r0, [pc, #236]	; (8000834 <UART_API_Thread+0x1f4>)
 8000746:	4613      	mov	r3, r2
 8000748:	005b      	lsls	r3, r3, #1
 800074a:	4413      	add	r3, r2
 800074c:	00db      	lsls	r3, r3, #3
 800074e:	4403      	add	r3, r0
 8000750:	6019      	str	r1, [r3, #0]
                            uart_buffer_lut[uart].state = eUartStateSend;
 8000752:	7dfa      	ldrb	r2, [r7, #23]
 8000754:	4937      	ldr	r1, [pc, #220]	; (8000834 <UART_API_Thread+0x1f4>)
 8000756:	4613      	mov	r3, r2
 8000758:	005b      	lsls	r3, r3, #1
 800075a:	4413      	add	r3, r2
 800075c:	00db      	lsls	r3, r3, #3
 800075e:	440b      	add	r3, r1
 8000760:	330a      	adds	r3, #10
 8000762:	2203      	movs	r2, #3
 8000764:	701a      	strb	r2, [r3, #0]
                            break;
 8000766:	e02d      	b.n	80007c4 <UART_API_Thread+0x184>
                            uart_buffer_lut[uart].buffer[uart_buffer_lut[uart].index] = byte;
 8000768:	7dfa      	ldrb	r2, [r7, #23]
 800076a:	4932      	ldr	r1, [pc, #200]	; (8000834 <UART_API_Thread+0x1f4>)
 800076c:	4613      	mov	r3, r2
 800076e:	005b      	lsls	r3, r3, #1
 8000770:	4413      	add	r3, r2
 8000772:	00db      	lsls	r3, r3, #3
 8000774:	440b      	add	r3, r1
 8000776:	3304      	adds	r3, #4
 8000778:	6819      	ldr	r1, [r3, #0]
 800077a:	7dfa      	ldrb	r2, [r7, #23]
 800077c:	482d      	ldr	r0, [pc, #180]	; (8000834 <UART_API_Thread+0x1f4>)
 800077e:	4613      	mov	r3, r2
 8000780:	005b      	lsls	r3, r3, #1
 8000782:	4413      	add	r3, r2
 8000784:	00db      	lsls	r3, r3, #3
 8000786:	4403      	add	r3, r0
 8000788:	681b      	ldr	r3, [r3, #0]
 800078a:	440b      	add	r3, r1
 800078c:	7bfa      	ldrb	r2, [r7, #15]
 800078e:	701a      	strb	r2, [r3, #0]
                            uart_buffer_lut[uart].index++;
 8000790:	7dfa      	ldrb	r2, [r7, #23]
 8000792:	4928      	ldr	r1, [pc, #160]	; (8000834 <UART_API_Thread+0x1f4>)
 8000794:	4613      	mov	r3, r2
 8000796:	005b      	lsls	r3, r3, #1
 8000798:	4413      	add	r3, r2
 800079a:	00db      	lsls	r3, r3, #3
 800079c:	440b      	add	r3, r1
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	1c59      	adds	r1, r3, #1
 80007a2:	4824      	ldr	r0, [pc, #144]	; (8000834 <UART_API_Thread+0x1f4>)
 80007a4:	4613      	mov	r3, r2
 80007a6:	005b      	lsls	r3, r3, #1
 80007a8:	4413      	add	r3, r2
 80007aa:	00db      	lsls	r3, r3, #3
 80007ac:	4403      	add	r3, r0
 80007ae:	6019      	str	r1, [r3, #0]
                    while (UART_Driver_GetByte(uart, &byte) == true) {
 80007b0:	f107 020f 	add.w	r2, r7, #15
 80007b4:	7dfb      	ldrb	r3, [r7, #23]
 80007b6:	4611      	mov	r1, r2
 80007b8:	4618      	mov	r0, r3
 80007ba:	f000 fbc3 	bl	8000f44 <UART_Driver_GetByte>
 80007be:	4603      	mov	r3, r0
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d19c      	bne.n	80006fe <UART_API_Thread+0xbe>
                    if (uart_buffer_lut[uart].state != eUartStateSend) {
 80007c4:	7dfa      	ldrb	r2, [r7, #23]
 80007c6:	491b      	ldr	r1, [pc, #108]	; (8000834 <UART_API_Thread+0x1f4>)
 80007c8:	4613      	mov	r3, r2
 80007ca:	005b      	lsls	r3, r3, #1
 80007cc:	4413      	add	r3, r2
 80007ce:	00db      	lsls	r3, r3, #3
 80007d0:	440b      	add	r3, r1
 80007d2:	330a      	adds	r3, #10
 80007d4:	781b      	ldrb	r3, [r3, #0]
 80007d6:	2b03      	cmp	r3, #3
 80007d8:	d129      	bne.n	800082e <UART_API_Thread+0x1ee>
                    message.buffer_adress = (char*)uart_buffer_lut[uart].buffer;
 80007da:	7dfa      	ldrb	r2, [r7, #23]
 80007dc:	4915      	ldr	r1, [pc, #84]	; (8000834 <UART_API_Thread+0x1f4>)
 80007de:	4613      	mov	r3, r2
 80007e0:	005b      	lsls	r3, r3, #1
 80007e2:	4413      	add	r3, r2
 80007e4:	00db      	lsls	r3, r3, #3
 80007e6:	440b      	add	r3, r1
 80007e8:	3304      	adds	r3, #4
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	4a12      	ldr	r2, [pc, #72]	; (8000838 <UART_API_Thread+0x1f8>)
 80007ee:	6013      	str	r3, [r2, #0]
                    message.size = uart_buffer_lut[uart].index;
 80007f0:	7dfa      	ldrb	r2, [r7, #23]
 80007f2:	4910      	ldr	r1, [pc, #64]	; (8000834 <UART_API_Thread+0x1f4>)
 80007f4:	4613      	mov	r3, r2
 80007f6:	005b      	lsls	r3, r3, #1
 80007f8:	4413      	add	r3, r2
 80007fa:	00db      	lsls	r3, r3, #3
 80007fc:	440b      	add	r3, r1
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	b29a      	uxth	r2, r3
 8000802:	4b0d      	ldr	r3, [pc, #52]	; (8000838 <UART_API_Thread+0x1f8>)
 8000804:	809a      	strh	r2, [r3, #4]
                    if (osMessageQueuePut(uart_data_queue_id, &message, osPriorityHigh, UART_QUEUE_PUT_TIMEOUT) != osOK) {
 8000806:	4b0d      	ldr	r3, [pc, #52]	; (800083c <UART_API_Thread+0x1fc>)
 8000808:	6818      	ldr	r0, [r3, #0]
 800080a:	2364      	movs	r3, #100	; 0x64
 800080c:	2228      	movs	r2, #40	; 0x28
 800080e:	490a      	ldr	r1, [pc, #40]	; (8000838 <UART_API_Thread+0x1f8>)
 8000810:	f004 fbec 	bl	8004fec <osMessageQueuePut>
                    uart_buffer_lut[uart].state = eUartStateInit;
 8000814:	7dfa      	ldrb	r2, [r7, #23]
 8000816:	4907      	ldr	r1, [pc, #28]	; (8000834 <UART_API_Thread+0x1f4>)
 8000818:	4613      	mov	r3, r2
 800081a:	005b      	lsls	r3, r3, #1
 800081c:	4413      	add	r3, r2
 800081e:	00db      	lsls	r3, r3, #3
 8000820:	440b      	add	r3, r1
 8000822:	330a      	adds	r3, #10
 8000824:	2200      	movs	r2, #0
 8000826:	701a      	strb	r2, [r3, #0]
                    break;
 8000828:	e002      	b.n	8000830 <UART_API_Thread+0x1f0>
                    break;
 800082a:	bf00      	nop
 800082c:	e70e      	b.n	800064c <UART_API_Thread+0xc>
                        break;
 800082e:	bf00      	nop
		uart_got_message = 0;
 8000830:	e70c      	b.n	800064c <UART_API_Thread+0xc>
 8000832:	bf00      	nop
 8000834:	20000000 	.word	0x20000000
 8000838:	200001e4 	.word	0x200001e4
 800083c:	200001d8 	.word	0x200001d8

08000840 <UART_API_WaitFlag>:
        return false;
    }
    return true;
}

uint32_t UART_API_WaitFlag () {
 8000840:	b580      	push	{r7, lr}
 8000842:	b082      	sub	sp, #8
 8000844:	af00      	add	r7, sp, #0
    uint32_t flag = osEventFlagsWait(uart_flags, DEBUG_UART_GOT_MESSAGE | MODEM_UART_GOT_MESSAGE, osFlagsWaitAny, osWaitForever);
 8000846:	4b07      	ldr	r3, [pc, #28]	; (8000864 <UART_API_WaitFlag+0x24>)
 8000848:	6818      	ldr	r0, [r3, #0]
 800084a:	f04f 33ff 	mov.w	r3, #4294967295
 800084e:	2200      	movs	r2, #0
 8000850:	2103      	movs	r1, #3
 8000852:	f004 fa6b 	bl	8004d2c <osEventFlagsWait>
 8000856:	6078      	str	r0, [r7, #4]
    return flag;
 8000858:	687b      	ldr	r3, [r7, #4]
}
 800085a:	4618      	mov	r0, r3
 800085c:	3708      	adds	r7, #8
 800085e:	46bd      	mov	sp, r7
 8000860:	bd80      	pop	{r7, pc}
 8000862:	bf00      	nop
 8000864:	200001dc 	.word	0x200001dc

08000868 <UART_API_SetFlag>:

bool UART_API_SetFlag (eUart_t uart) {
 8000868:	b580      	push	{r7, lr}
 800086a:	b082      	sub	sp, #8
 800086c:	af00      	add	r7, sp, #0
 800086e:	4603      	mov	r3, r0
 8000870:	71fb      	strb	r3, [r7, #7]
    
    if (uart == eUartDebug){
 8000872:	79fb      	ldrb	r3, [r7, #7]
 8000874:	2b00      	cmp	r3, #0
 8000876:	d10a      	bne.n	800088e <UART_API_SetFlag+0x26>
    	if (osEventFlagsSet(uart_flags, DEBUG_UART_GOT_MESSAGE) == 0) return false;
 8000878:	4b0e      	ldr	r3, [pc, #56]	; (80008b4 <UART_API_SetFlag+0x4c>)
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	2101      	movs	r1, #1
 800087e:	4618      	mov	r0, r3
 8000880:	f004 fa10 	bl	8004ca4 <osEventFlagsSet>
 8000884:	4603      	mov	r3, r0
 8000886:	2b00      	cmp	r3, #0
 8000888:	d10f      	bne.n	80008aa <UART_API_SetFlag+0x42>
 800088a:	2300      	movs	r3, #0
 800088c:	e00e      	b.n	80008ac <UART_API_SetFlag+0x44>
    }
    else if (uart == eUartModem)
 800088e:	79fb      	ldrb	r3, [r7, #7]
 8000890:	2b01      	cmp	r3, #1
 8000892:	d10a      	bne.n	80008aa <UART_API_SetFlag+0x42>
    	if (osEventFlagsSet(uart_flags, MODEM_UART_GOT_MESSAGE) == 0) return false;
 8000894:	4b07      	ldr	r3, [pc, #28]	; (80008b4 <UART_API_SetFlag+0x4c>)
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	2102      	movs	r1, #2
 800089a:	4618      	mov	r0, r3
 800089c:	f004 fa02 	bl	8004ca4 <osEventFlagsSet>
 80008a0:	4603      	mov	r3, r0
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d101      	bne.n	80008aa <UART_API_SetFlag+0x42>
 80008a6:	2300      	movs	r3, #0
 80008a8:	e000      	b.n	80008ac <UART_API_SetFlag+0x44>

    return true;
 80008aa:	2301      	movs	r3, #1
}
 80008ac:	4618      	mov	r0, r3
 80008ae:	3708      	adds	r7, #8
 80008b0:	46bd      	mov	sp, r7
 80008b2:	bd80      	pop	{r7, pc}
 80008b4:	200001dc 	.word	0x200001dc

080008b8 <GPIO_Driver_Init>:
    };
/*______________________________________DEFINES, CONSTANTS, VARIABLES_____________________________________*/



bool GPIO_Driver_Init (eGpioPin_t gpio_pin, eGpioPinState_t init_state) {  //GPIO PIN INITIALIZATION
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b08c      	sub	sp, #48	; 0x30
 80008bc:	af00      	add	r7, sp, #0
 80008be:	4603      	mov	r3, r0
 80008c0:	460a      	mov	r2, r1
 80008c2:	71fb      	strb	r3, [r7, #7]
 80008c4:	4613      	mov	r3, r2
 80008c6:	71bb      	strb	r3, [r7, #6]

    //UNDEFINED PIN 

    if (gpio_pin >= eGpioPinLast) {
 80008c8:	79fb      	ldrb	r3, [r7, #7]
 80008ca:	2b1a      	cmp	r3, #26
 80008cc:	d901      	bls.n	80008d2 <GPIO_Driver_Init+0x1a>
        return false;
 80008ce:	2300      	movs	r3, #0
 80008d0:	e126      	b.n	8000b20 <GPIO_Driver_Init+0x268>
    }
    if (init_state >= ePinNaN){
 80008d2:	79bb      	ldrb	r3, [r7, #6]
 80008d4:	2b01      	cmp	r3, #1
 80008d6:	d901      	bls.n	80008dc <GPIO_Driver_Init+0x24>
        return false; 
 80008d8:	2300      	movs	r3, #0
 80008da:	e121      	b.n	8000b20 <GPIO_Driver_Init+0x268>
    }

    GPIO_InitTypeDef gpio_init_struct = {0};
 80008dc:	f107 031c 	add.w	r3, r7, #28
 80008e0:	2200      	movs	r2, #0
 80008e2:	601a      	str	r2, [r3, #0]
 80008e4:	605a      	str	r2, [r3, #4]
 80008e6:	609a      	str	r2, [r3, #8]
 80008e8:	60da      	str	r2, [r3, #12]
 80008ea:	611a      	str	r2, [r3, #16]

    //CLOCKS ENABLE 

    if ((rtc_clock_enabled&RTC_H_CLOCK_ENABLED)==0){
 80008ec:	4b8e      	ldr	r3, [pc, #568]	; (8000b28 <GPIO_Driver_Init+0x270>)
 80008ee:	781b      	ldrb	r3, [r3, #0]
 80008f0:	f003 0308 	and.w	r3, r3, #8
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d112      	bne.n	800091e <GPIO_Driver_Init+0x66>
        __HAL_RCC_GPIOH_CLK_ENABLE();
 80008f8:	4b8c      	ldr	r3, [pc, #560]	; (8000b2c <GPIO_Driver_Init+0x274>)
 80008fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008fc:	4a8b      	ldr	r2, [pc, #556]	; (8000b2c <GPIO_Driver_Init+0x274>)
 80008fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000902:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000904:	4b89      	ldr	r3, [pc, #548]	; (8000b2c <GPIO_Driver_Init+0x274>)
 8000906:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000908:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800090c:	61bb      	str	r3, [r7, #24]
 800090e:	69bb      	ldr	r3, [r7, #24]
        rtc_clock_enabled|=RTC_H_CLOCK_ENABLED;      
 8000910:	4b85      	ldr	r3, [pc, #532]	; (8000b28 <GPIO_Driver_Init+0x270>)
 8000912:	781b      	ldrb	r3, [r3, #0]
 8000914:	f043 0308 	orr.w	r3, r3, #8
 8000918:	b2da      	uxtb	r2, r3
 800091a:	4b83      	ldr	r3, [pc, #524]	; (8000b28 <GPIO_Driver_Init+0x270>)
 800091c:	701a      	strb	r2, [r3, #0]
    }
    switch ((int)(gpio_desc_lut[gpio_pin].port)){
 800091e:	79fa      	ldrb	r2, [r7, #7]
 8000920:	4983      	ldr	r1, [pc, #524]	; (8000b30 <GPIO_Driver_Init+0x278>)
 8000922:	4613      	mov	r3, r2
 8000924:	00db      	lsls	r3, r3, #3
 8000926:	1a9b      	subs	r3, r3, r2
 8000928:	009b      	lsls	r3, r3, #2
 800092a:	440b      	add	r3, r1
 800092c:	681b      	ldr	r3, [r3, #0]
 800092e:	4a81      	ldr	r2, [pc, #516]	; (8000b34 <GPIO_Driver_Init+0x27c>)
 8000930:	4293      	cmp	r3, r2
 8000932:	d03d      	beq.n	80009b0 <GPIO_Driver_Init+0xf8>
 8000934:	4a7f      	ldr	r2, [pc, #508]	; (8000b34 <GPIO_Driver_Init+0x27c>)
 8000936:	4293      	cmp	r3, r2
 8000938:	dc54      	bgt.n	80009e4 <GPIO_Driver_Init+0x12c>
 800093a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800093e:	d003      	beq.n	8000948 <GPIO_Driver_Init+0x90>
 8000940:	4a7d      	ldr	r2, [pc, #500]	; (8000b38 <GPIO_Driver_Init+0x280>)
 8000942:	4293      	cmp	r3, r2
 8000944:	d01a      	beq.n	800097c <GPIO_Driver_Init+0xc4>
 8000946:	e04d      	b.n	80009e4 <GPIO_Driver_Init+0x12c>
        case (int)(GPIOA):{
            if ((rtc_clock_enabled&RTC_A_CLOCK_ENABLED)==0){
 8000948:	4b77      	ldr	r3, [pc, #476]	; (8000b28 <GPIO_Driver_Init+0x270>)
 800094a:	781b      	ldrb	r3, [r3, #0]
 800094c:	f003 0301 	and.w	r3, r3, #1
 8000950:	2b00      	cmp	r3, #0
 8000952:	d149      	bne.n	80009e8 <GPIO_Driver_Init+0x130>
                 __HAL_RCC_GPIOA_CLK_ENABLE();
 8000954:	4b75      	ldr	r3, [pc, #468]	; (8000b2c <GPIO_Driver_Init+0x274>)
 8000956:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000958:	4a74      	ldr	r2, [pc, #464]	; (8000b2c <GPIO_Driver_Init+0x274>)
 800095a:	f043 0301 	orr.w	r3, r3, #1
 800095e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000960:	4b72      	ldr	r3, [pc, #456]	; (8000b2c <GPIO_Driver_Init+0x274>)
 8000962:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000964:	f003 0301 	and.w	r3, r3, #1
 8000968:	617b      	str	r3, [r7, #20]
 800096a:	697b      	ldr	r3, [r7, #20]
                rtc_clock_enabled|=RTC_A_CLOCK_ENABLED;      
 800096c:	4b6e      	ldr	r3, [pc, #440]	; (8000b28 <GPIO_Driver_Init+0x270>)
 800096e:	781b      	ldrb	r3, [r3, #0]
 8000970:	f043 0301 	orr.w	r3, r3, #1
 8000974:	b2da      	uxtb	r2, r3
 8000976:	4b6c      	ldr	r3, [pc, #432]	; (8000b28 <GPIO_Driver_Init+0x270>)
 8000978:	701a      	strb	r2, [r3, #0]
            } 
            break;
 800097a:	e035      	b.n	80009e8 <GPIO_Driver_Init+0x130>
        }
        case (int)(GPIOB):{
            if ((rtc_clock_enabled&RTC_B_CLOCK_ENABLED)==0){
 800097c:	4b6a      	ldr	r3, [pc, #424]	; (8000b28 <GPIO_Driver_Init+0x270>)
 800097e:	781b      	ldrb	r3, [r3, #0]
 8000980:	f003 0302 	and.w	r3, r3, #2
 8000984:	2b00      	cmp	r3, #0
 8000986:	d131      	bne.n	80009ec <GPIO_Driver_Init+0x134>
                 __HAL_RCC_GPIOB_CLK_ENABLE();
 8000988:	4b68      	ldr	r3, [pc, #416]	; (8000b2c <GPIO_Driver_Init+0x274>)
 800098a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800098c:	4a67      	ldr	r2, [pc, #412]	; (8000b2c <GPIO_Driver_Init+0x274>)
 800098e:	f043 0302 	orr.w	r3, r3, #2
 8000992:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000994:	4b65      	ldr	r3, [pc, #404]	; (8000b2c <GPIO_Driver_Init+0x274>)
 8000996:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000998:	f003 0302 	and.w	r3, r3, #2
 800099c:	613b      	str	r3, [r7, #16]
 800099e:	693b      	ldr	r3, [r7, #16]
                rtc_clock_enabled|=RTC_B_CLOCK_ENABLED;      
 80009a0:	4b61      	ldr	r3, [pc, #388]	; (8000b28 <GPIO_Driver_Init+0x270>)
 80009a2:	781b      	ldrb	r3, [r3, #0]
 80009a4:	f043 0302 	orr.w	r3, r3, #2
 80009a8:	b2da      	uxtb	r2, r3
 80009aa:	4b5f      	ldr	r3, [pc, #380]	; (8000b28 <GPIO_Driver_Init+0x270>)
 80009ac:	701a      	strb	r2, [r3, #0]
            } 
            break;
 80009ae:	e01d      	b.n	80009ec <GPIO_Driver_Init+0x134>
        }
        case (int)(GPIOC):{
            if ((rtc_clock_enabled&RTC_C_CLOCK_ENABLED)==0){
 80009b0:	4b5d      	ldr	r3, [pc, #372]	; (8000b28 <GPIO_Driver_Init+0x270>)
 80009b2:	781b      	ldrb	r3, [r3, #0]
 80009b4:	f003 0304 	and.w	r3, r3, #4
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d119      	bne.n	80009f0 <GPIO_Driver_Init+0x138>
                 __HAL_RCC_GPIOC_CLK_ENABLE();
 80009bc:	4b5b      	ldr	r3, [pc, #364]	; (8000b2c <GPIO_Driver_Init+0x274>)
 80009be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009c0:	4a5a      	ldr	r2, [pc, #360]	; (8000b2c <GPIO_Driver_Init+0x274>)
 80009c2:	f043 0304 	orr.w	r3, r3, #4
 80009c6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009c8:	4b58      	ldr	r3, [pc, #352]	; (8000b2c <GPIO_Driver_Init+0x274>)
 80009ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009cc:	f003 0304 	and.w	r3, r3, #4
 80009d0:	60fb      	str	r3, [r7, #12]
 80009d2:	68fb      	ldr	r3, [r7, #12]
                rtc_clock_enabled|=RTC_C_CLOCK_ENABLED;      
 80009d4:	4b54      	ldr	r3, [pc, #336]	; (8000b28 <GPIO_Driver_Init+0x270>)
 80009d6:	781b      	ldrb	r3, [r3, #0]
 80009d8:	f043 0304 	orr.w	r3, r3, #4
 80009dc:	b2da      	uxtb	r2, r3
 80009de:	4b52      	ldr	r3, [pc, #328]	; (8000b28 <GPIO_Driver_Init+0x270>)
 80009e0:	701a      	strb	r2, [r3, #0]
            } 
            break;
 80009e2:	e005      	b.n	80009f0 <GPIO_Driver_Init+0x138>
        }
        default: return false;                 
 80009e4:	2300      	movs	r3, #0
 80009e6:	e09b      	b.n	8000b20 <GPIO_Driver_Init+0x268>
            break;
 80009e8:	bf00      	nop
 80009ea:	e002      	b.n	80009f2 <GPIO_Driver_Init+0x13a>
            break;
 80009ec:	bf00      	nop
 80009ee:	e000      	b.n	80009f2 <GPIO_Driver_Init+0x13a>
            break;
 80009f0:	bf00      	nop
    }

    //GPIO STRUCT FORMATION
    
    HAL_GPIO_WritePin(gpio_desc_lut[gpio_pin].port, gpio_desc_lut[gpio_pin].pin, GPIO_PIN_RESET);
 80009f2:	79fa      	ldrb	r2, [r7, #7]
 80009f4:	494e      	ldr	r1, [pc, #312]	; (8000b30 <GPIO_Driver_Init+0x278>)
 80009f6:	4613      	mov	r3, r2
 80009f8:	00db      	lsls	r3, r3, #3
 80009fa:	1a9b      	subs	r3, r3, r2
 80009fc:	009b      	lsls	r3, r3, #2
 80009fe:	440b      	add	r3, r1
 8000a00:	6818      	ldr	r0, [r3, #0]
 8000a02:	79fa      	ldrb	r2, [r7, #7]
 8000a04:	494a      	ldr	r1, [pc, #296]	; (8000b30 <GPIO_Driver_Init+0x278>)
 8000a06:	4613      	mov	r3, r2
 8000a08:	00db      	lsls	r3, r3, #3
 8000a0a:	1a9b      	subs	r3, r3, r2
 8000a0c:	009b      	lsls	r3, r3, #2
 8000a0e:	440b      	add	r3, r1
 8000a10:	3304      	adds	r3, #4
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	b29b      	uxth	r3, r3
 8000a16:	2200      	movs	r2, #0
 8000a18:	4619      	mov	r1, r3
 8000a1a:	f001 f859 	bl	8001ad0 <HAL_GPIO_WritePin>
    gpio_init_struct.Pin = gpio_desc_lut[gpio_pin].pin;
 8000a1e:	79fa      	ldrb	r2, [r7, #7]
 8000a20:	4943      	ldr	r1, [pc, #268]	; (8000b30 <GPIO_Driver_Init+0x278>)
 8000a22:	4613      	mov	r3, r2
 8000a24:	00db      	lsls	r3, r3, #3
 8000a26:	1a9b      	subs	r3, r3, r2
 8000a28:	009b      	lsls	r3, r3, #2
 8000a2a:	440b      	add	r3, r1
 8000a2c:	3304      	adds	r3, #4
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	61fb      	str	r3, [r7, #28]
    gpio_init_struct.Mode = gpio_desc_lut[gpio_pin].mode;
 8000a32:	79fa      	ldrb	r2, [r7, #7]
 8000a34:	493e      	ldr	r1, [pc, #248]	; (8000b30 <GPIO_Driver_Init+0x278>)
 8000a36:	4613      	mov	r3, r2
 8000a38:	00db      	lsls	r3, r3, #3
 8000a3a:	1a9b      	subs	r3, r3, r2
 8000a3c:	009b      	lsls	r3, r3, #2
 8000a3e:	440b      	add	r3, r1
 8000a40:	3308      	adds	r3, #8
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	623b      	str	r3, [r7, #32]
    gpio_init_struct.Speed = gpio_desc_lut[gpio_pin].speed;
 8000a46:	79fa      	ldrb	r2, [r7, #7]
 8000a48:	4939      	ldr	r1, [pc, #228]	; (8000b30 <GPIO_Driver_Init+0x278>)
 8000a4a:	4613      	mov	r3, r2
 8000a4c:	00db      	lsls	r3, r3, #3
 8000a4e:	1a9b      	subs	r3, r3, r2
 8000a50:	009b      	lsls	r3, r3, #2
 8000a52:	440b      	add	r3, r1
 8000a54:	330c      	adds	r3, #12
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	62bb      	str	r3, [r7, #40]	; 0x28
    gpio_init_struct.Pull = gpio_desc_lut[gpio_pin].pull;
 8000a5a:	79fa      	ldrb	r2, [r7, #7]
 8000a5c:	4934      	ldr	r1, [pc, #208]	; (8000b30 <GPIO_Driver_Init+0x278>)
 8000a5e:	4613      	mov	r3, r2
 8000a60:	00db      	lsls	r3, r3, #3
 8000a62:	1a9b      	subs	r3, r3, r2
 8000a64:	009b      	lsls	r3, r3, #2
 8000a66:	440b      	add	r3, r1
 8000a68:	3310      	adds	r3, #16
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	627b      	str	r3, [r7, #36]	; 0x24
    gpio_init_struct.Alternate = gpio_desc_lut[gpio_pin].alternate;
 8000a6e:	79fa      	ldrb	r2, [r7, #7]
 8000a70:	492f      	ldr	r1, [pc, #188]	; (8000b30 <GPIO_Driver_Init+0x278>)
 8000a72:	4613      	mov	r3, r2
 8000a74:	00db      	lsls	r3, r3, #3
 8000a76:	1a9b      	subs	r3, r3, r2
 8000a78:	009b      	lsls	r3, r3, #2
 8000a7a:	440b      	add	r3, r1
 8000a7c:	3314      	adds	r3, #20
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	62fb      	str	r3, [r7, #44]	; 0x2c
    
    HAL_GPIO_Init(gpio_desc_lut[gpio_pin].port, &gpio_init_struct);
 8000a82:	79fa      	ldrb	r2, [r7, #7]
 8000a84:	492a      	ldr	r1, [pc, #168]	; (8000b30 <GPIO_Driver_Init+0x278>)
 8000a86:	4613      	mov	r3, r2
 8000a88:	00db      	lsls	r3, r3, #3
 8000a8a:	1a9b      	subs	r3, r3, r2
 8000a8c:	009b      	lsls	r3, r3, #2
 8000a8e:	440b      	add	r3, r1
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	f107 021c 	add.w	r2, r7, #28
 8000a96:	4611      	mov	r1, r2
 8000a98:	4618      	mov	r0, r3
 8000a9a:	f000 fe9f 	bl	80017dc <HAL_GPIO_Init>

    //INTERUPT ENABLE 
    if (gpio_desc_lut[gpio_pin].interupt_enable == true){
 8000a9e:	79fa      	ldrb	r2, [r7, #7]
 8000aa0:	4923      	ldr	r1, [pc, #140]	; (8000b30 <GPIO_Driver_Init+0x278>)
 8000aa2:	4613      	mov	r3, r2
 8000aa4:	00db      	lsls	r3, r3, #3
 8000aa6:	1a9b      	subs	r3, r3, r2
 8000aa8:	009b      	lsls	r3, r3, #2
 8000aaa:	440b      	add	r3, r1
 8000aac:	3318      	adds	r3, #24
 8000aae:	781b      	ldrb	r3, [r3, #0]
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d01b      	beq.n	8000aec <GPIO_Driver_Init+0x234>
        HAL_NVIC_SetPriority(gpio_desc_lut[gpio_pin].interupt, 5, 0);
 8000ab4:	79fa      	ldrb	r2, [r7, #7]
 8000ab6:	491e      	ldr	r1, [pc, #120]	; (8000b30 <GPIO_Driver_Init+0x278>)
 8000ab8:	4613      	mov	r3, r2
 8000aba:	00db      	lsls	r3, r3, #3
 8000abc:	1a9b      	subs	r3, r3, r2
 8000abe:	009b      	lsls	r3, r3, #2
 8000ac0:	440b      	add	r3, r1
 8000ac2:	3319      	adds	r3, #25
 8000ac4:	f993 3000 	ldrsb.w	r3, [r3]
 8000ac8:	2200      	movs	r2, #0
 8000aca:	2105      	movs	r1, #5
 8000acc:	4618      	mov	r0, r3
 8000ace:	f000 fddb 	bl	8001688 <HAL_NVIC_SetPriority>
        HAL_NVIC_EnableIRQ(gpio_desc_lut[gpio_pin].interupt);
 8000ad2:	79fa      	ldrb	r2, [r7, #7]
 8000ad4:	4916      	ldr	r1, [pc, #88]	; (8000b30 <GPIO_Driver_Init+0x278>)
 8000ad6:	4613      	mov	r3, r2
 8000ad8:	00db      	lsls	r3, r3, #3
 8000ada:	1a9b      	subs	r3, r3, r2
 8000adc:	009b      	lsls	r3, r3, #2
 8000ade:	440b      	add	r3, r1
 8000ae0:	3319      	adds	r3, #25
 8000ae2:	f993 3000 	ldrsb.w	r3, [r3]
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	f000 fdea 	bl	80016c0 <HAL_NVIC_EnableIRQ>
    }

    if (init_state == ePinHigh) HAL_GPIO_WritePin(gpio_desc_lut[gpio_pin].port, gpio_desc_lut[gpio_pin].pin, GPIO_PIN_SET);
 8000aec:	79bb      	ldrb	r3, [r7, #6]
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d115      	bne.n	8000b1e <GPIO_Driver_Init+0x266>
 8000af2:	79fa      	ldrb	r2, [r7, #7]
 8000af4:	490e      	ldr	r1, [pc, #56]	; (8000b30 <GPIO_Driver_Init+0x278>)
 8000af6:	4613      	mov	r3, r2
 8000af8:	00db      	lsls	r3, r3, #3
 8000afa:	1a9b      	subs	r3, r3, r2
 8000afc:	009b      	lsls	r3, r3, #2
 8000afe:	440b      	add	r3, r1
 8000b00:	6818      	ldr	r0, [r3, #0]
 8000b02:	79fa      	ldrb	r2, [r7, #7]
 8000b04:	490a      	ldr	r1, [pc, #40]	; (8000b30 <GPIO_Driver_Init+0x278>)
 8000b06:	4613      	mov	r3, r2
 8000b08:	00db      	lsls	r3, r3, #3
 8000b0a:	1a9b      	subs	r3, r3, r2
 8000b0c:	009b      	lsls	r3, r3, #2
 8000b0e:	440b      	add	r3, r1
 8000b10:	3304      	adds	r3, #4
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	b29b      	uxth	r3, r3
 8000b16:	2201      	movs	r2, #1
 8000b18:	4619      	mov	r1, r3
 8000b1a:	f000 ffd9 	bl	8001ad0 <HAL_GPIO_WritePin>
    
    return true;
 8000b1e:	2301      	movs	r3, #1
}
 8000b20:	4618      	mov	r0, r3
 8000b22:	3730      	adds	r7, #48	; 0x30
 8000b24:	46bd      	mov	sp, r7
 8000b26:	bd80      	pop	{r7, pc}
 8000b28:	200001ec 	.word	0x200001ec
 8000b2c:	40021000 	.word	0x40021000
 8000b30:	080084f4 	.word	0x080084f4
 8000b34:	48000800 	.word	0x48000800
 8000b38:	48000400 	.word	0x48000400

08000b3c <EXTI1_IRQHandler>:


/*____________________INTERUPT HANDLERS_______________________________________*/

void EXTI1_IRQHandler(void)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8000b40:	2002      	movs	r0, #2
 8000b42:	f000 ffdd 	bl	8001b00 <HAL_GPIO_EXTI_IRQHandler>
}
 8000b46:	bf00      	nop
 8000b48:	bd80      	pop	{r7, pc}
	...

08000b4c <I2C1_EV_IRQHandler>:
void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c){ 
    __NOP();
}


void I2C1_EV_IRQHandler(void){
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	af00      	add	r7, sp, #0
  HAL_I2C_EV_IRQHandler(&i2c_desc_lut_dynamic[eI2CEeprom].i2c_handle);
 8000b50:	4802      	ldr	r0, [pc, #8]	; (8000b5c <I2C1_EV_IRQHandler+0x10>)
 8000b52:	f000 fff8 	bl	8001b46 <HAL_I2C_EV_IRQHandler>
}
 8000b56:	bf00      	nop
 8000b58:	bd80      	pop	{r7, pc}
 8000b5a:	bf00      	nop
 8000b5c:	20000244 	.word	0x20000244

08000b60 <I2C2_EV_IRQHandler>:


void I2C2_EV_IRQHandler(void){
 8000b60:	b580      	push	{r7, lr}
 8000b62:	af00      	add	r7, sp, #0
    HAL_I2C_EV_IRQHandler(&i2c_desc_lut_dynamic[eI2CEeprom].i2c_handle);
 8000b64:	4802      	ldr	r0, [pc, #8]	; (8000b70 <I2C2_EV_IRQHandler+0x10>)
 8000b66:	f000 ffee 	bl	8001b46 <HAL_I2C_EV_IRQHandler>
}
 8000b6a:	bf00      	nop
 8000b6c:	bd80      	pop	{r7, pc}
 8000b6e:	bf00      	nop
 8000b70:	20000244 	.word	0x20000244

08000b74 <UART_Driver_Init>:
/*____________________________________________CONSTANTS, LUT's, VARIABLES, etc______________________________________________*/




bool UART_Driver_Init (eUart_t uart, eBaudRate_t baudrate, bool(*function_pointer)(eUart_t)) { //INITIALIZE UART 
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b082      	sub	sp, #8
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	603a      	str	r2, [r7, #0]
 8000b7e:	71fb      	strb	r3, [r7, #7]
 8000b80:	460b      	mov	r3, r1
 8000b82:	71bb      	strb	r3, [r7, #6]
    if (uart >= eUartLast) {
 8000b84:	79fb      	ldrb	r3, [r7, #7]
 8000b86:	2b01      	cmp	r3, #1
 8000b88:	d901      	bls.n	8000b8e <UART_Driver_Init+0x1a>
        return false;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	e0dd      	b.n	8000d4a <UART_Driver_Init+0x1d6>
    }
    if (baudrate >= eBaudRateLast) {
 8000b8e:	79bb      	ldrb	r3, [r7, #6]
 8000b90:	2b07      	cmp	r3, #7
 8000b92:	d901      	bls.n	8000b98 <UART_Driver_Init+0x24>
        return false;
 8000b94:	2300      	movs	r3, #0
 8000b96:	e0d8      	b.n	8000d4a <UART_Driver_Init+0x1d6>
    }
    if (UART_Driver_Low_Level_Init(uart) == false){ 
 8000b98:	79fb      	ldrb	r3, [r7, #7]
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	f000 f8e0 	bl	8000d60 <UART_Driver_Low_Level_Init>
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	f083 0301 	eor.w	r3, r3, #1
 8000ba6:	b2db      	uxtb	r3, r3
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d001      	beq.n	8000bb0 <UART_Driver_Init+0x3c>
        return false; 
 8000bac:	2300      	movs	r3, #0
 8000bae:	e0cc      	b.n	8000d4a <UART_Driver_Init+0x1d6>
    }
    uart_desc_lut_dynamic[uart].uart_handle.Instance = uart_desc_lut[uart].instance;
 8000bb0:	79fa      	ldrb	r2, [r7, #7]
 8000bb2:	79f9      	ldrb	r1, [r7, #7]
 8000bb4:	4867      	ldr	r0, [pc, #412]	; (8000d54 <UART_Driver_Init+0x1e0>)
 8000bb6:	4613      	mov	r3, r2
 8000bb8:	005b      	lsls	r3, r3, #1
 8000bba:	4413      	add	r3, r2
 8000bbc:	011b      	lsls	r3, r3, #4
 8000bbe:	4403      	add	r3, r0
 8000bc0:	681a      	ldr	r2, [r3, #0]
 8000bc2:	4865      	ldr	r0, [pc, #404]	; (8000d58 <UART_Driver_Init+0x1e4>)
 8000bc4:	2394      	movs	r3, #148	; 0x94
 8000bc6:	fb01 f303 	mul.w	r3, r1, r3
 8000bca:	4403      	add	r3, r0
 8000bcc:	601a      	str	r2, [r3, #0]
    uart_desc_lut_dynamic[uart].uart_handle.Init.BaudRate = uart_baudrate_lut[baudrate]; 
 8000bce:	79ba      	ldrb	r2, [r7, #6]
 8000bd0:	79fb      	ldrb	r3, [r7, #7]
 8000bd2:	4962      	ldr	r1, [pc, #392]	; (8000d5c <UART_Driver_Init+0x1e8>)
 8000bd4:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000bd8:	495f      	ldr	r1, [pc, #380]	; (8000d58 <UART_Driver_Init+0x1e4>)
 8000bda:	2094      	movs	r0, #148	; 0x94
 8000bdc:	fb00 f303 	mul.w	r3, r0, r3
 8000be0:	440b      	add	r3, r1
 8000be2:	3304      	adds	r3, #4
 8000be4:	601a      	str	r2, [r3, #0]
    uart_desc_lut_dynamic[uart].uart_handle.Init.WordLength = uart_desc_lut[uart].word_length; 
 8000be6:	79fa      	ldrb	r2, [r7, #7]
 8000be8:	79f9      	ldrb	r1, [r7, #7]
 8000bea:	485a      	ldr	r0, [pc, #360]	; (8000d54 <UART_Driver_Init+0x1e0>)
 8000bec:	4613      	mov	r3, r2
 8000bee:	005b      	lsls	r3, r3, #1
 8000bf0:	4413      	add	r3, r2
 8000bf2:	011b      	lsls	r3, r3, #4
 8000bf4:	4403      	add	r3, r0
 8000bf6:	3304      	adds	r3, #4
 8000bf8:	681a      	ldr	r2, [r3, #0]
 8000bfa:	4857      	ldr	r0, [pc, #348]	; (8000d58 <UART_Driver_Init+0x1e4>)
 8000bfc:	2394      	movs	r3, #148	; 0x94
 8000bfe:	fb01 f303 	mul.w	r3, r1, r3
 8000c02:	4403      	add	r3, r0
 8000c04:	3308      	adds	r3, #8
 8000c06:	601a      	str	r2, [r3, #0]
    uart_desc_lut_dynamic[uart].uart_handle.Init.StopBits = uart_desc_lut[uart].stop_bits;
 8000c08:	79fa      	ldrb	r2, [r7, #7]
 8000c0a:	79f9      	ldrb	r1, [r7, #7]
 8000c0c:	4851      	ldr	r0, [pc, #324]	; (8000d54 <UART_Driver_Init+0x1e0>)
 8000c0e:	4613      	mov	r3, r2
 8000c10:	005b      	lsls	r3, r3, #1
 8000c12:	4413      	add	r3, r2
 8000c14:	011b      	lsls	r3, r3, #4
 8000c16:	4403      	add	r3, r0
 8000c18:	3308      	adds	r3, #8
 8000c1a:	681a      	ldr	r2, [r3, #0]
 8000c1c:	484e      	ldr	r0, [pc, #312]	; (8000d58 <UART_Driver_Init+0x1e4>)
 8000c1e:	2394      	movs	r3, #148	; 0x94
 8000c20:	fb01 f303 	mul.w	r3, r1, r3
 8000c24:	4403      	add	r3, r0
 8000c26:	330c      	adds	r3, #12
 8000c28:	601a      	str	r2, [r3, #0]
    uart_desc_lut_dynamic[uart].uart_handle.Init.Parity = uart_desc_lut[uart].parity; 
 8000c2a:	79fa      	ldrb	r2, [r7, #7]
 8000c2c:	79f9      	ldrb	r1, [r7, #7]
 8000c2e:	4849      	ldr	r0, [pc, #292]	; (8000d54 <UART_Driver_Init+0x1e0>)
 8000c30:	4613      	mov	r3, r2
 8000c32:	005b      	lsls	r3, r3, #1
 8000c34:	4413      	add	r3, r2
 8000c36:	011b      	lsls	r3, r3, #4
 8000c38:	4403      	add	r3, r0
 8000c3a:	330c      	adds	r3, #12
 8000c3c:	681a      	ldr	r2, [r3, #0]
 8000c3e:	4846      	ldr	r0, [pc, #280]	; (8000d58 <UART_Driver_Init+0x1e4>)
 8000c40:	2394      	movs	r3, #148	; 0x94
 8000c42:	fb01 f303 	mul.w	r3, r1, r3
 8000c46:	4403      	add	r3, r0
 8000c48:	3310      	adds	r3, #16
 8000c4a:	601a      	str	r2, [r3, #0]
    uart_desc_lut_dynamic[uart].uart_handle.Init.Mode =  uart_desc_lut[uart].uart_mode; 
 8000c4c:	79fa      	ldrb	r2, [r7, #7]
 8000c4e:	79f9      	ldrb	r1, [r7, #7]
 8000c50:	4840      	ldr	r0, [pc, #256]	; (8000d54 <UART_Driver_Init+0x1e0>)
 8000c52:	4613      	mov	r3, r2
 8000c54:	005b      	lsls	r3, r3, #1
 8000c56:	4413      	add	r3, r2
 8000c58:	011b      	lsls	r3, r3, #4
 8000c5a:	4403      	add	r3, r0
 8000c5c:	3310      	adds	r3, #16
 8000c5e:	681a      	ldr	r2, [r3, #0]
 8000c60:	483d      	ldr	r0, [pc, #244]	; (8000d58 <UART_Driver_Init+0x1e4>)
 8000c62:	2394      	movs	r3, #148	; 0x94
 8000c64:	fb01 f303 	mul.w	r3, r1, r3
 8000c68:	4403      	add	r3, r0
 8000c6a:	3314      	adds	r3, #20
 8000c6c:	601a      	str	r2, [r3, #0]
    uart_desc_lut_dynamic[uart].uart_handle.Init.HwFlowCtl = uart_desc_lut[uart].hardware_flow_control; 
 8000c6e:	79fa      	ldrb	r2, [r7, #7]
 8000c70:	79f9      	ldrb	r1, [r7, #7]
 8000c72:	4838      	ldr	r0, [pc, #224]	; (8000d54 <UART_Driver_Init+0x1e0>)
 8000c74:	4613      	mov	r3, r2
 8000c76:	005b      	lsls	r3, r3, #1
 8000c78:	4413      	add	r3, r2
 8000c7a:	011b      	lsls	r3, r3, #4
 8000c7c:	4403      	add	r3, r0
 8000c7e:	3314      	adds	r3, #20
 8000c80:	681a      	ldr	r2, [r3, #0]
 8000c82:	4835      	ldr	r0, [pc, #212]	; (8000d58 <UART_Driver_Init+0x1e4>)
 8000c84:	2394      	movs	r3, #148	; 0x94
 8000c86:	fb01 f303 	mul.w	r3, r1, r3
 8000c8a:	4403      	add	r3, r0
 8000c8c:	3318      	adds	r3, #24
 8000c8e:	601a      	str	r2, [r3, #0]
    uart_desc_lut_dynamic[uart].uart_handle.Init.OverSampling = uart_desc_lut[uart].over_sampling; 
 8000c90:	79fa      	ldrb	r2, [r7, #7]
 8000c92:	79f9      	ldrb	r1, [r7, #7]
 8000c94:	482f      	ldr	r0, [pc, #188]	; (8000d54 <UART_Driver_Init+0x1e0>)
 8000c96:	4613      	mov	r3, r2
 8000c98:	005b      	lsls	r3, r3, #1
 8000c9a:	4413      	add	r3, r2
 8000c9c:	011b      	lsls	r3, r3, #4
 8000c9e:	4403      	add	r3, r0
 8000ca0:	3318      	adds	r3, #24
 8000ca2:	681a      	ldr	r2, [r3, #0]
 8000ca4:	482c      	ldr	r0, [pc, #176]	; (8000d58 <UART_Driver_Init+0x1e4>)
 8000ca6:	2394      	movs	r3, #148	; 0x94
 8000ca8:	fb01 f303 	mul.w	r3, r1, r3
 8000cac:	4403      	add	r3, r0
 8000cae:	331c      	adds	r3, #28
 8000cb0:	601a      	str	r2, [r3, #0]
    uart_desc_lut_dynamic[uart].uart_handle.Init.OneBitSampling = uart_desc_lut[uart].one_bit_sampling; 
 8000cb2:	79fa      	ldrb	r2, [r7, #7]
 8000cb4:	79f9      	ldrb	r1, [r7, #7]
 8000cb6:	4827      	ldr	r0, [pc, #156]	; (8000d54 <UART_Driver_Init+0x1e0>)
 8000cb8:	4613      	mov	r3, r2
 8000cba:	005b      	lsls	r3, r3, #1
 8000cbc:	4413      	add	r3, r2
 8000cbe:	011b      	lsls	r3, r3, #4
 8000cc0:	4403      	add	r3, r0
 8000cc2:	331c      	adds	r3, #28
 8000cc4:	681a      	ldr	r2, [r3, #0]
 8000cc6:	4824      	ldr	r0, [pc, #144]	; (8000d58 <UART_Driver_Init+0x1e4>)
 8000cc8:	2394      	movs	r3, #148	; 0x94
 8000cca:	fb01 f303 	mul.w	r3, r1, r3
 8000cce:	4403      	add	r3, r0
 8000cd0:	3320      	adds	r3, #32
 8000cd2:	601a      	str	r2, [r3, #0]
    uart_desc_lut_dynamic[uart].uart_handle.AdvancedInit.AdvFeatureInit = uart_desc_lut[uart].advanced_feature; 
 8000cd4:	79fa      	ldrb	r2, [r7, #7]
 8000cd6:	79f9      	ldrb	r1, [r7, #7]
 8000cd8:	481e      	ldr	r0, [pc, #120]	; (8000d54 <UART_Driver_Init+0x1e0>)
 8000cda:	4613      	mov	r3, r2
 8000cdc:	005b      	lsls	r3, r3, #1
 8000cde:	4413      	add	r3, r2
 8000ce0:	011b      	lsls	r3, r3, #4
 8000ce2:	4403      	add	r3, r0
 8000ce4:	3320      	adds	r3, #32
 8000ce6:	681a      	ldr	r2, [r3, #0]
 8000ce8:	481b      	ldr	r0, [pc, #108]	; (8000d58 <UART_Driver_Init+0x1e4>)
 8000cea:	2394      	movs	r3, #148	; 0x94
 8000cec:	fb01 f303 	mul.w	r3, r1, r3
 8000cf0:	4403      	add	r3, r0
 8000cf2:	3324      	adds	r3, #36	; 0x24
 8000cf4:	601a      	str	r2, [r3, #0]

    if (HAL_UART_Init(&uart_desc_lut_dynamic[uart].uart_handle) != HAL_OK)
 8000cf6:	79fb      	ldrb	r3, [r7, #7]
 8000cf8:	2294      	movs	r2, #148	; 0x94
 8000cfa:	fb02 f303 	mul.w	r3, r2, r3
 8000cfe:	4a16      	ldr	r2, [pc, #88]	; (8000d58 <UART_Driver_Init+0x1e4>)
 8000d00:	4413      	add	r3, r2
 8000d02:	4618      	mov	r0, r3
 8000d04:	f002 fbc2 	bl	800348c <HAL_UART_Init>
 8000d08:	4603      	mov	r3, r0
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d001      	beq.n	8000d12 <UART_Driver_Init+0x19e>
    {
        Error_Handler();
 8000d0e:	f000 fa9b 	bl	8001248 <Error_Handler>
    }
    uart_desc_lut_dynamic[uart].uart_set_flag = function_pointer;
 8000d12:	79fb      	ldrb	r3, [r7, #7]
 8000d14:	4a10      	ldr	r2, [pc, #64]	; (8000d58 <UART_Driver_Init+0x1e4>)
 8000d16:	2194      	movs	r1, #148	; 0x94
 8000d18:	fb01 f303 	mul.w	r3, r1, r3
 8000d1c:	4413      	add	r3, r2
 8000d1e:	3390      	adds	r3, #144	; 0x90
 8000d20:	683a      	ldr	r2, [r7, #0]
 8000d22:	601a      	str	r2, [r3, #0]

    HAL_UART_Receive_IT(&uart_desc_lut_dynamic[uart].uart_handle, uart_desc_lut_dynamic[uart].rx_data, 1); 
 8000d24:	79fb      	ldrb	r3, [r7, #7]
 8000d26:	2294      	movs	r2, #148	; 0x94
 8000d28:	fb02 f303 	mul.w	r3, r2, r3
 8000d2c:	4a0a      	ldr	r2, [pc, #40]	; (8000d58 <UART_Driver_Init+0x1e4>)
 8000d2e:	1898      	adds	r0, r3, r2
 8000d30:	79fb      	ldrb	r3, [r7, #7]
 8000d32:	2294      	movs	r2, #148	; 0x94
 8000d34:	fb02 f303 	mul.w	r3, r2, r3
 8000d38:	3388      	adds	r3, #136	; 0x88
 8000d3a:	4a07      	ldr	r2, [pc, #28]	; (8000d58 <UART_Driver_Init+0x1e4>)
 8000d3c:	4413      	add	r3, r2
 8000d3e:	3304      	adds	r3, #4
 8000d40:	2201      	movs	r2, #1
 8000d42:	4619      	mov	r1, r3
 8000d44:	f002 fbfa 	bl	800353c <HAL_UART_Receive_IT>
    return true; 
 8000d48:	2301      	movs	r3, #1

}
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	3708      	adds	r7, #8
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bd80      	pop	{r7, pc}
 8000d52:	bf00      	nop
 8000d54:	080087e8 	.word	0x080087e8
 8000d58:	20000030 	.word	0x20000030
 8000d5c:	08008848 	.word	0x08008848

08000d60 <UART_Driver_Low_Level_Init>:

bool UART_Driver_Low_Level_Init(eUart_t uart)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b09c      	sub	sp, #112	; 0x70
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	4603      	mov	r3, r0
 8000d68:	71fb      	strb	r3, [r7, #7]
    //INIT CLOCKS AND RING BUFFER
    if (GPIO_Driver_Init(uart_desc_lut[uart].tx_pin, ePinLow) == false) {
 8000d6a:	79fa      	ldrb	r2, [r7, #7]
 8000d6c:	494b      	ldr	r1, [pc, #300]	; (8000e9c <UART_Driver_Low_Level_Init+0x13c>)
 8000d6e:	4613      	mov	r3, r2
 8000d70:	005b      	lsls	r3, r3, #1
 8000d72:	4413      	add	r3, r2
 8000d74:	011b      	lsls	r3, r3, #4
 8000d76:	440b      	add	r3, r1
 8000d78:	3324      	adds	r3, #36	; 0x24
 8000d7a:	781b      	ldrb	r3, [r3, #0]
 8000d7c:	2101      	movs	r1, #1
 8000d7e:	4618      	mov	r0, r3
 8000d80:	f7ff fd9a 	bl	80008b8 <GPIO_Driver_Init>
 8000d84:	4603      	mov	r3, r0
 8000d86:	f083 0301 	eor.w	r3, r3, #1
 8000d8a:	b2db      	uxtb	r3, r3
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d001      	beq.n	8000d94 <UART_Driver_Low_Level_Init+0x34>
        return false;
 8000d90:	2300      	movs	r3, #0
 8000d92:	e07e      	b.n	8000e92 <UART_Driver_Low_Level_Init+0x132>
    }
    if (GPIO_Driver_Init(uart_desc_lut[uart].rx_pin, ePinLow) == false) {
 8000d94:	79fa      	ldrb	r2, [r7, #7]
 8000d96:	4941      	ldr	r1, [pc, #260]	; (8000e9c <UART_Driver_Low_Level_Init+0x13c>)
 8000d98:	4613      	mov	r3, r2
 8000d9a:	005b      	lsls	r3, r3, #1
 8000d9c:	4413      	add	r3, r2
 8000d9e:	011b      	lsls	r3, r3, #4
 8000da0:	440b      	add	r3, r1
 8000da2:	3325      	adds	r3, #37	; 0x25
 8000da4:	781b      	ldrb	r3, [r3, #0]
 8000da6:	2101      	movs	r1, #1
 8000da8:	4618      	mov	r0, r3
 8000daa:	f7ff fd85 	bl	80008b8 <GPIO_Driver_Init>
 8000dae:	4603      	mov	r3, r0
 8000db0:	f083 0301 	eor.w	r3, r3, #1
 8000db4:	b2db      	uxtb	r3, r3
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d001      	beq.n	8000dbe <UART_Driver_Low_Level_Init+0x5e>
        return false;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	e069      	b.n	8000e92 <UART_Driver_Low_Level_Init+0x132>
    }
    if (RingBuffer_Init(&uart_desc_lut_dynamic[uart].rb_handle, RING_BUFFER_SIZE) == false) {
 8000dbe:	79fb      	ldrb	r3, [r7, #7]
 8000dc0:	2294      	movs	r2, #148	; 0x94
 8000dc2:	fb02 f303 	mul.w	r3, r2, r3
 8000dc6:	3380      	adds	r3, #128	; 0x80
 8000dc8:	4a35      	ldr	r2, [pc, #212]	; (8000ea0 <UART_Driver_Low_Level_Init+0x140>)
 8000dca:	4413      	add	r3, r2
 8000dcc:	3304      	adds	r3, #4
 8000dce:	2196      	movs	r1, #150	; 0x96
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	f000 f8ed 	bl	8000fb0 <RingBuffer_Init>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	f083 0301 	eor.w	r3, r3, #1
 8000ddc:	b2db      	uxtb	r3, r3
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d001      	beq.n	8000de6 <UART_Driver_Low_Level_Init+0x86>
        return false;
 8000de2:	2300      	movs	r3, #0
 8000de4:	e055      	b.n	8000e92 <UART_Driver_Low_Level_Init+0x132>
    }

    //ENABLE CLOCKS AND INTERUPTS
    RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000de6:	f107 0310 	add.w	r3, r7, #16
 8000dea:	2260      	movs	r2, #96	; 0x60
 8000dec:	2100      	movs	r1, #0
 8000dee:	4618      	mov	r0, r3
 8000df0:	f007 f9fe 	bl	80081f0 <memset>
    if(uart==eUartModem) {
 8000df4:	79fb      	ldrb	r3, [r7, #7]
 8000df6:	2b01      	cmp	r3, #1
 8000df8:	d123      	bne.n	8000e42 <UART_Driver_Low_Level_Init+0xe2>
        PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000dfa:	2301      	movs	r3, #1
 8000dfc:	613b      	str	r3, [r7, #16]
        PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	633b      	str	r3, [r7, #48]	; 0x30
        if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK){
 8000e02:	f107 0310 	add.w	r3, r7, #16
 8000e06:	4618      	mov	r0, r3
 8000e08:	f001 fd84 	bl	8002914 <HAL_RCCEx_PeriphCLKConfig>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d001      	beq.n	8000e16 <UART_Driver_Low_Level_Init+0xb6>
            Error_Handler();
 8000e12:	f000 fa19 	bl	8001248 <Error_Handler>
        }
        __HAL_RCC_USART1_CLK_ENABLE();
 8000e16:	4b23      	ldr	r3, [pc, #140]	; (8000ea4 <UART_Driver_Low_Level_Init+0x144>)
 8000e18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e1a:	4a22      	ldr	r2, [pc, #136]	; (8000ea4 <UART_Driver_Low_Level_Init+0x144>)
 8000e1c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e20:	6613      	str	r3, [r2, #96]	; 0x60
 8000e22:	4b20      	ldr	r3, [pc, #128]	; (8000ea4 <UART_Driver_Low_Level_Init+0x144>)
 8000e24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e26:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e2a:	60fb      	str	r3, [r7, #12]
 8000e2c:	68fb      	ldr	r3, [r7, #12]
        HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8000e2e:	2200      	movs	r2, #0
 8000e30:	2105      	movs	r1, #5
 8000e32:	2025      	movs	r0, #37	; 0x25
 8000e34:	f000 fc28 	bl	8001688 <HAL_NVIC_SetPriority>
        HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000e38:	2025      	movs	r0, #37	; 0x25
 8000e3a:	f000 fc41 	bl	80016c0 <HAL_NVIC_EnableIRQ>
        return true; 
 8000e3e:	2301      	movs	r3, #1
 8000e40:	e027      	b.n	8000e92 <UART_Driver_Low_Level_Init+0x132>
    }

    if(uart==eUartDebug){
 8000e42:	79fb      	ldrb	r3, [r7, #7]
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d123      	bne.n	8000e90 <UART_Driver_Low_Level_Init+0x130>
        PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000e48:	2302      	movs	r3, #2
 8000e4a:	613b      	str	r3, [r7, #16]
        PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	637b      	str	r3, [r7, #52]	; 0x34
        if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 8000e50:	f107 0310 	add.w	r3, r7, #16
 8000e54:	4618      	mov	r0, r3
 8000e56:	f001 fd5d 	bl	8002914 <HAL_RCCEx_PeriphCLKConfig>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d001      	beq.n	8000e64 <UART_Driver_Low_Level_Init+0x104>
            Error_Handler();
 8000e60:	f000 f9f2 	bl	8001248 <Error_Handler>
        }
        __HAL_RCC_USART2_CLK_ENABLE();
 8000e64:	4b0f      	ldr	r3, [pc, #60]	; (8000ea4 <UART_Driver_Low_Level_Init+0x144>)
 8000e66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e68:	4a0e      	ldr	r2, [pc, #56]	; (8000ea4 <UART_Driver_Low_Level_Init+0x144>)
 8000e6a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e6e:	6593      	str	r3, [r2, #88]	; 0x58
 8000e70:	4b0c      	ldr	r3, [pc, #48]	; (8000ea4 <UART_Driver_Low_Level_Init+0x144>)
 8000e72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e78:	60bb      	str	r3, [r7, #8]
 8000e7a:	68bb      	ldr	r3, [r7, #8]
        HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	2105      	movs	r1, #5
 8000e80:	2026      	movs	r0, #38	; 0x26
 8000e82:	f000 fc01 	bl	8001688 <HAL_NVIC_SetPriority>
        HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000e86:	2026      	movs	r0, #38	; 0x26
 8000e88:	f000 fc1a 	bl	80016c0 <HAL_NVIC_EnableIRQ>
        return true; 
 8000e8c:	2301      	movs	r3, #1
 8000e8e:	e000      	b.n	8000e92 <UART_Driver_Low_Level_Init+0x132>
    }
    return false; 
 8000e90:	2300      	movs	r3, #0
}
 8000e92:	4618      	mov	r0, r3
 8000e94:	3770      	adds	r7, #112	; 0x70
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bd80      	pop	{r7, pc}
 8000e9a:	bf00      	nop
 8000e9c:	080087e8 	.word	0x080087e8
 8000ea0:	20000030 	.word	0x20000030
 8000ea4:	40021000 	.word	0x40021000

08000ea8 <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){ //SAVE 1 BYTE OF DATA TO RING BUFFER
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b082      	sub	sp, #8
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
    if((*huart).Instance==uart_desc_lut_dynamic[eUartDebug].uart_handle.Instance){
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	681a      	ldr	r2, [r3, #0]
 8000eb4:	4b20      	ldr	r3, [pc, #128]	; (8000f38 <HAL_UART_RxCpltCallback+0x90>)
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	429a      	cmp	r2, r3
 8000eba:	d118      	bne.n	8000eee <HAL_UART_RxCpltCallback+0x46>
        RingBuffer_Put(uart_desc_lut_dynamic[eUartDebug].rb_handle, uart_desc_lut_dynamic[eUartDebug].rx_data[0]);
 8000ebc:	4b1e      	ldr	r3, [pc, #120]	; (8000f38 <HAL_UART_RxCpltCallback+0x90>)
 8000ebe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8000ec2:	4a1d      	ldr	r2, [pc, #116]	; (8000f38 <HAL_UART_RxCpltCallback+0x90>)
 8000ec4:	f892 208c 	ldrb.w	r2, [r2, #140]	; 0x8c
 8000ec8:	4611      	mov	r1, r2
 8000eca:	4618      	mov	r0, r3
 8000ecc:	f000 f8f3 	bl	80010b6 <RingBuffer_Put>
        if (uart_desc_lut_dynamic[eUartDebug].rx_data[0] == (uint8_t)('\n')) {
 8000ed0:	4b19      	ldr	r3, [pc, #100]	; (8000f38 <HAL_UART_RxCpltCallback+0x90>)
 8000ed2:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 8000ed6:	2b0a      	cmp	r3, #10
 8000ed8:	d104      	bne.n	8000ee4 <HAL_UART_RxCpltCallback+0x3c>
            uart_desc_lut_dynamic[eUartDebug].uart_set_flag(eUartDebug);
 8000eda:	4b17      	ldr	r3, [pc, #92]	; (8000f38 <HAL_UART_RxCpltCallback+0x90>)
 8000edc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000ee0:	2000      	movs	r0, #0
 8000ee2:	4798      	blx	r3
        }
        HAL_UART_Receive_IT(&uart_desc_lut_dynamic[eUartDebug].uart_handle, uart_desc_lut_dynamic[eUartDebug].rx_data, 1);
 8000ee4:	2201      	movs	r2, #1
 8000ee6:	4915      	ldr	r1, [pc, #84]	; (8000f3c <HAL_UART_RxCpltCallback+0x94>)
 8000ee8:	4813      	ldr	r0, [pc, #76]	; (8000f38 <HAL_UART_RxCpltCallback+0x90>)
 8000eea:	f002 fb27 	bl	800353c <HAL_UART_Receive_IT>
    } 
    if((*huart).Instance==uart_desc_lut_dynamic[eUartModem].uart_handle.Instance){
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	681a      	ldr	r2, [r3, #0]
 8000ef2:	4b11      	ldr	r3, [pc, #68]	; (8000f38 <HAL_UART_RxCpltCallback+0x90>)
 8000ef4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000ef8:	429a      	cmp	r2, r3
 8000efa:	d118      	bne.n	8000f2e <HAL_UART_RxCpltCallback+0x86>
        RingBuffer_Put(uart_desc_lut_dynamic[eUartModem].rb_handle, uart_desc_lut_dynamic[eUartDebug].rx_data[0]);
 8000efc:	4b0e      	ldr	r3, [pc, #56]	; (8000f38 <HAL_UART_RxCpltCallback+0x90>)
 8000efe:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 8000f02:	4a0d      	ldr	r2, [pc, #52]	; (8000f38 <HAL_UART_RxCpltCallback+0x90>)
 8000f04:	f892 208c 	ldrb.w	r2, [r2, #140]	; 0x8c
 8000f08:	4611      	mov	r1, r2
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	f000 f8d3 	bl	80010b6 <RingBuffer_Put>
        if (uart_desc_lut_dynamic[eUartModem].rx_data[0] == (uint8_t)('\n')) {
 8000f10:	4b09      	ldr	r3, [pc, #36]	; (8000f38 <HAL_UART_RxCpltCallback+0x90>)
 8000f12:	f893 3120 	ldrb.w	r3, [r3, #288]	; 0x120
 8000f16:	2b0a      	cmp	r3, #10
 8000f18:	d104      	bne.n	8000f24 <HAL_UART_RxCpltCallback+0x7c>
            uart_desc_lut_dynamic[eUartModem].uart_set_flag(eUartModem);
 8000f1a:	4b07      	ldr	r3, [pc, #28]	; (8000f38 <HAL_UART_RxCpltCallback+0x90>)
 8000f1c:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8000f20:	2001      	movs	r0, #1
 8000f22:	4798      	blx	r3
        }
        HAL_UART_Receive_IT(&uart_desc_lut_dynamic[eUartModem].uart_handle, uart_desc_lut_dynamic[eUartDebug].rx_data, 1);
 8000f24:	2201      	movs	r2, #1
 8000f26:	4905      	ldr	r1, [pc, #20]	; (8000f3c <HAL_UART_RxCpltCallback+0x94>)
 8000f28:	4805      	ldr	r0, [pc, #20]	; (8000f40 <HAL_UART_RxCpltCallback+0x98>)
 8000f2a:	f002 fb07 	bl	800353c <HAL_UART_Receive_IT>
    } 
 }
 8000f2e:	bf00      	nop
 8000f30:	3708      	adds	r7, #8
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bd80      	pop	{r7, pc}
 8000f36:	bf00      	nop
 8000f38:	20000030 	.word	0x20000030
 8000f3c:	200000bc 	.word	0x200000bc
 8000f40:	200000c4 	.word	0x200000c4

08000f44 <UART_Driver_GetByte>:


bool UART_Driver_GetByte (eUart_t uart, uint8_t *byte) {    //GET 1 BYTE OF DATA FROM RING BUFFER
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b082      	sub	sp, #8
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	6039      	str	r1, [r7, #0]
 8000f4e:	71fb      	strb	r3, [r7, #7]
    if (RingBuffer_Get(uart_desc_lut_dynamic[uart].rb_handle, byte) == false) {
 8000f50:	79fb      	ldrb	r3, [r7, #7]
 8000f52:	4a0c      	ldr	r2, [pc, #48]	; (8000f84 <UART_Driver_GetByte+0x40>)
 8000f54:	2194      	movs	r1, #148	; 0x94
 8000f56:	fb01 f303 	mul.w	r3, r1, r3
 8000f5a:	4413      	add	r3, r2
 8000f5c:	3384      	adds	r3, #132	; 0x84
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	6839      	ldr	r1, [r7, #0]
 8000f62:	4618      	mov	r0, r3
 8000f64:	f000 f866 	bl	8001034 <RingBuffer_Get>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	f083 0301 	eor.w	r3, r3, #1
 8000f6e:	b2db      	uxtb	r3, r3
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d001      	beq.n	8000f78 <UART_Driver_GetByte+0x34>
        return false;
 8000f74:	2300      	movs	r3, #0
 8000f76:	e000      	b.n	8000f7a <UART_Driver_GetByte+0x36>
    }
    return true;
 8000f78:	2301      	movs	r3, #1
}
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	3708      	adds	r7, #8
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bd80      	pop	{r7, pc}
 8000f82:	bf00      	nop
 8000f84:	20000030 	.word	0x20000030

08000f88 <USART2_IRQHandler>:


/*_________________________INTERUPT HANDLERS______________________________________*/

void USART2_IRQHandler(void)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	af00      	add	r7, sp, #0
  HAL_UART_IRQHandler(&uart_desc_lut_dynamic[eUartDebug].uart_handle);
 8000f8c:	4802      	ldr	r0, [pc, #8]	; (8000f98 <USART2_IRQHandler+0x10>)
 8000f8e:	f002 fb2b 	bl	80035e8 <HAL_UART_IRQHandler>
}
 8000f92:	bf00      	nop
 8000f94:	bd80      	pop	{r7, pc}
 8000f96:	bf00      	nop
 8000f98:	20000030 	.word	0x20000030

08000f9c <USART1_IRQHandler>:
void USART1_IRQHandler(void)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	af00      	add	r7, sp, #0
  HAL_UART_IRQHandler(&uart_desc_lut_dynamic[eUartModem].uart_handle);
 8000fa0:	4802      	ldr	r0, [pc, #8]	; (8000fac <USART1_IRQHandler+0x10>)
 8000fa2:	f002 fb21 	bl	80035e8 <HAL_UART_IRQHandler>
}
 8000fa6:	bf00      	nop
 8000fa8:	bd80      	pop	{r7, pc}
 8000faa:	bf00      	nop
 8000fac:	200000c4 	.word	0x200000c4

08000fb0 <RingBuffer_Init>:
 *********************************************************************************************************************/

/**********************************************************************************************************************
 * Private variables
 *********************************************************************************************************************/
bool RingBuffer_Init (sRingBuffer_t **rb_handle, uint16_t size) {
 8000fb0:	b590      	push	{r4, r7, lr}
 8000fb2:	b083      	sub	sp, #12
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
 8000fb8:	460b      	mov	r3, r1
 8000fba:	807b      	strh	r3, [r7, #2]
    *rb_handle = (sRingBuffer_t*) calloc(1, sizeof(sRingBuffer_t));
 8000fbc:	2114      	movs	r1, #20
 8000fbe:	2001      	movs	r0, #1
 8000fc0:	f007 f844 	bl	800804c <calloc>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	461a      	mov	r2, r3
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	601a      	str	r2, [r3, #0]
    if (rb_handle == NULL) {
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d101      	bne.n	8000fd6 <RingBuffer_Init+0x26>
        return false;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	e02a      	b.n	800102c <RingBuffer_Init+0x7c>
    }
    (*rb_handle)->buffer = (uint8_t*) calloc(size, sizeof(uint8_t));
 8000fd6:	887a      	ldrh	r2, [r7, #2]
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681c      	ldr	r4, [r3, #0]
 8000fdc:	2101      	movs	r1, #1
 8000fde:	4610      	mov	r0, r2
 8000fe0:	f007 f834 	bl	800804c <calloc>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	6023      	str	r3, [r4, #0]
    if ((*rb_handle)->buffer == NULL) {
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d109      	bne.n	8001006 <RingBuffer_Init+0x56>
        free(*rb_handle);
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	f007 f846 	bl	8008088 <free>
        *rb_handle = NULL;
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	2200      	movs	r2, #0
 8001000:	601a      	str	r2, [r3, #0]
        return false;
 8001002:	2300      	movs	r3, #0
 8001004:	e012      	b.n	800102c <RingBuffer_Init+0x7c>
    }
    (*rb_handle)->max_size = size;
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	887a      	ldrh	r2, [r7, #2]
 800100c:	60da      	str	r2, [r3, #12]
    (*rb_handle)->empty = true;
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	2201      	movs	r2, #1
 8001014:	745a      	strb	r2, [r3, #17]
    (*rb_handle)->tail = size - 1;
 8001016:	887b      	ldrh	r3, [r7, #2]
 8001018:	1e5a      	subs	r2, r3, #1
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	609a      	str	r2, [r3, #8]
    (*rb_handle)->head = size - 1;
 8001020:	887b      	ldrh	r3, [r7, #2]
 8001022:	1e5a      	subs	r2, r3, #1
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	605a      	str	r2, [r3, #4]
    return true;
 800102a:	2301      	movs	r3, #1
}
 800102c:	4618      	mov	r0, r3
 800102e:	370c      	adds	r7, #12
 8001030:	46bd      	mov	sp, r7
 8001032:	bd90      	pop	{r4, r7, pc}

08001034 <RingBuffer_Get>:

bool RingBuffer_Get (sRingBuffer_t *rb_handle, uint8_t *data) {
 8001034:	b480      	push	{r7}
 8001036:	b083      	sub	sp, #12
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
 800103c:	6039      	str	r1, [r7, #0]
    if (rb_handle == NULL) {
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	2b00      	cmp	r3, #0
 8001042:	d101      	bne.n	8001048 <RingBuffer_Get+0x14>
    	return false;
 8001044:	2300      	movs	r3, #0
 8001046:	e030      	b.n	80010aa <RingBuffer_Get+0x76>
    }
	if (rb_handle->buffer == NULL) {
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	2b00      	cmp	r3, #0
 800104e:	d101      	bne.n	8001054 <RingBuffer_Get+0x20>
        return false;
 8001050:	2300      	movs	r3, #0
 8001052:	e02a      	b.n	80010aa <RingBuffer_Get+0x76>
    }
    if (rb_handle->empty == true) {
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	7c5b      	ldrb	r3, [r3, #17]
 8001058:	2b00      	cmp	r3, #0
 800105a:	d001      	beq.n	8001060 <RingBuffer_Get+0x2c>
        return false;
 800105c:	2300      	movs	r3, #0
 800105e:	e024      	b.n	80010aa <RingBuffer_Get+0x76>
    }
    rb_handle->tail = (rb_handle->tail + 1) % rb_handle->max_size;
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	689b      	ldr	r3, [r3, #8]
 8001064:	3301      	adds	r3, #1
 8001066:	687a      	ldr	r2, [r7, #4]
 8001068:	68d2      	ldr	r2, [r2, #12]
 800106a:	fbb3 f1f2 	udiv	r1, r3, r2
 800106e:	fb01 f202 	mul.w	r2, r1, r2
 8001072:	1a9a      	subs	r2, r3, r2
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	609a      	str	r2, [r3, #8]
    *data = *(rb_handle->buffer + rb_handle->tail);
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681a      	ldr	r2, [r3, #0]
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	689b      	ldr	r3, [r3, #8]
 8001080:	4413      	add	r3, r2
 8001082:	781a      	ldrb	r2, [r3, #0]
 8001084:	683b      	ldr	r3, [r7, #0]
 8001086:	701a      	strb	r2, [r3, #0]
    rb_handle->full = false;
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	2200      	movs	r2, #0
 800108c:	741a      	strb	r2, [r3, #16]
    if (rb_handle->tail == rb_handle->head) {
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	689a      	ldr	r2, [r3, #8]
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	685b      	ldr	r3, [r3, #4]
 8001096:	429a      	cmp	r2, r3
 8001098:	d106      	bne.n	80010a8 <RingBuffer_Get+0x74>
        rb_handle->empty = true;
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	2201      	movs	r2, #1
 800109e:	745a      	strb	r2, [r3, #17]
        rb_handle->head = rb_handle->tail;
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	689a      	ldr	r2, [r3, #8]
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	605a      	str	r2, [r3, #4]
    }
    return true;
 80010a8:	2301      	movs	r3, #1
}
 80010aa:	4618      	mov	r0, r3
 80010ac:	370c      	adds	r7, #12
 80010ae:	46bd      	mov	sp, r7
 80010b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b4:	4770      	bx	lr

080010b6 <RingBuffer_Put>:

bool RingBuffer_Put (sRingBuffer_t *rb_handle, uint8_t data) {
 80010b6:	b480      	push	{r7}
 80010b8:	b083      	sub	sp, #12
 80010ba:	af00      	add	r7, sp, #0
 80010bc:	6078      	str	r0, [r7, #4]
 80010be:	460b      	mov	r3, r1
 80010c0:	70fb      	strb	r3, [r7, #3]
	if (rb_handle == NULL) {
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d101      	bne.n	80010cc <RingBuffer_Put+0x16>
	    	return false;
 80010c8:	2300      	movs	r3, #0
 80010ca:	e031      	b.n	8001130 <RingBuffer_Put+0x7a>
	    }
	if (rb_handle->buffer == NULL) {
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d101      	bne.n	80010d8 <RingBuffer_Put+0x22>
        return false;
 80010d4:	2300      	movs	r3, #0
 80010d6:	e02b      	b.n	8001130 <RingBuffer_Put+0x7a>
    }
    rb_handle->head = (rb_handle->head + 1) % rb_handle->max_size;
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	685b      	ldr	r3, [r3, #4]
 80010dc:	3301      	adds	r3, #1
 80010de:	687a      	ldr	r2, [r7, #4]
 80010e0:	68d2      	ldr	r2, [r2, #12]
 80010e2:	fbb3 f1f2 	udiv	r1, r3, r2
 80010e6:	fb01 f202 	mul.w	r2, r1, r2
 80010ea:	1a9a      	subs	r2, r3, r2
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	605a      	str	r2, [r3, #4]
    *(rb_handle->buffer + rb_handle->head) = data;
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681a      	ldr	r2, [r3, #0]
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	685b      	ldr	r3, [r3, #4]
 80010f8:	4413      	add	r3, r2
 80010fa:	78fa      	ldrb	r2, [r7, #3]
 80010fc:	701a      	strb	r2, [r3, #0]
    rb_handle->empty = false;
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	2200      	movs	r2, #0
 8001102:	745a      	strb	r2, [r3, #17]
    if (rb_handle->head == rb_handle->tail) {
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	685a      	ldr	r2, [r3, #4]
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	689b      	ldr	r3, [r3, #8]
 800110c:	429a      	cmp	r2, r3
 800110e:	d10e      	bne.n	800112e <RingBuffer_Put+0x78>
        rb_handle->full = true;
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	2201      	movs	r2, #1
 8001114:	741a      	strb	r2, [r3, #16]
        rb_handle->tail = (rb_handle->head + 1) % rb_handle->max_size;
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	685b      	ldr	r3, [r3, #4]
 800111a:	3301      	adds	r3, #1
 800111c:	687a      	ldr	r2, [r7, #4]
 800111e:	68d2      	ldr	r2, [r2, #12]
 8001120:	fbb3 f1f2 	udiv	r1, r3, r2
 8001124:	fb01 f202 	mul.w	r2, r1, r2
 8001128:	1a9a      	subs	r2, r3, r2
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	609a      	str	r2, [r3, #8]
    }
    return true;
 800112e:	2301      	movs	r3, #1
}
 8001130:	4618      	mov	r0, r3
 8001132:	370c      	adds	r7, #12
 8001134:	46bd      	mov	sp, r7
 8001136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113a:	4770      	bx	lr

0800113c <main>:


void SystemClock_Config(void);
void StartDefaultTask(void *argument);
int main(void)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	af00      	add	r7, sp, #0
  HAL_Init();
 8001140:	f000 f9b1 	bl	80014a6 <HAL_Init>
  SystemClock_Config();
 8001144:	f000 f820 	bl	8001188 <SystemClock_Config>
  UART_API_Init(eUartModem, eBaudRate9600 );
 8001148:	2103      	movs	r1, #3
 800114a:	2001      	movs	r0, #1
 800114c:	f7ff f9e2 	bl	8000514 <UART_API_Init>
  UART_API_Init(eUartDebug, eBaudRate9600 );
 8001150:	2103      	movs	r1, #3
 8001152:	2000      	movs	r0, #0
 8001154:	f7ff f9de 	bl	8000514 <UART_API_Init>
  GPIO_Driver_Init(eGpioPinA12LEDsOn, ePinLow);
 8001158:	2101      	movs	r1, #1
 800115a:	200a      	movs	r0, #10
 800115c:	f7ff fbac 	bl	80008b8 <GPIO_Driver_Init>

  osKernelInitialize();
 8001160:	f003 fc6a 	bl	8004a38 <osKernelInitialize>
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001164:	4a05      	ldr	r2, [pc, #20]	; (800117c <main+0x40>)
 8001166:	2100      	movs	r1, #0
 8001168:	4805      	ldr	r0, [pc, #20]	; (8001180 <main+0x44>)
 800116a:	f003 fcaf 	bl	8004acc <osThreadNew>
 800116e:	4603      	mov	r3, r0
 8001170:	4a04      	ldr	r2, [pc, #16]	; (8001184 <main+0x48>)
 8001172:	6013      	str	r3, [r2, #0]
  osKernelStart();
 8001174:	f003 fc84 	bl	8004a80 <osKernelStart>
  




  while (1){
 8001178:	e7fe      	b.n	8001178 <main+0x3c>
 800117a:	bf00      	nop
 800117c:	08008868 	.word	0x08008868
 8001180:	08001213 	.word	0x08001213
 8001184:	20000298 	.word	0x20000298

08001188 <SystemClock_Config>:

}


void SystemClock_Config(void)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b096      	sub	sp, #88	; 0x58
 800118c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800118e:	f107 0314 	add.w	r3, r7, #20
 8001192:	2244      	movs	r2, #68	; 0x44
 8001194:	2100      	movs	r1, #0
 8001196:	4618      	mov	r0, r3
 8001198:	f007 f82a 	bl	80081f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800119c:	463b      	mov	r3, r7
 800119e:	2200      	movs	r2, #0
 80011a0:	601a      	str	r2, [r3, #0]
 80011a2:	605a      	str	r2, [r3, #4]
 80011a4:	609a      	str	r2, [r3, #8]
 80011a6:	60da      	str	r2, [r3, #12]
 80011a8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80011aa:	f44f 7000 	mov.w	r0, #512	; 0x200
 80011ae:	f000 fcf3 	bl	8001b98 <HAL_PWREx_ControlVoltageScaling>
 80011b2:	4603      	mov	r3, r0
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d001      	beq.n	80011bc <SystemClock_Config+0x34>
  {
    Error_Handler();
 80011b8:	f000 f846 	bl	8001248 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80011bc:	2301      	movs	r3, #1
 80011be:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80011c0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80011c4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80011c6:	2300      	movs	r3, #0
 80011c8:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011ca:	f107 0314 	add.w	r3, r7, #20
 80011ce:	4618      	mov	r0, r3
 80011d0:	f000 fd38 	bl	8001c44 <HAL_RCC_OscConfig>
 80011d4:	4603      	mov	r3, r0
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d001      	beq.n	80011de <SystemClock_Config+0x56>
  {
    Error_Handler();
 80011da:	f000 f835 	bl	8001248 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011de:	230f      	movs	r3, #15
 80011e0:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 80011e2:	2302      	movs	r3, #2
 80011e4:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011e6:	2300      	movs	r3, #0
 80011e8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80011ea:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 80011ee:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 80011f0:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 80011f4:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80011f6:	463b      	mov	r3, r7
 80011f8:	2100      	movs	r1, #0
 80011fa:	4618      	mov	r0, r3
 80011fc:	f001 f936 	bl	800246c <HAL_RCC_ClockConfig>
 8001200:	4603      	mov	r3, r0
 8001202:	2b00      	cmp	r3, #0
 8001204:	d001      	beq.n	800120a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001206:	f000 f81f 	bl	8001248 <Error_Handler>
  }
}
 800120a:	bf00      	nop
 800120c:	3758      	adds	r7, #88	; 0x58
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}

08001212 <StartDefaultTask>:


void StartDefaultTask(void *argument)
{
 8001212:	b580      	push	{r7, lr}
 8001214:	b082      	sub	sp, #8
 8001216:	af00      	add	r7, sp, #0
 8001218:	6078      	str	r0, [r7, #4]
	for(;;){
    osDelay(500);
 800121a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800121e:	f003 fce7 	bl	8004bf0 <osDelay>
 8001222:	e7fa      	b.n	800121a <StartDefaultTask+0x8>

08001224 <HAL_TIM_PeriodElapsedCallback>:
  }
}


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b082      	sub	sp, #8
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
  
  if (htim->Instance == TIM1) {
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	4a04      	ldr	r2, [pc, #16]	; (8001244 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001232:	4293      	cmp	r3, r2
 8001234:	d101      	bne.n	800123a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001236:	f000 f94f 	bl	80014d8 <HAL_IncTick>
  }
 
}
 800123a:	bf00      	nop
 800123c:	3708      	adds	r7, #8
 800123e:	46bd      	mov	sp, r7
 8001240:	bd80      	pop	{r7, pc}
 8001242:	bf00      	nop
 8001244:	40012c00 	.word	0x40012c00

08001248 <Error_Handler>:

void Error_Handler(void)
{
 8001248:	b480      	push	{r7}
 800124a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800124c:	b672      	cpsid	i
}
 800124e:	bf00      	nop
  __disable_irq();
  while (1){}
 8001250:	e7fe      	b.n	8001250 <Error_Handler+0x8>
	...

08001254 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b082      	sub	sp, #8
 8001258:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800125a:	4b11      	ldr	r3, [pc, #68]	; (80012a0 <HAL_MspInit+0x4c>)
 800125c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800125e:	4a10      	ldr	r2, [pc, #64]	; (80012a0 <HAL_MspInit+0x4c>)
 8001260:	f043 0301 	orr.w	r3, r3, #1
 8001264:	6613      	str	r3, [r2, #96]	; 0x60
 8001266:	4b0e      	ldr	r3, [pc, #56]	; (80012a0 <HAL_MspInit+0x4c>)
 8001268:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800126a:	f003 0301 	and.w	r3, r3, #1
 800126e:	607b      	str	r3, [r7, #4]
 8001270:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001272:	4b0b      	ldr	r3, [pc, #44]	; (80012a0 <HAL_MspInit+0x4c>)
 8001274:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001276:	4a0a      	ldr	r2, [pc, #40]	; (80012a0 <HAL_MspInit+0x4c>)
 8001278:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800127c:	6593      	str	r3, [r2, #88]	; 0x58
 800127e:	4b08      	ldr	r3, [pc, #32]	; (80012a0 <HAL_MspInit+0x4c>)
 8001280:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001282:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001286:	603b      	str	r3, [r7, #0]
 8001288:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800128a:	2200      	movs	r2, #0
 800128c:	210f      	movs	r1, #15
 800128e:	f06f 0001 	mvn.w	r0, #1
 8001292:	f000 f9f9 	bl	8001688 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001296:	bf00      	nop
 8001298:	3708      	adds	r7, #8
 800129a:	46bd      	mov	sp, r7
 800129c:	bd80      	pop	{r7, pc}
 800129e:	bf00      	nop
 80012a0:	40021000 	.word	0x40021000

080012a4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b08c      	sub	sp, #48	; 0x30
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 80012ac:	2300      	movs	r3, #0
 80012ae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80012b2:	4b2f      	ldr	r3, [pc, #188]	; (8001370 <HAL_InitTick+0xcc>)
 80012b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012b6:	4a2e      	ldr	r2, [pc, #184]	; (8001370 <HAL_InitTick+0xcc>)
 80012b8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80012bc:	6613      	str	r3, [r2, #96]	; 0x60
 80012be:	4b2c      	ldr	r3, [pc, #176]	; (8001370 <HAL_InitTick+0xcc>)
 80012c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012c2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80012c6:	60bb      	str	r3, [r7, #8]
 80012c8:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80012ca:	f107 020c 	add.w	r2, r7, #12
 80012ce:	f107 0310 	add.w	r3, r7, #16
 80012d2:	4611      	mov	r1, r2
 80012d4:	4618      	mov	r0, r3
 80012d6:	f001 fa8b 	bl	80027f0 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 80012da:	f001 fa73 	bl	80027c4 <HAL_RCC_GetPCLK2Freq>
 80012de:	4603      	mov	r3, r0
 80012e0:	005b      	lsls	r3, r3, #1
 80012e2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80012e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012e6:	4a23      	ldr	r2, [pc, #140]	; (8001374 <HAL_InitTick+0xd0>)
 80012e8:	fba2 2303 	umull	r2, r3, r2, r3
 80012ec:	0c9b      	lsrs	r3, r3, #18
 80012ee:	3b01      	subs	r3, #1
 80012f0:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80012f2:	4b21      	ldr	r3, [pc, #132]	; (8001378 <HAL_InitTick+0xd4>)
 80012f4:	4a21      	ldr	r2, [pc, #132]	; (800137c <HAL_InitTick+0xd8>)
 80012f6:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80012f8:	4b1f      	ldr	r3, [pc, #124]	; (8001378 <HAL_InitTick+0xd4>)
 80012fa:	f240 32e7 	movw	r2, #999	; 0x3e7
 80012fe:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001300:	4a1d      	ldr	r2, [pc, #116]	; (8001378 <HAL_InitTick+0xd4>)
 8001302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001304:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001306:	4b1c      	ldr	r3, [pc, #112]	; (8001378 <HAL_InitTick+0xd4>)
 8001308:	2200      	movs	r2, #0
 800130a:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800130c:	4b1a      	ldr	r3, [pc, #104]	; (8001378 <HAL_InitTick+0xd4>)
 800130e:	2200      	movs	r2, #0
 8001310:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001312:	4b19      	ldr	r3, [pc, #100]	; (8001378 <HAL_InitTick+0xd4>)
 8001314:	2200      	movs	r2, #0
 8001316:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8001318:	4817      	ldr	r0, [pc, #92]	; (8001378 <HAL_InitTick+0xd4>)
 800131a:	f001 fe37 	bl	8002f8c <HAL_TIM_Base_Init>
 800131e:	4603      	mov	r3, r0
 8001320:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8001324:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001328:	2b00      	cmp	r3, #0
 800132a:	d11b      	bne.n	8001364 <HAL_InitTick+0xc0>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 800132c:	4812      	ldr	r0, [pc, #72]	; (8001378 <HAL_InitTick+0xd4>)
 800132e:	f001 fe8f 	bl	8003050 <HAL_TIM_Base_Start_IT>
 8001332:	4603      	mov	r3, r0
 8001334:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8001338:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800133c:	2b00      	cmp	r3, #0
 800133e:	d111      	bne.n	8001364 <HAL_InitTick+0xc0>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001340:	2019      	movs	r0, #25
 8001342:	f000 f9bd 	bl	80016c0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	2b0f      	cmp	r3, #15
 800134a:	d808      	bhi.n	800135e <HAL_InitTick+0xba>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 800134c:	2200      	movs	r2, #0
 800134e:	6879      	ldr	r1, [r7, #4]
 8001350:	2019      	movs	r0, #25
 8001352:	f000 f999 	bl	8001688 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001356:	4a0a      	ldr	r2, [pc, #40]	; (8001380 <HAL_InitTick+0xdc>)
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	6013      	str	r3, [r2, #0]
 800135c:	e002      	b.n	8001364 <HAL_InitTick+0xc0>
      }
      else
      {
        status = HAL_ERROR;
 800135e:	2301      	movs	r3, #1
 8001360:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001364:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8001368:	4618      	mov	r0, r3
 800136a:	3730      	adds	r7, #48	; 0x30
 800136c:	46bd      	mov	sp, r7
 800136e:	bd80      	pop	{r7, pc}
 8001370:	40021000 	.word	0x40021000
 8001374:	431bde83 	.word	0x431bde83
 8001378:	2000029c 	.word	0x2000029c
 800137c:	40012c00 	.word	0x40012c00
 8001380:	2000015c 	.word	0x2000015c

08001384 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001384:	b480      	push	{r7}
 8001386:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001388:	e7fe      	b.n	8001388 <NMI_Handler+0x4>

0800138a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800138a:	b480      	push	{r7}
 800138c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800138e:	e7fe      	b.n	800138e <HardFault_Handler+0x4>

08001390 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001390:	b480      	push	{r7}
 8001392:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001394:	e7fe      	b.n	8001394 <MemManage_Handler+0x4>

08001396 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001396:	b480      	push	{r7}
 8001398:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800139a:	e7fe      	b.n	800139a <BusFault_Handler+0x4>

0800139c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800139c:	b480      	push	{r7}
 800139e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013a0:	e7fe      	b.n	80013a0 <UsageFault_Handler+0x4>

080013a2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013a2:	b480      	push	{r7}
 80013a4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013a6:	bf00      	nop
 80013a8:	46bd      	mov	sp, r7
 80013aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ae:	4770      	bx	lr

080013b0 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80013b4:	4802      	ldr	r0, [pc, #8]	; (80013c0 <TIM1_UP_TIM16_IRQHandler+0x10>)
 80013b6:	f001 fe9f 	bl	80030f8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80013ba:	bf00      	nop
 80013bc:	bd80      	pop	{r7, pc}
 80013be:	bf00      	nop
 80013c0:	2000029c 	.word	0x2000029c

080013c4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b086      	sub	sp, #24
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80013cc:	4a14      	ldr	r2, [pc, #80]	; (8001420 <_sbrk+0x5c>)
 80013ce:	4b15      	ldr	r3, [pc, #84]	; (8001424 <_sbrk+0x60>)
 80013d0:	1ad3      	subs	r3, r2, r3
 80013d2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80013d4:	697b      	ldr	r3, [r7, #20]
 80013d6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80013d8:	4b13      	ldr	r3, [pc, #76]	; (8001428 <_sbrk+0x64>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d102      	bne.n	80013e6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80013e0:	4b11      	ldr	r3, [pc, #68]	; (8001428 <_sbrk+0x64>)
 80013e2:	4a12      	ldr	r2, [pc, #72]	; (800142c <_sbrk+0x68>)
 80013e4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80013e6:	4b10      	ldr	r3, [pc, #64]	; (8001428 <_sbrk+0x64>)
 80013e8:	681a      	ldr	r2, [r3, #0]
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	4413      	add	r3, r2
 80013ee:	693a      	ldr	r2, [r7, #16]
 80013f0:	429a      	cmp	r2, r3
 80013f2:	d207      	bcs.n	8001404 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80013f4:	f006 ff6a 	bl	80082cc <__errno>
 80013f8:	4603      	mov	r3, r0
 80013fa:	220c      	movs	r2, #12
 80013fc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80013fe:	f04f 33ff 	mov.w	r3, #4294967295
 8001402:	e009      	b.n	8001418 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001404:	4b08      	ldr	r3, [pc, #32]	; (8001428 <_sbrk+0x64>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800140a:	4b07      	ldr	r3, [pc, #28]	; (8001428 <_sbrk+0x64>)
 800140c:	681a      	ldr	r2, [r3, #0]
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	4413      	add	r3, r2
 8001412:	4a05      	ldr	r2, [pc, #20]	; (8001428 <_sbrk+0x64>)
 8001414:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001416:	68fb      	ldr	r3, [r7, #12]
}
 8001418:	4618      	mov	r0, r3
 800141a:	3718      	adds	r7, #24
 800141c:	46bd      	mov	sp, r7
 800141e:	bd80      	pop	{r7, pc}
 8001420:	20010000 	.word	0x20010000
 8001424:	00000400 	.word	0x00000400
 8001428:	200002e8 	.word	0x200002e8
 800142c:	20001dd8 	.word	0x20001dd8

08001430 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001430:	b480      	push	{r7}
 8001432:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001434:	4b06      	ldr	r3, [pc, #24]	; (8001450 <SystemInit+0x20>)
 8001436:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800143a:	4a05      	ldr	r2, [pc, #20]	; (8001450 <SystemInit+0x20>)
 800143c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001440:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001444:	bf00      	nop
 8001446:	46bd      	mov	sp, r7
 8001448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144c:	4770      	bx	lr
 800144e:	bf00      	nop
 8001450:	e000ed00 	.word	0xe000ed00

08001454 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001454:	f8df d034 	ldr.w	sp, [pc, #52]	; 800148c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001458:	f7ff ffea 	bl	8001430 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800145c:	480c      	ldr	r0, [pc, #48]	; (8001490 <LoopForever+0x6>)
  ldr r1, =_edata
 800145e:	490d      	ldr	r1, [pc, #52]	; (8001494 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001460:	4a0d      	ldr	r2, [pc, #52]	; (8001498 <LoopForever+0xe>)
  movs r3, #0
 8001462:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001464:	e002      	b.n	800146c <LoopCopyDataInit>

08001466 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001466:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001468:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800146a:	3304      	adds	r3, #4

0800146c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800146c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800146e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001470:	d3f9      	bcc.n	8001466 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001472:	4a0a      	ldr	r2, [pc, #40]	; (800149c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001474:	4c0a      	ldr	r4, [pc, #40]	; (80014a0 <LoopForever+0x16>)
  movs r3, #0
 8001476:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001478:	e001      	b.n	800147e <LoopFillZerobss>

0800147a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800147a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800147c:	3204      	adds	r2, #4

0800147e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800147e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001480:	d3fb      	bcc.n	800147a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001482:	f006 ff29 	bl	80082d8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001486:	f7ff fe59 	bl	800113c <main>

0800148a <LoopForever>:

LoopForever:
    b LoopForever
 800148a:	e7fe      	b.n	800148a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800148c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001490:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001494:	200001b8 	.word	0x200001b8
  ldr r2, =_sidata
 8001498:	080088e4 	.word	0x080088e4
  ldr r2, =_sbss
 800149c:	200001b8 	.word	0x200001b8
  ldr r4, =_ebss
 80014a0:	20001dd8 	.word	0x20001dd8

080014a4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80014a4:	e7fe      	b.n	80014a4 <ADC1_IRQHandler>

080014a6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014a6:	b580      	push	{r7, lr}
 80014a8:	b082      	sub	sp, #8
 80014aa:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80014ac:	2300      	movs	r3, #0
 80014ae:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014b0:	2003      	movs	r0, #3
 80014b2:	f000 f8de 	bl	8001672 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80014b6:	200f      	movs	r0, #15
 80014b8:	f7ff fef4 	bl	80012a4 <HAL_InitTick>
 80014bc:	4603      	mov	r3, r0
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d002      	beq.n	80014c8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80014c2:	2301      	movs	r3, #1
 80014c4:	71fb      	strb	r3, [r7, #7]
 80014c6:	e001      	b.n	80014cc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80014c8:	f7ff fec4 	bl	8001254 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80014cc:	79fb      	ldrb	r3, [r7, #7]
}
 80014ce:	4618      	mov	r0, r3
 80014d0:	3708      	adds	r7, #8
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bd80      	pop	{r7, pc}
	...

080014d8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014d8:	b480      	push	{r7}
 80014da:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80014dc:	4b06      	ldr	r3, [pc, #24]	; (80014f8 <HAL_IncTick+0x20>)
 80014de:	781b      	ldrb	r3, [r3, #0]
 80014e0:	461a      	mov	r2, r3
 80014e2:	4b06      	ldr	r3, [pc, #24]	; (80014fc <HAL_IncTick+0x24>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	4413      	add	r3, r2
 80014e8:	4a04      	ldr	r2, [pc, #16]	; (80014fc <HAL_IncTick+0x24>)
 80014ea:	6013      	str	r3, [r2, #0]
}
 80014ec:	bf00      	nop
 80014ee:	46bd      	mov	sp, r7
 80014f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f4:	4770      	bx	lr
 80014f6:	bf00      	nop
 80014f8:	20000160 	.word	0x20000160
 80014fc:	200002ec 	.word	0x200002ec

08001500 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001500:	b480      	push	{r7}
 8001502:	af00      	add	r7, sp, #0
  return uwTick;
 8001504:	4b03      	ldr	r3, [pc, #12]	; (8001514 <HAL_GetTick+0x14>)
 8001506:	681b      	ldr	r3, [r3, #0]
}
 8001508:	4618      	mov	r0, r3
 800150a:	46bd      	mov	sp, r7
 800150c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001510:	4770      	bx	lr
 8001512:	bf00      	nop
 8001514:	200002ec 	.word	0x200002ec

08001518 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001518:	b480      	push	{r7}
 800151a:	b085      	sub	sp, #20
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	f003 0307 	and.w	r3, r3, #7
 8001526:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001528:	4b0c      	ldr	r3, [pc, #48]	; (800155c <__NVIC_SetPriorityGrouping+0x44>)
 800152a:	68db      	ldr	r3, [r3, #12]
 800152c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800152e:	68ba      	ldr	r2, [r7, #8]
 8001530:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001534:	4013      	ands	r3, r2
 8001536:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800153c:	68bb      	ldr	r3, [r7, #8]
 800153e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001540:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001544:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001548:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800154a:	4a04      	ldr	r2, [pc, #16]	; (800155c <__NVIC_SetPriorityGrouping+0x44>)
 800154c:	68bb      	ldr	r3, [r7, #8]
 800154e:	60d3      	str	r3, [r2, #12]
}
 8001550:	bf00      	nop
 8001552:	3714      	adds	r7, #20
 8001554:	46bd      	mov	sp, r7
 8001556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155a:	4770      	bx	lr
 800155c:	e000ed00 	.word	0xe000ed00

08001560 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001560:	b480      	push	{r7}
 8001562:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001564:	4b04      	ldr	r3, [pc, #16]	; (8001578 <__NVIC_GetPriorityGrouping+0x18>)
 8001566:	68db      	ldr	r3, [r3, #12]
 8001568:	0a1b      	lsrs	r3, r3, #8
 800156a:	f003 0307 	and.w	r3, r3, #7
}
 800156e:	4618      	mov	r0, r3
 8001570:	46bd      	mov	sp, r7
 8001572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001576:	4770      	bx	lr
 8001578:	e000ed00 	.word	0xe000ed00

0800157c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800157c:	b480      	push	{r7}
 800157e:	b083      	sub	sp, #12
 8001580:	af00      	add	r7, sp, #0
 8001582:	4603      	mov	r3, r0
 8001584:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001586:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800158a:	2b00      	cmp	r3, #0
 800158c:	db0b      	blt.n	80015a6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800158e:	79fb      	ldrb	r3, [r7, #7]
 8001590:	f003 021f 	and.w	r2, r3, #31
 8001594:	4907      	ldr	r1, [pc, #28]	; (80015b4 <__NVIC_EnableIRQ+0x38>)
 8001596:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800159a:	095b      	lsrs	r3, r3, #5
 800159c:	2001      	movs	r0, #1
 800159e:	fa00 f202 	lsl.w	r2, r0, r2
 80015a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80015a6:	bf00      	nop
 80015a8:	370c      	adds	r7, #12
 80015aa:	46bd      	mov	sp, r7
 80015ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b0:	4770      	bx	lr
 80015b2:	bf00      	nop
 80015b4:	e000e100 	.word	0xe000e100

080015b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015b8:	b480      	push	{r7}
 80015ba:	b083      	sub	sp, #12
 80015bc:	af00      	add	r7, sp, #0
 80015be:	4603      	mov	r3, r0
 80015c0:	6039      	str	r1, [r7, #0]
 80015c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	db0a      	blt.n	80015e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015cc:	683b      	ldr	r3, [r7, #0]
 80015ce:	b2da      	uxtb	r2, r3
 80015d0:	490c      	ldr	r1, [pc, #48]	; (8001604 <__NVIC_SetPriority+0x4c>)
 80015d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015d6:	0112      	lsls	r2, r2, #4
 80015d8:	b2d2      	uxtb	r2, r2
 80015da:	440b      	add	r3, r1
 80015dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015e0:	e00a      	b.n	80015f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015e2:	683b      	ldr	r3, [r7, #0]
 80015e4:	b2da      	uxtb	r2, r3
 80015e6:	4908      	ldr	r1, [pc, #32]	; (8001608 <__NVIC_SetPriority+0x50>)
 80015e8:	79fb      	ldrb	r3, [r7, #7]
 80015ea:	f003 030f 	and.w	r3, r3, #15
 80015ee:	3b04      	subs	r3, #4
 80015f0:	0112      	lsls	r2, r2, #4
 80015f2:	b2d2      	uxtb	r2, r2
 80015f4:	440b      	add	r3, r1
 80015f6:	761a      	strb	r2, [r3, #24]
}
 80015f8:	bf00      	nop
 80015fa:	370c      	adds	r7, #12
 80015fc:	46bd      	mov	sp, r7
 80015fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001602:	4770      	bx	lr
 8001604:	e000e100 	.word	0xe000e100
 8001608:	e000ed00 	.word	0xe000ed00

0800160c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800160c:	b480      	push	{r7}
 800160e:	b089      	sub	sp, #36	; 0x24
 8001610:	af00      	add	r7, sp, #0
 8001612:	60f8      	str	r0, [r7, #12]
 8001614:	60b9      	str	r1, [r7, #8]
 8001616:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	f003 0307 	and.w	r3, r3, #7
 800161e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001620:	69fb      	ldr	r3, [r7, #28]
 8001622:	f1c3 0307 	rsb	r3, r3, #7
 8001626:	2b04      	cmp	r3, #4
 8001628:	bf28      	it	cs
 800162a:	2304      	movcs	r3, #4
 800162c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800162e:	69fb      	ldr	r3, [r7, #28]
 8001630:	3304      	adds	r3, #4
 8001632:	2b06      	cmp	r3, #6
 8001634:	d902      	bls.n	800163c <NVIC_EncodePriority+0x30>
 8001636:	69fb      	ldr	r3, [r7, #28]
 8001638:	3b03      	subs	r3, #3
 800163a:	e000      	b.n	800163e <NVIC_EncodePriority+0x32>
 800163c:	2300      	movs	r3, #0
 800163e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001640:	f04f 32ff 	mov.w	r2, #4294967295
 8001644:	69bb      	ldr	r3, [r7, #24]
 8001646:	fa02 f303 	lsl.w	r3, r2, r3
 800164a:	43da      	mvns	r2, r3
 800164c:	68bb      	ldr	r3, [r7, #8]
 800164e:	401a      	ands	r2, r3
 8001650:	697b      	ldr	r3, [r7, #20]
 8001652:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001654:	f04f 31ff 	mov.w	r1, #4294967295
 8001658:	697b      	ldr	r3, [r7, #20]
 800165a:	fa01 f303 	lsl.w	r3, r1, r3
 800165e:	43d9      	mvns	r1, r3
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001664:	4313      	orrs	r3, r2
         );
}
 8001666:	4618      	mov	r0, r3
 8001668:	3724      	adds	r7, #36	; 0x24
 800166a:	46bd      	mov	sp, r7
 800166c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001670:	4770      	bx	lr

08001672 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001672:	b580      	push	{r7, lr}
 8001674:	b082      	sub	sp, #8
 8001676:	af00      	add	r7, sp, #0
 8001678:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800167a:	6878      	ldr	r0, [r7, #4]
 800167c:	f7ff ff4c 	bl	8001518 <__NVIC_SetPriorityGrouping>
}
 8001680:	bf00      	nop
 8001682:	3708      	adds	r7, #8
 8001684:	46bd      	mov	sp, r7
 8001686:	bd80      	pop	{r7, pc}

08001688 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b086      	sub	sp, #24
 800168c:	af00      	add	r7, sp, #0
 800168e:	4603      	mov	r3, r0
 8001690:	60b9      	str	r1, [r7, #8]
 8001692:	607a      	str	r2, [r7, #4]
 8001694:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001696:	2300      	movs	r3, #0
 8001698:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800169a:	f7ff ff61 	bl	8001560 <__NVIC_GetPriorityGrouping>
 800169e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016a0:	687a      	ldr	r2, [r7, #4]
 80016a2:	68b9      	ldr	r1, [r7, #8]
 80016a4:	6978      	ldr	r0, [r7, #20]
 80016a6:	f7ff ffb1 	bl	800160c <NVIC_EncodePriority>
 80016aa:	4602      	mov	r2, r0
 80016ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016b0:	4611      	mov	r1, r2
 80016b2:	4618      	mov	r0, r3
 80016b4:	f7ff ff80 	bl	80015b8 <__NVIC_SetPriority>
}
 80016b8:	bf00      	nop
 80016ba:	3718      	adds	r7, #24
 80016bc:	46bd      	mov	sp, r7
 80016be:	bd80      	pop	{r7, pc}

080016c0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b082      	sub	sp, #8
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	4603      	mov	r3, r0
 80016c8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016ce:	4618      	mov	r0, r3
 80016d0:	f7ff ff54 	bl	800157c <__NVIC_EnableIRQ>
}
 80016d4:	bf00      	nop
 80016d6:	3708      	adds	r7, #8
 80016d8:	46bd      	mov	sp, r7
 80016da:	bd80      	pop	{r7, pc}

080016dc <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80016dc:	b480      	push	{r7}
 80016de:	b085      	sub	sp, #20
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80016e4:	2300      	movs	r3, #0
 80016e6:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80016ee:	b2db      	uxtb	r3, r3
 80016f0:	2b02      	cmp	r3, #2
 80016f2:	d008      	beq.n	8001706 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	2204      	movs	r2, #4
 80016f8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	2200      	movs	r2, #0
 80016fe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001702:	2301      	movs	r3, #1
 8001704:	e022      	b.n	800174c <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	681a      	ldr	r2, [r3, #0]
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	f022 020e 	bic.w	r2, r2, #14
 8001714:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	681a      	ldr	r2, [r3, #0]
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f022 0201 	bic.w	r2, r2, #1
 8001724:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800172a:	f003 021c 	and.w	r2, r3, #28
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001732:	2101      	movs	r1, #1
 8001734:	fa01 f202 	lsl.w	r2, r1, r2
 8001738:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	2201      	movs	r2, #1
 800173e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	2200      	movs	r2, #0
 8001746:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 800174a:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800174c:	4618      	mov	r0, r3
 800174e:	3714      	adds	r7, #20
 8001750:	46bd      	mov	sp, r7
 8001752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001756:	4770      	bx	lr

08001758 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b084      	sub	sp, #16
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001760:	2300      	movs	r3, #0
 8001762:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800176a:	b2db      	uxtb	r3, r3
 800176c:	2b02      	cmp	r3, #2
 800176e:	d005      	beq.n	800177c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	2204      	movs	r2, #4
 8001774:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001776:	2301      	movs	r3, #1
 8001778:	73fb      	strb	r3, [r7, #15]
 800177a:	e029      	b.n	80017d0 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	681a      	ldr	r2, [r3, #0]
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f022 020e 	bic.w	r2, r2, #14
 800178a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	681a      	ldr	r2, [r3, #0]
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f022 0201 	bic.w	r2, r2, #1
 800179a:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017a0:	f003 021c 	and.w	r2, r3, #28
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017a8:	2101      	movs	r1, #1
 80017aa:	fa01 f202 	lsl.w	r2, r1, r2
 80017ae:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	2201      	movs	r2, #1
 80017b4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	2200      	movs	r2, #0
 80017bc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d003      	beq.n	80017d0 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017cc:	6878      	ldr	r0, [r7, #4]
 80017ce:	4798      	blx	r3
    }
  }
  return status;
 80017d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80017d2:	4618      	mov	r0, r3
 80017d4:	3710      	adds	r7, #16
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bd80      	pop	{r7, pc}
	...

080017dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017dc:	b480      	push	{r7}
 80017de:	b087      	sub	sp, #28
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
 80017e4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80017e6:	2300      	movs	r3, #0
 80017e8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017ea:	e154      	b.n	8001a96 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80017ec:	683b      	ldr	r3, [r7, #0]
 80017ee:	681a      	ldr	r2, [r3, #0]
 80017f0:	2101      	movs	r1, #1
 80017f2:	697b      	ldr	r3, [r7, #20]
 80017f4:	fa01 f303 	lsl.w	r3, r1, r3
 80017f8:	4013      	ands	r3, r2
 80017fa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	2b00      	cmp	r3, #0
 8001800:	f000 8146 	beq.w	8001a90 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001804:	683b      	ldr	r3, [r7, #0]
 8001806:	685b      	ldr	r3, [r3, #4]
 8001808:	f003 0303 	and.w	r3, r3, #3
 800180c:	2b01      	cmp	r3, #1
 800180e:	d005      	beq.n	800181c <HAL_GPIO_Init+0x40>
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	685b      	ldr	r3, [r3, #4]
 8001814:	f003 0303 	and.w	r3, r3, #3
 8001818:	2b02      	cmp	r3, #2
 800181a:	d130      	bne.n	800187e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	689b      	ldr	r3, [r3, #8]
 8001820:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001822:	697b      	ldr	r3, [r7, #20]
 8001824:	005b      	lsls	r3, r3, #1
 8001826:	2203      	movs	r2, #3
 8001828:	fa02 f303 	lsl.w	r3, r2, r3
 800182c:	43db      	mvns	r3, r3
 800182e:	693a      	ldr	r2, [r7, #16]
 8001830:	4013      	ands	r3, r2
 8001832:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	68da      	ldr	r2, [r3, #12]
 8001838:	697b      	ldr	r3, [r7, #20]
 800183a:	005b      	lsls	r3, r3, #1
 800183c:	fa02 f303 	lsl.w	r3, r2, r3
 8001840:	693a      	ldr	r2, [r7, #16]
 8001842:	4313      	orrs	r3, r2
 8001844:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	693a      	ldr	r2, [r7, #16]
 800184a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	685b      	ldr	r3, [r3, #4]
 8001850:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001852:	2201      	movs	r2, #1
 8001854:	697b      	ldr	r3, [r7, #20]
 8001856:	fa02 f303 	lsl.w	r3, r2, r3
 800185a:	43db      	mvns	r3, r3
 800185c:	693a      	ldr	r2, [r7, #16]
 800185e:	4013      	ands	r3, r2
 8001860:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001862:	683b      	ldr	r3, [r7, #0]
 8001864:	685b      	ldr	r3, [r3, #4]
 8001866:	091b      	lsrs	r3, r3, #4
 8001868:	f003 0201 	and.w	r2, r3, #1
 800186c:	697b      	ldr	r3, [r7, #20]
 800186e:	fa02 f303 	lsl.w	r3, r2, r3
 8001872:	693a      	ldr	r2, [r7, #16]
 8001874:	4313      	orrs	r3, r2
 8001876:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	693a      	ldr	r2, [r7, #16]
 800187c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800187e:	683b      	ldr	r3, [r7, #0]
 8001880:	685b      	ldr	r3, [r3, #4]
 8001882:	f003 0303 	and.w	r3, r3, #3
 8001886:	2b03      	cmp	r3, #3
 8001888:	d017      	beq.n	80018ba <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	68db      	ldr	r3, [r3, #12]
 800188e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001890:	697b      	ldr	r3, [r7, #20]
 8001892:	005b      	lsls	r3, r3, #1
 8001894:	2203      	movs	r2, #3
 8001896:	fa02 f303 	lsl.w	r3, r2, r3
 800189a:	43db      	mvns	r3, r3
 800189c:	693a      	ldr	r2, [r7, #16]
 800189e:	4013      	ands	r3, r2
 80018a0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80018a2:	683b      	ldr	r3, [r7, #0]
 80018a4:	689a      	ldr	r2, [r3, #8]
 80018a6:	697b      	ldr	r3, [r7, #20]
 80018a8:	005b      	lsls	r3, r3, #1
 80018aa:	fa02 f303 	lsl.w	r3, r2, r3
 80018ae:	693a      	ldr	r2, [r7, #16]
 80018b0:	4313      	orrs	r3, r2
 80018b2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	693a      	ldr	r2, [r7, #16]
 80018b8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	685b      	ldr	r3, [r3, #4]
 80018be:	f003 0303 	and.w	r3, r3, #3
 80018c2:	2b02      	cmp	r3, #2
 80018c4:	d123      	bne.n	800190e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80018c6:	697b      	ldr	r3, [r7, #20]
 80018c8:	08da      	lsrs	r2, r3, #3
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	3208      	adds	r2, #8
 80018ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018d2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80018d4:	697b      	ldr	r3, [r7, #20]
 80018d6:	f003 0307 	and.w	r3, r3, #7
 80018da:	009b      	lsls	r3, r3, #2
 80018dc:	220f      	movs	r2, #15
 80018de:	fa02 f303 	lsl.w	r3, r2, r3
 80018e2:	43db      	mvns	r3, r3
 80018e4:	693a      	ldr	r2, [r7, #16]
 80018e6:	4013      	ands	r3, r2
 80018e8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80018ea:	683b      	ldr	r3, [r7, #0]
 80018ec:	691a      	ldr	r2, [r3, #16]
 80018ee:	697b      	ldr	r3, [r7, #20]
 80018f0:	f003 0307 	and.w	r3, r3, #7
 80018f4:	009b      	lsls	r3, r3, #2
 80018f6:	fa02 f303 	lsl.w	r3, r2, r3
 80018fa:	693a      	ldr	r2, [r7, #16]
 80018fc:	4313      	orrs	r3, r2
 80018fe:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001900:	697b      	ldr	r3, [r7, #20]
 8001902:	08da      	lsrs	r2, r3, #3
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	3208      	adds	r2, #8
 8001908:	6939      	ldr	r1, [r7, #16]
 800190a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001914:	697b      	ldr	r3, [r7, #20]
 8001916:	005b      	lsls	r3, r3, #1
 8001918:	2203      	movs	r2, #3
 800191a:	fa02 f303 	lsl.w	r3, r2, r3
 800191e:	43db      	mvns	r3, r3
 8001920:	693a      	ldr	r2, [r7, #16]
 8001922:	4013      	ands	r3, r2
 8001924:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001926:	683b      	ldr	r3, [r7, #0]
 8001928:	685b      	ldr	r3, [r3, #4]
 800192a:	f003 0203 	and.w	r2, r3, #3
 800192e:	697b      	ldr	r3, [r7, #20]
 8001930:	005b      	lsls	r3, r3, #1
 8001932:	fa02 f303 	lsl.w	r3, r2, r3
 8001936:	693a      	ldr	r2, [r7, #16]
 8001938:	4313      	orrs	r3, r2
 800193a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	693a      	ldr	r2, [r7, #16]
 8001940:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001942:	683b      	ldr	r3, [r7, #0]
 8001944:	685b      	ldr	r3, [r3, #4]
 8001946:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800194a:	2b00      	cmp	r3, #0
 800194c:	f000 80a0 	beq.w	8001a90 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001950:	4b58      	ldr	r3, [pc, #352]	; (8001ab4 <HAL_GPIO_Init+0x2d8>)
 8001952:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001954:	4a57      	ldr	r2, [pc, #348]	; (8001ab4 <HAL_GPIO_Init+0x2d8>)
 8001956:	f043 0301 	orr.w	r3, r3, #1
 800195a:	6613      	str	r3, [r2, #96]	; 0x60
 800195c:	4b55      	ldr	r3, [pc, #340]	; (8001ab4 <HAL_GPIO_Init+0x2d8>)
 800195e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001960:	f003 0301 	and.w	r3, r3, #1
 8001964:	60bb      	str	r3, [r7, #8]
 8001966:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001968:	4a53      	ldr	r2, [pc, #332]	; (8001ab8 <HAL_GPIO_Init+0x2dc>)
 800196a:	697b      	ldr	r3, [r7, #20]
 800196c:	089b      	lsrs	r3, r3, #2
 800196e:	3302      	adds	r3, #2
 8001970:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001974:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001976:	697b      	ldr	r3, [r7, #20]
 8001978:	f003 0303 	and.w	r3, r3, #3
 800197c:	009b      	lsls	r3, r3, #2
 800197e:	220f      	movs	r2, #15
 8001980:	fa02 f303 	lsl.w	r3, r2, r3
 8001984:	43db      	mvns	r3, r3
 8001986:	693a      	ldr	r2, [r7, #16]
 8001988:	4013      	ands	r3, r2
 800198a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001992:	d019      	beq.n	80019c8 <HAL_GPIO_Init+0x1ec>
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	4a49      	ldr	r2, [pc, #292]	; (8001abc <HAL_GPIO_Init+0x2e0>)
 8001998:	4293      	cmp	r3, r2
 800199a:	d013      	beq.n	80019c4 <HAL_GPIO_Init+0x1e8>
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	4a48      	ldr	r2, [pc, #288]	; (8001ac0 <HAL_GPIO_Init+0x2e4>)
 80019a0:	4293      	cmp	r3, r2
 80019a2:	d00d      	beq.n	80019c0 <HAL_GPIO_Init+0x1e4>
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	4a47      	ldr	r2, [pc, #284]	; (8001ac4 <HAL_GPIO_Init+0x2e8>)
 80019a8:	4293      	cmp	r3, r2
 80019aa:	d007      	beq.n	80019bc <HAL_GPIO_Init+0x1e0>
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	4a46      	ldr	r2, [pc, #280]	; (8001ac8 <HAL_GPIO_Init+0x2ec>)
 80019b0:	4293      	cmp	r3, r2
 80019b2:	d101      	bne.n	80019b8 <HAL_GPIO_Init+0x1dc>
 80019b4:	2304      	movs	r3, #4
 80019b6:	e008      	b.n	80019ca <HAL_GPIO_Init+0x1ee>
 80019b8:	2307      	movs	r3, #7
 80019ba:	e006      	b.n	80019ca <HAL_GPIO_Init+0x1ee>
 80019bc:	2303      	movs	r3, #3
 80019be:	e004      	b.n	80019ca <HAL_GPIO_Init+0x1ee>
 80019c0:	2302      	movs	r3, #2
 80019c2:	e002      	b.n	80019ca <HAL_GPIO_Init+0x1ee>
 80019c4:	2301      	movs	r3, #1
 80019c6:	e000      	b.n	80019ca <HAL_GPIO_Init+0x1ee>
 80019c8:	2300      	movs	r3, #0
 80019ca:	697a      	ldr	r2, [r7, #20]
 80019cc:	f002 0203 	and.w	r2, r2, #3
 80019d0:	0092      	lsls	r2, r2, #2
 80019d2:	4093      	lsls	r3, r2
 80019d4:	693a      	ldr	r2, [r7, #16]
 80019d6:	4313      	orrs	r3, r2
 80019d8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80019da:	4937      	ldr	r1, [pc, #220]	; (8001ab8 <HAL_GPIO_Init+0x2dc>)
 80019dc:	697b      	ldr	r3, [r7, #20]
 80019de:	089b      	lsrs	r3, r3, #2
 80019e0:	3302      	adds	r3, #2
 80019e2:	693a      	ldr	r2, [r7, #16]
 80019e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80019e8:	4b38      	ldr	r3, [pc, #224]	; (8001acc <HAL_GPIO_Init+0x2f0>)
 80019ea:	689b      	ldr	r3, [r3, #8]
 80019ec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	43db      	mvns	r3, r3
 80019f2:	693a      	ldr	r2, [r7, #16]
 80019f4:	4013      	ands	r3, r2
 80019f6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	685b      	ldr	r3, [r3, #4]
 80019fc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d003      	beq.n	8001a0c <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8001a04:	693a      	ldr	r2, [r7, #16]
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	4313      	orrs	r3, r2
 8001a0a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001a0c:	4a2f      	ldr	r2, [pc, #188]	; (8001acc <HAL_GPIO_Init+0x2f0>)
 8001a0e:	693b      	ldr	r3, [r7, #16]
 8001a10:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001a12:	4b2e      	ldr	r3, [pc, #184]	; (8001acc <HAL_GPIO_Init+0x2f0>)
 8001a14:	68db      	ldr	r3, [r3, #12]
 8001a16:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	43db      	mvns	r3, r3
 8001a1c:	693a      	ldr	r2, [r7, #16]
 8001a1e:	4013      	ands	r3, r2
 8001a20:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001a22:	683b      	ldr	r3, [r7, #0]
 8001a24:	685b      	ldr	r3, [r3, #4]
 8001a26:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d003      	beq.n	8001a36 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8001a2e:	693a      	ldr	r2, [r7, #16]
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	4313      	orrs	r3, r2
 8001a34:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001a36:	4a25      	ldr	r2, [pc, #148]	; (8001acc <HAL_GPIO_Init+0x2f0>)
 8001a38:	693b      	ldr	r3, [r7, #16]
 8001a3a:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001a3c:	4b23      	ldr	r3, [pc, #140]	; (8001acc <HAL_GPIO_Init+0x2f0>)
 8001a3e:	685b      	ldr	r3, [r3, #4]
 8001a40:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	43db      	mvns	r3, r3
 8001a46:	693a      	ldr	r2, [r7, #16]
 8001a48:	4013      	ands	r3, r2
 8001a4a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	685b      	ldr	r3, [r3, #4]
 8001a50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d003      	beq.n	8001a60 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8001a58:	693a      	ldr	r2, [r7, #16]
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	4313      	orrs	r3, r2
 8001a5e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001a60:	4a1a      	ldr	r2, [pc, #104]	; (8001acc <HAL_GPIO_Init+0x2f0>)
 8001a62:	693b      	ldr	r3, [r7, #16]
 8001a64:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001a66:	4b19      	ldr	r3, [pc, #100]	; (8001acc <HAL_GPIO_Init+0x2f0>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	43db      	mvns	r3, r3
 8001a70:	693a      	ldr	r2, [r7, #16]
 8001a72:	4013      	ands	r3, r2
 8001a74:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001a76:	683b      	ldr	r3, [r7, #0]
 8001a78:	685b      	ldr	r3, [r3, #4]
 8001a7a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d003      	beq.n	8001a8a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001a82:	693a      	ldr	r2, [r7, #16]
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	4313      	orrs	r3, r2
 8001a88:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001a8a:	4a10      	ldr	r2, [pc, #64]	; (8001acc <HAL_GPIO_Init+0x2f0>)
 8001a8c:	693b      	ldr	r3, [r7, #16]
 8001a8e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001a90:	697b      	ldr	r3, [r7, #20]
 8001a92:	3301      	adds	r3, #1
 8001a94:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a96:	683b      	ldr	r3, [r7, #0]
 8001a98:	681a      	ldr	r2, [r3, #0]
 8001a9a:	697b      	ldr	r3, [r7, #20]
 8001a9c:	fa22 f303 	lsr.w	r3, r2, r3
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	f47f aea3 	bne.w	80017ec <HAL_GPIO_Init+0x10>
  }
}
 8001aa6:	bf00      	nop
 8001aa8:	bf00      	nop
 8001aaa:	371c      	adds	r7, #28
 8001aac:	46bd      	mov	sp, r7
 8001aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab2:	4770      	bx	lr
 8001ab4:	40021000 	.word	0x40021000
 8001ab8:	40010000 	.word	0x40010000
 8001abc:	48000400 	.word	0x48000400
 8001ac0:	48000800 	.word	0x48000800
 8001ac4:	48000c00 	.word	0x48000c00
 8001ac8:	48001000 	.word	0x48001000
 8001acc:	40010400 	.word	0x40010400

08001ad0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	b083      	sub	sp, #12
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
 8001ad8:	460b      	mov	r3, r1
 8001ada:	807b      	strh	r3, [r7, #2]
 8001adc:	4613      	mov	r3, r2
 8001ade:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ae0:	787b      	ldrb	r3, [r7, #1]
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d003      	beq.n	8001aee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001ae6:	887a      	ldrh	r2, [r7, #2]
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001aec:	e002      	b.n	8001af4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001aee:	887a      	ldrh	r2, [r7, #2]
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001af4:	bf00      	nop
 8001af6:	370c      	adds	r7, #12
 8001af8:	46bd      	mov	sp, r7
 8001afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afe:	4770      	bx	lr

08001b00 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b082      	sub	sp, #8
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	4603      	mov	r3, r0
 8001b08:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001b0a:	4b08      	ldr	r3, [pc, #32]	; (8001b2c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001b0c:	695a      	ldr	r2, [r3, #20]
 8001b0e:	88fb      	ldrh	r3, [r7, #6]
 8001b10:	4013      	ands	r3, r2
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d006      	beq.n	8001b24 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001b16:	4a05      	ldr	r2, [pc, #20]	; (8001b2c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001b18:	88fb      	ldrh	r3, [r7, #6]
 8001b1a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001b1c:	88fb      	ldrh	r3, [r7, #6]
 8001b1e:	4618      	mov	r0, r3
 8001b20:	f000 f806 	bl	8001b30 <HAL_GPIO_EXTI_Callback>
  }
}
 8001b24:	bf00      	nop
 8001b26:	3708      	adds	r7, #8
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	bd80      	pop	{r7, pc}
 8001b2c:	40010400 	.word	0x40010400

08001b30 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001b30:	b480      	push	{r7}
 8001b32:	b083      	sub	sp, #12
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	4603      	mov	r3, r0
 8001b38:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001b3a:	bf00      	nop
 8001b3c:	370c      	adds	r7, #12
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b44:	4770      	bx	lr

08001b46 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001b46:	b580      	push	{r7, lr}
 8001b48:	b084      	sub	sp, #16
 8001b4a:	af00      	add	r7, sp, #0
 8001b4c:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	699b      	ldr	r3, [r3, #24]
 8001b54:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d005      	beq.n	8001b72 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b6a:	68ba      	ldr	r2, [r7, #8]
 8001b6c:	68f9      	ldr	r1, [r7, #12]
 8001b6e:	6878      	ldr	r0, [r7, #4]
 8001b70:	4798      	blx	r3
  }
}
 8001b72:	bf00      	nop
 8001b74:	3710      	adds	r7, #16
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bd80      	pop	{r7, pc}
	...

08001b7c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001b80:	4b04      	ldr	r3, [pc, #16]	; (8001b94 <HAL_PWREx_GetVoltageRange+0x18>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001b88:	4618      	mov	r0, r3
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b90:	4770      	bx	lr
 8001b92:	bf00      	nop
 8001b94:	40007000 	.word	0x40007000

08001b98 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	b085      	sub	sp, #20
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001ba6:	d130      	bne.n	8001c0a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001ba8:	4b23      	ldr	r3, [pc, #140]	; (8001c38 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001bb0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001bb4:	d038      	beq.n	8001c28 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001bb6:	4b20      	ldr	r3, [pc, #128]	; (8001c38 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001bbe:	4a1e      	ldr	r2, [pc, #120]	; (8001c38 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001bc0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001bc4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001bc6:	4b1d      	ldr	r3, [pc, #116]	; (8001c3c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	2232      	movs	r2, #50	; 0x32
 8001bcc:	fb02 f303 	mul.w	r3, r2, r3
 8001bd0:	4a1b      	ldr	r2, [pc, #108]	; (8001c40 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001bd2:	fba2 2303 	umull	r2, r3, r2, r3
 8001bd6:	0c9b      	lsrs	r3, r3, #18
 8001bd8:	3301      	adds	r3, #1
 8001bda:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001bdc:	e002      	b.n	8001be4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	3b01      	subs	r3, #1
 8001be2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001be4:	4b14      	ldr	r3, [pc, #80]	; (8001c38 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001be6:	695b      	ldr	r3, [r3, #20]
 8001be8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001bf0:	d102      	bne.n	8001bf8 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d1f2      	bne.n	8001bde <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001bf8:	4b0f      	ldr	r3, [pc, #60]	; (8001c38 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001bfa:	695b      	ldr	r3, [r3, #20]
 8001bfc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c00:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c04:	d110      	bne.n	8001c28 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001c06:	2303      	movs	r3, #3
 8001c08:	e00f      	b.n	8001c2a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001c0a:	4b0b      	ldr	r3, [pc, #44]	; (8001c38 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001c12:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c16:	d007      	beq.n	8001c28 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001c18:	4b07      	ldr	r3, [pc, #28]	; (8001c38 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001c20:	4a05      	ldr	r2, [pc, #20]	; (8001c38 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c22:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001c26:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001c28:	2300      	movs	r3, #0
}
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	3714      	adds	r7, #20
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c34:	4770      	bx	lr
 8001c36:	bf00      	nop
 8001c38:	40007000 	.word	0x40007000
 8001c3c:	20000158 	.word	0x20000158
 8001c40:	431bde83 	.word	0x431bde83

08001c44 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b088      	sub	sp, #32
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d102      	bne.n	8001c58 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001c52:	2301      	movs	r3, #1
 8001c54:	f000 bc02 	b.w	800245c <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001c58:	4b96      	ldr	r3, [pc, #600]	; (8001eb4 <HAL_RCC_OscConfig+0x270>)
 8001c5a:	689b      	ldr	r3, [r3, #8]
 8001c5c:	f003 030c 	and.w	r3, r3, #12
 8001c60:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001c62:	4b94      	ldr	r3, [pc, #592]	; (8001eb4 <HAL_RCC_OscConfig+0x270>)
 8001c64:	68db      	ldr	r3, [r3, #12]
 8001c66:	f003 0303 	and.w	r3, r3, #3
 8001c6a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f003 0310 	and.w	r3, r3, #16
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	f000 80e4 	beq.w	8001e42 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001c7a:	69bb      	ldr	r3, [r7, #24]
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d007      	beq.n	8001c90 <HAL_RCC_OscConfig+0x4c>
 8001c80:	69bb      	ldr	r3, [r7, #24]
 8001c82:	2b0c      	cmp	r3, #12
 8001c84:	f040 808b 	bne.w	8001d9e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001c88:	697b      	ldr	r3, [r7, #20]
 8001c8a:	2b01      	cmp	r3, #1
 8001c8c:	f040 8087 	bne.w	8001d9e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001c90:	4b88      	ldr	r3, [pc, #544]	; (8001eb4 <HAL_RCC_OscConfig+0x270>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f003 0302 	and.w	r3, r3, #2
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d005      	beq.n	8001ca8 <HAL_RCC_OscConfig+0x64>
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	699b      	ldr	r3, [r3, #24]
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d101      	bne.n	8001ca8 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001ca4:	2301      	movs	r3, #1
 8001ca6:	e3d9      	b.n	800245c <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	6a1a      	ldr	r2, [r3, #32]
 8001cac:	4b81      	ldr	r3, [pc, #516]	; (8001eb4 <HAL_RCC_OscConfig+0x270>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f003 0308 	and.w	r3, r3, #8
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d004      	beq.n	8001cc2 <HAL_RCC_OscConfig+0x7e>
 8001cb8:	4b7e      	ldr	r3, [pc, #504]	; (8001eb4 <HAL_RCC_OscConfig+0x270>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001cc0:	e005      	b.n	8001cce <HAL_RCC_OscConfig+0x8a>
 8001cc2:	4b7c      	ldr	r3, [pc, #496]	; (8001eb4 <HAL_RCC_OscConfig+0x270>)
 8001cc4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001cc8:	091b      	lsrs	r3, r3, #4
 8001cca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001cce:	4293      	cmp	r3, r2
 8001cd0:	d223      	bcs.n	8001d1a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	6a1b      	ldr	r3, [r3, #32]
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	f000 fdbc 	bl	8002854 <RCC_SetFlashLatencyFromMSIRange>
 8001cdc:	4603      	mov	r3, r0
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d001      	beq.n	8001ce6 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	e3ba      	b.n	800245c <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001ce6:	4b73      	ldr	r3, [pc, #460]	; (8001eb4 <HAL_RCC_OscConfig+0x270>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	4a72      	ldr	r2, [pc, #456]	; (8001eb4 <HAL_RCC_OscConfig+0x270>)
 8001cec:	f043 0308 	orr.w	r3, r3, #8
 8001cf0:	6013      	str	r3, [r2, #0]
 8001cf2:	4b70      	ldr	r3, [pc, #448]	; (8001eb4 <HAL_RCC_OscConfig+0x270>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	6a1b      	ldr	r3, [r3, #32]
 8001cfe:	496d      	ldr	r1, [pc, #436]	; (8001eb4 <HAL_RCC_OscConfig+0x270>)
 8001d00:	4313      	orrs	r3, r2
 8001d02:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001d04:	4b6b      	ldr	r3, [pc, #428]	; (8001eb4 <HAL_RCC_OscConfig+0x270>)
 8001d06:	685b      	ldr	r3, [r3, #4]
 8001d08:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	69db      	ldr	r3, [r3, #28]
 8001d10:	021b      	lsls	r3, r3, #8
 8001d12:	4968      	ldr	r1, [pc, #416]	; (8001eb4 <HAL_RCC_OscConfig+0x270>)
 8001d14:	4313      	orrs	r3, r2
 8001d16:	604b      	str	r3, [r1, #4]
 8001d18:	e025      	b.n	8001d66 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001d1a:	4b66      	ldr	r3, [pc, #408]	; (8001eb4 <HAL_RCC_OscConfig+0x270>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	4a65      	ldr	r2, [pc, #404]	; (8001eb4 <HAL_RCC_OscConfig+0x270>)
 8001d20:	f043 0308 	orr.w	r3, r3, #8
 8001d24:	6013      	str	r3, [r2, #0]
 8001d26:	4b63      	ldr	r3, [pc, #396]	; (8001eb4 <HAL_RCC_OscConfig+0x270>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	6a1b      	ldr	r3, [r3, #32]
 8001d32:	4960      	ldr	r1, [pc, #384]	; (8001eb4 <HAL_RCC_OscConfig+0x270>)
 8001d34:	4313      	orrs	r3, r2
 8001d36:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001d38:	4b5e      	ldr	r3, [pc, #376]	; (8001eb4 <HAL_RCC_OscConfig+0x270>)
 8001d3a:	685b      	ldr	r3, [r3, #4]
 8001d3c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	69db      	ldr	r3, [r3, #28]
 8001d44:	021b      	lsls	r3, r3, #8
 8001d46:	495b      	ldr	r1, [pc, #364]	; (8001eb4 <HAL_RCC_OscConfig+0x270>)
 8001d48:	4313      	orrs	r3, r2
 8001d4a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001d4c:	69bb      	ldr	r3, [r7, #24]
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d109      	bne.n	8001d66 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	6a1b      	ldr	r3, [r3, #32]
 8001d56:	4618      	mov	r0, r3
 8001d58:	f000 fd7c 	bl	8002854 <RCC_SetFlashLatencyFromMSIRange>
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d001      	beq.n	8001d66 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8001d62:	2301      	movs	r3, #1
 8001d64:	e37a      	b.n	800245c <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001d66:	f000 fc81 	bl	800266c <HAL_RCC_GetSysClockFreq>
 8001d6a:	4602      	mov	r2, r0
 8001d6c:	4b51      	ldr	r3, [pc, #324]	; (8001eb4 <HAL_RCC_OscConfig+0x270>)
 8001d6e:	689b      	ldr	r3, [r3, #8]
 8001d70:	091b      	lsrs	r3, r3, #4
 8001d72:	f003 030f 	and.w	r3, r3, #15
 8001d76:	4950      	ldr	r1, [pc, #320]	; (8001eb8 <HAL_RCC_OscConfig+0x274>)
 8001d78:	5ccb      	ldrb	r3, [r1, r3]
 8001d7a:	f003 031f 	and.w	r3, r3, #31
 8001d7e:	fa22 f303 	lsr.w	r3, r2, r3
 8001d82:	4a4e      	ldr	r2, [pc, #312]	; (8001ebc <HAL_RCC_OscConfig+0x278>)
 8001d84:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001d86:	4b4e      	ldr	r3, [pc, #312]	; (8001ec0 <HAL_RCC_OscConfig+0x27c>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	f7ff fa8a 	bl	80012a4 <HAL_InitTick>
 8001d90:	4603      	mov	r3, r0
 8001d92:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001d94:	7bfb      	ldrb	r3, [r7, #15]
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d052      	beq.n	8001e40 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8001d9a:	7bfb      	ldrb	r3, [r7, #15]
 8001d9c:	e35e      	b.n	800245c <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	699b      	ldr	r3, [r3, #24]
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d032      	beq.n	8001e0c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001da6:	4b43      	ldr	r3, [pc, #268]	; (8001eb4 <HAL_RCC_OscConfig+0x270>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	4a42      	ldr	r2, [pc, #264]	; (8001eb4 <HAL_RCC_OscConfig+0x270>)
 8001dac:	f043 0301 	orr.w	r3, r3, #1
 8001db0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001db2:	f7ff fba5 	bl	8001500 <HAL_GetTick>
 8001db6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001db8:	e008      	b.n	8001dcc <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001dba:	f7ff fba1 	bl	8001500 <HAL_GetTick>
 8001dbe:	4602      	mov	r2, r0
 8001dc0:	693b      	ldr	r3, [r7, #16]
 8001dc2:	1ad3      	subs	r3, r2, r3
 8001dc4:	2b02      	cmp	r3, #2
 8001dc6:	d901      	bls.n	8001dcc <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001dc8:	2303      	movs	r3, #3
 8001dca:	e347      	b.n	800245c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001dcc:	4b39      	ldr	r3, [pc, #228]	; (8001eb4 <HAL_RCC_OscConfig+0x270>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f003 0302 	and.w	r3, r3, #2
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d0f0      	beq.n	8001dba <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001dd8:	4b36      	ldr	r3, [pc, #216]	; (8001eb4 <HAL_RCC_OscConfig+0x270>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	4a35      	ldr	r2, [pc, #212]	; (8001eb4 <HAL_RCC_OscConfig+0x270>)
 8001dde:	f043 0308 	orr.w	r3, r3, #8
 8001de2:	6013      	str	r3, [r2, #0]
 8001de4:	4b33      	ldr	r3, [pc, #204]	; (8001eb4 <HAL_RCC_OscConfig+0x270>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	6a1b      	ldr	r3, [r3, #32]
 8001df0:	4930      	ldr	r1, [pc, #192]	; (8001eb4 <HAL_RCC_OscConfig+0x270>)
 8001df2:	4313      	orrs	r3, r2
 8001df4:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001df6:	4b2f      	ldr	r3, [pc, #188]	; (8001eb4 <HAL_RCC_OscConfig+0x270>)
 8001df8:	685b      	ldr	r3, [r3, #4]
 8001dfa:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	69db      	ldr	r3, [r3, #28]
 8001e02:	021b      	lsls	r3, r3, #8
 8001e04:	492b      	ldr	r1, [pc, #172]	; (8001eb4 <HAL_RCC_OscConfig+0x270>)
 8001e06:	4313      	orrs	r3, r2
 8001e08:	604b      	str	r3, [r1, #4]
 8001e0a:	e01a      	b.n	8001e42 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001e0c:	4b29      	ldr	r3, [pc, #164]	; (8001eb4 <HAL_RCC_OscConfig+0x270>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	4a28      	ldr	r2, [pc, #160]	; (8001eb4 <HAL_RCC_OscConfig+0x270>)
 8001e12:	f023 0301 	bic.w	r3, r3, #1
 8001e16:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001e18:	f7ff fb72 	bl	8001500 <HAL_GetTick>
 8001e1c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001e1e:	e008      	b.n	8001e32 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001e20:	f7ff fb6e 	bl	8001500 <HAL_GetTick>
 8001e24:	4602      	mov	r2, r0
 8001e26:	693b      	ldr	r3, [r7, #16]
 8001e28:	1ad3      	subs	r3, r2, r3
 8001e2a:	2b02      	cmp	r3, #2
 8001e2c:	d901      	bls.n	8001e32 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8001e2e:	2303      	movs	r3, #3
 8001e30:	e314      	b.n	800245c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001e32:	4b20      	ldr	r3, [pc, #128]	; (8001eb4 <HAL_RCC_OscConfig+0x270>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f003 0302 	and.w	r3, r3, #2
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d1f0      	bne.n	8001e20 <HAL_RCC_OscConfig+0x1dc>
 8001e3e:	e000      	b.n	8001e42 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001e40:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f003 0301 	and.w	r3, r3, #1
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d073      	beq.n	8001f36 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001e4e:	69bb      	ldr	r3, [r7, #24]
 8001e50:	2b08      	cmp	r3, #8
 8001e52:	d005      	beq.n	8001e60 <HAL_RCC_OscConfig+0x21c>
 8001e54:	69bb      	ldr	r3, [r7, #24]
 8001e56:	2b0c      	cmp	r3, #12
 8001e58:	d10e      	bne.n	8001e78 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001e5a:	697b      	ldr	r3, [r7, #20]
 8001e5c:	2b03      	cmp	r3, #3
 8001e5e:	d10b      	bne.n	8001e78 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e60:	4b14      	ldr	r3, [pc, #80]	; (8001eb4 <HAL_RCC_OscConfig+0x270>)
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d063      	beq.n	8001f34 <HAL_RCC_OscConfig+0x2f0>
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	685b      	ldr	r3, [r3, #4]
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d15f      	bne.n	8001f34 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001e74:	2301      	movs	r3, #1
 8001e76:	e2f1      	b.n	800245c <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	685b      	ldr	r3, [r3, #4]
 8001e7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e80:	d106      	bne.n	8001e90 <HAL_RCC_OscConfig+0x24c>
 8001e82:	4b0c      	ldr	r3, [pc, #48]	; (8001eb4 <HAL_RCC_OscConfig+0x270>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	4a0b      	ldr	r2, [pc, #44]	; (8001eb4 <HAL_RCC_OscConfig+0x270>)
 8001e88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e8c:	6013      	str	r3, [r2, #0]
 8001e8e:	e025      	b.n	8001edc <HAL_RCC_OscConfig+0x298>
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	685b      	ldr	r3, [r3, #4]
 8001e94:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001e98:	d114      	bne.n	8001ec4 <HAL_RCC_OscConfig+0x280>
 8001e9a:	4b06      	ldr	r3, [pc, #24]	; (8001eb4 <HAL_RCC_OscConfig+0x270>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	4a05      	ldr	r2, [pc, #20]	; (8001eb4 <HAL_RCC_OscConfig+0x270>)
 8001ea0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ea4:	6013      	str	r3, [r2, #0]
 8001ea6:	4b03      	ldr	r3, [pc, #12]	; (8001eb4 <HAL_RCC_OscConfig+0x270>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	4a02      	ldr	r2, [pc, #8]	; (8001eb4 <HAL_RCC_OscConfig+0x270>)
 8001eac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001eb0:	6013      	str	r3, [r2, #0]
 8001eb2:	e013      	b.n	8001edc <HAL_RCC_OscConfig+0x298>
 8001eb4:	40021000 	.word	0x40021000
 8001eb8:	0800888c 	.word	0x0800888c
 8001ebc:	20000158 	.word	0x20000158
 8001ec0:	2000015c 	.word	0x2000015c
 8001ec4:	4ba0      	ldr	r3, [pc, #640]	; (8002148 <HAL_RCC_OscConfig+0x504>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	4a9f      	ldr	r2, [pc, #636]	; (8002148 <HAL_RCC_OscConfig+0x504>)
 8001eca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ece:	6013      	str	r3, [r2, #0]
 8001ed0:	4b9d      	ldr	r3, [pc, #628]	; (8002148 <HAL_RCC_OscConfig+0x504>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	4a9c      	ldr	r2, [pc, #624]	; (8002148 <HAL_RCC_OscConfig+0x504>)
 8001ed6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001eda:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	685b      	ldr	r3, [r3, #4]
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d013      	beq.n	8001f0c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ee4:	f7ff fb0c 	bl	8001500 <HAL_GetTick>
 8001ee8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001eea:	e008      	b.n	8001efe <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001eec:	f7ff fb08 	bl	8001500 <HAL_GetTick>
 8001ef0:	4602      	mov	r2, r0
 8001ef2:	693b      	ldr	r3, [r7, #16]
 8001ef4:	1ad3      	subs	r3, r2, r3
 8001ef6:	2b64      	cmp	r3, #100	; 0x64
 8001ef8:	d901      	bls.n	8001efe <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001efa:	2303      	movs	r3, #3
 8001efc:	e2ae      	b.n	800245c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001efe:	4b92      	ldr	r3, [pc, #584]	; (8002148 <HAL_RCC_OscConfig+0x504>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d0f0      	beq.n	8001eec <HAL_RCC_OscConfig+0x2a8>
 8001f0a:	e014      	b.n	8001f36 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f0c:	f7ff faf8 	bl	8001500 <HAL_GetTick>
 8001f10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001f12:	e008      	b.n	8001f26 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f14:	f7ff faf4 	bl	8001500 <HAL_GetTick>
 8001f18:	4602      	mov	r2, r0
 8001f1a:	693b      	ldr	r3, [r7, #16]
 8001f1c:	1ad3      	subs	r3, r2, r3
 8001f1e:	2b64      	cmp	r3, #100	; 0x64
 8001f20:	d901      	bls.n	8001f26 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001f22:	2303      	movs	r3, #3
 8001f24:	e29a      	b.n	800245c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001f26:	4b88      	ldr	r3, [pc, #544]	; (8002148 <HAL_RCC_OscConfig+0x504>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d1f0      	bne.n	8001f14 <HAL_RCC_OscConfig+0x2d0>
 8001f32:	e000      	b.n	8001f36 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f34:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f003 0302 	and.w	r3, r3, #2
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d060      	beq.n	8002004 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001f42:	69bb      	ldr	r3, [r7, #24]
 8001f44:	2b04      	cmp	r3, #4
 8001f46:	d005      	beq.n	8001f54 <HAL_RCC_OscConfig+0x310>
 8001f48:	69bb      	ldr	r3, [r7, #24]
 8001f4a:	2b0c      	cmp	r3, #12
 8001f4c:	d119      	bne.n	8001f82 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001f4e:	697b      	ldr	r3, [r7, #20]
 8001f50:	2b02      	cmp	r3, #2
 8001f52:	d116      	bne.n	8001f82 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001f54:	4b7c      	ldr	r3, [pc, #496]	; (8002148 <HAL_RCC_OscConfig+0x504>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d005      	beq.n	8001f6c <HAL_RCC_OscConfig+0x328>
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	68db      	ldr	r3, [r3, #12]
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d101      	bne.n	8001f6c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001f68:	2301      	movs	r3, #1
 8001f6a:	e277      	b.n	800245c <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f6c:	4b76      	ldr	r3, [pc, #472]	; (8002148 <HAL_RCC_OscConfig+0x504>)
 8001f6e:	685b      	ldr	r3, [r3, #4]
 8001f70:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	691b      	ldr	r3, [r3, #16]
 8001f78:	061b      	lsls	r3, r3, #24
 8001f7a:	4973      	ldr	r1, [pc, #460]	; (8002148 <HAL_RCC_OscConfig+0x504>)
 8001f7c:	4313      	orrs	r3, r2
 8001f7e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001f80:	e040      	b.n	8002004 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	68db      	ldr	r3, [r3, #12]
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d023      	beq.n	8001fd2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f8a:	4b6f      	ldr	r3, [pc, #444]	; (8002148 <HAL_RCC_OscConfig+0x504>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	4a6e      	ldr	r2, [pc, #440]	; (8002148 <HAL_RCC_OscConfig+0x504>)
 8001f90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f94:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f96:	f7ff fab3 	bl	8001500 <HAL_GetTick>
 8001f9a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001f9c:	e008      	b.n	8001fb0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f9e:	f7ff faaf 	bl	8001500 <HAL_GetTick>
 8001fa2:	4602      	mov	r2, r0
 8001fa4:	693b      	ldr	r3, [r7, #16]
 8001fa6:	1ad3      	subs	r3, r2, r3
 8001fa8:	2b02      	cmp	r3, #2
 8001faa:	d901      	bls.n	8001fb0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001fac:	2303      	movs	r3, #3
 8001fae:	e255      	b.n	800245c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001fb0:	4b65      	ldr	r3, [pc, #404]	; (8002148 <HAL_RCC_OscConfig+0x504>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d0f0      	beq.n	8001f9e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fbc:	4b62      	ldr	r3, [pc, #392]	; (8002148 <HAL_RCC_OscConfig+0x504>)
 8001fbe:	685b      	ldr	r3, [r3, #4]
 8001fc0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	691b      	ldr	r3, [r3, #16]
 8001fc8:	061b      	lsls	r3, r3, #24
 8001fca:	495f      	ldr	r1, [pc, #380]	; (8002148 <HAL_RCC_OscConfig+0x504>)
 8001fcc:	4313      	orrs	r3, r2
 8001fce:	604b      	str	r3, [r1, #4]
 8001fd0:	e018      	b.n	8002004 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001fd2:	4b5d      	ldr	r3, [pc, #372]	; (8002148 <HAL_RCC_OscConfig+0x504>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	4a5c      	ldr	r2, [pc, #368]	; (8002148 <HAL_RCC_OscConfig+0x504>)
 8001fd8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001fdc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fde:	f7ff fa8f 	bl	8001500 <HAL_GetTick>
 8001fe2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001fe4:	e008      	b.n	8001ff8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001fe6:	f7ff fa8b 	bl	8001500 <HAL_GetTick>
 8001fea:	4602      	mov	r2, r0
 8001fec:	693b      	ldr	r3, [r7, #16]
 8001fee:	1ad3      	subs	r3, r2, r3
 8001ff0:	2b02      	cmp	r3, #2
 8001ff2:	d901      	bls.n	8001ff8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001ff4:	2303      	movs	r3, #3
 8001ff6:	e231      	b.n	800245c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001ff8:	4b53      	ldr	r3, [pc, #332]	; (8002148 <HAL_RCC_OscConfig+0x504>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002000:	2b00      	cmp	r3, #0
 8002002:	d1f0      	bne.n	8001fe6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f003 0308 	and.w	r3, r3, #8
 800200c:	2b00      	cmp	r3, #0
 800200e:	d03c      	beq.n	800208a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	695b      	ldr	r3, [r3, #20]
 8002014:	2b00      	cmp	r3, #0
 8002016:	d01c      	beq.n	8002052 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002018:	4b4b      	ldr	r3, [pc, #300]	; (8002148 <HAL_RCC_OscConfig+0x504>)
 800201a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800201e:	4a4a      	ldr	r2, [pc, #296]	; (8002148 <HAL_RCC_OscConfig+0x504>)
 8002020:	f043 0301 	orr.w	r3, r3, #1
 8002024:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002028:	f7ff fa6a 	bl	8001500 <HAL_GetTick>
 800202c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800202e:	e008      	b.n	8002042 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002030:	f7ff fa66 	bl	8001500 <HAL_GetTick>
 8002034:	4602      	mov	r2, r0
 8002036:	693b      	ldr	r3, [r7, #16]
 8002038:	1ad3      	subs	r3, r2, r3
 800203a:	2b02      	cmp	r3, #2
 800203c:	d901      	bls.n	8002042 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800203e:	2303      	movs	r3, #3
 8002040:	e20c      	b.n	800245c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002042:	4b41      	ldr	r3, [pc, #260]	; (8002148 <HAL_RCC_OscConfig+0x504>)
 8002044:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002048:	f003 0302 	and.w	r3, r3, #2
 800204c:	2b00      	cmp	r3, #0
 800204e:	d0ef      	beq.n	8002030 <HAL_RCC_OscConfig+0x3ec>
 8002050:	e01b      	b.n	800208a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002052:	4b3d      	ldr	r3, [pc, #244]	; (8002148 <HAL_RCC_OscConfig+0x504>)
 8002054:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002058:	4a3b      	ldr	r2, [pc, #236]	; (8002148 <HAL_RCC_OscConfig+0x504>)
 800205a:	f023 0301 	bic.w	r3, r3, #1
 800205e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002062:	f7ff fa4d 	bl	8001500 <HAL_GetTick>
 8002066:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002068:	e008      	b.n	800207c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800206a:	f7ff fa49 	bl	8001500 <HAL_GetTick>
 800206e:	4602      	mov	r2, r0
 8002070:	693b      	ldr	r3, [r7, #16]
 8002072:	1ad3      	subs	r3, r2, r3
 8002074:	2b02      	cmp	r3, #2
 8002076:	d901      	bls.n	800207c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002078:	2303      	movs	r3, #3
 800207a:	e1ef      	b.n	800245c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800207c:	4b32      	ldr	r3, [pc, #200]	; (8002148 <HAL_RCC_OscConfig+0x504>)
 800207e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002082:	f003 0302 	and.w	r3, r3, #2
 8002086:	2b00      	cmp	r3, #0
 8002088:	d1ef      	bne.n	800206a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f003 0304 	and.w	r3, r3, #4
 8002092:	2b00      	cmp	r3, #0
 8002094:	f000 80a6 	beq.w	80021e4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002098:	2300      	movs	r3, #0
 800209a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800209c:	4b2a      	ldr	r3, [pc, #168]	; (8002148 <HAL_RCC_OscConfig+0x504>)
 800209e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d10d      	bne.n	80020c4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020a8:	4b27      	ldr	r3, [pc, #156]	; (8002148 <HAL_RCC_OscConfig+0x504>)
 80020aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020ac:	4a26      	ldr	r2, [pc, #152]	; (8002148 <HAL_RCC_OscConfig+0x504>)
 80020ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020b2:	6593      	str	r3, [r2, #88]	; 0x58
 80020b4:	4b24      	ldr	r3, [pc, #144]	; (8002148 <HAL_RCC_OscConfig+0x504>)
 80020b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020bc:	60bb      	str	r3, [r7, #8]
 80020be:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80020c0:	2301      	movs	r3, #1
 80020c2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80020c4:	4b21      	ldr	r3, [pc, #132]	; (800214c <HAL_RCC_OscConfig+0x508>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d118      	bne.n	8002102 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80020d0:	4b1e      	ldr	r3, [pc, #120]	; (800214c <HAL_RCC_OscConfig+0x508>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	4a1d      	ldr	r2, [pc, #116]	; (800214c <HAL_RCC_OscConfig+0x508>)
 80020d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020da:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80020dc:	f7ff fa10 	bl	8001500 <HAL_GetTick>
 80020e0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80020e2:	e008      	b.n	80020f6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020e4:	f7ff fa0c 	bl	8001500 <HAL_GetTick>
 80020e8:	4602      	mov	r2, r0
 80020ea:	693b      	ldr	r3, [r7, #16]
 80020ec:	1ad3      	subs	r3, r2, r3
 80020ee:	2b02      	cmp	r3, #2
 80020f0:	d901      	bls.n	80020f6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80020f2:	2303      	movs	r3, #3
 80020f4:	e1b2      	b.n	800245c <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80020f6:	4b15      	ldr	r3, [pc, #84]	; (800214c <HAL_RCC_OscConfig+0x508>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d0f0      	beq.n	80020e4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	689b      	ldr	r3, [r3, #8]
 8002106:	2b01      	cmp	r3, #1
 8002108:	d108      	bne.n	800211c <HAL_RCC_OscConfig+0x4d8>
 800210a:	4b0f      	ldr	r3, [pc, #60]	; (8002148 <HAL_RCC_OscConfig+0x504>)
 800210c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002110:	4a0d      	ldr	r2, [pc, #52]	; (8002148 <HAL_RCC_OscConfig+0x504>)
 8002112:	f043 0301 	orr.w	r3, r3, #1
 8002116:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800211a:	e029      	b.n	8002170 <HAL_RCC_OscConfig+0x52c>
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	689b      	ldr	r3, [r3, #8]
 8002120:	2b05      	cmp	r3, #5
 8002122:	d115      	bne.n	8002150 <HAL_RCC_OscConfig+0x50c>
 8002124:	4b08      	ldr	r3, [pc, #32]	; (8002148 <HAL_RCC_OscConfig+0x504>)
 8002126:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800212a:	4a07      	ldr	r2, [pc, #28]	; (8002148 <HAL_RCC_OscConfig+0x504>)
 800212c:	f043 0304 	orr.w	r3, r3, #4
 8002130:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002134:	4b04      	ldr	r3, [pc, #16]	; (8002148 <HAL_RCC_OscConfig+0x504>)
 8002136:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800213a:	4a03      	ldr	r2, [pc, #12]	; (8002148 <HAL_RCC_OscConfig+0x504>)
 800213c:	f043 0301 	orr.w	r3, r3, #1
 8002140:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002144:	e014      	b.n	8002170 <HAL_RCC_OscConfig+0x52c>
 8002146:	bf00      	nop
 8002148:	40021000 	.word	0x40021000
 800214c:	40007000 	.word	0x40007000
 8002150:	4b9a      	ldr	r3, [pc, #616]	; (80023bc <HAL_RCC_OscConfig+0x778>)
 8002152:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002156:	4a99      	ldr	r2, [pc, #612]	; (80023bc <HAL_RCC_OscConfig+0x778>)
 8002158:	f023 0301 	bic.w	r3, r3, #1
 800215c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002160:	4b96      	ldr	r3, [pc, #600]	; (80023bc <HAL_RCC_OscConfig+0x778>)
 8002162:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002166:	4a95      	ldr	r2, [pc, #596]	; (80023bc <HAL_RCC_OscConfig+0x778>)
 8002168:	f023 0304 	bic.w	r3, r3, #4
 800216c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	689b      	ldr	r3, [r3, #8]
 8002174:	2b00      	cmp	r3, #0
 8002176:	d016      	beq.n	80021a6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002178:	f7ff f9c2 	bl	8001500 <HAL_GetTick>
 800217c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800217e:	e00a      	b.n	8002196 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002180:	f7ff f9be 	bl	8001500 <HAL_GetTick>
 8002184:	4602      	mov	r2, r0
 8002186:	693b      	ldr	r3, [r7, #16]
 8002188:	1ad3      	subs	r3, r2, r3
 800218a:	f241 3288 	movw	r2, #5000	; 0x1388
 800218e:	4293      	cmp	r3, r2
 8002190:	d901      	bls.n	8002196 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002192:	2303      	movs	r3, #3
 8002194:	e162      	b.n	800245c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002196:	4b89      	ldr	r3, [pc, #548]	; (80023bc <HAL_RCC_OscConfig+0x778>)
 8002198:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800219c:	f003 0302 	and.w	r3, r3, #2
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d0ed      	beq.n	8002180 <HAL_RCC_OscConfig+0x53c>
 80021a4:	e015      	b.n	80021d2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021a6:	f7ff f9ab 	bl	8001500 <HAL_GetTick>
 80021aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80021ac:	e00a      	b.n	80021c4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021ae:	f7ff f9a7 	bl	8001500 <HAL_GetTick>
 80021b2:	4602      	mov	r2, r0
 80021b4:	693b      	ldr	r3, [r7, #16]
 80021b6:	1ad3      	subs	r3, r2, r3
 80021b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80021bc:	4293      	cmp	r3, r2
 80021be:	d901      	bls.n	80021c4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80021c0:	2303      	movs	r3, #3
 80021c2:	e14b      	b.n	800245c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80021c4:	4b7d      	ldr	r3, [pc, #500]	; (80023bc <HAL_RCC_OscConfig+0x778>)
 80021c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021ca:	f003 0302 	and.w	r3, r3, #2
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d1ed      	bne.n	80021ae <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80021d2:	7ffb      	ldrb	r3, [r7, #31]
 80021d4:	2b01      	cmp	r3, #1
 80021d6:	d105      	bne.n	80021e4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021d8:	4b78      	ldr	r3, [pc, #480]	; (80023bc <HAL_RCC_OscConfig+0x778>)
 80021da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021dc:	4a77      	ldr	r2, [pc, #476]	; (80023bc <HAL_RCC_OscConfig+0x778>)
 80021de:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80021e2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f003 0320 	and.w	r3, r3, #32
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d03c      	beq.n	800226a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d01c      	beq.n	8002232 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80021f8:	4b70      	ldr	r3, [pc, #448]	; (80023bc <HAL_RCC_OscConfig+0x778>)
 80021fa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80021fe:	4a6f      	ldr	r2, [pc, #444]	; (80023bc <HAL_RCC_OscConfig+0x778>)
 8002200:	f043 0301 	orr.w	r3, r3, #1
 8002204:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002208:	f7ff f97a 	bl	8001500 <HAL_GetTick>
 800220c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800220e:	e008      	b.n	8002222 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002210:	f7ff f976 	bl	8001500 <HAL_GetTick>
 8002214:	4602      	mov	r2, r0
 8002216:	693b      	ldr	r3, [r7, #16]
 8002218:	1ad3      	subs	r3, r2, r3
 800221a:	2b02      	cmp	r3, #2
 800221c:	d901      	bls.n	8002222 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800221e:	2303      	movs	r3, #3
 8002220:	e11c      	b.n	800245c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002222:	4b66      	ldr	r3, [pc, #408]	; (80023bc <HAL_RCC_OscConfig+0x778>)
 8002224:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002228:	f003 0302 	and.w	r3, r3, #2
 800222c:	2b00      	cmp	r3, #0
 800222e:	d0ef      	beq.n	8002210 <HAL_RCC_OscConfig+0x5cc>
 8002230:	e01b      	b.n	800226a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002232:	4b62      	ldr	r3, [pc, #392]	; (80023bc <HAL_RCC_OscConfig+0x778>)
 8002234:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002238:	4a60      	ldr	r2, [pc, #384]	; (80023bc <HAL_RCC_OscConfig+0x778>)
 800223a:	f023 0301 	bic.w	r3, r3, #1
 800223e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002242:	f7ff f95d 	bl	8001500 <HAL_GetTick>
 8002246:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002248:	e008      	b.n	800225c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800224a:	f7ff f959 	bl	8001500 <HAL_GetTick>
 800224e:	4602      	mov	r2, r0
 8002250:	693b      	ldr	r3, [r7, #16]
 8002252:	1ad3      	subs	r3, r2, r3
 8002254:	2b02      	cmp	r3, #2
 8002256:	d901      	bls.n	800225c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002258:	2303      	movs	r3, #3
 800225a:	e0ff      	b.n	800245c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800225c:	4b57      	ldr	r3, [pc, #348]	; (80023bc <HAL_RCC_OscConfig+0x778>)
 800225e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002262:	f003 0302 	and.w	r3, r3, #2
 8002266:	2b00      	cmp	r3, #0
 8002268:	d1ef      	bne.n	800224a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800226e:	2b00      	cmp	r3, #0
 8002270:	f000 80f3 	beq.w	800245a <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002278:	2b02      	cmp	r3, #2
 800227a:	f040 80c9 	bne.w	8002410 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800227e:	4b4f      	ldr	r3, [pc, #316]	; (80023bc <HAL_RCC_OscConfig+0x778>)
 8002280:	68db      	ldr	r3, [r3, #12]
 8002282:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002284:	697b      	ldr	r3, [r7, #20]
 8002286:	f003 0203 	and.w	r2, r3, #3
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800228e:	429a      	cmp	r2, r3
 8002290:	d12c      	bne.n	80022ec <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002292:	697b      	ldr	r3, [r7, #20]
 8002294:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800229c:	3b01      	subs	r3, #1
 800229e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80022a0:	429a      	cmp	r2, r3
 80022a2:	d123      	bne.n	80022ec <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80022a4:	697b      	ldr	r3, [r7, #20]
 80022a6:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022ae:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80022b0:	429a      	cmp	r2, r3
 80022b2:	d11b      	bne.n	80022ec <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80022b4:	697b      	ldr	r3, [r7, #20]
 80022b6:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022be:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80022c0:	429a      	cmp	r2, r3
 80022c2:	d113      	bne.n	80022ec <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80022c4:	697b      	ldr	r3, [r7, #20]
 80022c6:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022ce:	085b      	lsrs	r3, r3, #1
 80022d0:	3b01      	subs	r3, #1
 80022d2:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80022d4:	429a      	cmp	r2, r3
 80022d6:	d109      	bne.n	80022ec <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80022d8:	697b      	ldr	r3, [r7, #20]
 80022da:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022e2:	085b      	lsrs	r3, r3, #1
 80022e4:	3b01      	subs	r3, #1
 80022e6:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80022e8:	429a      	cmp	r2, r3
 80022ea:	d06b      	beq.n	80023c4 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80022ec:	69bb      	ldr	r3, [r7, #24]
 80022ee:	2b0c      	cmp	r3, #12
 80022f0:	d062      	beq.n	80023b8 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80022f2:	4b32      	ldr	r3, [pc, #200]	; (80023bc <HAL_RCC_OscConfig+0x778>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d001      	beq.n	8002302 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 80022fe:	2301      	movs	r3, #1
 8002300:	e0ac      	b.n	800245c <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002302:	4b2e      	ldr	r3, [pc, #184]	; (80023bc <HAL_RCC_OscConfig+0x778>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	4a2d      	ldr	r2, [pc, #180]	; (80023bc <HAL_RCC_OscConfig+0x778>)
 8002308:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800230c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800230e:	f7ff f8f7 	bl	8001500 <HAL_GetTick>
 8002312:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002314:	e008      	b.n	8002328 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002316:	f7ff f8f3 	bl	8001500 <HAL_GetTick>
 800231a:	4602      	mov	r2, r0
 800231c:	693b      	ldr	r3, [r7, #16]
 800231e:	1ad3      	subs	r3, r2, r3
 8002320:	2b02      	cmp	r3, #2
 8002322:	d901      	bls.n	8002328 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8002324:	2303      	movs	r3, #3
 8002326:	e099      	b.n	800245c <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002328:	4b24      	ldr	r3, [pc, #144]	; (80023bc <HAL_RCC_OscConfig+0x778>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002330:	2b00      	cmp	r3, #0
 8002332:	d1f0      	bne.n	8002316 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002334:	4b21      	ldr	r3, [pc, #132]	; (80023bc <HAL_RCC_OscConfig+0x778>)
 8002336:	68da      	ldr	r2, [r3, #12]
 8002338:	4b21      	ldr	r3, [pc, #132]	; (80023c0 <HAL_RCC_OscConfig+0x77c>)
 800233a:	4013      	ands	r3, r2
 800233c:	687a      	ldr	r2, [r7, #4]
 800233e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002340:	687a      	ldr	r2, [r7, #4]
 8002342:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002344:	3a01      	subs	r2, #1
 8002346:	0112      	lsls	r2, r2, #4
 8002348:	4311      	orrs	r1, r2
 800234a:	687a      	ldr	r2, [r7, #4]
 800234c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800234e:	0212      	lsls	r2, r2, #8
 8002350:	4311      	orrs	r1, r2
 8002352:	687a      	ldr	r2, [r7, #4]
 8002354:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002356:	0852      	lsrs	r2, r2, #1
 8002358:	3a01      	subs	r2, #1
 800235a:	0552      	lsls	r2, r2, #21
 800235c:	4311      	orrs	r1, r2
 800235e:	687a      	ldr	r2, [r7, #4]
 8002360:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002362:	0852      	lsrs	r2, r2, #1
 8002364:	3a01      	subs	r2, #1
 8002366:	0652      	lsls	r2, r2, #25
 8002368:	4311      	orrs	r1, r2
 800236a:	687a      	ldr	r2, [r7, #4]
 800236c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800236e:	06d2      	lsls	r2, r2, #27
 8002370:	430a      	orrs	r2, r1
 8002372:	4912      	ldr	r1, [pc, #72]	; (80023bc <HAL_RCC_OscConfig+0x778>)
 8002374:	4313      	orrs	r3, r2
 8002376:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002378:	4b10      	ldr	r3, [pc, #64]	; (80023bc <HAL_RCC_OscConfig+0x778>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	4a0f      	ldr	r2, [pc, #60]	; (80023bc <HAL_RCC_OscConfig+0x778>)
 800237e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002382:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002384:	4b0d      	ldr	r3, [pc, #52]	; (80023bc <HAL_RCC_OscConfig+0x778>)
 8002386:	68db      	ldr	r3, [r3, #12]
 8002388:	4a0c      	ldr	r2, [pc, #48]	; (80023bc <HAL_RCC_OscConfig+0x778>)
 800238a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800238e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002390:	f7ff f8b6 	bl	8001500 <HAL_GetTick>
 8002394:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002396:	e008      	b.n	80023aa <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002398:	f7ff f8b2 	bl	8001500 <HAL_GetTick>
 800239c:	4602      	mov	r2, r0
 800239e:	693b      	ldr	r3, [r7, #16]
 80023a0:	1ad3      	subs	r3, r2, r3
 80023a2:	2b02      	cmp	r3, #2
 80023a4:	d901      	bls.n	80023aa <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 80023a6:	2303      	movs	r3, #3
 80023a8:	e058      	b.n	800245c <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80023aa:	4b04      	ldr	r3, [pc, #16]	; (80023bc <HAL_RCC_OscConfig+0x778>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d0f0      	beq.n	8002398 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80023b6:	e050      	b.n	800245a <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80023b8:	2301      	movs	r3, #1
 80023ba:	e04f      	b.n	800245c <HAL_RCC_OscConfig+0x818>
 80023bc:	40021000 	.word	0x40021000
 80023c0:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80023c4:	4b27      	ldr	r3, [pc, #156]	; (8002464 <HAL_RCC_OscConfig+0x820>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d144      	bne.n	800245a <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80023d0:	4b24      	ldr	r3, [pc, #144]	; (8002464 <HAL_RCC_OscConfig+0x820>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	4a23      	ldr	r2, [pc, #140]	; (8002464 <HAL_RCC_OscConfig+0x820>)
 80023d6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80023da:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80023dc:	4b21      	ldr	r3, [pc, #132]	; (8002464 <HAL_RCC_OscConfig+0x820>)
 80023de:	68db      	ldr	r3, [r3, #12]
 80023e0:	4a20      	ldr	r2, [pc, #128]	; (8002464 <HAL_RCC_OscConfig+0x820>)
 80023e2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80023e6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80023e8:	f7ff f88a 	bl	8001500 <HAL_GetTick>
 80023ec:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80023ee:	e008      	b.n	8002402 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023f0:	f7ff f886 	bl	8001500 <HAL_GetTick>
 80023f4:	4602      	mov	r2, r0
 80023f6:	693b      	ldr	r3, [r7, #16]
 80023f8:	1ad3      	subs	r3, r2, r3
 80023fa:	2b02      	cmp	r3, #2
 80023fc:	d901      	bls.n	8002402 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 80023fe:	2303      	movs	r3, #3
 8002400:	e02c      	b.n	800245c <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002402:	4b18      	ldr	r3, [pc, #96]	; (8002464 <HAL_RCC_OscConfig+0x820>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800240a:	2b00      	cmp	r3, #0
 800240c:	d0f0      	beq.n	80023f0 <HAL_RCC_OscConfig+0x7ac>
 800240e:	e024      	b.n	800245a <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002410:	69bb      	ldr	r3, [r7, #24]
 8002412:	2b0c      	cmp	r3, #12
 8002414:	d01f      	beq.n	8002456 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002416:	4b13      	ldr	r3, [pc, #76]	; (8002464 <HAL_RCC_OscConfig+0x820>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	4a12      	ldr	r2, [pc, #72]	; (8002464 <HAL_RCC_OscConfig+0x820>)
 800241c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002420:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002422:	f7ff f86d 	bl	8001500 <HAL_GetTick>
 8002426:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002428:	e008      	b.n	800243c <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800242a:	f7ff f869 	bl	8001500 <HAL_GetTick>
 800242e:	4602      	mov	r2, r0
 8002430:	693b      	ldr	r3, [r7, #16]
 8002432:	1ad3      	subs	r3, r2, r3
 8002434:	2b02      	cmp	r3, #2
 8002436:	d901      	bls.n	800243c <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8002438:	2303      	movs	r3, #3
 800243a:	e00f      	b.n	800245c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800243c:	4b09      	ldr	r3, [pc, #36]	; (8002464 <HAL_RCC_OscConfig+0x820>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002444:	2b00      	cmp	r3, #0
 8002446:	d1f0      	bne.n	800242a <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8002448:	4b06      	ldr	r3, [pc, #24]	; (8002464 <HAL_RCC_OscConfig+0x820>)
 800244a:	68da      	ldr	r2, [r3, #12]
 800244c:	4905      	ldr	r1, [pc, #20]	; (8002464 <HAL_RCC_OscConfig+0x820>)
 800244e:	4b06      	ldr	r3, [pc, #24]	; (8002468 <HAL_RCC_OscConfig+0x824>)
 8002450:	4013      	ands	r3, r2
 8002452:	60cb      	str	r3, [r1, #12]
 8002454:	e001      	b.n	800245a <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002456:	2301      	movs	r3, #1
 8002458:	e000      	b.n	800245c <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 800245a:	2300      	movs	r3, #0
}
 800245c:	4618      	mov	r0, r3
 800245e:	3720      	adds	r7, #32
 8002460:	46bd      	mov	sp, r7
 8002462:	bd80      	pop	{r7, pc}
 8002464:	40021000 	.word	0x40021000
 8002468:	feeefffc 	.word	0xfeeefffc

0800246c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b084      	sub	sp, #16
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
 8002474:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	2b00      	cmp	r3, #0
 800247a:	d101      	bne.n	8002480 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800247c:	2301      	movs	r3, #1
 800247e:	e0e7      	b.n	8002650 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002480:	4b75      	ldr	r3, [pc, #468]	; (8002658 <HAL_RCC_ClockConfig+0x1ec>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f003 0307 	and.w	r3, r3, #7
 8002488:	683a      	ldr	r2, [r7, #0]
 800248a:	429a      	cmp	r2, r3
 800248c:	d910      	bls.n	80024b0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800248e:	4b72      	ldr	r3, [pc, #456]	; (8002658 <HAL_RCC_ClockConfig+0x1ec>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f023 0207 	bic.w	r2, r3, #7
 8002496:	4970      	ldr	r1, [pc, #448]	; (8002658 <HAL_RCC_ClockConfig+0x1ec>)
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	4313      	orrs	r3, r2
 800249c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800249e:	4b6e      	ldr	r3, [pc, #440]	; (8002658 <HAL_RCC_ClockConfig+0x1ec>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f003 0307 	and.w	r3, r3, #7
 80024a6:	683a      	ldr	r2, [r7, #0]
 80024a8:	429a      	cmp	r2, r3
 80024aa:	d001      	beq.n	80024b0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80024ac:	2301      	movs	r3, #1
 80024ae:	e0cf      	b.n	8002650 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f003 0302 	and.w	r3, r3, #2
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d010      	beq.n	80024de <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	689a      	ldr	r2, [r3, #8]
 80024c0:	4b66      	ldr	r3, [pc, #408]	; (800265c <HAL_RCC_ClockConfig+0x1f0>)
 80024c2:	689b      	ldr	r3, [r3, #8]
 80024c4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80024c8:	429a      	cmp	r2, r3
 80024ca:	d908      	bls.n	80024de <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024cc:	4b63      	ldr	r3, [pc, #396]	; (800265c <HAL_RCC_ClockConfig+0x1f0>)
 80024ce:	689b      	ldr	r3, [r3, #8]
 80024d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	689b      	ldr	r3, [r3, #8]
 80024d8:	4960      	ldr	r1, [pc, #384]	; (800265c <HAL_RCC_ClockConfig+0x1f0>)
 80024da:	4313      	orrs	r3, r2
 80024dc:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f003 0301 	and.w	r3, r3, #1
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d04c      	beq.n	8002584 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	685b      	ldr	r3, [r3, #4]
 80024ee:	2b03      	cmp	r3, #3
 80024f0:	d107      	bne.n	8002502 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80024f2:	4b5a      	ldr	r3, [pc, #360]	; (800265c <HAL_RCC_ClockConfig+0x1f0>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d121      	bne.n	8002542 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80024fe:	2301      	movs	r3, #1
 8002500:	e0a6      	b.n	8002650 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	685b      	ldr	r3, [r3, #4]
 8002506:	2b02      	cmp	r3, #2
 8002508:	d107      	bne.n	800251a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800250a:	4b54      	ldr	r3, [pc, #336]	; (800265c <HAL_RCC_ClockConfig+0x1f0>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002512:	2b00      	cmp	r3, #0
 8002514:	d115      	bne.n	8002542 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002516:	2301      	movs	r3, #1
 8002518:	e09a      	b.n	8002650 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	685b      	ldr	r3, [r3, #4]
 800251e:	2b00      	cmp	r3, #0
 8002520:	d107      	bne.n	8002532 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002522:	4b4e      	ldr	r3, [pc, #312]	; (800265c <HAL_RCC_ClockConfig+0x1f0>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f003 0302 	and.w	r3, r3, #2
 800252a:	2b00      	cmp	r3, #0
 800252c:	d109      	bne.n	8002542 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800252e:	2301      	movs	r3, #1
 8002530:	e08e      	b.n	8002650 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002532:	4b4a      	ldr	r3, [pc, #296]	; (800265c <HAL_RCC_ClockConfig+0x1f0>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800253a:	2b00      	cmp	r3, #0
 800253c:	d101      	bne.n	8002542 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800253e:	2301      	movs	r3, #1
 8002540:	e086      	b.n	8002650 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002542:	4b46      	ldr	r3, [pc, #280]	; (800265c <HAL_RCC_ClockConfig+0x1f0>)
 8002544:	689b      	ldr	r3, [r3, #8]
 8002546:	f023 0203 	bic.w	r2, r3, #3
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	685b      	ldr	r3, [r3, #4]
 800254e:	4943      	ldr	r1, [pc, #268]	; (800265c <HAL_RCC_ClockConfig+0x1f0>)
 8002550:	4313      	orrs	r3, r2
 8002552:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002554:	f7fe ffd4 	bl	8001500 <HAL_GetTick>
 8002558:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800255a:	e00a      	b.n	8002572 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800255c:	f7fe ffd0 	bl	8001500 <HAL_GetTick>
 8002560:	4602      	mov	r2, r0
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	1ad3      	subs	r3, r2, r3
 8002566:	f241 3288 	movw	r2, #5000	; 0x1388
 800256a:	4293      	cmp	r3, r2
 800256c:	d901      	bls.n	8002572 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800256e:	2303      	movs	r3, #3
 8002570:	e06e      	b.n	8002650 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002572:	4b3a      	ldr	r3, [pc, #232]	; (800265c <HAL_RCC_ClockConfig+0x1f0>)
 8002574:	689b      	ldr	r3, [r3, #8]
 8002576:	f003 020c 	and.w	r2, r3, #12
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	685b      	ldr	r3, [r3, #4]
 800257e:	009b      	lsls	r3, r3, #2
 8002580:	429a      	cmp	r2, r3
 8002582:	d1eb      	bne.n	800255c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f003 0302 	and.w	r3, r3, #2
 800258c:	2b00      	cmp	r3, #0
 800258e:	d010      	beq.n	80025b2 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	689a      	ldr	r2, [r3, #8]
 8002594:	4b31      	ldr	r3, [pc, #196]	; (800265c <HAL_RCC_ClockConfig+0x1f0>)
 8002596:	689b      	ldr	r3, [r3, #8]
 8002598:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800259c:	429a      	cmp	r2, r3
 800259e:	d208      	bcs.n	80025b2 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80025a0:	4b2e      	ldr	r3, [pc, #184]	; (800265c <HAL_RCC_ClockConfig+0x1f0>)
 80025a2:	689b      	ldr	r3, [r3, #8]
 80025a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	689b      	ldr	r3, [r3, #8]
 80025ac:	492b      	ldr	r1, [pc, #172]	; (800265c <HAL_RCC_ClockConfig+0x1f0>)
 80025ae:	4313      	orrs	r3, r2
 80025b0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80025b2:	4b29      	ldr	r3, [pc, #164]	; (8002658 <HAL_RCC_ClockConfig+0x1ec>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f003 0307 	and.w	r3, r3, #7
 80025ba:	683a      	ldr	r2, [r7, #0]
 80025bc:	429a      	cmp	r2, r3
 80025be:	d210      	bcs.n	80025e2 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025c0:	4b25      	ldr	r3, [pc, #148]	; (8002658 <HAL_RCC_ClockConfig+0x1ec>)
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f023 0207 	bic.w	r2, r3, #7
 80025c8:	4923      	ldr	r1, [pc, #140]	; (8002658 <HAL_RCC_ClockConfig+0x1ec>)
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	4313      	orrs	r3, r2
 80025ce:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80025d0:	4b21      	ldr	r3, [pc, #132]	; (8002658 <HAL_RCC_ClockConfig+0x1ec>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f003 0307 	and.w	r3, r3, #7
 80025d8:	683a      	ldr	r2, [r7, #0]
 80025da:	429a      	cmp	r2, r3
 80025dc:	d001      	beq.n	80025e2 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80025de:	2301      	movs	r3, #1
 80025e0:	e036      	b.n	8002650 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f003 0304 	and.w	r3, r3, #4
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d008      	beq.n	8002600 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80025ee:	4b1b      	ldr	r3, [pc, #108]	; (800265c <HAL_RCC_ClockConfig+0x1f0>)
 80025f0:	689b      	ldr	r3, [r3, #8]
 80025f2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	68db      	ldr	r3, [r3, #12]
 80025fa:	4918      	ldr	r1, [pc, #96]	; (800265c <HAL_RCC_ClockConfig+0x1f0>)
 80025fc:	4313      	orrs	r3, r2
 80025fe:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f003 0308 	and.w	r3, r3, #8
 8002608:	2b00      	cmp	r3, #0
 800260a:	d009      	beq.n	8002620 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800260c:	4b13      	ldr	r3, [pc, #76]	; (800265c <HAL_RCC_ClockConfig+0x1f0>)
 800260e:	689b      	ldr	r3, [r3, #8]
 8002610:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	691b      	ldr	r3, [r3, #16]
 8002618:	00db      	lsls	r3, r3, #3
 800261a:	4910      	ldr	r1, [pc, #64]	; (800265c <HAL_RCC_ClockConfig+0x1f0>)
 800261c:	4313      	orrs	r3, r2
 800261e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002620:	f000 f824 	bl	800266c <HAL_RCC_GetSysClockFreq>
 8002624:	4602      	mov	r2, r0
 8002626:	4b0d      	ldr	r3, [pc, #52]	; (800265c <HAL_RCC_ClockConfig+0x1f0>)
 8002628:	689b      	ldr	r3, [r3, #8]
 800262a:	091b      	lsrs	r3, r3, #4
 800262c:	f003 030f 	and.w	r3, r3, #15
 8002630:	490b      	ldr	r1, [pc, #44]	; (8002660 <HAL_RCC_ClockConfig+0x1f4>)
 8002632:	5ccb      	ldrb	r3, [r1, r3]
 8002634:	f003 031f 	and.w	r3, r3, #31
 8002638:	fa22 f303 	lsr.w	r3, r2, r3
 800263c:	4a09      	ldr	r2, [pc, #36]	; (8002664 <HAL_RCC_ClockConfig+0x1f8>)
 800263e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002640:	4b09      	ldr	r3, [pc, #36]	; (8002668 <HAL_RCC_ClockConfig+0x1fc>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	4618      	mov	r0, r3
 8002646:	f7fe fe2d 	bl	80012a4 <HAL_InitTick>
 800264a:	4603      	mov	r3, r0
 800264c:	72fb      	strb	r3, [r7, #11]

  return status;
 800264e:	7afb      	ldrb	r3, [r7, #11]
}
 8002650:	4618      	mov	r0, r3
 8002652:	3710      	adds	r7, #16
 8002654:	46bd      	mov	sp, r7
 8002656:	bd80      	pop	{r7, pc}
 8002658:	40022000 	.word	0x40022000
 800265c:	40021000 	.word	0x40021000
 8002660:	0800888c 	.word	0x0800888c
 8002664:	20000158 	.word	0x20000158
 8002668:	2000015c 	.word	0x2000015c

0800266c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800266c:	b480      	push	{r7}
 800266e:	b089      	sub	sp, #36	; 0x24
 8002670:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002672:	2300      	movs	r3, #0
 8002674:	61fb      	str	r3, [r7, #28]
 8002676:	2300      	movs	r3, #0
 8002678:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800267a:	4b3e      	ldr	r3, [pc, #248]	; (8002774 <HAL_RCC_GetSysClockFreq+0x108>)
 800267c:	689b      	ldr	r3, [r3, #8]
 800267e:	f003 030c 	and.w	r3, r3, #12
 8002682:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002684:	4b3b      	ldr	r3, [pc, #236]	; (8002774 <HAL_RCC_GetSysClockFreq+0x108>)
 8002686:	68db      	ldr	r3, [r3, #12]
 8002688:	f003 0303 	and.w	r3, r3, #3
 800268c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800268e:	693b      	ldr	r3, [r7, #16]
 8002690:	2b00      	cmp	r3, #0
 8002692:	d005      	beq.n	80026a0 <HAL_RCC_GetSysClockFreq+0x34>
 8002694:	693b      	ldr	r3, [r7, #16]
 8002696:	2b0c      	cmp	r3, #12
 8002698:	d121      	bne.n	80026de <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	2b01      	cmp	r3, #1
 800269e:	d11e      	bne.n	80026de <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80026a0:	4b34      	ldr	r3, [pc, #208]	; (8002774 <HAL_RCC_GetSysClockFreq+0x108>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f003 0308 	and.w	r3, r3, #8
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d107      	bne.n	80026bc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80026ac:	4b31      	ldr	r3, [pc, #196]	; (8002774 <HAL_RCC_GetSysClockFreq+0x108>)
 80026ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80026b2:	0a1b      	lsrs	r3, r3, #8
 80026b4:	f003 030f 	and.w	r3, r3, #15
 80026b8:	61fb      	str	r3, [r7, #28]
 80026ba:	e005      	b.n	80026c8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80026bc:	4b2d      	ldr	r3, [pc, #180]	; (8002774 <HAL_RCC_GetSysClockFreq+0x108>)
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	091b      	lsrs	r3, r3, #4
 80026c2:	f003 030f 	and.w	r3, r3, #15
 80026c6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80026c8:	4a2b      	ldr	r2, [pc, #172]	; (8002778 <HAL_RCC_GetSysClockFreq+0x10c>)
 80026ca:	69fb      	ldr	r3, [r7, #28]
 80026cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026d0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80026d2:	693b      	ldr	r3, [r7, #16]
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d10d      	bne.n	80026f4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80026d8:	69fb      	ldr	r3, [r7, #28]
 80026da:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80026dc:	e00a      	b.n	80026f4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80026de:	693b      	ldr	r3, [r7, #16]
 80026e0:	2b04      	cmp	r3, #4
 80026e2:	d102      	bne.n	80026ea <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80026e4:	4b25      	ldr	r3, [pc, #148]	; (800277c <HAL_RCC_GetSysClockFreq+0x110>)
 80026e6:	61bb      	str	r3, [r7, #24]
 80026e8:	e004      	b.n	80026f4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80026ea:	693b      	ldr	r3, [r7, #16]
 80026ec:	2b08      	cmp	r3, #8
 80026ee:	d101      	bne.n	80026f4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80026f0:	4b22      	ldr	r3, [pc, #136]	; (800277c <HAL_RCC_GetSysClockFreq+0x110>)
 80026f2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80026f4:	693b      	ldr	r3, [r7, #16]
 80026f6:	2b0c      	cmp	r3, #12
 80026f8:	d134      	bne.n	8002764 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80026fa:	4b1e      	ldr	r3, [pc, #120]	; (8002774 <HAL_RCC_GetSysClockFreq+0x108>)
 80026fc:	68db      	ldr	r3, [r3, #12]
 80026fe:	f003 0303 	and.w	r3, r3, #3
 8002702:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002704:	68bb      	ldr	r3, [r7, #8]
 8002706:	2b02      	cmp	r3, #2
 8002708:	d003      	beq.n	8002712 <HAL_RCC_GetSysClockFreq+0xa6>
 800270a:	68bb      	ldr	r3, [r7, #8]
 800270c:	2b03      	cmp	r3, #3
 800270e:	d003      	beq.n	8002718 <HAL_RCC_GetSysClockFreq+0xac>
 8002710:	e005      	b.n	800271e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002712:	4b1a      	ldr	r3, [pc, #104]	; (800277c <HAL_RCC_GetSysClockFreq+0x110>)
 8002714:	617b      	str	r3, [r7, #20]
      break;
 8002716:	e005      	b.n	8002724 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002718:	4b18      	ldr	r3, [pc, #96]	; (800277c <HAL_RCC_GetSysClockFreq+0x110>)
 800271a:	617b      	str	r3, [r7, #20]
      break;
 800271c:	e002      	b.n	8002724 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800271e:	69fb      	ldr	r3, [r7, #28]
 8002720:	617b      	str	r3, [r7, #20]
      break;
 8002722:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002724:	4b13      	ldr	r3, [pc, #76]	; (8002774 <HAL_RCC_GetSysClockFreq+0x108>)
 8002726:	68db      	ldr	r3, [r3, #12]
 8002728:	091b      	lsrs	r3, r3, #4
 800272a:	f003 0307 	and.w	r3, r3, #7
 800272e:	3301      	adds	r3, #1
 8002730:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002732:	4b10      	ldr	r3, [pc, #64]	; (8002774 <HAL_RCC_GetSysClockFreq+0x108>)
 8002734:	68db      	ldr	r3, [r3, #12]
 8002736:	0a1b      	lsrs	r3, r3, #8
 8002738:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800273c:	697a      	ldr	r2, [r7, #20]
 800273e:	fb03 f202 	mul.w	r2, r3, r2
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	fbb2 f3f3 	udiv	r3, r2, r3
 8002748:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800274a:	4b0a      	ldr	r3, [pc, #40]	; (8002774 <HAL_RCC_GetSysClockFreq+0x108>)
 800274c:	68db      	ldr	r3, [r3, #12]
 800274e:	0e5b      	lsrs	r3, r3, #25
 8002750:	f003 0303 	and.w	r3, r3, #3
 8002754:	3301      	adds	r3, #1
 8002756:	005b      	lsls	r3, r3, #1
 8002758:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800275a:	697a      	ldr	r2, [r7, #20]
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002762:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002764:	69bb      	ldr	r3, [r7, #24]
}
 8002766:	4618      	mov	r0, r3
 8002768:	3724      	adds	r7, #36	; 0x24
 800276a:	46bd      	mov	sp, r7
 800276c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002770:	4770      	bx	lr
 8002772:	bf00      	nop
 8002774:	40021000 	.word	0x40021000
 8002778:	080088a4 	.word	0x080088a4
 800277c:	00f42400 	.word	0x00f42400

08002780 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002780:	b480      	push	{r7}
 8002782:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002784:	4b03      	ldr	r3, [pc, #12]	; (8002794 <HAL_RCC_GetHCLKFreq+0x14>)
 8002786:	681b      	ldr	r3, [r3, #0]
}
 8002788:	4618      	mov	r0, r3
 800278a:	46bd      	mov	sp, r7
 800278c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002790:	4770      	bx	lr
 8002792:	bf00      	nop
 8002794:	20000158 	.word	0x20000158

08002798 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800279c:	f7ff fff0 	bl	8002780 <HAL_RCC_GetHCLKFreq>
 80027a0:	4602      	mov	r2, r0
 80027a2:	4b06      	ldr	r3, [pc, #24]	; (80027bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80027a4:	689b      	ldr	r3, [r3, #8]
 80027a6:	0a1b      	lsrs	r3, r3, #8
 80027a8:	f003 0307 	and.w	r3, r3, #7
 80027ac:	4904      	ldr	r1, [pc, #16]	; (80027c0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80027ae:	5ccb      	ldrb	r3, [r1, r3]
 80027b0:	f003 031f 	and.w	r3, r3, #31
 80027b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80027b8:	4618      	mov	r0, r3
 80027ba:	bd80      	pop	{r7, pc}
 80027bc:	40021000 	.word	0x40021000
 80027c0:	0800889c 	.word	0x0800889c

080027c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80027c8:	f7ff ffda 	bl	8002780 <HAL_RCC_GetHCLKFreq>
 80027cc:	4602      	mov	r2, r0
 80027ce:	4b06      	ldr	r3, [pc, #24]	; (80027e8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80027d0:	689b      	ldr	r3, [r3, #8]
 80027d2:	0adb      	lsrs	r3, r3, #11
 80027d4:	f003 0307 	and.w	r3, r3, #7
 80027d8:	4904      	ldr	r1, [pc, #16]	; (80027ec <HAL_RCC_GetPCLK2Freq+0x28>)
 80027da:	5ccb      	ldrb	r3, [r1, r3]
 80027dc:	f003 031f 	and.w	r3, r3, #31
 80027e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80027e4:	4618      	mov	r0, r3
 80027e6:	bd80      	pop	{r7, pc}
 80027e8:	40021000 	.word	0x40021000
 80027ec:	0800889c 	.word	0x0800889c

080027f0 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80027f0:	b480      	push	{r7}
 80027f2:	b083      	sub	sp, #12
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
 80027f8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	220f      	movs	r2, #15
 80027fe:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8002800:	4b12      	ldr	r3, [pc, #72]	; (800284c <HAL_RCC_GetClockConfig+0x5c>)
 8002802:	689b      	ldr	r3, [r3, #8]
 8002804:	f003 0203 	and.w	r2, r3, #3
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 800280c:	4b0f      	ldr	r3, [pc, #60]	; (800284c <HAL_RCC_GetClockConfig+0x5c>)
 800280e:	689b      	ldr	r3, [r3, #8]
 8002810:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8002818:	4b0c      	ldr	r3, [pc, #48]	; (800284c <HAL_RCC_GetClockConfig+0x5c>)
 800281a:	689b      	ldr	r3, [r3, #8]
 800281c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8002824:	4b09      	ldr	r3, [pc, #36]	; (800284c <HAL_RCC_GetClockConfig+0x5c>)
 8002826:	689b      	ldr	r3, [r3, #8]
 8002828:	08db      	lsrs	r3, r3, #3
 800282a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8002832:	4b07      	ldr	r3, [pc, #28]	; (8002850 <HAL_RCC_GetClockConfig+0x60>)
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f003 0207 	and.w	r2, r3, #7
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	601a      	str	r2, [r3, #0]
}
 800283e:	bf00      	nop
 8002840:	370c      	adds	r7, #12
 8002842:	46bd      	mov	sp, r7
 8002844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002848:	4770      	bx	lr
 800284a:	bf00      	nop
 800284c:	40021000 	.word	0x40021000
 8002850:	40022000 	.word	0x40022000

08002854 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	b086      	sub	sp, #24
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800285c:	2300      	movs	r3, #0
 800285e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002860:	4b2a      	ldr	r3, [pc, #168]	; (800290c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002862:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002864:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002868:	2b00      	cmp	r3, #0
 800286a:	d003      	beq.n	8002874 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800286c:	f7ff f986 	bl	8001b7c <HAL_PWREx_GetVoltageRange>
 8002870:	6178      	str	r0, [r7, #20]
 8002872:	e014      	b.n	800289e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002874:	4b25      	ldr	r3, [pc, #148]	; (800290c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002876:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002878:	4a24      	ldr	r2, [pc, #144]	; (800290c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800287a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800287e:	6593      	str	r3, [r2, #88]	; 0x58
 8002880:	4b22      	ldr	r3, [pc, #136]	; (800290c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002882:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002884:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002888:	60fb      	str	r3, [r7, #12]
 800288a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800288c:	f7ff f976 	bl	8001b7c <HAL_PWREx_GetVoltageRange>
 8002890:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002892:	4b1e      	ldr	r3, [pc, #120]	; (800290c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002894:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002896:	4a1d      	ldr	r2, [pc, #116]	; (800290c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002898:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800289c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800289e:	697b      	ldr	r3, [r7, #20]
 80028a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80028a4:	d10b      	bne.n	80028be <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	2b80      	cmp	r3, #128	; 0x80
 80028aa:	d919      	bls.n	80028e0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2ba0      	cmp	r3, #160	; 0xa0
 80028b0:	d902      	bls.n	80028b8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80028b2:	2302      	movs	r3, #2
 80028b4:	613b      	str	r3, [r7, #16]
 80028b6:	e013      	b.n	80028e0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80028b8:	2301      	movs	r3, #1
 80028ba:	613b      	str	r3, [r7, #16]
 80028bc:	e010      	b.n	80028e0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	2b80      	cmp	r3, #128	; 0x80
 80028c2:	d902      	bls.n	80028ca <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80028c4:	2303      	movs	r3, #3
 80028c6:	613b      	str	r3, [r7, #16]
 80028c8:	e00a      	b.n	80028e0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	2b80      	cmp	r3, #128	; 0x80
 80028ce:	d102      	bne.n	80028d6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80028d0:	2302      	movs	r3, #2
 80028d2:	613b      	str	r3, [r7, #16]
 80028d4:	e004      	b.n	80028e0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	2b70      	cmp	r3, #112	; 0x70
 80028da:	d101      	bne.n	80028e0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80028dc:	2301      	movs	r3, #1
 80028de:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80028e0:	4b0b      	ldr	r3, [pc, #44]	; (8002910 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f023 0207 	bic.w	r2, r3, #7
 80028e8:	4909      	ldr	r1, [pc, #36]	; (8002910 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80028ea:	693b      	ldr	r3, [r7, #16]
 80028ec:	4313      	orrs	r3, r2
 80028ee:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80028f0:	4b07      	ldr	r3, [pc, #28]	; (8002910 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f003 0307 	and.w	r3, r3, #7
 80028f8:	693a      	ldr	r2, [r7, #16]
 80028fa:	429a      	cmp	r2, r3
 80028fc:	d001      	beq.n	8002902 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80028fe:	2301      	movs	r3, #1
 8002900:	e000      	b.n	8002904 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002902:	2300      	movs	r3, #0
}
 8002904:	4618      	mov	r0, r3
 8002906:	3718      	adds	r7, #24
 8002908:	46bd      	mov	sp, r7
 800290a:	bd80      	pop	{r7, pc}
 800290c:	40021000 	.word	0x40021000
 8002910:	40022000 	.word	0x40022000

08002914 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b086      	sub	sp, #24
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800291c:	2300      	movs	r3, #0
 800291e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002920:	2300      	movs	r3, #0
 8002922:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800292c:	2b00      	cmp	r3, #0
 800292e:	d031      	beq.n	8002994 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002934:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002938:	d01a      	beq.n	8002970 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 800293a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800293e:	d814      	bhi.n	800296a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8002940:	2b00      	cmp	r3, #0
 8002942:	d009      	beq.n	8002958 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002944:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002948:	d10f      	bne.n	800296a <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 800294a:	4b5d      	ldr	r3, [pc, #372]	; (8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800294c:	68db      	ldr	r3, [r3, #12]
 800294e:	4a5c      	ldr	r2, [pc, #368]	; (8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002950:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002954:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002956:	e00c      	b.n	8002972 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	3304      	adds	r3, #4
 800295c:	2100      	movs	r1, #0
 800295e:	4618      	mov	r0, r3
 8002960:	f000 fa22 	bl	8002da8 <RCCEx_PLLSAI1_Config>
 8002964:	4603      	mov	r3, r0
 8002966:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002968:	e003      	b.n	8002972 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800296a:	2301      	movs	r3, #1
 800296c:	74fb      	strb	r3, [r7, #19]
      break;
 800296e:	e000      	b.n	8002972 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8002970:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002972:	7cfb      	ldrb	r3, [r7, #19]
 8002974:	2b00      	cmp	r3, #0
 8002976:	d10b      	bne.n	8002990 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002978:	4b51      	ldr	r3, [pc, #324]	; (8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800297a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800297e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002986:	494e      	ldr	r1, [pc, #312]	; (8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002988:	4313      	orrs	r3, r2
 800298a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800298e:	e001      	b.n	8002994 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002990:	7cfb      	ldrb	r3, [r7, #19]
 8002992:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800299c:	2b00      	cmp	r3, #0
 800299e:	f000 809e 	beq.w	8002ade <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 80029a2:	2300      	movs	r3, #0
 80029a4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80029a6:	4b46      	ldr	r3, [pc, #280]	; (8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80029a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d101      	bne.n	80029b6 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 80029b2:	2301      	movs	r3, #1
 80029b4:	e000      	b.n	80029b8 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 80029b6:	2300      	movs	r3, #0
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d00d      	beq.n	80029d8 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80029bc:	4b40      	ldr	r3, [pc, #256]	; (8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80029be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029c0:	4a3f      	ldr	r2, [pc, #252]	; (8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80029c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029c6:	6593      	str	r3, [r2, #88]	; 0x58
 80029c8:	4b3d      	ldr	r3, [pc, #244]	; (8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80029ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029d0:	60bb      	str	r3, [r7, #8]
 80029d2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80029d4:	2301      	movs	r3, #1
 80029d6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80029d8:	4b3a      	ldr	r3, [pc, #232]	; (8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	4a39      	ldr	r2, [pc, #228]	; (8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80029de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029e2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80029e4:	f7fe fd8c 	bl	8001500 <HAL_GetTick>
 80029e8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80029ea:	e009      	b.n	8002a00 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029ec:	f7fe fd88 	bl	8001500 <HAL_GetTick>
 80029f0:	4602      	mov	r2, r0
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	1ad3      	subs	r3, r2, r3
 80029f6:	2b02      	cmp	r3, #2
 80029f8:	d902      	bls.n	8002a00 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 80029fa:	2303      	movs	r3, #3
 80029fc:	74fb      	strb	r3, [r7, #19]
        break;
 80029fe:	e005      	b.n	8002a0c <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002a00:	4b30      	ldr	r3, [pc, #192]	; (8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d0ef      	beq.n	80029ec <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8002a0c:	7cfb      	ldrb	r3, [r7, #19]
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d15a      	bne.n	8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002a12:	4b2b      	ldr	r3, [pc, #172]	; (8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002a14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a18:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a1c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002a1e:	697b      	ldr	r3, [r7, #20]
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d01e      	beq.n	8002a62 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a28:	697a      	ldr	r2, [r7, #20]
 8002a2a:	429a      	cmp	r2, r3
 8002a2c:	d019      	beq.n	8002a62 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002a2e:	4b24      	ldr	r3, [pc, #144]	; (8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002a30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a34:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a38:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002a3a:	4b21      	ldr	r3, [pc, #132]	; (8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002a3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a40:	4a1f      	ldr	r2, [pc, #124]	; (8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002a42:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a46:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002a4a:	4b1d      	ldr	r3, [pc, #116]	; (8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002a4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a50:	4a1b      	ldr	r2, [pc, #108]	; (8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002a52:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a56:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002a5a:	4a19      	ldr	r2, [pc, #100]	; (8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002a5c:	697b      	ldr	r3, [r7, #20]
 8002a5e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002a62:	697b      	ldr	r3, [r7, #20]
 8002a64:	f003 0301 	and.w	r3, r3, #1
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d016      	beq.n	8002a9a <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a6c:	f7fe fd48 	bl	8001500 <HAL_GetTick>
 8002a70:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a72:	e00b      	b.n	8002a8c <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a74:	f7fe fd44 	bl	8001500 <HAL_GetTick>
 8002a78:	4602      	mov	r2, r0
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	1ad3      	subs	r3, r2, r3
 8002a7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d902      	bls.n	8002a8c <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8002a86:	2303      	movs	r3, #3
 8002a88:	74fb      	strb	r3, [r7, #19]
            break;
 8002a8a:	e006      	b.n	8002a9a <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a8c:	4b0c      	ldr	r3, [pc, #48]	; (8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002a8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a92:	f003 0302 	and.w	r3, r3, #2
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d0ec      	beq.n	8002a74 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8002a9a:	7cfb      	ldrb	r3, [r7, #19]
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d10b      	bne.n	8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002aa0:	4b07      	ldr	r3, [pc, #28]	; (8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002aa2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002aa6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002aae:	4904      	ldr	r1, [pc, #16]	; (8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002ab0:	4313      	orrs	r3, r2
 8002ab2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002ab6:	e009      	b.n	8002acc <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002ab8:	7cfb      	ldrb	r3, [r7, #19]
 8002aba:	74bb      	strb	r3, [r7, #18]
 8002abc:	e006      	b.n	8002acc <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8002abe:	bf00      	nop
 8002ac0:	40021000 	.word	0x40021000
 8002ac4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ac8:	7cfb      	ldrb	r3, [r7, #19]
 8002aca:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002acc:	7c7b      	ldrb	r3, [r7, #17]
 8002ace:	2b01      	cmp	r3, #1
 8002ad0:	d105      	bne.n	8002ade <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ad2:	4b8d      	ldr	r3, [pc, #564]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002ad4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ad6:	4a8c      	ldr	r2, [pc, #560]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002ad8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002adc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f003 0301 	and.w	r3, r3, #1
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d00a      	beq.n	8002b00 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002aea:	4b87      	ldr	r3, [pc, #540]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002aec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002af0:	f023 0203 	bic.w	r2, r3, #3
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6a1b      	ldr	r3, [r3, #32]
 8002af8:	4983      	ldr	r1, [pc, #524]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002afa:	4313      	orrs	r3, r2
 8002afc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f003 0302 	and.w	r3, r3, #2
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d00a      	beq.n	8002b22 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002b0c:	4b7e      	ldr	r3, [pc, #504]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002b0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b12:	f023 020c 	bic.w	r2, r3, #12
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b1a:	497b      	ldr	r1, [pc, #492]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002b1c:	4313      	orrs	r3, r2
 8002b1e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f003 0304 	and.w	r3, r3, #4
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d00a      	beq.n	8002b44 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002b2e:	4b76      	ldr	r3, [pc, #472]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002b30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b34:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b3c:	4972      	ldr	r1, [pc, #456]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002b3e:	4313      	orrs	r3, r2
 8002b40:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f003 0320 	and.w	r3, r3, #32
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d00a      	beq.n	8002b66 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002b50:	4b6d      	ldr	r3, [pc, #436]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002b52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b56:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b5e:	496a      	ldr	r1, [pc, #424]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002b60:	4313      	orrs	r3, r2
 8002b62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d00a      	beq.n	8002b88 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002b72:	4b65      	ldr	r3, [pc, #404]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002b74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b78:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b80:	4961      	ldr	r1, [pc, #388]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002b82:	4313      	orrs	r3, r2
 8002b84:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d00a      	beq.n	8002baa <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002b94:	4b5c      	ldr	r3, [pc, #368]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002b96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b9a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ba2:	4959      	ldr	r1, [pc, #356]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002ba4:	4313      	orrs	r3, r2
 8002ba6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d00a      	beq.n	8002bcc <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002bb6:	4b54      	ldr	r3, [pc, #336]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002bb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bbc:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bc4:	4950      	ldr	r1, [pc, #320]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002bc6:	4313      	orrs	r3, r2
 8002bc8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d00a      	beq.n	8002bee <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002bd8:	4b4b      	ldr	r3, [pc, #300]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002bda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bde:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002be6:	4948      	ldr	r1, [pc, #288]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002be8:	4313      	orrs	r3, r2
 8002bea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d00a      	beq.n	8002c10 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002bfa:	4b43      	ldr	r3, [pc, #268]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002bfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c00:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c08:	493f      	ldr	r1, [pc, #252]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002c0a:	4313      	orrs	r3, r2
 8002c0c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d028      	beq.n	8002c6e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002c1c:	4b3a      	ldr	r3, [pc, #232]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002c1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c22:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c2a:	4937      	ldr	r1, [pc, #220]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002c2c:	4313      	orrs	r3, r2
 8002c2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c36:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002c3a:	d106      	bne.n	8002c4a <HAL_RCCEx_PeriphCLKConfig+0x336>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002c3c:	4b32      	ldr	r3, [pc, #200]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002c3e:	68db      	ldr	r3, [r3, #12]
 8002c40:	4a31      	ldr	r2, [pc, #196]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002c42:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002c46:	60d3      	str	r3, [r2, #12]
 8002c48:	e011      	b.n	8002c6e <HAL_RCCEx_PeriphCLKConfig+0x35a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c4e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002c52:	d10c      	bne.n	8002c6e <HAL_RCCEx_PeriphCLKConfig+0x35a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	3304      	adds	r3, #4
 8002c58:	2101      	movs	r1, #1
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	f000 f8a4 	bl	8002da8 <RCCEx_PLLSAI1_Config>
 8002c60:	4603      	mov	r3, r0
 8002c62:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002c64:	7cfb      	ldrb	r3, [r7, #19]
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d001      	beq.n	8002c6e <HAL_RCCEx_PeriphCLKConfig+0x35a>
        {
          /* set overall return value */
          status = ret;
 8002c6a:	7cfb      	ldrb	r3, [r7, #19]
 8002c6c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d028      	beq.n	8002ccc <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002c7a:	4b23      	ldr	r3, [pc, #140]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002c7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c80:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c88:	491f      	ldr	r1, [pc, #124]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002c8a:	4313      	orrs	r3, r2
 8002c8c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c94:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002c98:	d106      	bne.n	8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002c9a:	4b1b      	ldr	r3, [pc, #108]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002c9c:	68db      	ldr	r3, [r3, #12]
 8002c9e:	4a1a      	ldr	r2, [pc, #104]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002ca0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002ca4:	60d3      	str	r3, [r2, #12]
 8002ca6:	e011      	b.n	8002ccc <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cac:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002cb0:	d10c      	bne.n	8002ccc <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	3304      	adds	r3, #4
 8002cb6:	2101      	movs	r1, #1
 8002cb8:	4618      	mov	r0, r3
 8002cba:	f000 f875 	bl	8002da8 <RCCEx_PLLSAI1_Config>
 8002cbe:	4603      	mov	r3, r0
 8002cc0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002cc2:	7cfb      	ldrb	r3, [r7, #19]
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d001      	beq.n	8002ccc <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 8002cc8:	7cfb      	ldrb	r3, [r7, #19]
 8002cca:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d02b      	beq.n	8002d30 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002cd8:	4b0b      	ldr	r3, [pc, #44]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002cda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cde:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ce6:	4908      	ldr	r1, [pc, #32]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002ce8:	4313      	orrs	r3, r2
 8002cea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002cf2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002cf6:	d109      	bne.n	8002d0c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002cf8:	4b03      	ldr	r3, [pc, #12]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002cfa:	68db      	ldr	r3, [r3, #12]
 8002cfc:	4a02      	ldr	r2, [pc, #8]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002cfe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002d02:	60d3      	str	r3, [r2, #12]
 8002d04:	e014      	b.n	8002d30 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8002d06:	bf00      	nop
 8002d08:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d10:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002d14:	d10c      	bne.n	8002d30 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	3304      	adds	r3, #4
 8002d1a:	2101      	movs	r1, #1
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	f000 f843 	bl	8002da8 <RCCEx_PLLSAI1_Config>
 8002d22:	4603      	mov	r3, r0
 8002d24:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002d26:	7cfb      	ldrb	r3, [r7, #19]
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d001      	beq.n	8002d30 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      {
        /* set overall return value */
        status = ret;
 8002d2c:	7cfb      	ldrb	r3, [r7, #19]
 8002d2e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d01c      	beq.n	8002d76 <HAL_RCCEx_PeriphCLKConfig+0x462>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002d3c:	4b19      	ldr	r3, [pc, #100]	; (8002da4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d42:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d4a:	4916      	ldr	r1, [pc, #88]	; (8002da4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d4c:	4313      	orrs	r3, r2
 8002d4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d56:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002d5a:	d10c      	bne.n	8002d76 <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	3304      	adds	r3, #4
 8002d60:	2102      	movs	r1, #2
 8002d62:	4618      	mov	r0, r3
 8002d64:	f000 f820 	bl	8002da8 <RCCEx_PLLSAI1_Config>
 8002d68:	4603      	mov	r3, r0
 8002d6a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002d6c:	7cfb      	ldrb	r3, [r7, #19]
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d001      	beq.n	8002d76 <HAL_RCCEx_PeriphCLKConfig+0x462>
      {
        /* set overall return value */
        status = ret;
 8002d72:	7cfb      	ldrb	r3, [r7, #19]
 8002d74:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d00a      	beq.n	8002d98 <HAL_RCCEx_PeriphCLKConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002d82:	4b08      	ldr	r3, [pc, #32]	; (8002da4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d88:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d90:	4904      	ldr	r1, [pc, #16]	; (8002da4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d92:	4313      	orrs	r3, r2
 8002d94:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002d98:	7cbb      	ldrb	r3, [r7, #18]
}
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	3718      	adds	r7, #24
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	bd80      	pop	{r7, pc}
 8002da2:	bf00      	nop
 8002da4:	40021000 	.word	0x40021000

08002da8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b084      	sub	sp, #16
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
 8002db0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002db2:	2300      	movs	r3, #0
 8002db4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002db6:	4b74      	ldr	r3, [pc, #464]	; (8002f88 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002db8:	68db      	ldr	r3, [r3, #12]
 8002dba:	f003 0303 	and.w	r3, r3, #3
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d018      	beq.n	8002df4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002dc2:	4b71      	ldr	r3, [pc, #452]	; (8002f88 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002dc4:	68db      	ldr	r3, [r3, #12]
 8002dc6:	f003 0203 	and.w	r2, r3, #3
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	429a      	cmp	r2, r3
 8002dd0:	d10d      	bne.n	8002dee <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
       ||
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d009      	beq.n	8002dee <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002dda:	4b6b      	ldr	r3, [pc, #428]	; (8002f88 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002ddc:	68db      	ldr	r3, [r3, #12]
 8002dde:	091b      	lsrs	r3, r3, #4
 8002de0:	f003 0307 	and.w	r3, r3, #7
 8002de4:	1c5a      	adds	r2, r3, #1
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	685b      	ldr	r3, [r3, #4]
       ||
 8002dea:	429a      	cmp	r2, r3
 8002dec:	d047      	beq.n	8002e7e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002dee:	2301      	movs	r3, #1
 8002df0:	73fb      	strb	r3, [r7, #15]
 8002df2:	e044      	b.n	8002e7e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	2b03      	cmp	r3, #3
 8002dfa:	d018      	beq.n	8002e2e <RCCEx_PLLSAI1_Config+0x86>
 8002dfc:	2b03      	cmp	r3, #3
 8002dfe:	d825      	bhi.n	8002e4c <RCCEx_PLLSAI1_Config+0xa4>
 8002e00:	2b01      	cmp	r3, #1
 8002e02:	d002      	beq.n	8002e0a <RCCEx_PLLSAI1_Config+0x62>
 8002e04:	2b02      	cmp	r3, #2
 8002e06:	d009      	beq.n	8002e1c <RCCEx_PLLSAI1_Config+0x74>
 8002e08:	e020      	b.n	8002e4c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002e0a:	4b5f      	ldr	r3, [pc, #380]	; (8002f88 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f003 0302 	and.w	r3, r3, #2
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d11d      	bne.n	8002e52 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002e16:	2301      	movs	r3, #1
 8002e18:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e1a:	e01a      	b.n	8002e52 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002e1c:	4b5a      	ldr	r3, [pc, #360]	; (8002f88 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d116      	bne.n	8002e56 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002e28:	2301      	movs	r3, #1
 8002e2a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e2c:	e013      	b.n	8002e56 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002e2e:	4b56      	ldr	r3, [pc, #344]	; (8002f88 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d10f      	bne.n	8002e5a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002e3a:	4b53      	ldr	r3, [pc, #332]	; (8002f88 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d109      	bne.n	8002e5a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002e46:	2301      	movs	r3, #1
 8002e48:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002e4a:	e006      	b.n	8002e5a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002e4c:	2301      	movs	r3, #1
 8002e4e:	73fb      	strb	r3, [r7, #15]
      break;
 8002e50:	e004      	b.n	8002e5c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002e52:	bf00      	nop
 8002e54:	e002      	b.n	8002e5c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002e56:	bf00      	nop
 8002e58:	e000      	b.n	8002e5c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002e5a:	bf00      	nop
    }

    if(status == HAL_OK)
 8002e5c:	7bfb      	ldrb	r3, [r7, #15]
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d10d      	bne.n	8002e7e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002e62:	4b49      	ldr	r3, [pc, #292]	; (8002f88 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002e64:	68db      	ldr	r3, [r3, #12]
 8002e66:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6819      	ldr	r1, [r3, #0]
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	685b      	ldr	r3, [r3, #4]
 8002e72:	3b01      	subs	r3, #1
 8002e74:	011b      	lsls	r3, r3, #4
 8002e76:	430b      	orrs	r3, r1
 8002e78:	4943      	ldr	r1, [pc, #268]	; (8002f88 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002e7a:	4313      	orrs	r3, r2
 8002e7c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002e7e:	7bfb      	ldrb	r3, [r7, #15]
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d17c      	bne.n	8002f7e <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002e84:	4b40      	ldr	r3, [pc, #256]	; (8002f88 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	4a3f      	ldr	r2, [pc, #252]	; (8002f88 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002e8a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002e8e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e90:	f7fe fb36 	bl	8001500 <HAL_GetTick>
 8002e94:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002e96:	e009      	b.n	8002eac <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002e98:	f7fe fb32 	bl	8001500 <HAL_GetTick>
 8002e9c:	4602      	mov	r2, r0
 8002e9e:	68bb      	ldr	r3, [r7, #8]
 8002ea0:	1ad3      	subs	r3, r2, r3
 8002ea2:	2b02      	cmp	r3, #2
 8002ea4:	d902      	bls.n	8002eac <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002ea6:	2303      	movs	r3, #3
 8002ea8:	73fb      	strb	r3, [r7, #15]
        break;
 8002eaa:	e005      	b.n	8002eb8 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002eac:	4b36      	ldr	r3, [pc, #216]	; (8002f88 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d1ef      	bne.n	8002e98 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002eb8:	7bfb      	ldrb	r3, [r7, #15]
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d15f      	bne.n	8002f7e <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d110      	bne.n	8002ee6 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002ec4:	4b30      	ldr	r3, [pc, #192]	; (8002f88 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002ec6:	691b      	ldr	r3, [r3, #16]
 8002ec8:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8002ecc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002ed0:	687a      	ldr	r2, [r7, #4]
 8002ed2:	6892      	ldr	r2, [r2, #8]
 8002ed4:	0211      	lsls	r1, r2, #8
 8002ed6:	687a      	ldr	r2, [r7, #4]
 8002ed8:	68d2      	ldr	r2, [r2, #12]
 8002eda:	06d2      	lsls	r2, r2, #27
 8002edc:	430a      	orrs	r2, r1
 8002ede:	492a      	ldr	r1, [pc, #168]	; (8002f88 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002ee0:	4313      	orrs	r3, r2
 8002ee2:	610b      	str	r3, [r1, #16]
 8002ee4:	e027      	b.n	8002f36 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	2b01      	cmp	r3, #1
 8002eea:	d112      	bne.n	8002f12 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002eec:	4b26      	ldr	r3, [pc, #152]	; (8002f88 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002eee:	691b      	ldr	r3, [r3, #16]
 8002ef0:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002ef4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002ef8:	687a      	ldr	r2, [r7, #4]
 8002efa:	6892      	ldr	r2, [r2, #8]
 8002efc:	0211      	lsls	r1, r2, #8
 8002efe:	687a      	ldr	r2, [r7, #4]
 8002f00:	6912      	ldr	r2, [r2, #16]
 8002f02:	0852      	lsrs	r2, r2, #1
 8002f04:	3a01      	subs	r2, #1
 8002f06:	0552      	lsls	r2, r2, #21
 8002f08:	430a      	orrs	r2, r1
 8002f0a:	491f      	ldr	r1, [pc, #124]	; (8002f88 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002f0c:	4313      	orrs	r3, r2
 8002f0e:	610b      	str	r3, [r1, #16]
 8002f10:	e011      	b.n	8002f36 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002f12:	4b1d      	ldr	r3, [pc, #116]	; (8002f88 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002f14:	691b      	ldr	r3, [r3, #16]
 8002f16:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002f1a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002f1e:	687a      	ldr	r2, [r7, #4]
 8002f20:	6892      	ldr	r2, [r2, #8]
 8002f22:	0211      	lsls	r1, r2, #8
 8002f24:	687a      	ldr	r2, [r7, #4]
 8002f26:	6952      	ldr	r2, [r2, #20]
 8002f28:	0852      	lsrs	r2, r2, #1
 8002f2a:	3a01      	subs	r2, #1
 8002f2c:	0652      	lsls	r2, r2, #25
 8002f2e:	430a      	orrs	r2, r1
 8002f30:	4915      	ldr	r1, [pc, #84]	; (8002f88 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002f32:	4313      	orrs	r3, r2
 8002f34:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002f36:	4b14      	ldr	r3, [pc, #80]	; (8002f88 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	4a13      	ldr	r2, [pc, #76]	; (8002f88 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002f3c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002f40:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f42:	f7fe fadd 	bl	8001500 <HAL_GetTick>
 8002f46:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002f48:	e009      	b.n	8002f5e <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002f4a:	f7fe fad9 	bl	8001500 <HAL_GetTick>
 8002f4e:	4602      	mov	r2, r0
 8002f50:	68bb      	ldr	r3, [r7, #8]
 8002f52:	1ad3      	subs	r3, r2, r3
 8002f54:	2b02      	cmp	r3, #2
 8002f56:	d902      	bls.n	8002f5e <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8002f58:	2303      	movs	r3, #3
 8002f5a:	73fb      	strb	r3, [r7, #15]
          break;
 8002f5c:	e005      	b.n	8002f6a <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002f5e:	4b0a      	ldr	r3, [pc, #40]	; (8002f88 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d0ef      	beq.n	8002f4a <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8002f6a:	7bfb      	ldrb	r3, [r7, #15]
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d106      	bne.n	8002f7e <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002f70:	4b05      	ldr	r3, [pc, #20]	; (8002f88 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002f72:	691a      	ldr	r2, [r3, #16]
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	699b      	ldr	r3, [r3, #24]
 8002f78:	4903      	ldr	r1, [pc, #12]	; (8002f88 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002f7a:	4313      	orrs	r3, r2
 8002f7c:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002f7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f80:	4618      	mov	r0, r3
 8002f82:	3710      	adds	r7, #16
 8002f84:	46bd      	mov	sp, r7
 8002f86:	bd80      	pop	{r7, pc}
 8002f88:	40021000 	.word	0x40021000

08002f8c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b082      	sub	sp, #8
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d101      	bne.n	8002f9e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002f9a:	2301      	movs	r3, #1
 8002f9c:	e049      	b.n	8003032 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fa4:	b2db      	uxtb	r3, r3
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d106      	bne.n	8002fb8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	2200      	movs	r2, #0
 8002fae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002fb2:	6878      	ldr	r0, [r7, #4]
 8002fb4:	f000 f841 	bl	800303a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	2202      	movs	r2, #2
 8002fbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681a      	ldr	r2, [r3, #0]
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	3304      	adds	r3, #4
 8002fc8:	4619      	mov	r1, r3
 8002fca:	4610      	mov	r0, r2
 8002fcc:	f000 f9dc 	bl	8003388 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	2201      	movs	r2, #1
 8002fd4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2201      	movs	r2, #1
 8002fdc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2201      	movs	r2, #1
 8002fe4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2201      	movs	r2, #1
 8002fec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2201      	movs	r2, #1
 8002ff4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	2201      	movs	r2, #1
 8002ffc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2201      	movs	r2, #1
 8003004:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2201      	movs	r2, #1
 800300c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2201      	movs	r2, #1
 8003014:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2201      	movs	r2, #1
 800301c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2201      	movs	r2, #1
 8003024:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2201      	movs	r2, #1
 800302c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003030:	2300      	movs	r3, #0
}
 8003032:	4618      	mov	r0, r3
 8003034:	3708      	adds	r7, #8
 8003036:	46bd      	mov	sp, r7
 8003038:	bd80      	pop	{r7, pc}

0800303a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800303a:	b480      	push	{r7}
 800303c:	b083      	sub	sp, #12
 800303e:	af00      	add	r7, sp, #0
 8003040:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003042:	bf00      	nop
 8003044:	370c      	adds	r7, #12
 8003046:	46bd      	mov	sp, r7
 8003048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304c:	4770      	bx	lr
	...

08003050 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003050:	b480      	push	{r7}
 8003052:	b085      	sub	sp, #20
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800305e:	b2db      	uxtb	r3, r3
 8003060:	2b01      	cmp	r3, #1
 8003062:	d001      	beq.n	8003068 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003064:	2301      	movs	r3, #1
 8003066:	e03b      	b.n	80030e0 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2202      	movs	r2, #2
 800306c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	68da      	ldr	r2, [r3, #12]
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f042 0201 	orr.w	r2, r2, #1
 800307e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	4a19      	ldr	r2, [pc, #100]	; (80030ec <HAL_TIM_Base_Start_IT+0x9c>)
 8003086:	4293      	cmp	r3, r2
 8003088:	d009      	beq.n	800309e <HAL_TIM_Base_Start_IT+0x4e>
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003092:	d004      	beq.n	800309e <HAL_TIM_Base_Start_IT+0x4e>
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	4a15      	ldr	r2, [pc, #84]	; (80030f0 <HAL_TIM_Base_Start_IT+0xa0>)
 800309a:	4293      	cmp	r3, r2
 800309c:	d115      	bne.n	80030ca <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	689a      	ldr	r2, [r3, #8]
 80030a4:	4b13      	ldr	r3, [pc, #76]	; (80030f4 <HAL_TIM_Base_Start_IT+0xa4>)
 80030a6:	4013      	ands	r3, r2
 80030a8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	2b06      	cmp	r3, #6
 80030ae:	d015      	beq.n	80030dc <HAL_TIM_Base_Start_IT+0x8c>
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030b6:	d011      	beq.n	80030dc <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	681a      	ldr	r2, [r3, #0]
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f042 0201 	orr.w	r2, r2, #1
 80030c6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80030c8:	e008      	b.n	80030dc <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	681a      	ldr	r2, [r3, #0]
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f042 0201 	orr.w	r2, r2, #1
 80030d8:	601a      	str	r2, [r3, #0]
 80030da:	e000      	b.n	80030de <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80030dc:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80030de:	2300      	movs	r3, #0
}
 80030e0:	4618      	mov	r0, r3
 80030e2:	3714      	adds	r7, #20
 80030e4:	46bd      	mov	sp, r7
 80030e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ea:	4770      	bx	lr
 80030ec:	40012c00 	.word	0x40012c00
 80030f0:	40014000 	.word	0x40014000
 80030f4:	00010007 	.word	0x00010007

080030f8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	b082      	sub	sp, #8
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	691b      	ldr	r3, [r3, #16]
 8003106:	f003 0302 	and.w	r3, r3, #2
 800310a:	2b02      	cmp	r3, #2
 800310c:	d122      	bne.n	8003154 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	68db      	ldr	r3, [r3, #12]
 8003114:	f003 0302 	and.w	r3, r3, #2
 8003118:	2b02      	cmp	r3, #2
 800311a:	d11b      	bne.n	8003154 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f06f 0202 	mvn.w	r2, #2
 8003124:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	2201      	movs	r2, #1
 800312a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	699b      	ldr	r3, [r3, #24]
 8003132:	f003 0303 	and.w	r3, r3, #3
 8003136:	2b00      	cmp	r3, #0
 8003138:	d003      	beq.n	8003142 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800313a:	6878      	ldr	r0, [r7, #4]
 800313c:	f000 f905 	bl	800334a <HAL_TIM_IC_CaptureCallback>
 8003140:	e005      	b.n	800314e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003142:	6878      	ldr	r0, [r7, #4]
 8003144:	f000 f8f7 	bl	8003336 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003148:	6878      	ldr	r0, [r7, #4]
 800314a:	f000 f908 	bl	800335e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	2200      	movs	r2, #0
 8003152:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	691b      	ldr	r3, [r3, #16]
 800315a:	f003 0304 	and.w	r3, r3, #4
 800315e:	2b04      	cmp	r3, #4
 8003160:	d122      	bne.n	80031a8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	68db      	ldr	r3, [r3, #12]
 8003168:	f003 0304 	and.w	r3, r3, #4
 800316c:	2b04      	cmp	r3, #4
 800316e:	d11b      	bne.n	80031a8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f06f 0204 	mvn.w	r2, #4
 8003178:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	2202      	movs	r2, #2
 800317e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	699b      	ldr	r3, [r3, #24]
 8003186:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800318a:	2b00      	cmp	r3, #0
 800318c:	d003      	beq.n	8003196 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800318e:	6878      	ldr	r0, [r7, #4]
 8003190:	f000 f8db 	bl	800334a <HAL_TIM_IC_CaptureCallback>
 8003194:	e005      	b.n	80031a2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003196:	6878      	ldr	r0, [r7, #4]
 8003198:	f000 f8cd 	bl	8003336 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800319c:	6878      	ldr	r0, [r7, #4]
 800319e:	f000 f8de 	bl	800335e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	2200      	movs	r2, #0
 80031a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	691b      	ldr	r3, [r3, #16]
 80031ae:	f003 0308 	and.w	r3, r3, #8
 80031b2:	2b08      	cmp	r3, #8
 80031b4:	d122      	bne.n	80031fc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	68db      	ldr	r3, [r3, #12]
 80031bc:	f003 0308 	and.w	r3, r3, #8
 80031c0:	2b08      	cmp	r3, #8
 80031c2:	d11b      	bne.n	80031fc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f06f 0208 	mvn.w	r2, #8
 80031cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	2204      	movs	r2, #4
 80031d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	69db      	ldr	r3, [r3, #28]
 80031da:	f003 0303 	and.w	r3, r3, #3
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d003      	beq.n	80031ea <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80031e2:	6878      	ldr	r0, [r7, #4]
 80031e4:	f000 f8b1 	bl	800334a <HAL_TIM_IC_CaptureCallback>
 80031e8:	e005      	b.n	80031f6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80031ea:	6878      	ldr	r0, [r7, #4]
 80031ec:	f000 f8a3 	bl	8003336 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031f0:	6878      	ldr	r0, [r7, #4]
 80031f2:	f000 f8b4 	bl	800335e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	2200      	movs	r2, #0
 80031fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	691b      	ldr	r3, [r3, #16]
 8003202:	f003 0310 	and.w	r3, r3, #16
 8003206:	2b10      	cmp	r3, #16
 8003208:	d122      	bne.n	8003250 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	68db      	ldr	r3, [r3, #12]
 8003210:	f003 0310 	and.w	r3, r3, #16
 8003214:	2b10      	cmp	r3, #16
 8003216:	d11b      	bne.n	8003250 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f06f 0210 	mvn.w	r2, #16
 8003220:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	2208      	movs	r2, #8
 8003226:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	69db      	ldr	r3, [r3, #28]
 800322e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003232:	2b00      	cmp	r3, #0
 8003234:	d003      	beq.n	800323e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003236:	6878      	ldr	r0, [r7, #4]
 8003238:	f000 f887 	bl	800334a <HAL_TIM_IC_CaptureCallback>
 800323c:	e005      	b.n	800324a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800323e:	6878      	ldr	r0, [r7, #4]
 8003240:	f000 f879 	bl	8003336 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003244:	6878      	ldr	r0, [r7, #4]
 8003246:	f000 f88a 	bl	800335e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	2200      	movs	r2, #0
 800324e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	691b      	ldr	r3, [r3, #16]
 8003256:	f003 0301 	and.w	r3, r3, #1
 800325a:	2b01      	cmp	r3, #1
 800325c:	d10e      	bne.n	800327c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	68db      	ldr	r3, [r3, #12]
 8003264:	f003 0301 	and.w	r3, r3, #1
 8003268:	2b01      	cmp	r3, #1
 800326a:	d107      	bne.n	800327c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f06f 0201 	mvn.w	r2, #1
 8003274:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003276:	6878      	ldr	r0, [r7, #4]
 8003278:	f7fd ffd4 	bl	8001224 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	691b      	ldr	r3, [r3, #16]
 8003282:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003286:	2b80      	cmp	r3, #128	; 0x80
 8003288:	d10e      	bne.n	80032a8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	68db      	ldr	r3, [r3, #12]
 8003290:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003294:	2b80      	cmp	r3, #128	; 0x80
 8003296:	d107      	bne.n	80032a8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80032a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80032a2:	6878      	ldr	r0, [r7, #4]
 80032a4:	f000 f8de 	bl	8003464 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	691b      	ldr	r3, [r3, #16]
 80032ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80032b6:	d10e      	bne.n	80032d6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	68db      	ldr	r3, [r3, #12]
 80032be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032c2:	2b80      	cmp	r3, #128	; 0x80
 80032c4:	d107      	bne.n	80032d6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80032ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80032d0:	6878      	ldr	r0, [r7, #4]
 80032d2:	f000 f8d1 	bl	8003478 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	691b      	ldr	r3, [r3, #16]
 80032dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032e0:	2b40      	cmp	r3, #64	; 0x40
 80032e2:	d10e      	bne.n	8003302 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	68db      	ldr	r3, [r3, #12]
 80032ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032ee:	2b40      	cmp	r3, #64	; 0x40
 80032f0:	d107      	bne.n	8003302 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80032fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80032fc:	6878      	ldr	r0, [r7, #4]
 80032fe:	f000 f838 	bl	8003372 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	691b      	ldr	r3, [r3, #16]
 8003308:	f003 0320 	and.w	r3, r3, #32
 800330c:	2b20      	cmp	r3, #32
 800330e:	d10e      	bne.n	800332e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	68db      	ldr	r3, [r3, #12]
 8003316:	f003 0320 	and.w	r3, r3, #32
 800331a:	2b20      	cmp	r3, #32
 800331c:	d107      	bne.n	800332e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f06f 0220 	mvn.w	r2, #32
 8003326:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003328:	6878      	ldr	r0, [r7, #4]
 800332a:	f000 f891 	bl	8003450 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800332e:	bf00      	nop
 8003330:	3708      	adds	r7, #8
 8003332:	46bd      	mov	sp, r7
 8003334:	bd80      	pop	{r7, pc}

08003336 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003336:	b480      	push	{r7}
 8003338:	b083      	sub	sp, #12
 800333a:	af00      	add	r7, sp, #0
 800333c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800333e:	bf00      	nop
 8003340:	370c      	adds	r7, #12
 8003342:	46bd      	mov	sp, r7
 8003344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003348:	4770      	bx	lr

0800334a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800334a:	b480      	push	{r7}
 800334c:	b083      	sub	sp, #12
 800334e:	af00      	add	r7, sp, #0
 8003350:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003352:	bf00      	nop
 8003354:	370c      	adds	r7, #12
 8003356:	46bd      	mov	sp, r7
 8003358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335c:	4770      	bx	lr

0800335e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800335e:	b480      	push	{r7}
 8003360:	b083      	sub	sp, #12
 8003362:	af00      	add	r7, sp, #0
 8003364:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003366:	bf00      	nop
 8003368:	370c      	adds	r7, #12
 800336a:	46bd      	mov	sp, r7
 800336c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003370:	4770      	bx	lr

08003372 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003372:	b480      	push	{r7}
 8003374:	b083      	sub	sp, #12
 8003376:	af00      	add	r7, sp, #0
 8003378:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800337a:	bf00      	nop
 800337c:	370c      	adds	r7, #12
 800337e:	46bd      	mov	sp, r7
 8003380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003384:	4770      	bx	lr
	...

08003388 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003388:	b480      	push	{r7}
 800338a:	b085      	sub	sp, #20
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
 8003390:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	4a2a      	ldr	r2, [pc, #168]	; (8003444 <TIM_Base_SetConfig+0xbc>)
 800339c:	4293      	cmp	r3, r2
 800339e:	d003      	beq.n	80033a8 <TIM_Base_SetConfig+0x20>
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033a6:	d108      	bne.n	80033ba <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033ae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	685b      	ldr	r3, [r3, #4]
 80033b4:	68fa      	ldr	r2, [r7, #12]
 80033b6:	4313      	orrs	r3, r2
 80033b8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	4a21      	ldr	r2, [pc, #132]	; (8003444 <TIM_Base_SetConfig+0xbc>)
 80033be:	4293      	cmp	r3, r2
 80033c0:	d00b      	beq.n	80033da <TIM_Base_SetConfig+0x52>
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033c8:	d007      	beq.n	80033da <TIM_Base_SetConfig+0x52>
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	4a1e      	ldr	r2, [pc, #120]	; (8003448 <TIM_Base_SetConfig+0xc0>)
 80033ce:	4293      	cmp	r3, r2
 80033d0:	d003      	beq.n	80033da <TIM_Base_SetConfig+0x52>
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	4a1d      	ldr	r2, [pc, #116]	; (800344c <TIM_Base_SetConfig+0xc4>)
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d108      	bne.n	80033ec <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80033e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80033e2:	683b      	ldr	r3, [r7, #0]
 80033e4:	68db      	ldr	r3, [r3, #12]
 80033e6:	68fa      	ldr	r2, [r7, #12]
 80033e8:	4313      	orrs	r3, r2
 80033ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80033f2:	683b      	ldr	r3, [r7, #0]
 80033f4:	695b      	ldr	r3, [r3, #20]
 80033f6:	4313      	orrs	r3, r2
 80033f8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	68fa      	ldr	r2, [r7, #12]
 80033fe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003400:	683b      	ldr	r3, [r7, #0]
 8003402:	689a      	ldr	r2, [r3, #8]
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003408:	683b      	ldr	r3, [r7, #0]
 800340a:	681a      	ldr	r2, [r3, #0]
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	4a0c      	ldr	r2, [pc, #48]	; (8003444 <TIM_Base_SetConfig+0xbc>)
 8003414:	4293      	cmp	r3, r2
 8003416:	d007      	beq.n	8003428 <TIM_Base_SetConfig+0xa0>
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	4a0b      	ldr	r2, [pc, #44]	; (8003448 <TIM_Base_SetConfig+0xc0>)
 800341c:	4293      	cmp	r3, r2
 800341e:	d003      	beq.n	8003428 <TIM_Base_SetConfig+0xa0>
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	4a0a      	ldr	r2, [pc, #40]	; (800344c <TIM_Base_SetConfig+0xc4>)
 8003424:	4293      	cmp	r3, r2
 8003426:	d103      	bne.n	8003430 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	691a      	ldr	r2, [r3, #16]
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2201      	movs	r2, #1
 8003434:	615a      	str	r2, [r3, #20]
}
 8003436:	bf00      	nop
 8003438:	3714      	adds	r7, #20
 800343a:	46bd      	mov	sp, r7
 800343c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003440:	4770      	bx	lr
 8003442:	bf00      	nop
 8003444:	40012c00 	.word	0x40012c00
 8003448:	40014000 	.word	0x40014000
 800344c:	40014400 	.word	0x40014400

08003450 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003450:	b480      	push	{r7}
 8003452:	b083      	sub	sp, #12
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003458:	bf00      	nop
 800345a:	370c      	adds	r7, #12
 800345c:	46bd      	mov	sp, r7
 800345e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003462:	4770      	bx	lr

08003464 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003464:	b480      	push	{r7}
 8003466:	b083      	sub	sp, #12
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800346c:	bf00      	nop
 800346e:	370c      	adds	r7, #12
 8003470:	46bd      	mov	sp, r7
 8003472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003476:	4770      	bx	lr

08003478 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003478:	b480      	push	{r7}
 800347a:	b083      	sub	sp, #12
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003480:	bf00      	nop
 8003482:	370c      	adds	r7, #12
 8003484:	46bd      	mov	sp, r7
 8003486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348a:	4770      	bx	lr

0800348c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800348c:	b580      	push	{r7, lr}
 800348e:	b082      	sub	sp, #8
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2b00      	cmp	r3, #0
 8003498:	d101      	bne.n	800349e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800349a:	2301      	movs	r3, #1
 800349c:	e040      	b.n	8003520 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d106      	bne.n	80034b4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	2200      	movs	r2, #0
 80034aa:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80034ae:	6878      	ldr	r0, [r7, #4]
 80034b0:	f000 f83a 	bl	8003528 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2224      	movs	r2, #36	; 0x24
 80034b8:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	681a      	ldr	r2, [r3, #0]
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f022 0201 	bic.w	r2, r2, #1
 80034c8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80034ca:	6878      	ldr	r0, [r7, #4]
 80034cc:	f000 fb8e 	bl	8003bec <UART_SetConfig>
 80034d0:	4603      	mov	r3, r0
 80034d2:	2b01      	cmp	r3, #1
 80034d4:	d101      	bne.n	80034da <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80034d6:	2301      	movs	r3, #1
 80034d8:	e022      	b.n	8003520 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d002      	beq.n	80034e8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80034e2:	6878      	ldr	r0, [r7, #4]
 80034e4:	f000 fddc 	bl	80040a0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	685a      	ldr	r2, [r3, #4]
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80034f6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	689a      	ldr	r2, [r3, #8]
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003506:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	681a      	ldr	r2, [r3, #0]
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f042 0201 	orr.w	r2, r2, #1
 8003516:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003518:	6878      	ldr	r0, [r7, #4]
 800351a:	f000 fe63 	bl	80041e4 <UART_CheckIdleState>
 800351e:	4603      	mov	r3, r0
}
 8003520:	4618      	mov	r0, r3
 8003522:	3708      	adds	r7, #8
 8003524:	46bd      	mov	sp, r7
 8003526:	bd80      	pop	{r7, pc}

08003528 <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8003528:	b480      	push	{r7}
 800352a:	b083      	sub	sp, #12
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 8003530:	bf00      	nop
 8003532:	370c      	adds	r7, #12
 8003534:	46bd      	mov	sp, r7
 8003536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353a:	4770      	bx	lr

0800353c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800353c:	b580      	push	{r7, lr}
 800353e:	b08a      	sub	sp, #40	; 0x28
 8003540:	af00      	add	r7, sp, #0
 8003542:	60f8      	str	r0, [r7, #12]
 8003544:	60b9      	str	r1, [r7, #8]
 8003546:	4613      	mov	r3, r2
 8003548:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800354e:	2b20      	cmp	r3, #32
 8003550:	d142      	bne.n	80035d8 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003552:	68bb      	ldr	r3, [r7, #8]
 8003554:	2b00      	cmp	r3, #0
 8003556:	d002      	beq.n	800355e <HAL_UART_Receive_IT+0x22>
 8003558:	88fb      	ldrh	r3, [r7, #6]
 800355a:	2b00      	cmp	r3, #0
 800355c:	d101      	bne.n	8003562 <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 800355e:	2301      	movs	r3, #1
 8003560:	e03b      	b.n	80035da <HAL_UART_Receive_IT+0x9e>
    }

    __HAL_LOCK(huart);
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003568:	2b01      	cmp	r3, #1
 800356a:	d101      	bne.n	8003570 <HAL_UART_Receive_IT+0x34>
 800356c:	2302      	movs	r3, #2
 800356e:	e034      	b.n	80035da <HAL_UART_Receive_IT+0x9e>
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	2201      	movs	r2, #1
 8003574:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	2200      	movs	r2, #0
 800357c:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	4a18      	ldr	r2, [pc, #96]	; (80035e4 <HAL_UART_Receive_IT+0xa8>)
 8003584:	4293      	cmp	r3, r2
 8003586:	d01f      	beq.n	80035c8 <HAL_UART_Receive_IT+0x8c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	685b      	ldr	r3, [r3, #4]
 800358e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003592:	2b00      	cmp	r3, #0
 8003594:	d018      	beq.n	80035c8 <HAL_UART_Receive_IT+0x8c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800359c:	697b      	ldr	r3, [r7, #20]
 800359e:	e853 3f00 	ldrex	r3, [r3]
 80035a2:	613b      	str	r3, [r7, #16]
   return(result);
 80035a4:	693b      	ldr	r3, [r7, #16]
 80035a6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80035aa:	627b      	str	r3, [r7, #36]	; 0x24
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	461a      	mov	r2, r3
 80035b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035b4:	623b      	str	r3, [r7, #32]
 80035b6:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035b8:	69f9      	ldr	r1, [r7, #28]
 80035ba:	6a3a      	ldr	r2, [r7, #32]
 80035bc:	e841 2300 	strex	r3, r2, [r1]
 80035c0:	61bb      	str	r3, [r7, #24]
   return(result);
 80035c2:	69bb      	ldr	r3, [r7, #24]
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d1e6      	bne.n	8003596 <HAL_UART_Receive_IT+0x5a>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80035c8:	88fb      	ldrh	r3, [r7, #6]
 80035ca:	461a      	mov	r2, r3
 80035cc:	68b9      	ldr	r1, [r7, #8]
 80035ce:	68f8      	ldr	r0, [r7, #12]
 80035d0:	f000 ff16 	bl	8004400 <UART_Start_Receive_IT>
 80035d4:	4603      	mov	r3, r0
 80035d6:	e000      	b.n	80035da <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 80035d8:	2302      	movs	r3, #2
  }
}
 80035da:	4618      	mov	r0, r3
 80035dc:	3728      	adds	r7, #40	; 0x28
 80035de:	46bd      	mov	sp, r7
 80035e0:	bd80      	pop	{r7, pc}
 80035e2:	bf00      	nop
 80035e4:	40008000 	.word	0x40008000

080035e8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	b0ba      	sub	sp, #232	; 0xe8
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	69db      	ldr	r3, [r3, #28]
 80035f6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	689b      	ldr	r3, [r3, #8]
 800360a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800360e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8003612:	f640 030f 	movw	r3, #2063	; 0x80f
 8003616:	4013      	ands	r3, r2
 8003618:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800361c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003620:	2b00      	cmp	r3, #0
 8003622:	d115      	bne.n	8003650 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003624:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003628:	f003 0320 	and.w	r3, r3, #32
 800362c:	2b00      	cmp	r3, #0
 800362e:	d00f      	beq.n	8003650 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003630:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003634:	f003 0320 	and.w	r3, r3, #32
 8003638:	2b00      	cmp	r3, #0
 800363a:	d009      	beq.n	8003650 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003640:	2b00      	cmp	r3, #0
 8003642:	f000 82a6 	beq.w	8003b92 <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800364a:	6878      	ldr	r0, [r7, #4]
 800364c:	4798      	blx	r3
      }
      return;
 800364e:	e2a0      	b.n	8003b92 <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8003650:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003654:	2b00      	cmp	r3, #0
 8003656:	f000 8117 	beq.w	8003888 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800365a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800365e:	f003 0301 	and.w	r3, r3, #1
 8003662:	2b00      	cmp	r3, #0
 8003664:	d106      	bne.n	8003674 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003666:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800366a:	4b85      	ldr	r3, [pc, #532]	; (8003880 <HAL_UART_IRQHandler+0x298>)
 800366c:	4013      	ands	r3, r2
 800366e:	2b00      	cmp	r3, #0
 8003670:	f000 810a 	beq.w	8003888 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003674:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003678:	f003 0301 	and.w	r3, r3, #1
 800367c:	2b00      	cmp	r3, #0
 800367e:	d011      	beq.n	80036a4 <HAL_UART_IRQHandler+0xbc>
 8003680:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003684:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003688:	2b00      	cmp	r3, #0
 800368a:	d00b      	beq.n	80036a4 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	2201      	movs	r2, #1
 8003692:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800369a:	f043 0201 	orr.w	r2, r3, #1
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80036a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80036a8:	f003 0302 	and.w	r3, r3, #2
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d011      	beq.n	80036d4 <HAL_UART_IRQHandler+0xec>
 80036b0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80036b4:	f003 0301 	and.w	r3, r3, #1
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d00b      	beq.n	80036d4 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	2202      	movs	r2, #2
 80036c2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80036ca:	f043 0204 	orr.w	r2, r3, #4
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80036d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80036d8:	f003 0304 	and.w	r3, r3, #4
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d011      	beq.n	8003704 <HAL_UART_IRQHandler+0x11c>
 80036e0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80036e4:	f003 0301 	and.w	r3, r3, #1
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d00b      	beq.n	8003704 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	2204      	movs	r2, #4
 80036f2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80036fa:	f043 0202 	orr.w	r2, r3, #2
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003704:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003708:	f003 0308 	and.w	r3, r3, #8
 800370c:	2b00      	cmp	r3, #0
 800370e:	d017      	beq.n	8003740 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003710:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003714:	f003 0320 	and.w	r3, r3, #32
 8003718:	2b00      	cmp	r3, #0
 800371a:	d105      	bne.n	8003728 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800371c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003720:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003724:	2b00      	cmp	r3, #0
 8003726:	d00b      	beq.n	8003740 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	2208      	movs	r2, #8
 800372e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003736:	f043 0208 	orr.w	r2, r3, #8
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003740:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003744:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003748:	2b00      	cmp	r3, #0
 800374a:	d012      	beq.n	8003772 <HAL_UART_IRQHandler+0x18a>
 800374c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003750:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003754:	2b00      	cmp	r3, #0
 8003756:	d00c      	beq.n	8003772 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003760:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003768:	f043 0220 	orr.w	r2, r3, #32
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003778:	2b00      	cmp	r3, #0
 800377a:	f000 820c 	beq.w	8003b96 <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800377e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003782:	f003 0320 	and.w	r3, r3, #32
 8003786:	2b00      	cmp	r3, #0
 8003788:	d00d      	beq.n	80037a6 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800378a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800378e:	f003 0320 	and.w	r3, r3, #32
 8003792:	2b00      	cmp	r3, #0
 8003794:	d007      	beq.n	80037a6 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800379a:	2b00      	cmp	r3, #0
 800379c:	d003      	beq.n	80037a6 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80037a2:	6878      	ldr	r0, [r7, #4]
 80037a4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80037ac:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	689b      	ldr	r3, [r3, #8]
 80037b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037ba:	2b40      	cmp	r3, #64	; 0x40
 80037bc:	d005      	beq.n	80037ca <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80037be:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80037c2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d04f      	beq.n	800386a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80037ca:	6878      	ldr	r0, [r7, #4]
 80037cc:	f000 fee2 	bl	8004594 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	689b      	ldr	r3, [r3, #8]
 80037d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037da:	2b40      	cmp	r3, #64	; 0x40
 80037dc:	d141      	bne.n	8003862 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	3308      	adds	r3, #8
 80037e4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037e8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80037ec:	e853 3f00 	ldrex	r3, [r3]
 80037f0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80037f4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80037f8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80037fc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	3308      	adds	r3, #8
 8003806:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800380a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800380e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003812:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003816:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800381a:	e841 2300 	strex	r3, r2, [r1]
 800381e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003822:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003826:	2b00      	cmp	r3, #0
 8003828:	d1d9      	bne.n	80037de <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800382e:	2b00      	cmp	r3, #0
 8003830:	d013      	beq.n	800385a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003836:	4a13      	ldr	r2, [pc, #76]	; (8003884 <HAL_UART_IRQHandler+0x29c>)
 8003838:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800383e:	4618      	mov	r0, r3
 8003840:	f7fd ff8a 	bl	8001758 <HAL_DMA_Abort_IT>
 8003844:	4603      	mov	r3, r0
 8003846:	2b00      	cmp	r3, #0
 8003848:	d017      	beq.n	800387a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800384e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003850:	687a      	ldr	r2, [r7, #4]
 8003852:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8003854:	4610      	mov	r0, r2
 8003856:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003858:	e00f      	b.n	800387a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800385a:	6878      	ldr	r0, [r7, #4]
 800385c:	f000 f9b0 	bl	8003bc0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003860:	e00b      	b.n	800387a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003862:	6878      	ldr	r0, [r7, #4]
 8003864:	f000 f9ac 	bl	8003bc0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003868:	e007      	b.n	800387a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800386a:	6878      	ldr	r0, [r7, #4]
 800386c:	f000 f9a8 	bl	8003bc0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	2200      	movs	r2, #0
 8003874:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8003878:	e18d      	b.n	8003b96 <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800387a:	bf00      	nop
    return;
 800387c:	e18b      	b.n	8003b96 <HAL_UART_IRQHandler+0x5ae>
 800387e:	bf00      	nop
 8003880:	04000120 	.word	0x04000120
 8003884:	0800465b 	.word	0x0800465b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800388c:	2b01      	cmp	r3, #1
 800388e:	f040 8146 	bne.w	8003b1e <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003892:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003896:	f003 0310 	and.w	r3, r3, #16
 800389a:	2b00      	cmp	r3, #0
 800389c:	f000 813f 	beq.w	8003b1e <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80038a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80038a4:	f003 0310 	and.w	r3, r3, #16
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	f000 8138 	beq.w	8003b1e <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	2210      	movs	r2, #16
 80038b4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	689b      	ldr	r3, [r3, #8]
 80038bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038c0:	2b40      	cmp	r3, #64	; 0x40
 80038c2:	f040 80b4 	bne.w	8003a2e <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	685b      	ldr	r3, [r3, #4]
 80038ce:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80038d2:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	f000 815f 	beq.w	8003b9a <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80038e2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80038e6:	429a      	cmp	r2, r3
 80038e8:	f080 8157 	bcs.w	8003b9a <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80038f2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f003 0320 	and.w	r3, r3, #32
 8003902:	2b00      	cmp	r3, #0
 8003904:	f040 8085 	bne.w	8003a12 <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003910:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003914:	e853 3f00 	ldrex	r3, [r3]
 8003918:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800391c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003920:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003924:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	461a      	mov	r2, r3
 800392e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003932:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003936:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800393a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800393e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003942:	e841 2300 	strex	r3, r2, [r1]
 8003946:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800394a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800394e:	2b00      	cmp	r3, #0
 8003950:	d1da      	bne.n	8003908 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	3308      	adds	r3, #8
 8003958:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800395a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800395c:	e853 3f00 	ldrex	r3, [r3]
 8003960:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003962:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003964:	f023 0301 	bic.w	r3, r3, #1
 8003968:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	3308      	adds	r3, #8
 8003972:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003976:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800397a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800397c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800397e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003982:	e841 2300 	strex	r3, r2, [r1]
 8003986:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003988:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800398a:	2b00      	cmp	r3, #0
 800398c:	d1e1      	bne.n	8003952 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	3308      	adds	r3, #8
 8003994:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003996:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003998:	e853 3f00 	ldrex	r3, [r3]
 800399c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800399e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80039a0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80039a4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	3308      	adds	r3, #8
 80039ae:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80039b2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80039b4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039b6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80039b8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80039ba:	e841 2300 	strex	r3, r2, [r1]
 80039be:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80039c0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d1e3      	bne.n	800398e <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	2220      	movs	r2, #32
 80039ca:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2200      	movs	r2, #0
 80039d0:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80039da:	e853 3f00 	ldrex	r3, [r3]
 80039de:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80039e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80039e2:	f023 0310 	bic.w	r3, r3, #16
 80039e6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	461a      	mov	r2, r3
 80039f0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80039f4:	65bb      	str	r3, [r7, #88]	; 0x58
 80039f6:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039f8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80039fa:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80039fc:	e841 2300 	strex	r3, r2, [r1]
 8003a00:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003a02:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d1e4      	bne.n	80039d2 <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	f7fd fe65 	bl	80016dc <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003a1e:	b29b      	uxth	r3, r3
 8003a20:	1ad3      	subs	r3, r2, r3
 8003a22:	b29b      	uxth	r3, r3
 8003a24:	4619      	mov	r1, r3
 8003a26:	6878      	ldr	r0, [r7, #4]
 8003a28:	f000 f8d4 	bl	8003bd4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003a2c:	e0b5      	b.n	8003b9a <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003a3a:	b29b      	uxth	r3, r3
 8003a3c:	1ad3      	subs	r3, r2, r3
 8003a3e:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003a48:	b29b      	uxth	r3, r3
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	f000 80a7 	beq.w	8003b9e <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 8003a50:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	f000 80a2 	beq.w	8003b9e <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a62:	e853 3f00 	ldrex	r3, [r3]
 8003a66:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003a68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a6a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003a6e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	461a      	mov	r2, r3
 8003a78:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003a7c:	647b      	str	r3, [r7, #68]	; 0x44
 8003a7e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a80:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003a82:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003a84:	e841 2300 	strex	r3, r2, [r1]
 8003a88:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003a8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d1e4      	bne.n	8003a5a <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	3308      	adds	r3, #8
 8003a96:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a9a:	e853 3f00 	ldrex	r3, [r3]
 8003a9e:	623b      	str	r3, [r7, #32]
   return(result);
 8003aa0:	6a3b      	ldr	r3, [r7, #32]
 8003aa2:	f023 0301 	bic.w	r3, r3, #1
 8003aa6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	3308      	adds	r3, #8
 8003ab0:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003ab4:	633a      	str	r2, [r7, #48]	; 0x30
 8003ab6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ab8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003aba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003abc:	e841 2300 	strex	r3, r2, [r1]
 8003ac0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003ac2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d1e3      	bne.n	8003a90 <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2220      	movs	r2, #32
 8003acc:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ae0:	693b      	ldr	r3, [r7, #16]
 8003ae2:	e853 3f00 	ldrex	r3, [r3]
 8003ae6:	60fb      	str	r3, [r7, #12]
   return(result);
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	f023 0310 	bic.w	r3, r3, #16
 8003aee:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	461a      	mov	r2, r3
 8003af8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003afc:	61fb      	str	r3, [r7, #28]
 8003afe:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b00:	69b9      	ldr	r1, [r7, #24]
 8003b02:	69fa      	ldr	r2, [r7, #28]
 8003b04:	e841 2300 	strex	r3, r2, [r1]
 8003b08:	617b      	str	r3, [r7, #20]
   return(result);
 8003b0a:	697b      	ldr	r3, [r7, #20]
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d1e4      	bne.n	8003ada <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003b10:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003b14:	4619      	mov	r1, r3
 8003b16:	6878      	ldr	r0, [r7, #4]
 8003b18:	f000 f85c 	bl	8003bd4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003b1c:	e03f      	b.n	8003b9e <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003b1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b22:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d00e      	beq.n	8003b48 <HAL_UART_IRQHandler+0x560>
 8003b2a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003b2e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d008      	beq.n	8003b48 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003b3e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003b40:	6878      	ldr	r0, [r7, #4]
 8003b42:	f000 ff2a 	bl	800499a <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003b46:	e02d      	b.n	8003ba4 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003b48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d00e      	beq.n	8003b72 <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003b54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d008      	beq.n	8003b72 <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d01c      	beq.n	8003ba2 <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003b6c:	6878      	ldr	r0, [r7, #4]
 8003b6e:	4798      	blx	r3
    }
    return;
 8003b70:	e017      	b.n	8003ba2 <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003b72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d012      	beq.n	8003ba4 <HAL_UART_IRQHandler+0x5bc>
 8003b7e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d00c      	beq.n	8003ba4 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 8003b8a:	6878      	ldr	r0, [r7, #4]
 8003b8c:	f000 fd7b 	bl	8004686 <UART_EndTransmit_IT>
    return;
 8003b90:	e008      	b.n	8003ba4 <HAL_UART_IRQHandler+0x5bc>
      return;
 8003b92:	bf00      	nop
 8003b94:	e006      	b.n	8003ba4 <HAL_UART_IRQHandler+0x5bc>
    return;
 8003b96:	bf00      	nop
 8003b98:	e004      	b.n	8003ba4 <HAL_UART_IRQHandler+0x5bc>
      return;
 8003b9a:	bf00      	nop
 8003b9c:	e002      	b.n	8003ba4 <HAL_UART_IRQHandler+0x5bc>
      return;
 8003b9e:	bf00      	nop
 8003ba0:	e000      	b.n	8003ba4 <HAL_UART_IRQHandler+0x5bc>
    return;
 8003ba2:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8003ba4:	37e8      	adds	r7, #232	; 0xe8
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	bd80      	pop	{r7, pc}
 8003baa:	bf00      	nop

08003bac <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003bac:	b480      	push	{r7}
 8003bae:	b083      	sub	sp, #12
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003bb4:	bf00      	nop
 8003bb6:	370c      	adds	r7, #12
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bbe:	4770      	bx	lr

08003bc0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003bc0:	b480      	push	{r7}
 8003bc2:	b083      	sub	sp, #12
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003bc8:	bf00      	nop
 8003bca:	370c      	adds	r7, #12
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd2:	4770      	bx	lr

08003bd4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003bd4:	b480      	push	{r7}
 8003bd6:	b083      	sub	sp, #12
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]
 8003bdc:	460b      	mov	r3, r1
 8003bde:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003be0:	bf00      	nop
 8003be2:	370c      	adds	r7, #12
 8003be4:	46bd      	mov	sp, r7
 8003be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bea:	4770      	bx	lr

08003bec <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003bec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003bf0:	b08a      	sub	sp, #40	; 0x28
 8003bf2:	af00      	add	r7, sp, #0
 8003bf4:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	689a      	ldr	r2, [r3, #8]
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	691b      	ldr	r3, [r3, #16]
 8003c04:	431a      	orrs	r2, r3
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	695b      	ldr	r3, [r3, #20]
 8003c0a:	431a      	orrs	r2, r3
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	69db      	ldr	r3, [r3, #28]
 8003c10:	4313      	orrs	r3, r2
 8003c12:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	681a      	ldr	r2, [r3, #0]
 8003c1a:	4b9e      	ldr	r3, [pc, #632]	; (8003e94 <UART_SetConfig+0x2a8>)
 8003c1c:	4013      	ands	r3, r2
 8003c1e:	68fa      	ldr	r2, [r7, #12]
 8003c20:	6812      	ldr	r2, [r2, #0]
 8003c22:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003c24:	430b      	orrs	r3, r1
 8003c26:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	685b      	ldr	r3, [r3, #4]
 8003c2e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	68da      	ldr	r2, [r3, #12]
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	430a      	orrs	r2, r1
 8003c3c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	699b      	ldr	r3, [r3, #24]
 8003c42:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	4a93      	ldr	r2, [pc, #588]	; (8003e98 <UART_SetConfig+0x2ac>)
 8003c4a:	4293      	cmp	r3, r2
 8003c4c:	d004      	beq.n	8003c58 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	6a1b      	ldr	r3, [r3, #32]
 8003c52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c54:	4313      	orrs	r3, r2
 8003c56:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	689b      	ldr	r3, [r3, #8]
 8003c5e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c68:	430a      	orrs	r2, r1
 8003c6a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	4a8a      	ldr	r2, [pc, #552]	; (8003e9c <UART_SetConfig+0x2b0>)
 8003c72:	4293      	cmp	r3, r2
 8003c74:	d126      	bne.n	8003cc4 <UART_SetConfig+0xd8>
 8003c76:	4b8a      	ldr	r3, [pc, #552]	; (8003ea0 <UART_SetConfig+0x2b4>)
 8003c78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c7c:	f003 0303 	and.w	r3, r3, #3
 8003c80:	2b03      	cmp	r3, #3
 8003c82:	d81b      	bhi.n	8003cbc <UART_SetConfig+0xd0>
 8003c84:	a201      	add	r2, pc, #4	; (adr r2, 8003c8c <UART_SetConfig+0xa0>)
 8003c86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c8a:	bf00      	nop
 8003c8c:	08003c9d 	.word	0x08003c9d
 8003c90:	08003cad 	.word	0x08003cad
 8003c94:	08003ca5 	.word	0x08003ca5
 8003c98:	08003cb5 	.word	0x08003cb5
 8003c9c:	2301      	movs	r3, #1
 8003c9e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ca2:	e0ab      	b.n	8003dfc <UART_SetConfig+0x210>
 8003ca4:	2302      	movs	r3, #2
 8003ca6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003caa:	e0a7      	b.n	8003dfc <UART_SetConfig+0x210>
 8003cac:	2304      	movs	r3, #4
 8003cae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003cb2:	e0a3      	b.n	8003dfc <UART_SetConfig+0x210>
 8003cb4:	2308      	movs	r3, #8
 8003cb6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003cba:	e09f      	b.n	8003dfc <UART_SetConfig+0x210>
 8003cbc:	2310      	movs	r3, #16
 8003cbe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003cc2:	e09b      	b.n	8003dfc <UART_SetConfig+0x210>
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	4a76      	ldr	r2, [pc, #472]	; (8003ea4 <UART_SetConfig+0x2b8>)
 8003cca:	4293      	cmp	r3, r2
 8003ccc:	d138      	bne.n	8003d40 <UART_SetConfig+0x154>
 8003cce:	4b74      	ldr	r3, [pc, #464]	; (8003ea0 <UART_SetConfig+0x2b4>)
 8003cd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cd4:	f003 030c 	and.w	r3, r3, #12
 8003cd8:	2b0c      	cmp	r3, #12
 8003cda:	d82d      	bhi.n	8003d38 <UART_SetConfig+0x14c>
 8003cdc:	a201      	add	r2, pc, #4	; (adr r2, 8003ce4 <UART_SetConfig+0xf8>)
 8003cde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ce2:	bf00      	nop
 8003ce4:	08003d19 	.word	0x08003d19
 8003ce8:	08003d39 	.word	0x08003d39
 8003cec:	08003d39 	.word	0x08003d39
 8003cf0:	08003d39 	.word	0x08003d39
 8003cf4:	08003d29 	.word	0x08003d29
 8003cf8:	08003d39 	.word	0x08003d39
 8003cfc:	08003d39 	.word	0x08003d39
 8003d00:	08003d39 	.word	0x08003d39
 8003d04:	08003d21 	.word	0x08003d21
 8003d08:	08003d39 	.word	0x08003d39
 8003d0c:	08003d39 	.word	0x08003d39
 8003d10:	08003d39 	.word	0x08003d39
 8003d14:	08003d31 	.word	0x08003d31
 8003d18:	2300      	movs	r3, #0
 8003d1a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d1e:	e06d      	b.n	8003dfc <UART_SetConfig+0x210>
 8003d20:	2302      	movs	r3, #2
 8003d22:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d26:	e069      	b.n	8003dfc <UART_SetConfig+0x210>
 8003d28:	2304      	movs	r3, #4
 8003d2a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d2e:	e065      	b.n	8003dfc <UART_SetConfig+0x210>
 8003d30:	2308      	movs	r3, #8
 8003d32:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d36:	e061      	b.n	8003dfc <UART_SetConfig+0x210>
 8003d38:	2310      	movs	r3, #16
 8003d3a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d3e:	e05d      	b.n	8003dfc <UART_SetConfig+0x210>
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	4a58      	ldr	r2, [pc, #352]	; (8003ea8 <UART_SetConfig+0x2bc>)
 8003d46:	4293      	cmp	r3, r2
 8003d48:	d125      	bne.n	8003d96 <UART_SetConfig+0x1aa>
 8003d4a:	4b55      	ldr	r3, [pc, #340]	; (8003ea0 <UART_SetConfig+0x2b4>)
 8003d4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d50:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003d54:	2b30      	cmp	r3, #48	; 0x30
 8003d56:	d016      	beq.n	8003d86 <UART_SetConfig+0x19a>
 8003d58:	2b30      	cmp	r3, #48	; 0x30
 8003d5a:	d818      	bhi.n	8003d8e <UART_SetConfig+0x1a2>
 8003d5c:	2b20      	cmp	r3, #32
 8003d5e:	d00a      	beq.n	8003d76 <UART_SetConfig+0x18a>
 8003d60:	2b20      	cmp	r3, #32
 8003d62:	d814      	bhi.n	8003d8e <UART_SetConfig+0x1a2>
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d002      	beq.n	8003d6e <UART_SetConfig+0x182>
 8003d68:	2b10      	cmp	r3, #16
 8003d6a:	d008      	beq.n	8003d7e <UART_SetConfig+0x192>
 8003d6c:	e00f      	b.n	8003d8e <UART_SetConfig+0x1a2>
 8003d6e:	2300      	movs	r3, #0
 8003d70:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d74:	e042      	b.n	8003dfc <UART_SetConfig+0x210>
 8003d76:	2302      	movs	r3, #2
 8003d78:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d7c:	e03e      	b.n	8003dfc <UART_SetConfig+0x210>
 8003d7e:	2304      	movs	r3, #4
 8003d80:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d84:	e03a      	b.n	8003dfc <UART_SetConfig+0x210>
 8003d86:	2308      	movs	r3, #8
 8003d88:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d8c:	e036      	b.n	8003dfc <UART_SetConfig+0x210>
 8003d8e:	2310      	movs	r3, #16
 8003d90:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d94:	e032      	b.n	8003dfc <UART_SetConfig+0x210>
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	4a3f      	ldr	r2, [pc, #252]	; (8003e98 <UART_SetConfig+0x2ac>)
 8003d9c:	4293      	cmp	r3, r2
 8003d9e:	d12a      	bne.n	8003df6 <UART_SetConfig+0x20a>
 8003da0:	4b3f      	ldr	r3, [pc, #252]	; (8003ea0 <UART_SetConfig+0x2b4>)
 8003da2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003da6:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003daa:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003dae:	d01a      	beq.n	8003de6 <UART_SetConfig+0x1fa>
 8003db0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003db4:	d81b      	bhi.n	8003dee <UART_SetConfig+0x202>
 8003db6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003dba:	d00c      	beq.n	8003dd6 <UART_SetConfig+0x1ea>
 8003dbc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003dc0:	d815      	bhi.n	8003dee <UART_SetConfig+0x202>
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d003      	beq.n	8003dce <UART_SetConfig+0x1e2>
 8003dc6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003dca:	d008      	beq.n	8003dde <UART_SetConfig+0x1f2>
 8003dcc:	e00f      	b.n	8003dee <UART_SetConfig+0x202>
 8003dce:	2300      	movs	r3, #0
 8003dd0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003dd4:	e012      	b.n	8003dfc <UART_SetConfig+0x210>
 8003dd6:	2302      	movs	r3, #2
 8003dd8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ddc:	e00e      	b.n	8003dfc <UART_SetConfig+0x210>
 8003dde:	2304      	movs	r3, #4
 8003de0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003de4:	e00a      	b.n	8003dfc <UART_SetConfig+0x210>
 8003de6:	2308      	movs	r3, #8
 8003de8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003dec:	e006      	b.n	8003dfc <UART_SetConfig+0x210>
 8003dee:	2310      	movs	r3, #16
 8003df0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003df4:	e002      	b.n	8003dfc <UART_SetConfig+0x210>
 8003df6:	2310      	movs	r3, #16
 8003df8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	4a25      	ldr	r2, [pc, #148]	; (8003e98 <UART_SetConfig+0x2ac>)
 8003e02:	4293      	cmp	r3, r2
 8003e04:	f040 808a 	bne.w	8003f1c <UART_SetConfig+0x330>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003e08:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003e0c:	2b08      	cmp	r3, #8
 8003e0e:	d824      	bhi.n	8003e5a <UART_SetConfig+0x26e>
 8003e10:	a201      	add	r2, pc, #4	; (adr r2, 8003e18 <UART_SetConfig+0x22c>)
 8003e12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e16:	bf00      	nop
 8003e18:	08003e3d 	.word	0x08003e3d
 8003e1c:	08003e5b 	.word	0x08003e5b
 8003e20:	08003e45 	.word	0x08003e45
 8003e24:	08003e5b 	.word	0x08003e5b
 8003e28:	08003e4b 	.word	0x08003e4b
 8003e2c:	08003e5b 	.word	0x08003e5b
 8003e30:	08003e5b 	.word	0x08003e5b
 8003e34:	08003e5b 	.word	0x08003e5b
 8003e38:	08003e53 	.word	0x08003e53
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003e3c:	f7fe fcac 	bl	8002798 <HAL_RCC_GetPCLK1Freq>
 8003e40:	61f8      	str	r0, [r7, #28]
        break;
 8003e42:	e010      	b.n	8003e66 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003e44:	4b19      	ldr	r3, [pc, #100]	; (8003eac <UART_SetConfig+0x2c0>)
 8003e46:	61fb      	str	r3, [r7, #28]
        break;
 8003e48:	e00d      	b.n	8003e66 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003e4a:	f7fe fc0f 	bl	800266c <HAL_RCC_GetSysClockFreq>
 8003e4e:	61f8      	str	r0, [r7, #28]
        break;
 8003e50:	e009      	b.n	8003e66 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003e52:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003e56:	61fb      	str	r3, [r7, #28]
        break;
 8003e58:	e005      	b.n	8003e66 <UART_SetConfig+0x27a>
      default:
        pclk = 0U;
 8003e5a:	2300      	movs	r3, #0
 8003e5c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003e5e:	2301      	movs	r3, #1
 8003e60:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003e64:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003e66:	69fb      	ldr	r3, [r7, #28]
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	f000 8109 	beq.w	8004080 <UART_SetConfig+0x494>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	685a      	ldr	r2, [r3, #4]
 8003e72:	4613      	mov	r3, r2
 8003e74:	005b      	lsls	r3, r3, #1
 8003e76:	4413      	add	r3, r2
 8003e78:	69fa      	ldr	r2, [r7, #28]
 8003e7a:	429a      	cmp	r2, r3
 8003e7c:	d305      	bcc.n	8003e8a <UART_SetConfig+0x29e>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	685b      	ldr	r3, [r3, #4]
 8003e82:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003e84:	69fa      	ldr	r2, [r7, #28]
 8003e86:	429a      	cmp	r2, r3
 8003e88:	d912      	bls.n	8003eb0 <UART_SetConfig+0x2c4>
      {
        ret = HAL_ERROR;
 8003e8a:	2301      	movs	r3, #1
 8003e8c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003e90:	e0f6      	b.n	8004080 <UART_SetConfig+0x494>
 8003e92:	bf00      	nop
 8003e94:	efff69f3 	.word	0xefff69f3
 8003e98:	40008000 	.word	0x40008000
 8003e9c:	40013800 	.word	0x40013800
 8003ea0:	40021000 	.word	0x40021000
 8003ea4:	40004400 	.word	0x40004400
 8003ea8:	40004800 	.word	0x40004800
 8003eac:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003eb0:	69fb      	ldr	r3, [r7, #28]
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	461c      	mov	r4, r3
 8003eb6:	4615      	mov	r5, r2
 8003eb8:	f04f 0200 	mov.w	r2, #0
 8003ebc:	f04f 0300 	mov.w	r3, #0
 8003ec0:	022b      	lsls	r3, r5, #8
 8003ec2:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003ec6:	0222      	lsls	r2, r4, #8
 8003ec8:	68f9      	ldr	r1, [r7, #12]
 8003eca:	6849      	ldr	r1, [r1, #4]
 8003ecc:	0849      	lsrs	r1, r1, #1
 8003ece:	2000      	movs	r0, #0
 8003ed0:	4688      	mov	r8, r1
 8003ed2:	4681      	mov	r9, r0
 8003ed4:	eb12 0a08 	adds.w	sl, r2, r8
 8003ed8:	eb43 0b09 	adc.w	fp, r3, r9
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	685b      	ldr	r3, [r3, #4]
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	603b      	str	r3, [r7, #0]
 8003ee4:	607a      	str	r2, [r7, #4]
 8003ee6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003eea:	4650      	mov	r0, sl
 8003eec:	4659      	mov	r1, fp
 8003eee:	f7fc f96f 	bl	80001d0 <__aeabi_uldivmod>
 8003ef2:	4602      	mov	r2, r0
 8003ef4:	460b      	mov	r3, r1
 8003ef6:	4613      	mov	r3, r2
 8003ef8:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003efa:	69bb      	ldr	r3, [r7, #24]
 8003efc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003f00:	d308      	bcc.n	8003f14 <UART_SetConfig+0x328>
 8003f02:	69bb      	ldr	r3, [r7, #24]
 8003f04:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003f08:	d204      	bcs.n	8003f14 <UART_SetConfig+0x328>
        {
          huart->Instance->BRR = usartdiv;
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	69ba      	ldr	r2, [r7, #24]
 8003f10:	60da      	str	r2, [r3, #12]
 8003f12:	e0b5      	b.n	8004080 <UART_SetConfig+0x494>
        }
        else
        {
          ret = HAL_ERROR;
 8003f14:	2301      	movs	r3, #1
 8003f16:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003f1a:	e0b1      	b.n	8004080 <UART_SetConfig+0x494>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	69db      	ldr	r3, [r3, #28]
 8003f20:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f24:	d15d      	bne.n	8003fe2 <UART_SetConfig+0x3f6>
  {
    switch (clocksource)
 8003f26:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003f2a:	2b08      	cmp	r3, #8
 8003f2c:	d827      	bhi.n	8003f7e <UART_SetConfig+0x392>
 8003f2e:	a201      	add	r2, pc, #4	; (adr r2, 8003f34 <UART_SetConfig+0x348>)
 8003f30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f34:	08003f59 	.word	0x08003f59
 8003f38:	08003f61 	.word	0x08003f61
 8003f3c:	08003f69 	.word	0x08003f69
 8003f40:	08003f7f 	.word	0x08003f7f
 8003f44:	08003f6f 	.word	0x08003f6f
 8003f48:	08003f7f 	.word	0x08003f7f
 8003f4c:	08003f7f 	.word	0x08003f7f
 8003f50:	08003f7f 	.word	0x08003f7f
 8003f54:	08003f77 	.word	0x08003f77
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003f58:	f7fe fc1e 	bl	8002798 <HAL_RCC_GetPCLK1Freq>
 8003f5c:	61f8      	str	r0, [r7, #28]
        break;
 8003f5e:	e014      	b.n	8003f8a <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003f60:	f7fe fc30 	bl	80027c4 <HAL_RCC_GetPCLK2Freq>
 8003f64:	61f8      	str	r0, [r7, #28]
        break;
 8003f66:	e010      	b.n	8003f8a <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003f68:	4b4c      	ldr	r3, [pc, #304]	; (800409c <UART_SetConfig+0x4b0>)
 8003f6a:	61fb      	str	r3, [r7, #28]
        break;
 8003f6c:	e00d      	b.n	8003f8a <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003f6e:	f7fe fb7d 	bl	800266c <HAL_RCC_GetSysClockFreq>
 8003f72:	61f8      	str	r0, [r7, #28]
        break;
 8003f74:	e009      	b.n	8003f8a <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003f76:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003f7a:	61fb      	str	r3, [r7, #28]
        break;
 8003f7c:	e005      	b.n	8003f8a <UART_SetConfig+0x39e>
      default:
        pclk = 0U;
 8003f7e:	2300      	movs	r3, #0
 8003f80:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003f82:	2301      	movs	r3, #1
 8003f84:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003f88:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003f8a:	69fb      	ldr	r3, [r7, #28]
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d077      	beq.n	8004080 <UART_SetConfig+0x494>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003f90:	69fb      	ldr	r3, [r7, #28]
 8003f92:	005a      	lsls	r2, r3, #1
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	685b      	ldr	r3, [r3, #4]
 8003f98:	085b      	lsrs	r3, r3, #1
 8003f9a:	441a      	add	r2, r3
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	685b      	ldr	r3, [r3, #4]
 8003fa0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fa4:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003fa6:	69bb      	ldr	r3, [r7, #24]
 8003fa8:	2b0f      	cmp	r3, #15
 8003faa:	d916      	bls.n	8003fda <UART_SetConfig+0x3ee>
 8003fac:	69bb      	ldr	r3, [r7, #24]
 8003fae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003fb2:	d212      	bcs.n	8003fda <UART_SetConfig+0x3ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003fb4:	69bb      	ldr	r3, [r7, #24]
 8003fb6:	b29b      	uxth	r3, r3
 8003fb8:	f023 030f 	bic.w	r3, r3, #15
 8003fbc:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003fbe:	69bb      	ldr	r3, [r7, #24]
 8003fc0:	085b      	lsrs	r3, r3, #1
 8003fc2:	b29b      	uxth	r3, r3
 8003fc4:	f003 0307 	and.w	r3, r3, #7
 8003fc8:	b29a      	uxth	r2, r3
 8003fca:	8afb      	ldrh	r3, [r7, #22]
 8003fcc:	4313      	orrs	r3, r2
 8003fce:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	8afa      	ldrh	r2, [r7, #22]
 8003fd6:	60da      	str	r2, [r3, #12]
 8003fd8:	e052      	b.n	8004080 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8003fda:	2301      	movs	r3, #1
 8003fdc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003fe0:	e04e      	b.n	8004080 <UART_SetConfig+0x494>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003fe2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003fe6:	2b08      	cmp	r3, #8
 8003fe8:	d827      	bhi.n	800403a <UART_SetConfig+0x44e>
 8003fea:	a201      	add	r2, pc, #4	; (adr r2, 8003ff0 <UART_SetConfig+0x404>)
 8003fec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ff0:	08004015 	.word	0x08004015
 8003ff4:	0800401d 	.word	0x0800401d
 8003ff8:	08004025 	.word	0x08004025
 8003ffc:	0800403b 	.word	0x0800403b
 8004000:	0800402b 	.word	0x0800402b
 8004004:	0800403b 	.word	0x0800403b
 8004008:	0800403b 	.word	0x0800403b
 800400c:	0800403b 	.word	0x0800403b
 8004010:	08004033 	.word	0x08004033
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004014:	f7fe fbc0 	bl	8002798 <HAL_RCC_GetPCLK1Freq>
 8004018:	61f8      	str	r0, [r7, #28]
        break;
 800401a:	e014      	b.n	8004046 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800401c:	f7fe fbd2 	bl	80027c4 <HAL_RCC_GetPCLK2Freq>
 8004020:	61f8      	str	r0, [r7, #28]
        break;
 8004022:	e010      	b.n	8004046 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004024:	4b1d      	ldr	r3, [pc, #116]	; (800409c <UART_SetConfig+0x4b0>)
 8004026:	61fb      	str	r3, [r7, #28]
        break;
 8004028:	e00d      	b.n	8004046 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800402a:	f7fe fb1f 	bl	800266c <HAL_RCC_GetSysClockFreq>
 800402e:	61f8      	str	r0, [r7, #28]
        break;
 8004030:	e009      	b.n	8004046 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004032:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004036:	61fb      	str	r3, [r7, #28]
        break;
 8004038:	e005      	b.n	8004046 <UART_SetConfig+0x45a>
      default:
        pclk = 0U;
 800403a:	2300      	movs	r3, #0
 800403c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800403e:	2301      	movs	r3, #1
 8004040:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004044:	bf00      	nop
    }

    if (pclk != 0U)
 8004046:	69fb      	ldr	r3, [r7, #28]
 8004048:	2b00      	cmp	r3, #0
 800404a:	d019      	beq.n	8004080 <UART_SetConfig+0x494>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	685b      	ldr	r3, [r3, #4]
 8004050:	085a      	lsrs	r2, r3, #1
 8004052:	69fb      	ldr	r3, [r7, #28]
 8004054:	441a      	add	r2, r3
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	685b      	ldr	r3, [r3, #4]
 800405a:	fbb2 f3f3 	udiv	r3, r2, r3
 800405e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004060:	69bb      	ldr	r3, [r7, #24]
 8004062:	2b0f      	cmp	r3, #15
 8004064:	d909      	bls.n	800407a <UART_SetConfig+0x48e>
 8004066:	69bb      	ldr	r3, [r7, #24]
 8004068:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800406c:	d205      	bcs.n	800407a <UART_SetConfig+0x48e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800406e:	69bb      	ldr	r3, [r7, #24]
 8004070:	b29a      	uxth	r2, r3
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	60da      	str	r2, [r3, #12]
 8004078:	e002      	b.n	8004080 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 800407a:	2301      	movs	r3, #1
 800407c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	2200      	movs	r2, #0
 8004084:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	2200      	movs	r2, #0
 800408a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800408c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8004090:	4618      	mov	r0, r3
 8004092:	3728      	adds	r7, #40	; 0x28
 8004094:	46bd      	mov	sp, r7
 8004096:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800409a:	bf00      	nop
 800409c:	00f42400 	.word	0x00f42400

080040a0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80040a0:	b480      	push	{r7}
 80040a2:	b083      	sub	sp, #12
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040ac:	f003 0301 	and.w	r3, r3, #1
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d00a      	beq.n	80040ca <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	685b      	ldr	r3, [r3, #4]
 80040ba:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	430a      	orrs	r2, r1
 80040c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040ce:	f003 0302 	and.w	r3, r3, #2
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d00a      	beq.n	80040ec <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	685b      	ldr	r3, [r3, #4]
 80040dc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	430a      	orrs	r2, r1
 80040ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040f0:	f003 0304 	and.w	r3, r3, #4
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d00a      	beq.n	800410e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	685b      	ldr	r3, [r3, #4]
 80040fe:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	430a      	orrs	r2, r1
 800410c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004112:	f003 0308 	and.w	r3, r3, #8
 8004116:	2b00      	cmp	r3, #0
 8004118:	d00a      	beq.n	8004130 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	685b      	ldr	r3, [r3, #4]
 8004120:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	430a      	orrs	r2, r1
 800412e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004134:	f003 0310 	and.w	r3, r3, #16
 8004138:	2b00      	cmp	r3, #0
 800413a:	d00a      	beq.n	8004152 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	689b      	ldr	r3, [r3, #8]
 8004142:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	430a      	orrs	r2, r1
 8004150:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004156:	f003 0320 	and.w	r3, r3, #32
 800415a:	2b00      	cmp	r3, #0
 800415c:	d00a      	beq.n	8004174 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	689b      	ldr	r3, [r3, #8]
 8004164:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	430a      	orrs	r2, r1
 8004172:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004178:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800417c:	2b00      	cmp	r3, #0
 800417e:	d01a      	beq.n	80041b6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	685b      	ldr	r3, [r3, #4]
 8004186:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	430a      	orrs	r2, r1
 8004194:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800419a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800419e:	d10a      	bne.n	80041b6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	685b      	ldr	r3, [r3, #4]
 80041a6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	430a      	orrs	r2, r1
 80041b4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d00a      	beq.n	80041d8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	685b      	ldr	r3, [r3, #4]
 80041c8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	430a      	orrs	r2, r1
 80041d6:	605a      	str	r2, [r3, #4]
  }
}
 80041d8:	bf00      	nop
 80041da:	370c      	adds	r7, #12
 80041dc:	46bd      	mov	sp, r7
 80041de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e2:	4770      	bx	lr

080041e4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80041e4:	b580      	push	{r7, lr}
 80041e6:	b086      	sub	sp, #24
 80041e8:	af02      	add	r7, sp, #8
 80041ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2200      	movs	r2, #0
 80041f0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80041f4:	f7fd f984 	bl	8001500 <HAL_GetTick>
 80041f8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f003 0308 	and.w	r3, r3, #8
 8004204:	2b08      	cmp	r3, #8
 8004206:	d10e      	bne.n	8004226 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004208:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800420c:	9300      	str	r3, [sp, #0]
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	2200      	movs	r2, #0
 8004212:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004216:	6878      	ldr	r0, [r7, #4]
 8004218:	f000 f82d 	bl	8004276 <UART_WaitOnFlagUntilTimeout>
 800421c:	4603      	mov	r3, r0
 800421e:	2b00      	cmp	r3, #0
 8004220:	d001      	beq.n	8004226 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004222:	2303      	movs	r3, #3
 8004224:	e023      	b.n	800426e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f003 0304 	and.w	r3, r3, #4
 8004230:	2b04      	cmp	r3, #4
 8004232:	d10e      	bne.n	8004252 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004234:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004238:	9300      	str	r3, [sp, #0]
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	2200      	movs	r2, #0
 800423e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004242:	6878      	ldr	r0, [r7, #4]
 8004244:	f000 f817 	bl	8004276 <UART_WaitOnFlagUntilTimeout>
 8004248:	4603      	mov	r3, r0
 800424a:	2b00      	cmp	r3, #0
 800424c:	d001      	beq.n	8004252 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800424e:	2303      	movs	r3, #3
 8004250:	e00d      	b.n	800426e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	2220      	movs	r2, #32
 8004256:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2220      	movs	r2, #32
 800425c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	2200      	movs	r2, #0
 8004262:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	2200      	movs	r2, #0
 8004268:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800426c:	2300      	movs	r3, #0
}
 800426e:	4618      	mov	r0, r3
 8004270:	3710      	adds	r7, #16
 8004272:	46bd      	mov	sp, r7
 8004274:	bd80      	pop	{r7, pc}

08004276 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004276:	b580      	push	{r7, lr}
 8004278:	b09c      	sub	sp, #112	; 0x70
 800427a:	af00      	add	r7, sp, #0
 800427c:	60f8      	str	r0, [r7, #12]
 800427e:	60b9      	str	r1, [r7, #8]
 8004280:	603b      	str	r3, [r7, #0]
 8004282:	4613      	mov	r3, r2
 8004284:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004286:	e0a5      	b.n	80043d4 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004288:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800428a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800428e:	f000 80a1 	beq.w	80043d4 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004292:	f7fd f935 	bl	8001500 <HAL_GetTick>
 8004296:	4602      	mov	r2, r0
 8004298:	683b      	ldr	r3, [r7, #0]
 800429a:	1ad3      	subs	r3, r2, r3
 800429c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800429e:	429a      	cmp	r2, r3
 80042a0:	d302      	bcc.n	80042a8 <UART_WaitOnFlagUntilTimeout+0x32>
 80042a2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d13e      	bne.n	8004326 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80042b0:	e853 3f00 	ldrex	r3, [r3]
 80042b4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80042b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80042b8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80042bc:	667b      	str	r3, [r7, #100]	; 0x64
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	461a      	mov	r2, r3
 80042c4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80042c6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80042c8:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042ca:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80042cc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80042ce:	e841 2300 	strex	r3, r2, [r1]
 80042d2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80042d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d1e6      	bne.n	80042a8 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	3308      	adds	r3, #8
 80042e0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80042e4:	e853 3f00 	ldrex	r3, [r3]
 80042e8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80042ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042ec:	f023 0301 	bic.w	r3, r3, #1
 80042f0:	663b      	str	r3, [r7, #96]	; 0x60
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	3308      	adds	r3, #8
 80042f8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80042fa:	64ba      	str	r2, [r7, #72]	; 0x48
 80042fc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042fe:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004300:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004302:	e841 2300 	strex	r3, r2, [r1]
 8004306:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004308:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800430a:	2b00      	cmp	r3, #0
 800430c:	d1e5      	bne.n	80042da <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	2220      	movs	r2, #32
 8004312:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	2220      	movs	r2, #32
 8004318:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	2200      	movs	r2, #0
 800431e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8004322:	2303      	movs	r3, #3
 8004324:	e067      	b.n	80043f6 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f003 0304 	and.w	r3, r3, #4
 8004330:	2b00      	cmp	r3, #0
 8004332:	d04f      	beq.n	80043d4 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	69db      	ldr	r3, [r3, #28]
 800433a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800433e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004342:	d147      	bne.n	80043d4 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800434c:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004354:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004356:	e853 3f00 	ldrex	r3, [r3]
 800435a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800435c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800435e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004362:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	461a      	mov	r2, r3
 800436a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800436c:	637b      	str	r3, [r7, #52]	; 0x34
 800436e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004370:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004372:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004374:	e841 2300 	strex	r3, r2, [r1]
 8004378:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800437a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800437c:	2b00      	cmp	r3, #0
 800437e:	d1e6      	bne.n	800434e <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	3308      	adds	r3, #8
 8004386:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004388:	697b      	ldr	r3, [r7, #20]
 800438a:	e853 3f00 	ldrex	r3, [r3]
 800438e:	613b      	str	r3, [r7, #16]
   return(result);
 8004390:	693b      	ldr	r3, [r7, #16]
 8004392:	f023 0301 	bic.w	r3, r3, #1
 8004396:	66bb      	str	r3, [r7, #104]	; 0x68
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	3308      	adds	r3, #8
 800439e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80043a0:	623a      	str	r2, [r7, #32]
 80043a2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043a4:	69f9      	ldr	r1, [r7, #28]
 80043a6:	6a3a      	ldr	r2, [r7, #32]
 80043a8:	e841 2300 	strex	r3, r2, [r1]
 80043ac:	61bb      	str	r3, [r7, #24]
   return(result);
 80043ae:	69bb      	ldr	r3, [r7, #24]
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d1e5      	bne.n	8004380 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	2220      	movs	r2, #32
 80043b8:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	2220      	movs	r2, #32
 80043be:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	2220      	movs	r2, #32
 80043c4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	2200      	movs	r2, #0
 80043cc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80043d0:	2303      	movs	r3, #3
 80043d2:	e010      	b.n	80043f6 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	69da      	ldr	r2, [r3, #28]
 80043da:	68bb      	ldr	r3, [r7, #8]
 80043dc:	4013      	ands	r3, r2
 80043de:	68ba      	ldr	r2, [r7, #8]
 80043e0:	429a      	cmp	r2, r3
 80043e2:	bf0c      	ite	eq
 80043e4:	2301      	moveq	r3, #1
 80043e6:	2300      	movne	r3, #0
 80043e8:	b2db      	uxtb	r3, r3
 80043ea:	461a      	mov	r2, r3
 80043ec:	79fb      	ldrb	r3, [r7, #7]
 80043ee:	429a      	cmp	r2, r3
 80043f0:	f43f af4a 	beq.w	8004288 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80043f4:	2300      	movs	r3, #0
}
 80043f6:	4618      	mov	r0, r3
 80043f8:	3770      	adds	r7, #112	; 0x70
 80043fa:	46bd      	mov	sp, r7
 80043fc:	bd80      	pop	{r7, pc}
	...

08004400 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004400:	b480      	push	{r7}
 8004402:	b097      	sub	sp, #92	; 0x5c
 8004404:	af00      	add	r7, sp, #0
 8004406:	60f8      	str	r0, [r7, #12]
 8004408:	60b9      	str	r1, [r7, #8]
 800440a:	4613      	mov	r3, r2
 800440c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	68ba      	ldr	r2, [r7, #8]
 8004412:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	88fa      	ldrh	r2, [r7, #6]
 8004418:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	88fa      	ldrh	r2, [r7, #6]
 8004420:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	2200      	movs	r2, #0
 8004428:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	689b      	ldr	r3, [r3, #8]
 800442e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004432:	d10e      	bne.n	8004452 <UART_Start_Receive_IT+0x52>
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	691b      	ldr	r3, [r3, #16]
 8004438:	2b00      	cmp	r3, #0
 800443a:	d105      	bne.n	8004448 <UART_Start_Receive_IT+0x48>
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8004442:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004446:	e02d      	b.n	80044a4 <UART_Start_Receive_IT+0xa4>
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	22ff      	movs	r2, #255	; 0xff
 800444c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004450:	e028      	b.n	80044a4 <UART_Start_Receive_IT+0xa4>
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	689b      	ldr	r3, [r3, #8]
 8004456:	2b00      	cmp	r3, #0
 8004458:	d10d      	bne.n	8004476 <UART_Start_Receive_IT+0x76>
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	691b      	ldr	r3, [r3, #16]
 800445e:	2b00      	cmp	r3, #0
 8004460:	d104      	bne.n	800446c <UART_Start_Receive_IT+0x6c>
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	22ff      	movs	r2, #255	; 0xff
 8004466:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800446a:	e01b      	b.n	80044a4 <UART_Start_Receive_IT+0xa4>
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	227f      	movs	r2, #127	; 0x7f
 8004470:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004474:	e016      	b.n	80044a4 <UART_Start_Receive_IT+0xa4>
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	689b      	ldr	r3, [r3, #8]
 800447a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800447e:	d10d      	bne.n	800449c <UART_Start_Receive_IT+0x9c>
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	691b      	ldr	r3, [r3, #16]
 8004484:	2b00      	cmp	r3, #0
 8004486:	d104      	bne.n	8004492 <UART_Start_Receive_IT+0x92>
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	227f      	movs	r2, #127	; 0x7f
 800448c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004490:	e008      	b.n	80044a4 <UART_Start_Receive_IT+0xa4>
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	223f      	movs	r2, #63	; 0x3f
 8004496:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800449a:	e003      	b.n	80044a4 <UART_Start_Receive_IT+0xa4>
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	2200      	movs	r2, #0
 80044a0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	2200      	movs	r2, #0
 80044a8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	2222      	movs	r2, #34	; 0x22
 80044b0:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	3308      	adds	r3, #8
 80044b8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80044bc:	e853 3f00 	ldrex	r3, [r3]
 80044c0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80044c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044c4:	f043 0301 	orr.w	r3, r3, #1
 80044c8:	657b      	str	r3, [r7, #84]	; 0x54
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	3308      	adds	r3, #8
 80044d0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80044d2:	64ba      	str	r2, [r7, #72]	; 0x48
 80044d4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044d6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80044d8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80044da:	e841 2300 	strex	r3, r2, [r1]
 80044de:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80044e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d1e5      	bne.n	80044b2 <UART_Start_Receive_IT+0xb2>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	689b      	ldr	r3, [r3, #8]
 80044ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80044ee:	d107      	bne.n	8004500 <UART_Start_Receive_IT+0x100>
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	691b      	ldr	r3, [r3, #16]
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d103      	bne.n	8004500 <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	4a24      	ldr	r2, [pc, #144]	; (800458c <UART_Start_Receive_IT+0x18c>)
 80044fc:	665a      	str	r2, [r3, #100]	; 0x64
 80044fe:	e002      	b.n	8004506 <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	4a23      	ldr	r2, [pc, #140]	; (8004590 <UART_Start_Receive_IT+0x190>)
 8004504:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	2200      	movs	r2, #0
 800450a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	691b      	ldr	r3, [r3, #16]
 8004512:	2b00      	cmp	r3, #0
 8004514:	d019      	beq.n	800454a <UART_Start_Receive_IT+0x14a>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800451c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800451e:	e853 3f00 	ldrex	r3, [r3]
 8004522:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004526:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800452a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	461a      	mov	r2, r3
 8004532:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004534:	637b      	str	r3, [r7, #52]	; 0x34
 8004536:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004538:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800453a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800453c:	e841 2300 	strex	r3, r2, [r1]
 8004540:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004542:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004544:	2b00      	cmp	r3, #0
 8004546:	d1e6      	bne.n	8004516 <UART_Start_Receive_IT+0x116>
 8004548:	e018      	b.n	800457c <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004550:	697b      	ldr	r3, [r7, #20]
 8004552:	e853 3f00 	ldrex	r3, [r3]
 8004556:	613b      	str	r3, [r7, #16]
   return(result);
 8004558:	693b      	ldr	r3, [r7, #16]
 800455a:	f043 0320 	orr.w	r3, r3, #32
 800455e:	653b      	str	r3, [r7, #80]	; 0x50
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	461a      	mov	r2, r3
 8004566:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004568:	623b      	str	r3, [r7, #32]
 800456a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800456c:	69f9      	ldr	r1, [r7, #28]
 800456e:	6a3a      	ldr	r2, [r7, #32]
 8004570:	e841 2300 	strex	r3, r2, [r1]
 8004574:	61bb      	str	r3, [r7, #24]
   return(result);
 8004576:	69bb      	ldr	r3, [r7, #24]
 8004578:	2b00      	cmp	r3, #0
 800457a:	d1e6      	bne.n	800454a <UART_Start_Receive_IT+0x14a>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 800457c:	2300      	movs	r3, #0
}
 800457e:	4618      	mov	r0, r3
 8004580:	375c      	adds	r7, #92	; 0x5c
 8004582:	46bd      	mov	sp, r7
 8004584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004588:	4770      	bx	lr
 800458a:	bf00      	nop
 800458c:	0800483b 	.word	0x0800483b
 8004590:	080046db 	.word	0x080046db

08004594 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004594:	b480      	push	{r7}
 8004596:	b095      	sub	sp, #84	; 0x54
 8004598:	af00      	add	r7, sp, #0
 800459a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045a4:	e853 3f00 	ldrex	r3, [r3]
 80045a8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80045aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045ac:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80045b0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	461a      	mov	r2, r3
 80045b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80045ba:	643b      	str	r3, [r7, #64]	; 0x40
 80045bc:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045be:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80045c0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80045c2:	e841 2300 	strex	r3, r2, [r1]
 80045c6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80045c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d1e6      	bne.n	800459c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	3308      	adds	r3, #8
 80045d4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045d6:	6a3b      	ldr	r3, [r7, #32]
 80045d8:	e853 3f00 	ldrex	r3, [r3]
 80045dc:	61fb      	str	r3, [r7, #28]
   return(result);
 80045de:	69fb      	ldr	r3, [r7, #28]
 80045e0:	f023 0301 	bic.w	r3, r3, #1
 80045e4:	64bb      	str	r3, [r7, #72]	; 0x48
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	3308      	adds	r3, #8
 80045ec:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80045ee:	62fa      	str	r2, [r7, #44]	; 0x2c
 80045f0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045f2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80045f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80045f6:	e841 2300 	strex	r3, r2, [r1]
 80045fa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80045fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d1e5      	bne.n	80045ce <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004606:	2b01      	cmp	r3, #1
 8004608:	d118      	bne.n	800463c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	e853 3f00 	ldrex	r3, [r3]
 8004616:	60bb      	str	r3, [r7, #8]
   return(result);
 8004618:	68bb      	ldr	r3, [r7, #8]
 800461a:	f023 0310 	bic.w	r3, r3, #16
 800461e:	647b      	str	r3, [r7, #68]	; 0x44
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	461a      	mov	r2, r3
 8004626:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004628:	61bb      	str	r3, [r7, #24]
 800462a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800462c:	6979      	ldr	r1, [r7, #20]
 800462e:	69ba      	ldr	r2, [r7, #24]
 8004630:	e841 2300 	strex	r3, r2, [r1]
 8004634:	613b      	str	r3, [r7, #16]
   return(result);
 8004636:	693b      	ldr	r3, [r7, #16]
 8004638:	2b00      	cmp	r3, #0
 800463a:	d1e6      	bne.n	800460a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2220      	movs	r2, #32
 8004640:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	2200      	movs	r2, #0
 8004646:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	2200      	movs	r2, #0
 800464c:	665a      	str	r2, [r3, #100]	; 0x64
}
 800464e:	bf00      	nop
 8004650:	3754      	adds	r7, #84	; 0x54
 8004652:	46bd      	mov	sp, r7
 8004654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004658:	4770      	bx	lr

0800465a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800465a:	b580      	push	{r7, lr}
 800465c:	b084      	sub	sp, #16
 800465e:	af00      	add	r7, sp, #0
 8004660:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004666:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	2200      	movs	r2, #0
 800466c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	2200      	movs	r2, #0
 8004674:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004678:	68f8      	ldr	r0, [r7, #12]
 800467a:	f7ff faa1 	bl	8003bc0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800467e:	bf00      	nop
 8004680:	3710      	adds	r7, #16
 8004682:	46bd      	mov	sp, r7
 8004684:	bd80      	pop	{r7, pc}

08004686 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004686:	b580      	push	{r7, lr}
 8004688:	b088      	sub	sp, #32
 800468a:	af00      	add	r7, sp, #0
 800468c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	e853 3f00 	ldrex	r3, [r3]
 800469a:	60bb      	str	r3, [r7, #8]
   return(result);
 800469c:	68bb      	ldr	r3, [r7, #8]
 800469e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80046a2:	61fb      	str	r3, [r7, #28]
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	461a      	mov	r2, r3
 80046aa:	69fb      	ldr	r3, [r7, #28]
 80046ac:	61bb      	str	r3, [r7, #24]
 80046ae:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046b0:	6979      	ldr	r1, [r7, #20]
 80046b2:	69ba      	ldr	r2, [r7, #24]
 80046b4:	e841 2300 	strex	r3, r2, [r1]
 80046b8:	613b      	str	r3, [r7, #16]
   return(result);
 80046ba:	693b      	ldr	r3, [r7, #16]
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d1e6      	bne.n	800468e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	2220      	movs	r2, #32
 80046c4:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	2200      	movs	r2, #0
 80046ca:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80046cc:	6878      	ldr	r0, [r7, #4]
 80046ce:	f7ff fa6d 	bl	8003bac <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80046d2:	bf00      	nop
 80046d4:	3720      	adds	r7, #32
 80046d6:	46bd      	mov	sp, r7
 80046d8:	bd80      	pop	{r7, pc}

080046da <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80046da:	b580      	push	{r7, lr}
 80046dc:	b096      	sub	sp, #88	; 0x58
 80046de:	af00      	add	r7, sp, #0
 80046e0:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80046e8:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80046f0:	2b22      	cmp	r3, #34	; 0x22
 80046f2:	f040 8094 	bne.w	800481e <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80046fc:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004700:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8004704:	b2d9      	uxtb	r1, r3
 8004706:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800470a:	b2da      	uxtb	r2, r3
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004710:	400a      	ands	r2, r1
 8004712:	b2d2      	uxtb	r2, r2
 8004714:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800471a:	1c5a      	adds	r2, r3, #1
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004726:	b29b      	uxth	r3, r3
 8004728:	3b01      	subs	r3, #1
 800472a:	b29a      	uxth	r2, r3
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004738:	b29b      	uxth	r3, r3
 800473a:	2b00      	cmp	r3, #0
 800473c:	d179      	bne.n	8004832 <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004744:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004746:	e853 3f00 	ldrex	r3, [r3]
 800474a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800474c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800474e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004752:	653b      	str	r3, [r7, #80]	; 0x50
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	461a      	mov	r2, r3
 800475a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800475c:	647b      	str	r3, [r7, #68]	; 0x44
 800475e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004760:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004762:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004764:	e841 2300 	strex	r3, r2, [r1]
 8004768:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800476a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800476c:	2b00      	cmp	r3, #0
 800476e:	d1e6      	bne.n	800473e <UART_RxISR_8BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	3308      	adds	r3, #8
 8004776:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800477a:	e853 3f00 	ldrex	r3, [r3]
 800477e:	623b      	str	r3, [r7, #32]
   return(result);
 8004780:	6a3b      	ldr	r3, [r7, #32]
 8004782:	f023 0301 	bic.w	r3, r3, #1
 8004786:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	3308      	adds	r3, #8
 800478e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004790:	633a      	str	r2, [r7, #48]	; 0x30
 8004792:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004794:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004796:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004798:	e841 2300 	strex	r3, r2, [r1]
 800479c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800479e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d1e5      	bne.n	8004770 <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2220      	movs	r2, #32
 80047a8:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	2200      	movs	r2, #0
 80047ae:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80047b4:	2b01      	cmp	r3, #1
 80047b6:	d12e      	bne.n	8004816 <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2200      	movs	r2, #0
 80047bc:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047c4:	693b      	ldr	r3, [r7, #16]
 80047c6:	e853 3f00 	ldrex	r3, [r3]
 80047ca:	60fb      	str	r3, [r7, #12]
   return(result);
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	f023 0310 	bic.w	r3, r3, #16
 80047d2:	64bb      	str	r3, [r7, #72]	; 0x48
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	461a      	mov	r2, r3
 80047da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80047dc:	61fb      	str	r3, [r7, #28]
 80047de:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047e0:	69b9      	ldr	r1, [r7, #24]
 80047e2:	69fa      	ldr	r2, [r7, #28]
 80047e4:	e841 2300 	strex	r3, r2, [r1]
 80047e8:	617b      	str	r3, [r7, #20]
   return(result);
 80047ea:	697b      	ldr	r3, [r7, #20]
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d1e6      	bne.n	80047be <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	69db      	ldr	r3, [r3, #28]
 80047f6:	f003 0310 	and.w	r3, r3, #16
 80047fa:	2b10      	cmp	r3, #16
 80047fc:	d103      	bne.n	8004806 <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	2210      	movs	r2, #16
 8004804:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800480c:	4619      	mov	r1, r3
 800480e:	6878      	ldr	r0, [r7, #4]
 8004810:	f7ff f9e0 	bl	8003bd4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004814:	e00d      	b.n	8004832 <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8004816:	6878      	ldr	r0, [r7, #4]
 8004818:	f7fc fb46 	bl	8000ea8 <HAL_UART_RxCpltCallback>
}
 800481c:	e009      	b.n	8004832 <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	8b1b      	ldrh	r3, [r3, #24]
 8004824:	b29a      	uxth	r2, r3
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f042 0208 	orr.w	r2, r2, #8
 800482e:	b292      	uxth	r2, r2
 8004830:	831a      	strh	r2, [r3, #24]
}
 8004832:	bf00      	nop
 8004834:	3758      	adds	r7, #88	; 0x58
 8004836:	46bd      	mov	sp, r7
 8004838:	bd80      	pop	{r7, pc}

0800483a <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800483a:	b580      	push	{r7, lr}
 800483c:	b096      	sub	sp, #88	; 0x58
 800483e:	af00      	add	r7, sp, #0
 8004840:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004848:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004850:	2b22      	cmp	r3, #34	; 0x22
 8004852:	f040 8094 	bne.w	800497e <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800485c:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004864:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8004866:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800486a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800486e:	4013      	ands	r3, r2
 8004870:	b29a      	uxth	r2, r3
 8004872:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004874:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800487a:	1c9a      	adds	r2, r3, #2
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004886:	b29b      	uxth	r3, r3
 8004888:	3b01      	subs	r3, #1
 800488a:	b29a      	uxth	r2, r3
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004898:	b29b      	uxth	r3, r3
 800489a:	2b00      	cmp	r3, #0
 800489c:	d179      	bne.n	8004992 <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048a6:	e853 3f00 	ldrex	r3, [r3]
 80048aa:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80048ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048ae:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80048b2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	461a      	mov	r2, r3
 80048ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80048bc:	643b      	str	r3, [r7, #64]	; 0x40
 80048be:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048c0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80048c2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80048c4:	e841 2300 	strex	r3, r2, [r1]
 80048c8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80048ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d1e6      	bne.n	800489e <UART_RxISR_16BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	3308      	adds	r3, #8
 80048d6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048d8:	6a3b      	ldr	r3, [r7, #32]
 80048da:	e853 3f00 	ldrex	r3, [r3]
 80048de:	61fb      	str	r3, [r7, #28]
   return(result);
 80048e0:	69fb      	ldr	r3, [r7, #28]
 80048e2:	f023 0301 	bic.w	r3, r3, #1
 80048e6:	64bb      	str	r3, [r7, #72]	; 0x48
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	3308      	adds	r3, #8
 80048ee:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80048f0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80048f2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048f4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80048f6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80048f8:	e841 2300 	strex	r3, r2, [r1]
 80048fc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80048fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004900:	2b00      	cmp	r3, #0
 8004902:	d1e5      	bne.n	80048d0 <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2220      	movs	r2, #32
 8004908:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	2200      	movs	r2, #0
 800490e:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004914:	2b01      	cmp	r3, #1
 8004916:	d12e      	bne.n	8004976 <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2200      	movs	r2, #0
 800491c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	e853 3f00 	ldrex	r3, [r3]
 800492a:	60bb      	str	r3, [r7, #8]
   return(result);
 800492c:	68bb      	ldr	r3, [r7, #8]
 800492e:	f023 0310 	bic.w	r3, r3, #16
 8004932:	647b      	str	r3, [r7, #68]	; 0x44
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	461a      	mov	r2, r3
 800493a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800493c:	61bb      	str	r3, [r7, #24]
 800493e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004940:	6979      	ldr	r1, [r7, #20]
 8004942:	69ba      	ldr	r2, [r7, #24]
 8004944:	e841 2300 	strex	r3, r2, [r1]
 8004948:	613b      	str	r3, [r7, #16]
   return(result);
 800494a:	693b      	ldr	r3, [r7, #16]
 800494c:	2b00      	cmp	r3, #0
 800494e:	d1e6      	bne.n	800491e <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	69db      	ldr	r3, [r3, #28]
 8004956:	f003 0310 	and.w	r3, r3, #16
 800495a:	2b10      	cmp	r3, #16
 800495c:	d103      	bne.n	8004966 <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	2210      	movs	r2, #16
 8004964:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800496c:	4619      	mov	r1, r3
 800496e:	6878      	ldr	r0, [r7, #4]
 8004970:	f7ff f930 	bl	8003bd4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004974:	e00d      	b.n	8004992 <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8004976:	6878      	ldr	r0, [r7, #4]
 8004978:	f7fc fa96 	bl	8000ea8 <HAL_UART_RxCpltCallback>
}
 800497c:	e009      	b.n	8004992 <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	8b1b      	ldrh	r3, [r3, #24]
 8004984:	b29a      	uxth	r2, r3
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f042 0208 	orr.w	r2, r2, #8
 800498e:	b292      	uxth	r2, r2
 8004990:	831a      	strh	r2, [r3, #24]
}
 8004992:	bf00      	nop
 8004994:	3758      	adds	r7, #88	; 0x58
 8004996:	46bd      	mov	sp, r7
 8004998:	bd80      	pop	{r7, pc}

0800499a <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800499a:	b480      	push	{r7}
 800499c:	b083      	sub	sp, #12
 800499e:	af00      	add	r7, sp, #0
 80049a0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80049a2:	bf00      	nop
 80049a4:	370c      	adds	r7, #12
 80049a6:	46bd      	mov	sp, r7
 80049a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ac:	4770      	bx	lr
	...

080049b0 <__NVIC_SetPriority>:
{
 80049b0:	b480      	push	{r7}
 80049b2:	b083      	sub	sp, #12
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	4603      	mov	r3, r0
 80049b8:	6039      	str	r1, [r7, #0]
 80049ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80049bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	db0a      	blt.n	80049da <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80049c4:	683b      	ldr	r3, [r7, #0]
 80049c6:	b2da      	uxtb	r2, r3
 80049c8:	490c      	ldr	r1, [pc, #48]	; (80049fc <__NVIC_SetPriority+0x4c>)
 80049ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80049ce:	0112      	lsls	r2, r2, #4
 80049d0:	b2d2      	uxtb	r2, r2
 80049d2:	440b      	add	r3, r1
 80049d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80049d8:	e00a      	b.n	80049f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80049da:	683b      	ldr	r3, [r7, #0]
 80049dc:	b2da      	uxtb	r2, r3
 80049de:	4908      	ldr	r1, [pc, #32]	; (8004a00 <__NVIC_SetPriority+0x50>)
 80049e0:	79fb      	ldrb	r3, [r7, #7]
 80049e2:	f003 030f 	and.w	r3, r3, #15
 80049e6:	3b04      	subs	r3, #4
 80049e8:	0112      	lsls	r2, r2, #4
 80049ea:	b2d2      	uxtb	r2, r2
 80049ec:	440b      	add	r3, r1
 80049ee:	761a      	strb	r2, [r3, #24]
}
 80049f0:	bf00      	nop
 80049f2:	370c      	adds	r7, #12
 80049f4:	46bd      	mov	sp, r7
 80049f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fa:	4770      	bx	lr
 80049fc:	e000e100 	.word	0xe000e100
 8004a00:	e000ed00 	.word	0xe000ed00

08004a04 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8004a04:	b580      	push	{r7, lr}
 8004a06:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8004a08:	4b05      	ldr	r3, [pc, #20]	; (8004a20 <SysTick_Handler+0x1c>)
 8004a0a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8004a0c:	f002 fa7c 	bl	8006f08 <xTaskGetSchedulerState>
 8004a10:	4603      	mov	r3, r0
 8004a12:	2b01      	cmp	r3, #1
 8004a14:	d001      	beq.n	8004a1a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8004a16:	f003 f89f 	bl	8007b58 <xPortSysTickHandler>
  }
}
 8004a1a:	bf00      	nop
 8004a1c:	bd80      	pop	{r7, pc}
 8004a1e:	bf00      	nop
 8004a20:	e000e010 	.word	0xe000e010

08004a24 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8004a24:	b580      	push	{r7, lr}
 8004a26:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8004a28:	2100      	movs	r1, #0
 8004a2a:	f06f 0004 	mvn.w	r0, #4
 8004a2e:	f7ff ffbf 	bl	80049b0 <__NVIC_SetPriority>
#endif
}
 8004a32:	bf00      	nop
 8004a34:	bd80      	pop	{r7, pc}
	...

08004a38 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004a38:	b480      	push	{r7}
 8004a3a:	b083      	sub	sp, #12
 8004a3c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004a3e:	f3ef 8305 	mrs	r3, IPSR
 8004a42:	603b      	str	r3, [r7, #0]
  return(result);
 8004a44:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d003      	beq.n	8004a52 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8004a4a:	f06f 0305 	mvn.w	r3, #5
 8004a4e:	607b      	str	r3, [r7, #4]
 8004a50:	e00c      	b.n	8004a6c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8004a52:	4b0a      	ldr	r3, [pc, #40]	; (8004a7c <osKernelInitialize+0x44>)
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d105      	bne.n	8004a66 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8004a5a:	4b08      	ldr	r3, [pc, #32]	; (8004a7c <osKernelInitialize+0x44>)
 8004a5c:	2201      	movs	r2, #1
 8004a5e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004a60:	2300      	movs	r3, #0
 8004a62:	607b      	str	r3, [r7, #4]
 8004a64:	e002      	b.n	8004a6c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8004a66:	f04f 33ff 	mov.w	r3, #4294967295
 8004a6a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004a6c:	687b      	ldr	r3, [r7, #4]
}
 8004a6e:	4618      	mov	r0, r3
 8004a70:	370c      	adds	r7, #12
 8004a72:	46bd      	mov	sp, r7
 8004a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a78:	4770      	bx	lr
 8004a7a:	bf00      	nop
 8004a7c:	200002f0 	.word	0x200002f0

08004a80 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004a80:	b580      	push	{r7, lr}
 8004a82:	b082      	sub	sp, #8
 8004a84:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004a86:	f3ef 8305 	mrs	r3, IPSR
 8004a8a:	603b      	str	r3, [r7, #0]
  return(result);
 8004a8c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d003      	beq.n	8004a9a <osKernelStart+0x1a>
    stat = osErrorISR;
 8004a92:	f06f 0305 	mvn.w	r3, #5
 8004a96:	607b      	str	r3, [r7, #4]
 8004a98:	e010      	b.n	8004abc <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8004a9a:	4b0b      	ldr	r3, [pc, #44]	; (8004ac8 <osKernelStart+0x48>)
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	2b01      	cmp	r3, #1
 8004aa0:	d109      	bne.n	8004ab6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8004aa2:	f7ff ffbf 	bl	8004a24 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8004aa6:	4b08      	ldr	r3, [pc, #32]	; (8004ac8 <osKernelStart+0x48>)
 8004aa8:	2202      	movs	r2, #2
 8004aaa:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8004aac:	f001 fd32 	bl	8006514 <vTaskStartScheduler>
      stat = osOK;
 8004ab0:	2300      	movs	r3, #0
 8004ab2:	607b      	str	r3, [r7, #4]
 8004ab4:	e002      	b.n	8004abc <osKernelStart+0x3c>
    } else {
      stat = osError;
 8004ab6:	f04f 33ff 	mov.w	r3, #4294967295
 8004aba:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004abc:	687b      	ldr	r3, [r7, #4]
}
 8004abe:	4618      	mov	r0, r3
 8004ac0:	3708      	adds	r7, #8
 8004ac2:	46bd      	mov	sp, r7
 8004ac4:	bd80      	pop	{r7, pc}
 8004ac6:	bf00      	nop
 8004ac8:	200002f0 	.word	0x200002f0

08004acc <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004acc:	b580      	push	{r7, lr}
 8004ace:	b08e      	sub	sp, #56	; 0x38
 8004ad0:	af04      	add	r7, sp, #16
 8004ad2:	60f8      	str	r0, [r7, #12]
 8004ad4:	60b9      	str	r1, [r7, #8]
 8004ad6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004ad8:	2300      	movs	r3, #0
 8004ada:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004adc:	f3ef 8305 	mrs	r3, IPSR
 8004ae0:	617b      	str	r3, [r7, #20]
  return(result);
 8004ae2:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d17e      	bne.n	8004be6 <osThreadNew+0x11a>
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d07b      	beq.n	8004be6 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8004aee:	2380      	movs	r3, #128	; 0x80
 8004af0:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8004af2:	2318      	movs	r3, #24
 8004af4:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8004af6:	2300      	movs	r3, #0
 8004af8:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8004afa:	f04f 33ff 	mov.w	r3, #4294967295
 8004afe:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d045      	beq.n	8004b92 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d002      	beq.n	8004b14 <osThreadNew+0x48>
        name = attr->name;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	699b      	ldr	r3, [r3, #24]
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d002      	beq.n	8004b22 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	699b      	ldr	r3, [r3, #24]
 8004b20:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004b22:	69fb      	ldr	r3, [r7, #28]
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d008      	beq.n	8004b3a <osThreadNew+0x6e>
 8004b28:	69fb      	ldr	r3, [r7, #28]
 8004b2a:	2b38      	cmp	r3, #56	; 0x38
 8004b2c:	d805      	bhi.n	8004b3a <osThreadNew+0x6e>
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	685b      	ldr	r3, [r3, #4]
 8004b32:	f003 0301 	and.w	r3, r3, #1
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d001      	beq.n	8004b3e <osThreadNew+0x72>
        return (NULL);
 8004b3a:	2300      	movs	r3, #0
 8004b3c:	e054      	b.n	8004be8 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	695b      	ldr	r3, [r3, #20]
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d003      	beq.n	8004b4e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	695b      	ldr	r3, [r3, #20]
 8004b4a:	089b      	lsrs	r3, r3, #2
 8004b4c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	689b      	ldr	r3, [r3, #8]
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d00e      	beq.n	8004b74 <osThreadNew+0xa8>
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	68db      	ldr	r3, [r3, #12]
 8004b5a:	2ba7      	cmp	r3, #167	; 0xa7
 8004b5c:	d90a      	bls.n	8004b74 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d006      	beq.n	8004b74 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	695b      	ldr	r3, [r3, #20]
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d002      	beq.n	8004b74 <osThreadNew+0xa8>
        mem = 1;
 8004b6e:	2301      	movs	r3, #1
 8004b70:	61bb      	str	r3, [r7, #24]
 8004b72:	e010      	b.n	8004b96 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	689b      	ldr	r3, [r3, #8]
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d10c      	bne.n	8004b96 <osThreadNew+0xca>
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	68db      	ldr	r3, [r3, #12]
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d108      	bne.n	8004b96 <osThreadNew+0xca>
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	691b      	ldr	r3, [r3, #16]
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d104      	bne.n	8004b96 <osThreadNew+0xca>
          mem = 0;
 8004b8c:	2300      	movs	r3, #0
 8004b8e:	61bb      	str	r3, [r7, #24]
 8004b90:	e001      	b.n	8004b96 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8004b92:	2300      	movs	r3, #0
 8004b94:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8004b96:	69bb      	ldr	r3, [r7, #24]
 8004b98:	2b01      	cmp	r3, #1
 8004b9a:	d110      	bne.n	8004bbe <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8004ba0:	687a      	ldr	r2, [r7, #4]
 8004ba2:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004ba4:	9202      	str	r2, [sp, #8]
 8004ba6:	9301      	str	r3, [sp, #4]
 8004ba8:	69fb      	ldr	r3, [r7, #28]
 8004baa:	9300      	str	r3, [sp, #0]
 8004bac:	68bb      	ldr	r3, [r7, #8]
 8004bae:	6a3a      	ldr	r2, [r7, #32]
 8004bb0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004bb2:	68f8      	ldr	r0, [r7, #12]
 8004bb4:	f001 fac2 	bl	800613c <xTaskCreateStatic>
 8004bb8:	4603      	mov	r3, r0
 8004bba:	613b      	str	r3, [r7, #16]
 8004bbc:	e013      	b.n	8004be6 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8004bbe:	69bb      	ldr	r3, [r7, #24]
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d110      	bne.n	8004be6 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004bc4:	6a3b      	ldr	r3, [r7, #32]
 8004bc6:	b29a      	uxth	r2, r3
 8004bc8:	f107 0310 	add.w	r3, r7, #16
 8004bcc:	9301      	str	r3, [sp, #4]
 8004bce:	69fb      	ldr	r3, [r7, #28]
 8004bd0:	9300      	str	r3, [sp, #0]
 8004bd2:	68bb      	ldr	r3, [r7, #8]
 8004bd4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004bd6:	68f8      	ldr	r0, [r7, #12]
 8004bd8:	f001 fb0d 	bl	80061f6 <xTaskCreate>
 8004bdc:	4603      	mov	r3, r0
 8004bde:	2b01      	cmp	r3, #1
 8004be0:	d001      	beq.n	8004be6 <osThreadNew+0x11a>
            hTask = NULL;
 8004be2:	2300      	movs	r3, #0
 8004be4:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8004be6:	693b      	ldr	r3, [r7, #16]
}
 8004be8:	4618      	mov	r0, r3
 8004bea:	3728      	adds	r7, #40	; 0x28
 8004bec:	46bd      	mov	sp, r7
 8004bee:	bd80      	pop	{r7, pc}

08004bf0 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8004bf0:	b580      	push	{r7, lr}
 8004bf2:	b084      	sub	sp, #16
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004bf8:	f3ef 8305 	mrs	r3, IPSR
 8004bfc:	60bb      	str	r3, [r7, #8]
  return(result);
 8004bfe:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d003      	beq.n	8004c0c <osDelay+0x1c>
    stat = osErrorISR;
 8004c04:	f06f 0305 	mvn.w	r3, #5
 8004c08:	60fb      	str	r3, [r7, #12]
 8004c0a:	e007      	b.n	8004c1c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8004c0c:	2300      	movs	r3, #0
 8004c0e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d002      	beq.n	8004c1c <osDelay+0x2c>
      vTaskDelay(ticks);
 8004c16:	6878      	ldr	r0, [r7, #4]
 8004c18:	f001 fc48 	bl	80064ac <vTaskDelay>
    }
  }

  return (stat);
 8004c1c:	68fb      	ldr	r3, [r7, #12]
}
 8004c1e:	4618      	mov	r0, r3
 8004c20:	3710      	adds	r7, #16
 8004c22:	46bd      	mov	sp, r7
 8004c24:	bd80      	pop	{r7, pc}

08004c26 <osEventFlagsNew>:
}
#endif /* (configUSE_OS2_TIMER == 1) */

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 8004c26:	b580      	push	{r7, lr}
 8004c28:	b086      	sub	sp, #24
 8004c2a:	af00      	add	r7, sp, #0
 8004c2c:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 8004c2e:	2300      	movs	r3, #0
 8004c30:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004c32:	f3ef 8305 	mrs	r3, IPSR
 8004c36:	60fb      	str	r3, [r7, #12]
  return(result);
 8004c38:	68fb      	ldr	r3, [r7, #12]

  if (!IS_IRQ()) {
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d12d      	bne.n	8004c9a <osEventFlagsNew+0x74>
    mem = -1;
 8004c3e:	f04f 33ff 	mov.w	r3, #4294967295
 8004c42:	613b      	str	r3, [r7, #16]

    if (attr != NULL) {
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d015      	beq.n	8004c76 <osEventFlagsNew+0x50>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	689b      	ldr	r3, [r3, #8]
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d006      	beq.n	8004c60 <osEventFlagsNew+0x3a>
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	68db      	ldr	r3, [r3, #12]
 8004c56:	2b1f      	cmp	r3, #31
 8004c58:	d902      	bls.n	8004c60 <osEventFlagsNew+0x3a>
        mem = 1;
 8004c5a:	2301      	movs	r3, #1
 8004c5c:	613b      	str	r3, [r7, #16]
 8004c5e:	e00c      	b.n	8004c7a <osEventFlagsNew+0x54>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	689b      	ldr	r3, [r3, #8]
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d108      	bne.n	8004c7a <osEventFlagsNew+0x54>
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	68db      	ldr	r3, [r3, #12]
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d104      	bne.n	8004c7a <osEventFlagsNew+0x54>
          mem = 0;
 8004c70:	2300      	movs	r3, #0
 8004c72:	613b      	str	r3, [r7, #16]
 8004c74:	e001      	b.n	8004c7a <osEventFlagsNew+0x54>
        }
      }
    }
    else {
      mem = 0;
 8004c76:	2300      	movs	r3, #0
 8004c78:	613b      	str	r3, [r7, #16]
    }

    if (mem == 1) {
 8004c7a:	693b      	ldr	r3, [r7, #16]
 8004c7c:	2b01      	cmp	r3, #1
 8004c7e:	d106      	bne.n	8004c8e <osEventFlagsNew+0x68>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	689b      	ldr	r3, [r3, #8]
 8004c84:	4618      	mov	r0, r3
 8004c86:	f000 fa45 	bl	8005114 <xEventGroupCreateStatic>
 8004c8a:	6178      	str	r0, [r7, #20]
 8004c8c:	e005      	b.n	8004c9a <osEventFlagsNew+0x74>
      #endif
    }
    else {
      if (mem == 0) {
 8004c8e:	693b      	ldr	r3, [r7, #16]
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d102      	bne.n	8004c9a <osEventFlagsNew+0x74>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hEventGroup = xEventGroupCreate();
 8004c94:	f000 fa75 	bl	8005182 <xEventGroupCreate>
 8004c98:	6178      	str	r0, [r7, #20]
        #endif
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 8004c9a:	697b      	ldr	r3, [r7, #20]
}
 8004c9c:	4618      	mov	r0, r3
 8004c9e:	3718      	adds	r7, #24
 8004ca0:	46bd      	mov	sp, r7
 8004ca2:	bd80      	pop	{r7, pc}

08004ca4 <osEventFlagsSet>:

uint32_t osEventFlagsSet (osEventFlagsId_t ef_id, uint32_t flags) {
 8004ca4:	b580      	push	{r7, lr}
 8004ca6:	b086      	sub	sp, #24
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]
 8004cac:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	613b      	str	r3, [r7, #16]
  uint32_t rflags;
  BaseType_t yield;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8004cb2:	693b      	ldr	r3, [r7, #16]
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d004      	beq.n	8004cc2 <osEventFlagsSet+0x1e>
 8004cb8:	683b      	ldr	r3, [r7, #0]
 8004cba:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d003      	beq.n	8004cca <osEventFlagsSet+0x26>
    rflags = (uint32_t)osErrorParameter;
 8004cc2:	f06f 0303 	mvn.w	r3, #3
 8004cc6:	617b      	str	r3, [r7, #20]
 8004cc8:	e028      	b.n	8004d1c <osEventFlagsSet+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004cca:	f3ef 8305 	mrs	r3, IPSR
 8004cce:	60fb      	str	r3, [r7, #12]
  return(result);
 8004cd0:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d01d      	beq.n	8004d12 <osEventFlagsSet+0x6e>
  #if (configUSE_OS2_EVENTFLAGS_FROM_ISR == 0)
    (void)yield;
    /* Enable timers and xTimerPendFunctionCall function to support osEventFlagsSet from ISR */
    rflags = (uint32_t)osErrorResource;
  #else
    yield = pdFALSE;
 8004cd6:	2300      	movs	r3, #0
 8004cd8:	60bb      	str	r3, [r7, #8]

    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 8004cda:	f107 0308 	add.w	r3, r7, #8
 8004cde:	461a      	mov	r2, r3
 8004ce0:	6839      	ldr	r1, [r7, #0]
 8004ce2:	6938      	ldr	r0, [r7, #16]
 8004ce4:	f000 fbf0 	bl	80054c8 <xEventGroupSetBitsFromISR>
 8004ce8:	4603      	mov	r3, r0
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d103      	bne.n	8004cf6 <osEventFlagsSet+0x52>
      rflags = (uint32_t)osErrorResource;
 8004cee:	f06f 0302 	mvn.w	r3, #2
 8004cf2:	617b      	str	r3, [r7, #20]
 8004cf4:	e012      	b.n	8004d1c <osEventFlagsSet+0x78>
    } else {
      rflags = flags;
 8004cf6:	683b      	ldr	r3, [r7, #0]
 8004cf8:	617b      	str	r3, [r7, #20]
      portYIELD_FROM_ISR (yield);
 8004cfa:	68bb      	ldr	r3, [r7, #8]
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d00d      	beq.n	8004d1c <osEventFlagsSet+0x78>
 8004d00:	4b09      	ldr	r3, [pc, #36]	; (8004d28 <osEventFlagsSet+0x84>)
 8004d02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d06:	601a      	str	r2, [r3, #0]
 8004d08:	f3bf 8f4f 	dsb	sy
 8004d0c:	f3bf 8f6f 	isb	sy
 8004d10:	e004      	b.n	8004d1c <osEventFlagsSet+0x78>
    }
  #endif
  }
  else {
    rflags = xEventGroupSetBits (hEventGroup, (EventBits_t)flags);
 8004d12:	6839      	ldr	r1, [r7, #0]
 8004d14:	6938      	ldr	r0, [r7, #16]
 8004d16:	f000 fb1d 	bl	8005354 <xEventGroupSetBits>
 8004d1a:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 8004d1c:	697b      	ldr	r3, [r7, #20]
}
 8004d1e:	4618      	mov	r0, r3
 8004d20:	3718      	adds	r7, #24
 8004d22:	46bd      	mov	sp, r7
 8004d24:	bd80      	pop	{r7, pc}
 8004d26:	bf00      	nop
 8004d28:	e000ed04 	.word	0xe000ed04

08004d2c <osEventFlagsWait>:
  }

  return (rflags);
}

uint32_t osEventFlagsWait (osEventFlagsId_t ef_id, uint32_t flags, uint32_t options, uint32_t timeout) {
 8004d2c:	b580      	push	{r7, lr}
 8004d2e:	b08c      	sub	sp, #48	; 0x30
 8004d30:	af02      	add	r7, sp, #8
 8004d32:	60f8      	str	r0, [r7, #12]
 8004d34:	60b9      	str	r1, [r7, #8]
 8004d36:	607a      	str	r2, [r7, #4]
 8004d38:	603b      	str	r3, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	61bb      	str	r3, [r7, #24]
  BaseType_t wait_all;
  BaseType_t exit_clr;
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8004d3e:	69bb      	ldr	r3, [r7, #24]
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d004      	beq.n	8004d4e <osEventFlagsWait+0x22>
 8004d44:	68bb      	ldr	r3, [r7, #8]
 8004d46:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d003      	beq.n	8004d56 <osEventFlagsWait+0x2a>
    rflags = (uint32_t)osErrorParameter;
 8004d4e:	f06f 0303 	mvn.w	r3, #3
 8004d52:	61fb      	str	r3, [r7, #28]
 8004d54:	e04b      	b.n	8004dee <osEventFlagsWait+0xc2>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004d56:	f3ef 8305 	mrs	r3, IPSR
 8004d5a:	617b      	str	r3, [r7, #20]
  return(result);
 8004d5c:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d003      	beq.n	8004d6a <osEventFlagsWait+0x3e>
    rflags = (uint32_t)osErrorISR;
 8004d62:	f06f 0305 	mvn.w	r3, #5
 8004d66:	61fb      	str	r3, [r7, #28]
 8004d68:	e041      	b.n	8004dee <osEventFlagsWait+0xc2>
  }
  else {
    if (options & osFlagsWaitAll) {
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	f003 0301 	and.w	r3, r3, #1
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d002      	beq.n	8004d7a <osEventFlagsWait+0x4e>
      wait_all = pdTRUE;
 8004d74:	2301      	movs	r3, #1
 8004d76:	627b      	str	r3, [r7, #36]	; 0x24
 8004d78:	e001      	b.n	8004d7e <osEventFlagsWait+0x52>
    } else {
      wait_all = pdFAIL;
 8004d7a:	2300      	movs	r3, #0
 8004d7c:	627b      	str	r3, [r7, #36]	; 0x24
    }

    if (options & osFlagsNoClear) {
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	f003 0302 	and.w	r3, r3, #2
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d002      	beq.n	8004d8e <osEventFlagsWait+0x62>
      exit_clr = pdFAIL;
 8004d88:	2300      	movs	r3, #0
 8004d8a:	623b      	str	r3, [r7, #32]
 8004d8c:	e001      	b.n	8004d92 <osEventFlagsWait+0x66>
    } else {
      exit_clr = pdTRUE;
 8004d8e:	2301      	movs	r3, #1
 8004d90:	623b      	str	r3, [r7, #32]
    }

    rflags = xEventGroupWaitBits (hEventGroup, (EventBits_t)flags, exit_clr, wait_all, (TickType_t)timeout);
 8004d92:	683b      	ldr	r3, [r7, #0]
 8004d94:	9300      	str	r3, [sp, #0]
 8004d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d98:	6a3a      	ldr	r2, [r7, #32]
 8004d9a:	68b9      	ldr	r1, [r7, #8]
 8004d9c:	69b8      	ldr	r0, [r7, #24]
 8004d9e:	f000 fa0b 	bl	80051b8 <xEventGroupWaitBits>
 8004da2:	61f8      	str	r0, [r7, #28]

    if (options & osFlagsWaitAll) {
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	f003 0301 	and.w	r3, r3, #1
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d010      	beq.n	8004dd0 <osEventFlagsWait+0xa4>
      if ((flags & rflags) != flags) {
 8004dae:	68ba      	ldr	r2, [r7, #8]
 8004db0:	69fb      	ldr	r3, [r7, #28]
 8004db2:	4013      	ands	r3, r2
 8004db4:	68ba      	ldr	r2, [r7, #8]
 8004db6:	429a      	cmp	r2, r3
 8004db8:	d019      	beq.n	8004dee <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 8004dba:	683b      	ldr	r3, [r7, #0]
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d003      	beq.n	8004dc8 <osEventFlagsWait+0x9c>
          rflags = (uint32_t)osErrorTimeout;
 8004dc0:	f06f 0301 	mvn.w	r3, #1
 8004dc4:	61fb      	str	r3, [r7, #28]
 8004dc6:	e012      	b.n	8004dee <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 8004dc8:	f06f 0302 	mvn.w	r3, #2
 8004dcc:	61fb      	str	r3, [r7, #28]
 8004dce:	e00e      	b.n	8004dee <osEventFlagsWait+0xc2>
        }
      }
    }
    else {
      if ((flags & rflags) == 0U) {
 8004dd0:	68ba      	ldr	r2, [r7, #8]
 8004dd2:	69fb      	ldr	r3, [r7, #28]
 8004dd4:	4013      	ands	r3, r2
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d109      	bne.n	8004dee <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 8004dda:	683b      	ldr	r3, [r7, #0]
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d003      	beq.n	8004de8 <osEventFlagsWait+0xbc>
          rflags = (uint32_t)osErrorTimeout;
 8004de0:	f06f 0301 	mvn.w	r3, #1
 8004de4:	61fb      	str	r3, [r7, #28]
 8004de6:	e002      	b.n	8004dee <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 8004de8:	f06f 0302 	mvn.w	r3, #2
 8004dec:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (rflags);
 8004dee:	69fb      	ldr	r3, [r7, #28]
}
 8004df0:	4618      	mov	r0, r3
 8004df2:	3728      	adds	r7, #40	; 0x28
 8004df4:	46bd      	mov	sp, r7
 8004df6:	bd80      	pop	{r7, pc}

08004df8 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8004df8:	b580      	push	{r7, lr}
 8004dfa:	b088      	sub	sp, #32
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8004e00:	2300      	movs	r3, #0
 8004e02:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004e04:	f3ef 8305 	mrs	r3, IPSR
 8004e08:	60bb      	str	r3, [r7, #8]
  return(result);
 8004e0a:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d174      	bne.n	8004efa <osMutexNew+0x102>
    if (attr != NULL) {
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d003      	beq.n	8004e1e <osMutexNew+0x26>
      type = attr->attr_bits;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	685b      	ldr	r3, [r3, #4]
 8004e1a:	61bb      	str	r3, [r7, #24]
 8004e1c:	e001      	b.n	8004e22 <osMutexNew+0x2a>
    } else {
      type = 0U;
 8004e1e:	2300      	movs	r3, #0
 8004e20:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8004e22:	69bb      	ldr	r3, [r7, #24]
 8004e24:	f003 0301 	and.w	r3, r3, #1
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d002      	beq.n	8004e32 <osMutexNew+0x3a>
      rmtx = 1U;
 8004e2c:	2301      	movs	r3, #1
 8004e2e:	617b      	str	r3, [r7, #20]
 8004e30:	e001      	b.n	8004e36 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 8004e32:	2300      	movs	r3, #0
 8004e34:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8004e36:	69bb      	ldr	r3, [r7, #24]
 8004e38:	f003 0308 	and.w	r3, r3, #8
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d15c      	bne.n	8004efa <osMutexNew+0x102>
      mem = -1;
 8004e40:	f04f 33ff 	mov.w	r3, #4294967295
 8004e44:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d015      	beq.n	8004e78 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	689b      	ldr	r3, [r3, #8]
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d006      	beq.n	8004e62 <osMutexNew+0x6a>
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	68db      	ldr	r3, [r3, #12]
 8004e58:	2b4f      	cmp	r3, #79	; 0x4f
 8004e5a:	d902      	bls.n	8004e62 <osMutexNew+0x6a>
          mem = 1;
 8004e5c:	2301      	movs	r3, #1
 8004e5e:	613b      	str	r3, [r7, #16]
 8004e60:	e00c      	b.n	8004e7c <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	689b      	ldr	r3, [r3, #8]
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d108      	bne.n	8004e7c <osMutexNew+0x84>
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	68db      	ldr	r3, [r3, #12]
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d104      	bne.n	8004e7c <osMutexNew+0x84>
            mem = 0;
 8004e72:	2300      	movs	r3, #0
 8004e74:	613b      	str	r3, [r7, #16]
 8004e76:	e001      	b.n	8004e7c <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 8004e78:	2300      	movs	r3, #0
 8004e7a:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 8004e7c:	693b      	ldr	r3, [r7, #16]
 8004e7e:	2b01      	cmp	r3, #1
 8004e80:	d112      	bne.n	8004ea8 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 8004e82:	697b      	ldr	r3, [r7, #20]
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d007      	beq.n	8004e98 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	689b      	ldr	r3, [r3, #8]
 8004e8c:	4619      	mov	r1, r3
 8004e8e:	2004      	movs	r0, #4
 8004e90:	f000 fd51 	bl	8005936 <xQueueCreateMutexStatic>
 8004e94:	61f8      	str	r0, [r7, #28]
 8004e96:	e016      	b.n	8004ec6 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	689b      	ldr	r3, [r3, #8]
 8004e9c:	4619      	mov	r1, r3
 8004e9e:	2001      	movs	r0, #1
 8004ea0:	f000 fd49 	bl	8005936 <xQueueCreateMutexStatic>
 8004ea4:	61f8      	str	r0, [r7, #28]
 8004ea6:	e00e      	b.n	8004ec6 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 8004ea8:	693b      	ldr	r3, [r7, #16]
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d10b      	bne.n	8004ec6 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 8004eae:	697b      	ldr	r3, [r7, #20]
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d004      	beq.n	8004ebe <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 8004eb4:	2004      	movs	r0, #4
 8004eb6:	f000 fd26 	bl	8005906 <xQueueCreateMutex>
 8004eba:	61f8      	str	r0, [r7, #28]
 8004ebc:	e003      	b.n	8004ec6 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 8004ebe:	2001      	movs	r0, #1
 8004ec0:	f000 fd21 	bl	8005906 <xQueueCreateMutex>
 8004ec4:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8004ec6:	69fb      	ldr	r3, [r7, #28]
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d00c      	beq.n	8004ee6 <osMutexNew+0xee>
        if (attr != NULL) {
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d003      	beq.n	8004eda <osMutexNew+0xe2>
          name = attr->name;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	60fb      	str	r3, [r7, #12]
 8004ed8:	e001      	b.n	8004ede <osMutexNew+0xe6>
        } else {
          name = NULL;
 8004eda:	2300      	movs	r3, #0
 8004edc:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 8004ede:	68f9      	ldr	r1, [r7, #12]
 8004ee0:	69f8      	ldr	r0, [r7, #28]
 8004ee2:	f001 f8cd 	bl	8006080 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8004ee6:	69fb      	ldr	r3, [r7, #28]
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d006      	beq.n	8004efa <osMutexNew+0x102>
 8004eec:	697b      	ldr	r3, [r7, #20]
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d003      	beq.n	8004efa <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8004ef2:	69fb      	ldr	r3, [r7, #28]
 8004ef4:	f043 0301 	orr.w	r3, r3, #1
 8004ef8:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8004efa:	69fb      	ldr	r3, [r7, #28]
}
 8004efc:	4618      	mov	r0, r3
 8004efe:	3720      	adds	r7, #32
 8004f00:	46bd      	mov	sp, r7
 8004f02:	bd80      	pop	{r7, pc}

08004f04 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8004f04:	b580      	push	{r7, lr}
 8004f06:	b08a      	sub	sp, #40	; 0x28
 8004f08:	af02      	add	r7, sp, #8
 8004f0a:	60f8      	str	r0, [r7, #12]
 8004f0c:	60b9      	str	r1, [r7, #8]
 8004f0e:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8004f10:	2300      	movs	r3, #0
 8004f12:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004f14:	f3ef 8305 	mrs	r3, IPSR
 8004f18:	613b      	str	r3, [r7, #16]
  return(result);
 8004f1a:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d15f      	bne.n	8004fe0 <osMessageQueueNew+0xdc>
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d05c      	beq.n	8004fe0 <osMessageQueueNew+0xdc>
 8004f26:	68bb      	ldr	r3, [r7, #8]
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d059      	beq.n	8004fe0 <osMessageQueueNew+0xdc>
    mem = -1;
 8004f2c:	f04f 33ff 	mov.w	r3, #4294967295
 8004f30:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d029      	beq.n	8004f8c <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	689b      	ldr	r3, [r3, #8]
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d012      	beq.n	8004f66 <osMessageQueueNew+0x62>
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	68db      	ldr	r3, [r3, #12]
 8004f44:	2b4f      	cmp	r3, #79	; 0x4f
 8004f46:	d90e      	bls.n	8004f66 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d00a      	beq.n	8004f66 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	695a      	ldr	r2, [r3, #20]
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	68b9      	ldr	r1, [r7, #8]
 8004f58:	fb01 f303 	mul.w	r3, r1, r3
 8004f5c:	429a      	cmp	r2, r3
 8004f5e:	d302      	bcc.n	8004f66 <osMessageQueueNew+0x62>
        mem = 1;
 8004f60:	2301      	movs	r3, #1
 8004f62:	61bb      	str	r3, [r7, #24]
 8004f64:	e014      	b.n	8004f90 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	689b      	ldr	r3, [r3, #8]
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d110      	bne.n	8004f90 <osMessageQueueNew+0x8c>
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	68db      	ldr	r3, [r3, #12]
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d10c      	bne.n	8004f90 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d108      	bne.n	8004f90 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	695b      	ldr	r3, [r3, #20]
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d104      	bne.n	8004f90 <osMessageQueueNew+0x8c>
          mem = 0;
 8004f86:	2300      	movs	r3, #0
 8004f88:	61bb      	str	r3, [r7, #24]
 8004f8a:	e001      	b.n	8004f90 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8004f8c:	2300      	movs	r3, #0
 8004f8e:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8004f90:	69bb      	ldr	r3, [r7, #24]
 8004f92:	2b01      	cmp	r3, #1
 8004f94:	d10b      	bne.n	8004fae <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	691a      	ldr	r2, [r3, #16]
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	689b      	ldr	r3, [r3, #8]
 8004f9e:	2100      	movs	r1, #0
 8004fa0:	9100      	str	r1, [sp, #0]
 8004fa2:	68b9      	ldr	r1, [r7, #8]
 8004fa4:	68f8      	ldr	r0, [r7, #12]
 8004fa6:	f000 fbbf 	bl	8005728 <xQueueGenericCreateStatic>
 8004faa:	61f8      	str	r0, [r7, #28]
 8004fac:	e008      	b.n	8004fc0 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8004fae:	69bb      	ldr	r3, [r7, #24]
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d105      	bne.n	8004fc0 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8004fb4:	2200      	movs	r2, #0
 8004fb6:	68b9      	ldr	r1, [r7, #8]
 8004fb8:	68f8      	ldr	r0, [r7, #12]
 8004fba:	f000 fc2d 	bl	8005818 <xQueueGenericCreate>
 8004fbe:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8004fc0:	69fb      	ldr	r3, [r7, #28]
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d00c      	beq.n	8004fe0 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d003      	beq.n	8004fd4 <osMessageQueueNew+0xd0>
        name = attr->name;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	617b      	str	r3, [r7, #20]
 8004fd2:	e001      	b.n	8004fd8 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8004fd4:	2300      	movs	r3, #0
 8004fd6:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8004fd8:	6979      	ldr	r1, [r7, #20]
 8004fda:	69f8      	ldr	r0, [r7, #28]
 8004fdc:	f001 f850 	bl	8006080 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8004fe0:	69fb      	ldr	r3, [r7, #28]
}
 8004fe2:	4618      	mov	r0, r3
 8004fe4:	3720      	adds	r7, #32
 8004fe6:	46bd      	mov	sp, r7
 8004fe8:	bd80      	pop	{r7, pc}
	...

08004fec <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8004fec:	b580      	push	{r7, lr}
 8004fee:	b088      	sub	sp, #32
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	60f8      	str	r0, [r7, #12]
 8004ff4:	60b9      	str	r1, [r7, #8]
 8004ff6:	603b      	str	r3, [r7, #0]
 8004ff8:	4613      	mov	r3, r2
 8004ffa:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8005000:	2300      	movs	r3, #0
 8005002:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005004:	f3ef 8305 	mrs	r3, IPSR
 8005008:	617b      	str	r3, [r7, #20]
  return(result);
 800500a:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800500c:	2b00      	cmp	r3, #0
 800500e:	d028      	beq.n	8005062 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005010:	69bb      	ldr	r3, [r7, #24]
 8005012:	2b00      	cmp	r3, #0
 8005014:	d005      	beq.n	8005022 <osMessageQueuePut+0x36>
 8005016:	68bb      	ldr	r3, [r7, #8]
 8005018:	2b00      	cmp	r3, #0
 800501a:	d002      	beq.n	8005022 <osMessageQueuePut+0x36>
 800501c:	683b      	ldr	r3, [r7, #0]
 800501e:	2b00      	cmp	r3, #0
 8005020:	d003      	beq.n	800502a <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8005022:	f06f 0303 	mvn.w	r3, #3
 8005026:	61fb      	str	r3, [r7, #28]
 8005028:	e038      	b.n	800509c <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800502a:	2300      	movs	r3, #0
 800502c:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800502e:	f107 0210 	add.w	r2, r7, #16
 8005032:	2300      	movs	r3, #0
 8005034:	68b9      	ldr	r1, [r7, #8]
 8005036:	69b8      	ldr	r0, [r7, #24]
 8005038:	f000 fd96 	bl	8005b68 <xQueueGenericSendFromISR>
 800503c:	4603      	mov	r3, r0
 800503e:	2b01      	cmp	r3, #1
 8005040:	d003      	beq.n	800504a <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8005042:	f06f 0302 	mvn.w	r3, #2
 8005046:	61fb      	str	r3, [r7, #28]
 8005048:	e028      	b.n	800509c <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800504a:	693b      	ldr	r3, [r7, #16]
 800504c:	2b00      	cmp	r3, #0
 800504e:	d025      	beq.n	800509c <osMessageQueuePut+0xb0>
 8005050:	4b15      	ldr	r3, [pc, #84]	; (80050a8 <osMessageQueuePut+0xbc>)
 8005052:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005056:	601a      	str	r2, [r3, #0]
 8005058:	f3bf 8f4f 	dsb	sy
 800505c:	f3bf 8f6f 	isb	sy
 8005060:	e01c      	b.n	800509c <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8005062:	69bb      	ldr	r3, [r7, #24]
 8005064:	2b00      	cmp	r3, #0
 8005066:	d002      	beq.n	800506e <osMessageQueuePut+0x82>
 8005068:	68bb      	ldr	r3, [r7, #8]
 800506a:	2b00      	cmp	r3, #0
 800506c:	d103      	bne.n	8005076 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800506e:	f06f 0303 	mvn.w	r3, #3
 8005072:	61fb      	str	r3, [r7, #28]
 8005074:	e012      	b.n	800509c <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8005076:	2300      	movs	r3, #0
 8005078:	683a      	ldr	r2, [r7, #0]
 800507a:	68b9      	ldr	r1, [r7, #8]
 800507c:	69b8      	ldr	r0, [r7, #24]
 800507e:	f000 fc75 	bl	800596c <xQueueGenericSend>
 8005082:	4603      	mov	r3, r0
 8005084:	2b01      	cmp	r3, #1
 8005086:	d009      	beq.n	800509c <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8005088:	683b      	ldr	r3, [r7, #0]
 800508a:	2b00      	cmp	r3, #0
 800508c:	d003      	beq.n	8005096 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800508e:	f06f 0301 	mvn.w	r3, #1
 8005092:	61fb      	str	r3, [r7, #28]
 8005094:	e002      	b.n	800509c <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8005096:	f06f 0302 	mvn.w	r3, #2
 800509a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800509c:	69fb      	ldr	r3, [r7, #28]
}
 800509e:	4618      	mov	r0, r3
 80050a0:	3720      	adds	r7, #32
 80050a2:	46bd      	mov	sp, r7
 80050a4:	bd80      	pop	{r7, pc}
 80050a6:	bf00      	nop
 80050a8:	e000ed04 	.word	0xe000ed04

080050ac <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80050ac:	b480      	push	{r7}
 80050ae:	b085      	sub	sp, #20
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	60f8      	str	r0, [r7, #12]
 80050b4:	60b9      	str	r1, [r7, #8]
 80050b6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	4a07      	ldr	r2, [pc, #28]	; (80050d8 <vApplicationGetIdleTaskMemory+0x2c>)
 80050bc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80050be:	68bb      	ldr	r3, [r7, #8]
 80050c0:	4a06      	ldr	r2, [pc, #24]	; (80050dc <vApplicationGetIdleTaskMemory+0x30>)
 80050c2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	2280      	movs	r2, #128	; 0x80
 80050c8:	601a      	str	r2, [r3, #0]
}
 80050ca:	bf00      	nop
 80050cc:	3714      	adds	r7, #20
 80050ce:	46bd      	mov	sp, r7
 80050d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d4:	4770      	bx	lr
 80050d6:	bf00      	nop
 80050d8:	200002f4 	.word	0x200002f4
 80050dc:	2000039c 	.word	0x2000039c

080050e0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80050e0:	b480      	push	{r7}
 80050e2:	b085      	sub	sp, #20
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	60f8      	str	r0, [r7, #12]
 80050e8:	60b9      	str	r1, [r7, #8]
 80050ea:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	4a07      	ldr	r2, [pc, #28]	; (800510c <vApplicationGetTimerTaskMemory+0x2c>)
 80050f0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80050f2:	68bb      	ldr	r3, [r7, #8]
 80050f4:	4a06      	ldr	r2, [pc, #24]	; (8005110 <vApplicationGetTimerTaskMemory+0x30>)
 80050f6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80050fe:	601a      	str	r2, [r3, #0]
}
 8005100:	bf00      	nop
 8005102:	3714      	adds	r7, #20
 8005104:	46bd      	mov	sp, r7
 8005106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510a:	4770      	bx	lr
 800510c:	2000059c 	.word	0x2000059c
 8005110:	20000644 	.word	0x20000644

08005114 <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 8005114:	b580      	push	{r7, lr}
 8005116:	b086      	sub	sp, #24
 8005118:	af00      	add	r7, sp, #0
 800511a:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	2b00      	cmp	r3, #0
 8005120:	d10a      	bne.n	8005138 <xEventGroupCreateStatic+0x24>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005122:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005126:	f383 8811 	msr	BASEPRI, r3
 800512a:	f3bf 8f6f 	isb	sy
 800512e:	f3bf 8f4f 	dsb	sy
 8005132:	613b      	str	r3, [r7, #16]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005134:	bf00      	nop
 8005136:	e7fe      	b.n	8005136 <xEventGroupCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 8005138:	2320      	movs	r3, #32
 800513a:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 800513c:	68bb      	ldr	r3, [r7, #8]
 800513e:	2b20      	cmp	r3, #32
 8005140:	d00a      	beq.n	8005158 <xEventGroupCreateStatic+0x44>
	__asm volatile
 8005142:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005146:	f383 8811 	msr	BASEPRI, r3
 800514a:	f3bf 8f6f 	isb	sy
 800514e:	f3bf 8f4f 	dsb	sy
 8005152:	60fb      	str	r3, [r7, #12]
}
 8005154:	bf00      	nop
 8005156:	e7fe      	b.n	8005156 <xEventGroupCreateStatic+0x42>
		} /*lint !e529 xSize is referenced if configASSERT() is defined. */
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and StaticEventGroup_t are deliberately aliased for data hiding purposes and guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 800515c:	697b      	ldr	r3, [r7, #20]
 800515e:	2b00      	cmp	r3, #0
 8005160:	d00a      	beq.n	8005178 <xEventGroupCreateStatic+0x64>
		{
			pxEventBits->uxEventBits = 0;
 8005162:	697b      	ldr	r3, [r7, #20]
 8005164:	2200      	movs	r2, #0
 8005166:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8005168:	697b      	ldr	r3, [r7, #20]
 800516a:	3304      	adds	r3, #4
 800516c:	4618      	mov	r0, r3
 800516e:	f000 f9bf 	bl	80054f0 <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 8005172:	697b      	ldr	r3, [r7, #20]
 8005174:	2201      	movs	r2, #1
 8005176:	771a      	strb	r2, [r3, #28]
			pxEventGroupBuffer pointing to a pre-allocated (compile time
			allocated) StaticEventGroup_t variable. */
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return pxEventBits;
 8005178:	697b      	ldr	r3, [r7, #20]
	}
 800517a:	4618      	mov	r0, r3
 800517c:	3718      	adds	r7, #24
 800517e:	46bd      	mov	sp, r7
 8005180:	bd80      	pop	{r7, pc}

08005182 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 8005182:	b580      	push	{r7, lr}
 8005184:	b082      	sub	sp, #8
 8005186:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 8005188:	2020      	movs	r0, #32
 800518a:	f002 fd75 	bl	8007c78 <pvPortMalloc>
 800518e:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	2b00      	cmp	r3, #0
 8005194:	d00a      	beq.n	80051ac <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	2200      	movs	r2, #0
 800519a:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	3304      	adds	r3, #4
 80051a0:	4618      	mov	r0, r3
 80051a2:	f000 f9a5 	bl	80054f0 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	2200      	movs	r2, #0
 80051aa:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 80051ac:	687b      	ldr	r3, [r7, #4]
	}
 80051ae:	4618      	mov	r0, r3
 80051b0:	3708      	adds	r7, #8
 80051b2:	46bd      	mov	sp, r7
 80051b4:	bd80      	pop	{r7, pc}
	...

080051b8 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 80051b8:	b580      	push	{r7, lr}
 80051ba:	b090      	sub	sp, #64	; 0x40
 80051bc:	af00      	add	r7, sp, #0
 80051be:	60f8      	str	r0, [r7, #12]
 80051c0:	60b9      	str	r1, [r7, #8]
 80051c2:	607a      	str	r2, [r7, #4]
 80051c4:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	637b      	str	r3, [r7, #52]	; 0x34
EventBits_t uxReturn, uxControlBits = 0;
 80051ca:	2300      	movs	r3, #0
 80051cc:	63bb      	str	r3, [r7, #56]	; 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 80051ce:	2300      	movs	r3, #0
 80051d0:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d10a      	bne.n	80051ee <xEventGroupWaitBits+0x36>
	__asm volatile
 80051d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051dc:	f383 8811 	msr	BASEPRI, r3
 80051e0:	f3bf 8f6f 	isb	sy
 80051e4:	f3bf 8f4f 	dsb	sy
 80051e8:	623b      	str	r3, [r7, #32]
}
 80051ea:	bf00      	nop
 80051ec:	e7fe      	b.n	80051ec <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 80051ee:	68bb      	ldr	r3, [r7, #8]
 80051f0:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d00a      	beq.n	800520e <xEventGroupWaitBits+0x56>
	__asm volatile
 80051f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051fc:	f383 8811 	msr	BASEPRI, r3
 8005200:	f3bf 8f6f 	isb	sy
 8005204:	f3bf 8f4f 	dsb	sy
 8005208:	61fb      	str	r3, [r7, #28]
}
 800520a:	bf00      	nop
 800520c:	e7fe      	b.n	800520c <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 800520e:	68bb      	ldr	r3, [r7, #8]
 8005210:	2b00      	cmp	r3, #0
 8005212:	d10a      	bne.n	800522a <xEventGroupWaitBits+0x72>
	__asm volatile
 8005214:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005218:	f383 8811 	msr	BASEPRI, r3
 800521c:	f3bf 8f6f 	isb	sy
 8005220:	f3bf 8f4f 	dsb	sy
 8005224:	61bb      	str	r3, [r7, #24]
}
 8005226:	bf00      	nop
 8005228:	e7fe      	b.n	8005228 <xEventGroupWaitBits+0x70>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800522a:	f001 fe6d 	bl	8006f08 <xTaskGetSchedulerState>
 800522e:	4603      	mov	r3, r0
 8005230:	2b00      	cmp	r3, #0
 8005232:	d102      	bne.n	800523a <xEventGroupWaitBits+0x82>
 8005234:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005236:	2b00      	cmp	r3, #0
 8005238:	d101      	bne.n	800523e <xEventGroupWaitBits+0x86>
 800523a:	2301      	movs	r3, #1
 800523c:	e000      	b.n	8005240 <xEventGroupWaitBits+0x88>
 800523e:	2300      	movs	r3, #0
 8005240:	2b00      	cmp	r3, #0
 8005242:	d10a      	bne.n	800525a <xEventGroupWaitBits+0xa2>
	__asm volatile
 8005244:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005248:	f383 8811 	msr	BASEPRI, r3
 800524c:	f3bf 8f6f 	isb	sy
 8005250:	f3bf 8f4f 	dsb	sy
 8005254:	617b      	str	r3, [r7, #20]
}
 8005256:	bf00      	nop
 8005258:	e7fe      	b.n	8005258 <xEventGroupWaitBits+0xa0>
	}
	#endif

	vTaskSuspendAll();
 800525a:	f001 f9cb 	bl	80065f4 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 800525e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 8005264:	683a      	ldr	r2, [r7, #0]
 8005266:	68b9      	ldr	r1, [r7, #8]
 8005268:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800526a:	f000 f90b 	bl	8005484 <prvTestWaitCondition>
 800526e:	62b8      	str	r0, [r7, #40]	; 0x28

		if( xWaitConditionMet != pdFALSE )
 8005270:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005272:	2b00      	cmp	r3, #0
 8005274:	d00e      	beq.n	8005294 <xEventGroupWaitBits+0xdc>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 8005276:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005278:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTicksToWait = ( TickType_t ) 0;
 800527a:	2300      	movs	r3, #0
 800527c:	64bb      	str	r3, [r7, #72]	; 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	2b00      	cmp	r3, #0
 8005282:	d028      	beq.n	80052d6 <xEventGroupWaitBits+0x11e>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8005284:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005286:	681a      	ldr	r2, [r3, #0]
 8005288:	68bb      	ldr	r3, [r7, #8]
 800528a:	43db      	mvns	r3, r3
 800528c:	401a      	ands	r2, r3
 800528e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005290:	601a      	str	r2, [r3, #0]
 8005292:	e020      	b.n	80052d6 <xEventGroupWaitBits+0x11e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 8005294:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005296:	2b00      	cmp	r3, #0
 8005298:	d104      	bne.n	80052a4 <xEventGroupWaitBits+0xec>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 800529a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800529c:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTimeoutOccurred = pdTRUE;
 800529e:	2301      	movs	r3, #1
 80052a0:	633b      	str	r3, [r7, #48]	; 0x30
 80052a2:	e018      	b.n	80052d6 <xEventGroupWaitBits+0x11e>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d003      	beq.n	80052b2 <xEventGroupWaitBits+0xfa>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 80052aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052ac:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80052b0:	63bb      	str	r3, [r7, #56]	; 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 80052b2:	683b      	ldr	r3, [r7, #0]
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d003      	beq.n	80052c0 <xEventGroupWaitBits+0x108>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 80052b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052ba:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80052be:	63bb      	str	r3, [r7, #56]	; 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 80052c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052c2:	1d18      	adds	r0, r3, #4
 80052c4:	68ba      	ldr	r2, [r7, #8]
 80052c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052c8:	4313      	orrs	r3, r2
 80052ca:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80052cc:	4619      	mov	r1, r3
 80052ce:	f001 fb8f 	bl	80069f0 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 80052d2:	2300      	movs	r3, #0
 80052d4:	63fb      	str	r3, [r7, #60]	; 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 80052d6:	f001 f99b 	bl	8006610 <xTaskResumeAll>
 80052da:	6278      	str	r0, [r7, #36]	; 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 80052dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d031      	beq.n	8005346 <xEventGroupWaitBits+0x18e>
	{
		if( xAlreadyYielded == pdFALSE )
 80052e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d107      	bne.n	80052f8 <xEventGroupWaitBits+0x140>
		{
			portYIELD_WITHIN_API();
 80052e8:	4b19      	ldr	r3, [pc, #100]	; (8005350 <xEventGroupWaitBits+0x198>)
 80052ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80052ee:	601a      	str	r2, [r3, #0]
 80052f0:	f3bf 8f4f 	dsb	sy
 80052f4:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 80052f8:	f001 fe92 	bl	8007020 <uxTaskResetEventItemValue>
 80052fc:	63f8      	str	r0, [r7, #60]	; 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 80052fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005300:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005304:	2b00      	cmp	r3, #0
 8005306:	d11a      	bne.n	800533e <xEventGroupWaitBits+0x186>
		{
			taskENTER_CRITICAL();
 8005308:	f002 fb94 	bl	8007a34 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 800530c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	63fb      	str	r3, [r7, #60]	; 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 8005312:	683a      	ldr	r2, [r7, #0]
 8005314:	68b9      	ldr	r1, [r7, #8]
 8005316:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8005318:	f000 f8b4 	bl	8005484 <prvTestWaitCondition>
 800531c:	4603      	mov	r3, r0
 800531e:	2b00      	cmp	r3, #0
 8005320:	d009      	beq.n	8005336 <xEventGroupWaitBits+0x17e>
				{
					if( xClearOnExit != pdFALSE )
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	2b00      	cmp	r3, #0
 8005326:	d006      	beq.n	8005336 <xEventGroupWaitBits+0x17e>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8005328:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800532a:	681a      	ldr	r2, [r3, #0]
 800532c:	68bb      	ldr	r3, [r7, #8]
 800532e:	43db      	mvns	r3, r3
 8005330:	401a      	ands	r2, r3
 8005332:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005334:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 8005336:	2301      	movs	r3, #1
 8005338:	633b      	str	r3, [r7, #48]	; 0x30
			}
			taskEXIT_CRITICAL();
 800533a:	f002 fbab 	bl	8007a94 <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 800533e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005340:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005344:	63fb      	str	r3, [r7, #60]	; 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 8005346:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8005348:	4618      	mov	r0, r3
 800534a:	3740      	adds	r7, #64	; 0x40
 800534c:	46bd      	mov	sp, r7
 800534e:	bd80      	pop	{r7, pc}
 8005350:	e000ed04 	.word	0xe000ed04

08005354 <xEventGroupSetBits>:
	return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 8005354:	b580      	push	{r7, lr}
 8005356:	b08e      	sub	sp, #56	; 0x38
 8005358:	af00      	add	r7, sp, #0
 800535a:	6078      	str	r0, [r7, #4]
 800535c:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 800535e:	2300      	movs	r3, #0
 8005360:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = xEventGroup;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 8005366:	2300      	movs	r3, #0
 8005368:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	2b00      	cmp	r3, #0
 800536e:	d10a      	bne.n	8005386 <xEventGroupSetBits+0x32>
	__asm volatile
 8005370:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005374:	f383 8811 	msr	BASEPRI, r3
 8005378:	f3bf 8f6f 	isb	sy
 800537c:	f3bf 8f4f 	dsb	sy
 8005380:	613b      	str	r3, [r7, #16]
}
 8005382:	bf00      	nop
 8005384:	e7fe      	b.n	8005384 <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8005386:	683b      	ldr	r3, [r7, #0]
 8005388:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800538c:	2b00      	cmp	r3, #0
 800538e:	d00a      	beq.n	80053a6 <xEventGroupSetBits+0x52>
	__asm volatile
 8005390:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005394:	f383 8811 	msr	BASEPRI, r3
 8005398:	f3bf 8f6f 	isb	sy
 800539c:	f3bf 8f4f 	dsb	sy
 80053a0:	60fb      	str	r3, [r7, #12]
}
 80053a2:	bf00      	nop
 80053a4:	e7fe      	b.n	80053a4 <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 80053a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053a8:	3304      	adds	r3, #4
 80053aa:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80053ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053ae:	3308      	adds	r3, #8
 80053b0:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 80053b2:	f001 f91f 	bl	80065f4 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 80053b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053b8:	68db      	ldr	r3, [r3, #12]
 80053ba:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 80053bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053be:	681a      	ldr	r2, [r3, #0]
 80053c0:	683b      	ldr	r3, [r7, #0]
 80053c2:	431a      	orrs	r2, r3
 80053c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053c6:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 80053c8:	e03c      	b.n	8005444 <xEventGroupSetBits+0xf0>
		{
			pxNext = listGET_NEXT( pxListItem );
 80053ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053cc:	685b      	ldr	r3, [r3, #4]
 80053ce:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 80053d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 80053d6:	2300      	movs	r3, #0
 80053d8:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 80053da:	69bb      	ldr	r3, [r7, #24]
 80053dc:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80053e0:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 80053e2:	69bb      	ldr	r3, [r7, #24]
 80053e4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80053e8:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 80053ea:	697b      	ldr	r3, [r7, #20]
 80053ec:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d108      	bne.n	8005406 <xEventGroupSetBits+0xb2>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 80053f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053f6:	681a      	ldr	r2, [r3, #0]
 80053f8:	69bb      	ldr	r3, [r7, #24]
 80053fa:	4013      	ands	r3, r2
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d00b      	beq.n	8005418 <xEventGroupSetBits+0xc4>
				{
					xMatchFound = pdTRUE;
 8005400:	2301      	movs	r3, #1
 8005402:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005404:	e008      	b.n	8005418 <xEventGroupSetBits+0xc4>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 8005406:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005408:	681a      	ldr	r2, [r3, #0]
 800540a:	69bb      	ldr	r3, [r7, #24]
 800540c:	4013      	ands	r3, r2
 800540e:	69ba      	ldr	r2, [r7, #24]
 8005410:	429a      	cmp	r2, r3
 8005412:	d101      	bne.n	8005418 <xEventGroupSetBits+0xc4>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 8005414:	2301      	movs	r3, #1
 8005416:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 8005418:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800541a:	2b00      	cmp	r3, #0
 800541c:	d010      	beq.n	8005440 <xEventGroupSetBits+0xec>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 800541e:	697b      	ldr	r3, [r7, #20]
 8005420:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005424:	2b00      	cmp	r3, #0
 8005426:	d003      	beq.n	8005430 <xEventGroupSetBits+0xdc>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 8005428:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800542a:	69bb      	ldr	r3, [r7, #24]
 800542c:	4313      	orrs	r3, r2
 800542e:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 8005430:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005438:	4619      	mov	r1, r3
 800543a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800543c:	f001 fba4 	bl	8006b88 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 8005440:	69fb      	ldr	r3, [r7, #28]
 8005442:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 8005444:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005446:	6a3b      	ldr	r3, [r7, #32]
 8005448:	429a      	cmp	r2, r3
 800544a:	d1be      	bne.n	80053ca <xEventGroupSetBits+0x76>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 800544c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800544e:	681a      	ldr	r2, [r3, #0]
 8005450:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005452:	43db      	mvns	r3, r3
 8005454:	401a      	ands	r2, r3
 8005456:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005458:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 800545a:	f001 f8d9 	bl	8006610 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 800545e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005460:	681b      	ldr	r3, [r3, #0]
}
 8005462:	4618      	mov	r0, r3
 8005464:	3738      	adds	r7, #56	; 0x38
 8005466:	46bd      	mov	sp, r7
 8005468:	bd80      	pop	{r7, pc}

0800546a <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 800546a:	b580      	push	{r7, lr}
 800546c:	b082      	sub	sp, #8
 800546e:	af00      	add	r7, sp, #0
 8005470:	6078      	str	r0, [r7, #4]
 8005472:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 8005474:	6839      	ldr	r1, [r7, #0]
 8005476:	6878      	ldr	r0, [r7, #4]
 8005478:	f7ff ff6c 	bl	8005354 <xEventGroupSetBits>
}
 800547c:	bf00      	nop
 800547e:	3708      	adds	r7, #8
 8005480:	46bd      	mov	sp, r7
 8005482:	bd80      	pop	{r7, pc}

08005484 <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 8005484:	b480      	push	{r7}
 8005486:	b087      	sub	sp, #28
 8005488:	af00      	add	r7, sp, #0
 800548a:	60f8      	str	r0, [r7, #12]
 800548c:	60b9      	str	r1, [r7, #8]
 800548e:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 8005490:	2300      	movs	r3, #0
 8005492:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	2b00      	cmp	r3, #0
 8005498:	d107      	bne.n	80054aa <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 800549a:	68fa      	ldr	r2, [r7, #12]
 800549c:	68bb      	ldr	r3, [r7, #8]
 800549e:	4013      	ands	r3, r2
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d00a      	beq.n	80054ba <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 80054a4:	2301      	movs	r3, #1
 80054a6:	617b      	str	r3, [r7, #20]
 80054a8:	e007      	b.n	80054ba <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 80054aa:	68fa      	ldr	r2, [r7, #12]
 80054ac:	68bb      	ldr	r3, [r7, #8]
 80054ae:	4013      	ands	r3, r2
 80054b0:	68ba      	ldr	r2, [r7, #8]
 80054b2:	429a      	cmp	r2, r3
 80054b4:	d101      	bne.n	80054ba <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 80054b6:	2301      	movs	r3, #1
 80054b8:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 80054ba:	697b      	ldr	r3, [r7, #20]
}
 80054bc:	4618      	mov	r0, r3
 80054be:	371c      	adds	r7, #28
 80054c0:	46bd      	mov	sp, r7
 80054c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c6:	4770      	bx	lr

080054c8 <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 80054c8:	b580      	push	{r7, lr}
 80054ca:	b086      	sub	sp, #24
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	60f8      	str	r0, [r7, #12]
 80054d0:	60b9      	str	r1, [r7, #8]
 80054d2:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	68ba      	ldr	r2, [r7, #8]
 80054d8:	68f9      	ldr	r1, [r7, #12]
 80054da:	4804      	ldr	r0, [pc, #16]	; (80054ec <xEventGroupSetBitsFromISR+0x24>)
 80054dc:	f002 f95a 	bl	8007794 <xTimerPendFunctionCallFromISR>
 80054e0:	6178      	str	r0, [r7, #20]

		return xReturn;
 80054e2:	697b      	ldr	r3, [r7, #20]
	}
 80054e4:	4618      	mov	r0, r3
 80054e6:	3718      	adds	r7, #24
 80054e8:	46bd      	mov	sp, r7
 80054ea:	bd80      	pop	{r7, pc}
 80054ec:	0800546b 	.word	0x0800546b

080054f0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80054f0:	b480      	push	{r7}
 80054f2:	b083      	sub	sp, #12
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	f103 0208 	add.w	r2, r3, #8
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	f04f 32ff 	mov.w	r2, #4294967295
 8005508:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	f103 0208 	add.w	r2, r3, #8
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	f103 0208 	add.w	r2, r3, #8
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	2200      	movs	r2, #0
 8005522:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005524:	bf00      	nop
 8005526:	370c      	adds	r7, #12
 8005528:	46bd      	mov	sp, r7
 800552a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552e:	4770      	bx	lr

08005530 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005530:	b480      	push	{r7}
 8005532:	b083      	sub	sp, #12
 8005534:	af00      	add	r7, sp, #0
 8005536:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	2200      	movs	r2, #0
 800553c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800553e:	bf00      	nop
 8005540:	370c      	adds	r7, #12
 8005542:	46bd      	mov	sp, r7
 8005544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005548:	4770      	bx	lr

0800554a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800554a:	b480      	push	{r7}
 800554c:	b085      	sub	sp, #20
 800554e:	af00      	add	r7, sp, #0
 8005550:	6078      	str	r0, [r7, #4]
 8005552:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	685b      	ldr	r3, [r3, #4]
 8005558:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800555a:	683b      	ldr	r3, [r7, #0]
 800555c:	68fa      	ldr	r2, [r7, #12]
 800555e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	689a      	ldr	r2, [r3, #8]
 8005564:	683b      	ldr	r3, [r7, #0]
 8005566:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	689b      	ldr	r3, [r3, #8]
 800556c:	683a      	ldr	r2, [r7, #0]
 800556e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	683a      	ldr	r2, [r7, #0]
 8005574:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005576:	683b      	ldr	r3, [r7, #0]
 8005578:	687a      	ldr	r2, [r7, #4]
 800557a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	1c5a      	adds	r2, r3, #1
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	601a      	str	r2, [r3, #0]
}
 8005586:	bf00      	nop
 8005588:	3714      	adds	r7, #20
 800558a:	46bd      	mov	sp, r7
 800558c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005590:	4770      	bx	lr

08005592 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005592:	b480      	push	{r7}
 8005594:	b085      	sub	sp, #20
 8005596:	af00      	add	r7, sp, #0
 8005598:	6078      	str	r0, [r7, #4]
 800559a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800559c:	683b      	ldr	r3, [r7, #0]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80055a2:	68bb      	ldr	r3, [r7, #8]
 80055a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055a8:	d103      	bne.n	80055b2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	691b      	ldr	r3, [r3, #16]
 80055ae:	60fb      	str	r3, [r7, #12]
 80055b0:	e00c      	b.n	80055cc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	3308      	adds	r3, #8
 80055b6:	60fb      	str	r3, [r7, #12]
 80055b8:	e002      	b.n	80055c0 <vListInsert+0x2e>
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	685b      	ldr	r3, [r3, #4]
 80055be:	60fb      	str	r3, [r7, #12]
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	685b      	ldr	r3, [r3, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	68ba      	ldr	r2, [r7, #8]
 80055c8:	429a      	cmp	r2, r3
 80055ca:	d2f6      	bcs.n	80055ba <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	685a      	ldr	r2, [r3, #4]
 80055d0:	683b      	ldr	r3, [r7, #0]
 80055d2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80055d4:	683b      	ldr	r3, [r7, #0]
 80055d6:	685b      	ldr	r3, [r3, #4]
 80055d8:	683a      	ldr	r2, [r7, #0]
 80055da:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80055dc:	683b      	ldr	r3, [r7, #0]
 80055de:	68fa      	ldr	r2, [r7, #12]
 80055e0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	683a      	ldr	r2, [r7, #0]
 80055e6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80055e8:	683b      	ldr	r3, [r7, #0]
 80055ea:	687a      	ldr	r2, [r7, #4]
 80055ec:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	1c5a      	adds	r2, r3, #1
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	601a      	str	r2, [r3, #0]
}
 80055f8:	bf00      	nop
 80055fa:	3714      	adds	r7, #20
 80055fc:	46bd      	mov	sp, r7
 80055fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005602:	4770      	bx	lr

08005604 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005604:	b480      	push	{r7}
 8005606:	b085      	sub	sp, #20
 8005608:	af00      	add	r7, sp, #0
 800560a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	691b      	ldr	r3, [r3, #16]
 8005610:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	685b      	ldr	r3, [r3, #4]
 8005616:	687a      	ldr	r2, [r7, #4]
 8005618:	6892      	ldr	r2, [r2, #8]
 800561a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	689b      	ldr	r3, [r3, #8]
 8005620:	687a      	ldr	r2, [r7, #4]
 8005622:	6852      	ldr	r2, [r2, #4]
 8005624:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	685b      	ldr	r3, [r3, #4]
 800562a:	687a      	ldr	r2, [r7, #4]
 800562c:	429a      	cmp	r2, r3
 800562e:	d103      	bne.n	8005638 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	689a      	ldr	r2, [r3, #8]
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	2200      	movs	r2, #0
 800563c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	1e5a      	subs	r2, r3, #1
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	681b      	ldr	r3, [r3, #0]
}
 800564c:	4618      	mov	r0, r3
 800564e:	3714      	adds	r7, #20
 8005650:	46bd      	mov	sp, r7
 8005652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005656:	4770      	bx	lr

08005658 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005658:	b580      	push	{r7, lr}
 800565a:	b084      	sub	sp, #16
 800565c:	af00      	add	r7, sp, #0
 800565e:	6078      	str	r0, [r7, #4]
 8005660:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	2b00      	cmp	r3, #0
 800566a:	d10a      	bne.n	8005682 <xQueueGenericReset+0x2a>
	__asm volatile
 800566c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005670:	f383 8811 	msr	BASEPRI, r3
 8005674:	f3bf 8f6f 	isb	sy
 8005678:	f3bf 8f4f 	dsb	sy
 800567c:	60bb      	str	r3, [r7, #8]
}
 800567e:	bf00      	nop
 8005680:	e7fe      	b.n	8005680 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005682:	f002 f9d7 	bl	8007a34 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	681a      	ldr	r2, [r3, #0]
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800568e:	68f9      	ldr	r1, [r7, #12]
 8005690:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005692:	fb01 f303 	mul.w	r3, r1, r3
 8005696:	441a      	add	r2, r3
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	2200      	movs	r2, #0
 80056a0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	681a      	ldr	r2, [r3, #0]
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	681a      	ldr	r2, [r3, #0]
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056b2:	3b01      	subs	r3, #1
 80056b4:	68f9      	ldr	r1, [r7, #12]
 80056b6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80056b8:	fb01 f303 	mul.w	r3, r1, r3
 80056bc:	441a      	add	r2, r3
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	22ff      	movs	r2, #255	; 0xff
 80056c6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	22ff      	movs	r2, #255	; 0xff
 80056ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80056d2:	683b      	ldr	r3, [r7, #0]
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d114      	bne.n	8005702 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	691b      	ldr	r3, [r3, #16]
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d01a      	beq.n	8005716 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	3310      	adds	r3, #16
 80056e4:	4618      	mov	r0, r3
 80056e6:	f001 f9eb 	bl	8006ac0 <xTaskRemoveFromEventList>
 80056ea:	4603      	mov	r3, r0
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d012      	beq.n	8005716 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80056f0:	4b0c      	ldr	r3, [pc, #48]	; (8005724 <xQueueGenericReset+0xcc>)
 80056f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80056f6:	601a      	str	r2, [r3, #0]
 80056f8:	f3bf 8f4f 	dsb	sy
 80056fc:	f3bf 8f6f 	isb	sy
 8005700:	e009      	b.n	8005716 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	3310      	adds	r3, #16
 8005706:	4618      	mov	r0, r3
 8005708:	f7ff fef2 	bl	80054f0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	3324      	adds	r3, #36	; 0x24
 8005710:	4618      	mov	r0, r3
 8005712:	f7ff feed 	bl	80054f0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005716:	f002 f9bd 	bl	8007a94 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800571a:	2301      	movs	r3, #1
}
 800571c:	4618      	mov	r0, r3
 800571e:	3710      	adds	r7, #16
 8005720:	46bd      	mov	sp, r7
 8005722:	bd80      	pop	{r7, pc}
 8005724:	e000ed04 	.word	0xe000ed04

08005728 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005728:	b580      	push	{r7, lr}
 800572a:	b08e      	sub	sp, #56	; 0x38
 800572c:	af02      	add	r7, sp, #8
 800572e:	60f8      	str	r0, [r7, #12]
 8005730:	60b9      	str	r1, [r7, #8]
 8005732:	607a      	str	r2, [r7, #4]
 8005734:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	2b00      	cmp	r3, #0
 800573a:	d10a      	bne.n	8005752 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800573c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005740:	f383 8811 	msr	BASEPRI, r3
 8005744:	f3bf 8f6f 	isb	sy
 8005748:	f3bf 8f4f 	dsb	sy
 800574c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800574e:	bf00      	nop
 8005750:	e7fe      	b.n	8005750 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005752:	683b      	ldr	r3, [r7, #0]
 8005754:	2b00      	cmp	r3, #0
 8005756:	d10a      	bne.n	800576e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8005758:	f04f 0350 	mov.w	r3, #80	; 0x50
 800575c:	f383 8811 	msr	BASEPRI, r3
 8005760:	f3bf 8f6f 	isb	sy
 8005764:	f3bf 8f4f 	dsb	sy
 8005768:	627b      	str	r3, [r7, #36]	; 0x24
}
 800576a:	bf00      	nop
 800576c:	e7fe      	b.n	800576c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	2b00      	cmp	r3, #0
 8005772:	d002      	beq.n	800577a <xQueueGenericCreateStatic+0x52>
 8005774:	68bb      	ldr	r3, [r7, #8]
 8005776:	2b00      	cmp	r3, #0
 8005778:	d001      	beq.n	800577e <xQueueGenericCreateStatic+0x56>
 800577a:	2301      	movs	r3, #1
 800577c:	e000      	b.n	8005780 <xQueueGenericCreateStatic+0x58>
 800577e:	2300      	movs	r3, #0
 8005780:	2b00      	cmp	r3, #0
 8005782:	d10a      	bne.n	800579a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8005784:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005788:	f383 8811 	msr	BASEPRI, r3
 800578c:	f3bf 8f6f 	isb	sy
 8005790:	f3bf 8f4f 	dsb	sy
 8005794:	623b      	str	r3, [r7, #32]
}
 8005796:	bf00      	nop
 8005798:	e7fe      	b.n	8005798 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	2b00      	cmp	r3, #0
 800579e:	d102      	bne.n	80057a6 <xQueueGenericCreateStatic+0x7e>
 80057a0:	68bb      	ldr	r3, [r7, #8]
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d101      	bne.n	80057aa <xQueueGenericCreateStatic+0x82>
 80057a6:	2301      	movs	r3, #1
 80057a8:	e000      	b.n	80057ac <xQueueGenericCreateStatic+0x84>
 80057aa:	2300      	movs	r3, #0
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d10a      	bne.n	80057c6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80057b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057b4:	f383 8811 	msr	BASEPRI, r3
 80057b8:	f3bf 8f6f 	isb	sy
 80057bc:	f3bf 8f4f 	dsb	sy
 80057c0:	61fb      	str	r3, [r7, #28]
}
 80057c2:	bf00      	nop
 80057c4:	e7fe      	b.n	80057c4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80057c6:	2350      	movs	r3, #80	; 0x50
 80057c8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80057ca:	697b      	ldr	r3, [r7, #20]
 80057cc:	2b50      	cmp	r3, #80	; 0x50
 80057ce:	d00a      	beq.n	80057e6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80057d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057d4:	f383 8811 	msr	BASEPRI, r3
 80057d8:	f3bf 8f6f 	isb	sy
 80057dc:	f3bf 8f4f 	dsb	sy
 80057e0:	61bb      	str	r3, [r7, #24]
}
 80057e2:	bf00      	nop
 80057e4:	e7fe      	b.n	80057e4 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80057e6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80057e8:	683b      	ldr	r3, [r7, #0]
 80057ea:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80057ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d00d      	beq.n	800580e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80057f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057f4:	2201      	movs	r2, #1
 80057f6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80057fa:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80057fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005800:	9300      	str	r3, [sp, #0]
 8005802:	4613      	mov	r3, r2
 8005804:	687a      	ldr	r2, [r7, #4]
 8005806:	68b9      	ldr	r1, [r7, #8]
 8005808:	68f8      	ldr	r0, [r7, #12]
 800580a:	f000 f83f 	bl	800588c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800580e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8005810:	4618      	mov	r0, r3
 8005812:	3730      	adds	r7, #48	; 0x30
 8005814:	46bd      	mov	sp, r7
 8005816:	bd80      	pop	{r7, pc}

08005818 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8005818:	b580      	push	{r7, lr}
 800581a:	b08a      	sub	sp, #40	; 0x28
 800581c:	af02      	add	r7, sp, #8
 800581e:	60f8      	str	r0, [r7, #12]
 8005820:	60b9      	str	r1, [r7, #8]
 8005822:	4613      	mov	r3, r2
 8005824:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	2b00      	cmp	r3, #0
 800582a:	d10a      	bne.n	8005842 <xQueueGenericCreate+0x2a>
	__asm volatile
 800582c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005830:	f383 8811 	msr	BASEPRI, r3
 8005834:	f3bf 8f6f 	isb	sy
 8005838:	f3bf 8f4f 	dsb	sy
 800583c:	613b      	str	r3, [r7, #16]
}
 800583e:	bf00      	nop
 8005840:	e7fe      	b.n	8005840 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	68ba      	ldr	r2, [r7, #8]
 8005846:	fb02 f303 	mul.w	r3, r2, r3
 800584a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800584c:	69fb      	ldr	r3, [r7, #28]
 800584e:	3350      	adds	r3, #80	; 0x50
 8005850:	4618      	mov	r0, r3
 8005852:	f002 fa11 	bl	8007c78 <pvPortMalloc>
 8005856:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8005858:	69bb      	ldr	r3, [r7, #24]
 800585a:	2b00      	cmp	r3, #0
 800585c:	d011      	beq.n	8005882 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800585e:	69bb      	ldr	r3, [r7, #24]
 8005860:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005862:	697b      	ldr	r3, [r7, #20]
 8005864:	3350      	adds	r3, #80	; 0x50
 8005866:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8005868:	69bb      	ldr	r3, [r7, #24]
 800586a:	2200      	movs	r2, #0
 800586c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005870:	79fa      	ldrb	r2, [r7, #7]
 8005872:	69bb      	ldr	r3, [r7, #24]
 8005874:	9300      	str	r3, [sp, #0]
 8005876:	4613      	mov	r3, r2
 8005878:	697a      	ldr	r2, [r7, #20]
 800587a:	68b9      	ldr	r1, [r7, #8]
 800587c:	68f8      	ldr	r0, [r7, #12]
 800587e:	f000 f805 	bl	800588c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005882:	69bb      	ldr	r3, [r7, #24]
	}
 8005884:	4618      	mov	r0, r3
 8005886:	3720      	adds	r7, #32
 8005888:	46bd      	mov	sp, r7
 800588a:	bd80      	pop	{r7, pc}

0800588c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800588c:	b580      	push	{r7, lr}
 800588e:	b084      	sub	sp, #16
 8005890:	af00      	add	r7, sp, #0
 8005892:	60f8      	str	r0, [r7, #12]
 8005894:	60b9      	str	r1, [r7, #8]
 8005896:	607a      	str	r2, [r7, #4]
 8005898:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800589a:	68bb      	ldr	r3, [r7, #8]
 800589c:	2b00      	cmp	r3, #0
 800589e:	d103      	bne.n	80058a8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80058a0:	69bb      	ldr	r3, [r7, #24]
 80058a2:	69ba      	ldr	r2, [r7, #24]
 80058a4:	601a      	str	r2, [r3, #0]
 80058a6:	e002      	b.n	80058ae <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80058a8:	69bb      	ldr	r3, [r7, #24]
 80058aa:	687a      	ldr	r2, [r7, #4]
 80058ac:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80058ae:	69bb      	ldr	r3, [r7, #24]
 80058b0:	68fa      	ldr	r2, [r7, #12]
 80058b2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80058b4:	69bb      	ldr	r3, [r7, #24]
 80058b6:	68ba      	ldr	r2, [r7, #8]
 80058b8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80058ba:	2101      	movs	r1, #1
 80058bc:	69b8      	ldr	r0, [r7, #24]
 80058be:	f7ff fecb 	bl	8005658 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80058c2:	69bb      	ldr	r3, [r7, #24]
 80058c4:	78fa      	ldrb	r2, [r7, #3]
 80058c6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80058ca:	bf00      	nop
 80058cc:	3710      	adds	r7, #16
 80058ce:	46bd      	mov	sp, r7
 80058d0:	bd80      	pop	{r7, pc}

080058d2 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80058d2:	b580      	push	{r7, lr}
 80058d4:	b082      	sub	sp, #8
 80058d6:	af00      	add	r7, sp, #0
 80058d8:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d00e      	beq.n	80058fe <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	2200      	movs	r2, #0
 80058e4:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	2200      	movs	r2, #0
 80058ea:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	2200      	movs	r2, #0
 80058f0:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80058f2:	2300      	movs	r3, #0
 80058f4:	2200      	movs	r2, #0
 80058f6:	2100      	movs	r1, #0
 80058f8:	6878      	ldr	r0, [r7, #4]
 80058fa:	f000 f837 	bl	800596c <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 80058fe:	bf00      	nop
 8005900:	3708      	adds	r7, #8
 8005902:	46bd      	mov	sp, r7
 8005904:	bd80      	pop	{r7, pc}

08005906 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8005906:	b580      	push	{r7, lr}
 8005908:	b086      	sub	sp, #24
 800590a:	af00      	add	r7, sp, #0
 800590c:	4603      	mov	r3, r0
 800590e:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8005910:	2301      	movs	r3, #1
 8005912:	617b      	str	r3, [r7, #20]
 8005914:	2300      	movs	r3, #0
 8005916:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8005918:	79fb      	ldrb	r3, [r7, #7]
 800591a:	461a      	mov	r2, r3
 800591c:	6939      	ldr	r1, [r7, #16]
 800591e:	6978      	ldr	r0, [r7, #20]
 8005920:	f7ff ff7a 	bl	8005818 <xQueueGenericCreate>
 8005924:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8005926:	68f8      	ldr	r0, [r7, #12]
 8005928:	f7ff ffd3 	bl	80058d2 <prvInitialiseMutex>

		return xNewQueue;
 800592c:	68fb      	ldr	r3, [r7, #12]
	}
 800592e:	4618      	mov	r0, r3
 8005930:	3718      	adds	r7, #24
 8005932:	46bd      	mov	sp, r7
 8005934:	bd80      	pop	{r7, pc}

08005936 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8005936:	b580      	push	{r7, lr}
 8005938:	b088      	sub	sp, #32
 800593a:	af02      	add	r7, sp, #8
 800593c:	4603      	mov	r3, r0
 800593e:	6039      	str	r1, [r7, #0]
 8005940:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8005942:	2301      	movs	r3, #1
 8005944:	617b      	str	r3, [r7, #20]
 8005946:	2300      	movs	r3, #0
 8005948:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800594a:	79fb      	ldrb	r3, [r7, #7]
 800594c:	9300      	str	r3, [sp, #0]
 800594e:	683b      	ldr	r3, [r7, #0]
 8005950:	2200      	movs	r2, #0
 8005952:	6939      	ldr	r1, [r7, #16]
 8005954:	6978      	ldr	r0, [r7, #20]
 8005956:	f7ff fee7 	bl	8005728 <xQueueGenericCreateStatic>
 800595a:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800595c:	68f8      	ldr	r0, [r7, #12]
 800595e:	f7ff ffb8 	bl	80058d2 <prvInitialiseMutex>

		return xNewQueue;
 8005962:	68fb      	ldr	r3, [r7, #12]
	}
 8005964:	4618      	mov	r0, r3
 8005966:	3718      	adds	r7, #24
 8005968:	46bd      	mov	sp, r7
 800596a:	bd80      	pop	{r7, pc}

0800596c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800596c:	b580      	push	{r7, lr}
 800596e:	b08e      	sub	sp, #56	; 0x38
 8005970:	af00      	add	r7, sp, #0
 8005972:	60f8      	str	r0, [r7, #12]
 8005974:	60b9      	str	r1, [r7, #8]
 8005976:	607a      	str	r2, [r7, #4]
 8005978:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800597a:	2300      	movs	r3, #0
 800597c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005982:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005984:	2b00      	cmp	r3, #0
 8005986:	d10a      	bne.n	800599e <xQueueGenericSend+0x32>
	__asm volatile
 8005988:	f04f 0350 	mov.w	r3, #80	; 0x50
 800598c:	f383 8811 	msr	BASEPRI, r3
 8005990:	f3bf 8f6f 	isb	sy
 8005994:	f3bf 8f4f 	dsb	sy
 8005998:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800599a:	bf00      	nop
 800599c:	e7fe      	b.n	800599c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800599e:	68bb      	ldr	r3, [r7, #8]
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d103      	bne.n	80059ac <xQueueGenericSend+0x40>
 80059a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d101      	bne.n	80059b0 <xQueueGenericSend+0x44>
 80059ac:	2301      	movs	r3, #1
 80059ae:	e000      	b.n	80059b2 <xQueueGenericSend+0x46>
 80059b0:	2300      	movs	r3, #0
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d10a      	bne.n	80059cc <xQueueGenericSend+0x60>
	__asm volatile
 80059b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059ba:	f383 8811 	msr	BASEPRI, r3
 80059be:	f3bf 8f6f 	isb	sy
 80059c2:	f3bf 8f4f 	dsb	sy
 80059c6:	627b      	str	r3, [r7, #36]	; 0x24
}
 80059c8:	bf00      	nop
 80059ca:	e7fe      	b.n	80059ca <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80059cc:	683b      	ldr	r3, [r7, #0]
 80059ce:	2b02      	cmp	r3, #2
 80059d0:	d103      	bne.n	80059da <xQueueGenericSend+0x6e>
 80059d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059d6:	2b01      	cmp	r3, #1
 80059d8:	d101      	bne.n	80059de <xQueueGenericSend+0x72>
 80059da:	2301      	movs	r3, #1
 80059dc:	e000      	b.n	80059e0 <xQueueGenericSend+0x74>
 80059de:	2300      	movs	r3, #0
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d10a      	bne.n	80059fa <xQueueGenericSend+0x8e>
	__asm volatile
 80059e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059e8:	f383 8811 	msr	BASEPRI, r3
 80059ec:	f3bf 8f6f 	isb	sy
 80059f0:	f3bf 8f4f 	dsb	sy
 80059f4:	623b      	str	r3, [r7, #32]
}
 80059f6:	bf00      	nop
 80059f8:	e7fe      	b.n	80059f8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80059fa:	f001 fa85 	bl	8006f08 <xTaskGetSchedulerState>
 80059fe:	4603      	mov	r3, r0
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d102      	bne.n	8005a0a <xQueueGenericSend+0x9e>
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d101      	bne.n	8005a0e <xQueueGenericSend+0xa2>
 8005a0a:	2301      	movs	r3, #1
 8005a0c:	e000      	b.n	8005a10 <xQueueGenericSend+0xa4>
 8005a0e:	2300      	movs	r3, #0
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d10a      	bne.n	8005a2a <xQueueGenericSend+0xbe>
	__asm volatile
 8005a14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a18:	f383 8811 	msr	BASEPRI, r3
 8005a1c:	f3bf 8f6f 	isb	sy
 8005a20:	f3bf 8f4f 	dsb	sy
 8005a24:	61fb      	str	r3, [r7, #28]
}
 8005a26:	bf00      	nop
 8005a28:	e7fe      	b.n	8005a28 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005a2a:	f002 f803 	bl	8007a34 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005a2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a30:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005a32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a36:	429a      	cmp	r2, r3
 8005a38:	d302      	bcc.n	8005a40 <xQueueGenericSend+0xd4>
 8005a3a:	683b      	ldr	r3, [r7, #0]
 8005a3c:	2b02      	cmp	r3, #2
 8005a3e:	d129      	bne.n	8005a94 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005a40:	683a      	ldr	r2, [r7, #0]
 8005a42:	68b9      	ldr	r1, [r7, #8]
 8005a44:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005a46:	f000 fa0b 	bl	8005e60 <prvCopyDataToQueue>
 8005a4a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005a4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d010      	beq.n	8005a76 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005a54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a56:	3324      	adds	r3, #36	; 0x24
 8005a58:	4618      	mov	r0, r3
 8005a5a:	f001 f831 	bl	8006ac0 <xTaskRemoveFromEventList>
 8005a5e:	4603      	mov	r3, r0
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d013      	beq.n	8005a8c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005a64:	4b3f      	ldr	r3, [pc, #252]	; (8005b64 <xQueueGenericSend+0x1f8>)
 8005a66:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a6a:	601a      	str	r2, [r3, #0]
 8005a6c:	f3bf 8f4f 	dsb	sy
 8005a70:	f3bf 8f6f 	isb	sy
 8005a74:	e00a      	b.n	8005a8c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005a76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d007      	beq.n	8005a8c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005a7c:	4b39      	ldr	r3, [pc, #228]	; (8005b64 <xQueueGenericSend+0x1f8>)
 8005a7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a82:	601a      	str	r2, [r3, #0]
 8005a84:	f3bf 8f4f 	dsb	sy
 8005a88:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005a8c:	f002 f802 	bl	8007a94 <vPortExitCritical>
				return pdPASS;
 8005a90:	2301      	movs	r3, #1
 8005a92:	e063      	b.n	8005b5c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d103      	bne.n	8005aa2 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005a9a:	f001 fffb 	bl	8007a94 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005a9e:	2300      	movs	r3, #0
 8005aa0:	e05c      	b.n	8005b5c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005aa2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d106      	bne.n	8005ab6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005aa8:	f107 0314 	add.w	r3, r7, #20
 8005aac:	4618      	mov	r0, r3
 8005aae:	f001 f8cd 	bl	8006c4c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005ab2:	2301      	movs	r3, #1
 8005ab4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005ab6:	f001 ffed 	bl	8007a94 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005aba:	f000 fd9b 	bl	80065f4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005abe:	f001 ffb9 	bl	8007a34 <vPortEnterCritical>
 8005ac2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ac4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005ac8:	b25b      	sxtb	r3, r3
 8005aca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ace:	d103      	bne.n	8005ad8 <xQueueGenericSend+0x16c>
 8005ad0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ad2:	2200      	movs	r2, #0
 8005ad4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005ad8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ada:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005ade:	b25b      	sxtb	r3, r3
 8005ae0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ae4:	d103      	bne.n	8005aee <xQueueGenericSend+0x182>
 8005ae6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ae8:	2200      	movs	r2, #0
 8005aea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005aee:	f001 ffd1 	bl	8007a94 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005af2:	1d3a      	adds	r2, r7, #4
 8005af4:	f107 0314 	add.w	r3, r7, #20
 8005af8:	4611      	mov	r1, r2
 8005afa:	4618      	mov	r0, r3
 8005afc:	f001 f8bc 	bl	8006c78 <xTaskCheckForTimeOut>
 8005b00:	4603      	mov	r3, r0
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d124      	bne.n	8005b50 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005b06:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005b08:	f000 faa2 	bl	8006050 <prvIsQueueFull>
 8005b0c:	4603      	mov	r3, r0
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d018      	beq.n	8005b44 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005b12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b14:	3310      	adds	r3, #16
 8005b16:	687a      	ldr	r2, [r7, #4]
 8005b18:	4611      	mov	r1, r2
 8005b1a:	4618      	mov	r0, r3
 8005b1c:	f000 ff44 	bl	80069a8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005b20:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005b22:	f000 fa2d 	bl	8005f80 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005b26:	f000 fd73 	bl	8006610 <xTaskResumeAll>
 8005b2a:	4603      	mov	r3, r0
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	f47f af7c 	bne.w	8005a2a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8005b32:	4b0c      	ldr	r3, [pc, #48]	; (8005b64 <xQueueGenericSend+0x1f8>)
 8005b34:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b38:	601a      	str	r2, [r3, #0]
 8005b3a:	f3bf 8f4f 	dsb	sy
 8005b3e:	f3bf 8f6f 	isb	sy
 8005b42:	e772      	b.n	8005a2a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005b44:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005b46:	f000 fa1b 	bl	8005f80 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005b4a:	f000 fd61 	bl	8006610 <xTaskResumeAll>
 8005b4e:	e76c      	b.n	8005a2a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005b50:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005b52:	f000 fa15 	bl	8005f80 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005b56:	f000 fd5b 	bl	8006610 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005b5a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005b5c:	4618      	mov	r0, r3
 8005b5e:	3738      	adds	r7, #56	; 0x38
 8005b60:	46bd      	mov	sp, r7
 8005b62:	bd80      	pop	{r7, pc}
 8005b64:	e000ed04 	.word	0xe000ed04

08005b68 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005b68:	b580      	push	{r7, lr}
 8005b6a:	b090      	sub	sp, #64	; 0x40
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	60f8      	str	r0, [r7, #12]
 8005b70:	60b9      	str	r1, [r7, #8]
 8005b72:	607a      	str	r2, [r7, #4]
 8005b74:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8005b7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d10a      	bne.n	8005b96 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8005b80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b84:	f383 8811 	msr	BASEPRI, r3
 8005b88:	f3bf 8f6f 	isb	sy
 8005b8c:	f3bf 8f4f 	dsb	sy
 8005b90:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005b92:	bf00      	nop
 8005b94:	e7fe      	b.n	8005b94 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005b96:	68bb      	ldr	r3, [r7, #8]
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d103      	bne.n	8005ba4 <xQueueGenericSendFromISR+0x3c>
 8005b9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d101      	bne.n	8005ba8 <xQueueGenericSendFromISR+0x40>
 8005ba4:	2301      	movs	r3, #1
 8005ba6:	e000      	b.n	8005baa <xQueueGenericSendFromISR+0x42>
 8005ba8:	2300      	movs	r3, #0
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d10a      	bne.n	8005bc4 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8005bae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bb2:	f383 8811 	msr	BASEPRI, r3
 8005bb6:	f3bf 8f6f 	isb	sy
 8005bba:	f3bf 8f4f 	dsb	sy
 8005bbe:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005bc0:	bf00      	nop
 8005bc2:	e7fe      	b.n	8005bc2 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005bc4:	683b      	ldr	r3, [r7, #0]
 8005bc6:	2b02      	cmp	r3, #2
 8005bc8:	d103      	bne.n	8005bd2 <xQueueGenericSendFromISR+0x6a>
 8005bca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005bce:	2b01      	cmp	r3, #1
 8005bd0:	d101      	bne.n	8005bd6 <xQueueGenericSendFromISR+0x6e>
 8005bd2:	2301      	movs	r3, #1
 8005bd4:	e000      	b.n	8005bd8 <xQueueGenericSendFromISR+0x70>
 8005bd6:	2300      	movs	r3, #0
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d10a      	bne.n	8005bf2 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8005bdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005be0:	f383 8811 	msr	BASEPRI, r3
 8005be4:	f3bf 8f6f 	isb	sy
 8005be8:	f3bf 8f4f 	dsb	sy
 8005bec:	623b      	str	r3, [r7, #32]
}
 8005bee:	bf00      	nop
 8005bf0:	e7fe      	b.n	8005bf0 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005bf2:	f002 f801 	bl	8007bf8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005bf6:	f3ef 8211 	mrs	r2, BASEPRI
 8005bfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bfe:	f383 8811 	msr	BASEPRI, r3
 8005c02:	f3bf 8f6f 	isb	sy
 8005c06:	f3bf 8f4f 	dsb	sy
 8005c0a:	61fa      	str	r2, [r7, #28]
 8005c0c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005c0e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005c10:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005c12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c14:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005c16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c1a:	429a      	cmp	r2, r3
 8005c1c:	d302      	bcc.n	8005c24 <xQueueGenericSendFromISR+0xbc>
 8005c1e:	683b      	ldr	r3, [r7, #0]
 8005c20:	2b02      	cmp	r3, #2
 8005c22:	d12f      	bne.n	8005c84 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005c24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c26:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005c2a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005c2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c32:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005c34:	683a      	ldr	r2, [r7, #0]
 8005c36:	68b9      	ldr	r1, [r7, #8]
 8005c38:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005c3a:	f000 f911 	bl	8005e60 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005c3e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8005c42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c46:	d112      	bne.n	8005c6e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005c48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d016      	beq.n	8005c7e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005c50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c52:	3324      	adds	r3, #36	; 0x24
 8005c54:	4618      	mov	r0, r3
 8005c56:	f000 ff33 	bl	8006ac0 <xTaskRemoveFromEventList>
 8005c5a:	4603      	mov	r3, r0
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d00e      	beq.n	8005c7e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d00b      	beq.n	8005c7e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	2201      	movs	r2, #1
 8005c6a:	601a      	str	r2, [r3, #0]
 8005c6c:	e007      	b.n	8005c7e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005c6e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005c72:	3301      	adds	r3, #1
 8005c74:	b2db      	uxtb	r3, r3
 8005c76:	b25a      	sxtb	r2, r3
 8005c78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c7a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005c7e:	2301      	movs	r3, #1
 8005c80:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8005c82:	e001      	b.n	8005c88 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005c84:	2300      	movs	r3, #0
 8005c86:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005c88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c8a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005c8c:	697b      	ldr	r3, [r7, #20]
 8005c8e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005c92:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005c94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8005c96:	4618      	mov	r0, r3
 8005c98:	3740      	adds	r7, #64	; 0x40
 8005c9a:	46bd      	mov	sp, r7
 8005c9c:	bd80      	pop	{r7, pc}
	...

08005ca0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005ca0:	b580      	push	{r7, lr}
 8005ca2:	b08c      	sub	sp, #48	; 0x30
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	60f8      	str	r0, [r7, #12]
 8005ca8:	60b9      	str	r1, [r7, #8]
 8005caa:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005cac:	2300      	movs	r3, #0
 8005cae:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005cb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d10a      	bne.n	8005cd0 <xQueueReceive+0x30>
	__asm volatile
 8005cba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cbe:	f383 8811 	msr	BASEPRI, r3
 8005cc2:	f3bf 8f6f 	isb	sy
 8005cc6:	f3bf 8f4f 	dsb	sy
 8005cca:	623b      	str	r3, [r7, #32]
}
 8005ccc:	bf00      	nop
 8005cce:	e7fe      	b.n	8005cce <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005cd0:	68bb      	ldr	r3, [r7, #8]
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d103      	bne.n	8005cde <xQueueReceive+0x3e>
 8005cd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d101      	bne.n	8005ce2 <xQueueReceive+0x42>
 8005cde:	2301      	movs	r3, #1
 8005ce0:	e000      	b.n	8005ce4 <xQueueReceive+0x44>
 8005ce2:	2300      	movs	r3, #0
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d10a      	bne.n	8005cfe <xQueueReceive+0x5e>
	__asm volatile
 8005ce8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cec:	f383 8811 	msr	BASEPRI, r3
 8005cf0:	f3bf 8f6f 	isb	sy
 8005cf4:	f3bf 8f4f 	dsb	sy
 8005cf8:	61fb      	str	r3, [r7, #28]
}
 8005cfa:	bf00      	nop
 8005cfc:	e7fe      	b.n	8005cfc <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005cfe:	f001 f903 	bl	8006f08 <xTaskGetSchedulerState>
 8005d02:	4603      	mov	r3, r0
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d102      	bne.n	8005d0e <xQueueReceive+0x6e>
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d101      	bne.n	8005d12 <xQueueReceive+0x72>
 8005d0e:	2301      	movs	r3, #1
 8005d10:	e000      	b.n	8005d14 <xQueueReceive+0x74>
 8005d12:	2300      	movs	r3, #0
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d10a      	bne.n	8005d2e <xQueueReceive+0x8e>
	__asm volatile
 8005d18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d1c:	f383 8811 	msr	BASEPRI, r3
 8005d20:	f3bf 8f6f 	isb	sy
 8005d24:	f3bf 8f4f 	dsb	sy
 8005d28:	61bb      	str	r3, [r7, #24]
}
 8005d2a:	bf00      	nop
 8005d2c:	e7fe      	b.n	8005d2c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005d2e:	f001 fe81 	bl	8007a34 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005d32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d36:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d01f      	beq.n	8005d7e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005d3e:	68b9      	ldr	r1, [r7, #8]
 8005d40:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005d42:	f000 f8f7 	bl	8005f34 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d48:	1e5a      	subs	r2, r3, #1
 8005d4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d4c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005d4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d50:	691b      	ldr	r3, [r3, #16]
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d00f      	beq.n	8005d76 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005d56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d58:	3310      	adds	r3, #16
 8005d5a:	4618      	mov	r0, r3
 8005d5c:	f000 feb0 	bl	8006ac0 <xTaskRemoveFromEventList>
 8005d60:	4603      	mov	r3, r0
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d007      	beq.n	8005d76 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005d66:	4b3d      	ldr	r3, [pc, #244]	; (8005e5c <xQueueReceive+0x1bc>)
 8005d68:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d6c:	601a      	str	r2, [r3, #0]
 8005d6e:	f3bf 8f4f 	dsb	sy
 8005d72:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005d76:	f001 fe8d 	bl	8007a94 <vPortExitCritical>
				return pdPASS;
 8005d7a:	2301      	movs	r3, #1
 8005d7c:	e069      	b.n	8005e52 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d103      	bne.n	8005d8c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005d84:	f001 fe86 	bl	8007a94 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005d88:	2300      	movs	r3, #0
 8005d8a:	e062      	b.n	8005e52 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005d8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d106      	bne.n	8005da0 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005d92:	f107 0310 	add.w	r3, r7, #16
 8005d96:	4618      	mov	r0, r3
 8005d98:	f000 ff58 	bl	8006c4c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005d9c:	2301      	movs	r3, #1
 8005d9e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005da0:	f001 fe78 	bl	8007a94 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005da4:	f000 fc26 	bl	80065f4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005da8:	f001 fe44 	bl	8007a34 <vPortEnterCritical>
 8005dac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dae:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005db2:	b25b      	sxtb	r3, r3
 8005db4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005db8:	d103      	bne.n	8005dc2 <xQueueReceive+0x122>
 8005dba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dbc:	2200      	movs	r2, #0
 8005dbe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005dc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dc4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005dc8:	b25b      	sxtb	r3, r3
 8005dca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005dce:	d103      	bne.n	8005dd8 <xQueueReceive+0x138>
 8005dd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dd2:	2200      	movs	r2, #0
 8005dd4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005dd8:	f001 fe5c 	bl	8007a94 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005ddc:	1d3a      	adds	r2, r7, #4
 8005dde:	f107 0310 	add.w	r3, r7, #16
 8005de2:	4611      	mov	r1, r2
 8005de4:	4618      	mov	r0, r3
 8005de6:	f000 ff47 	bl	8006c78 <xTaskCheckForTimeOut>
 8005dea:	4603      	mov	r3, r0
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d123      	bne.n	8005e38 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005df0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005df2:	f000 f917 	bl	8006024 <prvIsQueueEmpty>
 8005df6:	4603      	mov	r3, r0
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d017      	beq.n	8005e2c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005dfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dfe:	3324      	adds	r3, #36	; 0x24
 8005e00:	687a      	ldr	r2, [r7, #4]
 8005e02:	4611      	mov	r1, r2
 8005e04:	4618      	mov	r0, r3
 8005e06:	f000 fdcf 	bl	80069a8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005e0a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005e0c:	f000 f8b8 	bl	8005f80 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005e10:	f000 fbfe 	bl	8006610 <xTaskResumeAll>
 8005e14:	4603      	mov	r3, r0
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d189      	bne.n	8005d2e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8005e1a:	4b10      	ldr	r3, [pc, #64]	; (8005e5c <xQueueReceive+0x1bc>)
 8005e1c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e20:	601a      	str	r2, [r3, #0]
 8005e22:	f3bf 8f4f 	dsb	sy
 8005e26:	f3bf 8f6f 	isb	sy
 8005e2a:	e780      	b.n	8005d2e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005e2c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005e2e:	f000 f8a7 	bl	8005f80 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005e32:	f000 fbed 	bl	8006610 <xTaskResumeAll>
 8005e36:	e77a      	b.n	8005d2e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005e38:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005e3a:	f000 f8a1 	bl	8005f80 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005e3e:	f000 fbe7 	bl	8006610 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005e42:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005e44:	f000 f8ee 	bl	8006024 <prvIsQueueEmpty>
 8005e48:	4603      	mov	r3, r0
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	f43f af6f 	beq.w	8005d2e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005e50:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005e52:	4618      	mov	r0, r3
 8005e54:	3730      	adds	r7, #48	; 0x30
 8005e56:	46bd      	mov	sp, r7
 8005e58:	bd80      	pop	{r7, pc}
 8005e5a:	bf00      	nop
 8005e5c:	e000ed04 	.word	0xe000ed04

08005e60 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005e60:	b580      	push	{r7, lr}
 8005e62:	b086      	sub	sp, #24
 8005e64:	af00      	add	r7, sp, #0
 8005e66:	60f8      	str	r0, [r7, #12]
 8005e68:	60b9      	str	r1, [r7, #8]
 8005e6a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005e6c:	2300      	movs	r3, #0
 8005e6e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e74:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d10d      	bne.n	8005e9a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d14d      	bne.n	8005f22 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	689b      	ldr	r3, [r3, #8]
 8005e8a:	4618      	mov	r0, r3
 8005e8c:	f001 f85a 	bl	8006f44 <xTaskPriorityDisinherit>
 8005e90:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	2200      	movs	r2, #0
 8005e96:	609a      	str	r2, [r3, #8]
 8005e98:	e043      	b.n	8005f22 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d119      	bne.n	8005ed4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	6858      	ldr	r0, [r3, #4]
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ea8:	461a      	mov	r2, r3
 8005eaa:	68b9      	ldr	r1, [r7, #8]
 8005eac:	f002 fa3a 	bl	8008324 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	685a      	ldr	r2, [r3, #4]
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eb8:	441a      	add	r2, r3
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	685a      	ldr	r2, [r3, #4]
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	689b      	ldr	r3, [r3, #8]
 8005ec6:	429a      	cmp	r2, r3
 8005ec8:	d32b      	bcc.n	8005f22 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	681a      	ldr	r2, [r3, #0]
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	605a      	str	r2, [r3, #4]
 8005ed2:	e026      	b.n	8005f22 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	68d8      	ldr	r0, [r3, #12]
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005edc:	461a      	mov	r2, r3
 8005ede:	68b9      	ldr	r1, [r7, #8]
 8005ee0:	f002 fa20 	bl	8008324 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	68da      	ldr	r2, [r3, #12]
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eec:	425b      	negs	r3, r3
 8005eee:	441a      	add	r2, r3
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	68da      	ldr	r2, [r3, #12]
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	429a      	cmp	r2, r3
 8005efe:	d207      	bcs.n	8005f10 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	689a      	ldr	r2, [r3, #8]
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f08:	425b      	negs	r3, r3
 8005f0a:	441a      	add	r2, r3
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	2b02      	cmp	r3, #2
 8005f14:	d105      	bne.n	8005f22 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005f16:	693b      	ldr	r3, [r7, #16]
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d002      	beq.n	8005f22 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005f1c:	693b      	ldr	r3, [r7, #16]
 8005f1e:	3b01      	subs	r3, #1
 8005f20:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005f22:	693b      	ldr	r3, [r7, #16]
 8005f24:	1c5a      	adds	r2, r3, #1
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8005f2a:	697b      	ldr	r3, [r7, #20]
}
 8005f2c:	4618      	mov	r0, r3
 8005f2e:	3718      	adds	r7, #24
 8005f30:	46bd      	mov	sp, r7
 8005f32:	bd80      	pop	{r7, pc}

08005f34 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005f34:	b580      	push	{r7, lr}
 8005f36:	b082      	sub	sp, #8
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	6078      	str	r0, [r7, #4]
 8005f3c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d018      	beq.n	8005f78 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	68da      	ldr	r2, [r3, #12]
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f4e:	441a      	add	r2, r3
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	68da      	ldr	r2, [r3, #12]
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	689b      	ldr	r3, [r3, #8]
 8005f5c:	429a      	cmp	r2, r3
 8005f5e:	d303      	bcc.n	8005f68 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681a      	ldr	r2, [r3, #0]
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	68d9      	ldr	r1, [r3, #12]
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f70:	461a      	mov	r2, r3
 8005f72:	6838      	ldr	r0, [r7, #0]
 8005f74:	f002 f9d6 	bl	8008324 <memcpy>
	}
}
 8005f78:	bf00      	nop
 8005f7a:	3708      	adds	r7, #8
 8005f7c:	46bd      	mov	sp, r7
 8005f7e:	bd80      	pop	{r7, pc}

08005f80 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005f80:	b580      	push	{r7, lr}
 8005f82:	b084      	sub	sp, #16
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005f88:	f001 fd54 	bl	8007a34 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005f92:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005f94:	e011      	b.n	8005fba <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d012      	beq.n	8005fc4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	3324      	adds	r3, #36	; 0x24
 8005fa2:	4618      	mov	r0, r3
 8005fa4:	f000 fd8c 	bl	8006ac0 <xTaskRemoveFromEventList>
 8005fa8:	4603      	mov	r3, r0
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d001      	beq.n	8005fb2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005fae:	f000 fec5 	bl	8006d3c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005fb2:	7bfb      	ldrb	r3, [r7, #15]
 8005fb4:	3b01      	subs	r3, #1
 8005fb6:	b2db      	uxtb	r3, r3
 8005fb8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005fba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	dce9      	bgt.n	8005f96 <prvUnlockQueue+0x16>
 8005fc2:	e000      	b.n	8005fc6 <prvUnlockQueue+0x46>
					break;
 8005fc4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	22ff      	movs	r2, #255	; 0xff
 8005fca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8005fce:	f001 fd61 	bl	8007a94 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005fd2:	f001 fd2f 	bl	8007a34 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005fdc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005fde:	e011      	b.n	8006004 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	691b      	ldr	r3, [r3, #16]
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d012      	beq.n	800600e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	3310      	adds	r3, #16
 8005fec:	4618      	mov	r0, r3
 8005fee:	f000 fd67 	bl	8006ac0 <xTaskRemoveFromEventList>
 8005ff2:	4603      	mov	r3, r0
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d001      	beq.n	8005ffc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005ff8:	f000 fea0 	bl	8006d3c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005ffc:	7bbb      	ldrb	r3, [r7, #14]
 8005ffe:	3b01      	subs	r3, #1
 8006000:	b2db      	uxtb	r3, r3
 8006002:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006004:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006008:	2b00      	cmp	r3, #0
 800600a:	dce9      	bgt.n	8005fe0 <prvUnlockQueue+0x60>
 800600c:	e000      	b.n	8006010 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800600e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	22ff      	movs	r2, #255	; 0xff
 8006014:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8006018:	f001 fd3c 	bl	8007a94 <vPortExitCritical>
}
 800601c:	bf00      	nop
 800601e:	3710      	adds	r7, #16
 8006020:	46bd      	mov	sp, r7
 8006022:	bd80      	pop	{r7, pc}

08006024 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006024:	b580      	push	{r7, lr}
 8006026:	b084      	sub	sp, #16
 8006028:	af00      	add	r7, sp, #0
 800602a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800602c:	f001 fd02 	bl	8007a34 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006034:	2b00      	cmp	r3, #0
 8006036:	d102      	bne.n	800603e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006038:	2301      	movs	r3, #1
 800603a:	60fb      	str	r3, [r7, #12]
 800603c:	e001      	b.n	8006042 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800603e:	2300      	movs	r3, #0
 8006040:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006042:	f001 fd27 	bl	8007a94 <vPortExitCritical>

	return xReturn;
 8006046:	68fb      	ldr	r3, [r7, #12]
}
 8006048:	4618      	mov	r0, r3
 800604a:	3710      	adds	r7, #16
 800604c:	46bd      	mov	sp, r7
 800604e:	bd80      	pop	{r7, pc}

08006050 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006050:	b580      	push	{r7, lr}
 8006052:	b084      	sub	sp, #16
 8006054:	af00      	add	r7, sp, #0
 8006056:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006058:	f001 fcec 	bl	8007a34 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006064:	429a      	cmp	r2, r3
 8006066:	d102      	bne.n	800606e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006068:	2301      	movs	r3, #1
 800606a:	60fb      	str	r3, [r7, #12]
 800606c:	e001      	b.n	8006072 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800606e:	2300      	movs	r3, #0
 8006070:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006072:	f001 fd0f 	bl	8007a94 <vPortExitCritical>

	return xReturn;
 8006076:	68fb      	ldr	r3, [r7, #12]
}
 8006078:	4618      	mov	r0, r3
 800607a:	3710      	adds	r7, #16
 800607c:	46bd      	mov	sp, r7
 800607e:	bd80      	pop	{r7, pc}

08006080 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006080:	b480      	push	{r7}
 8006082:	b085      	sub	sp, #20
 8006084:	af00      	add	r7, sp, #0
 8006086:	6078      	str	r0, [r7, #4]
 8006088:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800608a:	2300      	movs	r3, #0
 800608c:	60fb      	str	r3, [r7, #12]
 800608e:	e014      	b.n	80060ba <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006090:	4a0f      	ldr	r2, [pc, #60]	; (80060d0 <vQueueAddToRegistry+0x50>)
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006098:	2b00      	cmp	r3, #0
 800609a:	d10b      	bne.n	80060b4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800609c:	490c      	ldr	r1, [pc, #48]	; (80060d0 <vQueueAddToRegistry+0x50>)
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	683a      	ldr	r2, [r7, #0]
 80060a2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80060a6:	4a0a      	ldr	r2, [pc, #40]	; (80060d0 <vQueueAddToRegistry+0x50>)
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	00db      	lsls	r3, r3, #3
 80060ac:	4413      	add	r3, r2
 80060ae:	687a      	ldr	r2, [r7, #4]
 80060b0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80060b2:	e006      	b.n	80060c2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	3301      	adds	r3, #1
 80060b8:	60fb      	str	r3, [r7, #12]
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	2b07      	cmp	r3, #7
 80060be:	d9e7      	bls.n	8006090 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80060c0:	bf00      	nop
 80060c2:	bf00      	nop
 80060c4:	3714      	adds	r7, #20
 80060c6:	46bd      	mov	sp, r7
 80060c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060cc:	4770      	bx	lr
 80060ce:	bf00      	nop
 80060d0:	20000a44 	.word	0x20000a44

080060d4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80060d4:	b580      	push	{r7, lr}
 80060d6:	b086      	sub	sp, #24
 80060d8:	af00      	add	r7, sp, #0
 80060da:	60f8      	str	r0, [r7, #12]
 80060dc:	60b9      	str	r1, [r7, #8]
 80060de:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80060e4:	f001 fca6 	bl	8007a34 <vPortEnterCritical>
 80060e8:	697b      	ldr	r3, [r7, #20]
 80060ea:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80060ee:	b25b      	sxtb	r3, r3
 80060f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060f4:	d103      	bne.n	80060fe <vQueueWaitForMessageRestricted+0x2a>
 80060f6:	697b      	ldr	r3, [r7, #20]
 80060f8:	2200      	movs	r2, #0
 80060fa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80060fe:	697b      	ldr	r3, [r7, #20]
 8006100:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006104:	b25b      	sxtb	r3, r3
 8006106:	f1b3 3fff 	cmp.w	r3, #4294967295
 800610a:	d103      	bne.n	8006114 <vQueueWaitForMessageRestricted+0x40>
 800610c:	697b      	ldr	r3, [r7, #20]
 800610e:	2200      	movs	r2, #0
 8006110:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006114:	f001 fcbe 	bl	8007a94 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006118:	697b      	ldr	r3, [r7, #20]
 800611a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800611c:	2b00      	cmp	r3, #0
 800611e:	d106      	bne.n	800612e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006120:	697b      	ldr	r3, [r7, #20]
 8006122:	3324      	adds	r3, #36	; 0x24
 8006124:	687a      	ldr	r2, [r7, #4]
 8006126:	68b9      	ldr	r1, [r7, #8]
 8006128:	4618      	mov	r0, r3
 800612a:	f000 fc9d 	bl	8006a68 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800612e:	6978      	ldr	r0, [r7, #20]
 8006130:	f7ff ff26 	bl	8005f80 <prvUnlockQueue>
	}
 8006134:	bf00      	nop
 8006136:	3718      	adds	r7, #24
 8006138:	46bd      	mov	sp, r7
 800613a:	bd80      	pop	{r7, pc}

0800613c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800613c:	b580      	push	{r7, lr}
 800613e:	b08e      	sub	sp, #56	; 0x38
 8006140:	af04      	add	r7, sp, #16
 8006142:	60f8      	str	r0, [r7, #12]
 8006144:	60b9      	str	r1, [r7, #8]
 8006146:	607a      	str	r2, [r7, #4]
 8006148:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800614a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800614c:	2b00      	cmp	r3, #0
 800614e:	d10a      	bne.n	8006166 <xTaskCreateStatic+0x2a>
	__asm volatile
 8006150:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006154:	f383 8811 	msr	BASEPRI, r3
 8006158:	f3bf 8f6f 	isb	sy
 800615c:	f3bf 8f4f 	dsb	sy
 8006160:	623b      	str	r3, [r7, #32]
}
 8006162:	bf00      	nop
 8006164:	e7fe      	b.n	8006164 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006166:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006168:	2b00      	cmp	r3, #0
 800616a:	d10a      	bne.n	8006182 <xTaskCreateStatic+0x46>
	__asm volatile
 800616c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006170:	f383 8811 	msr	BASEPRI, r3
 8006174:	f3bf 8f6f 	isb	sy
 8006178:	f3bf 8f4f 	dsb	sy
 800617c:	61fb      	str	r3, [r7, #28]
}
 800617e:	bf00      	nop
 8006180:	e7fe      	b.n	8006180 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006182:	23a8      	movs	r3, #168	; 0xa8
 8006184:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006186:	693b      	ldr	r3, [r7, #16]
 8006188:	2ba8      	cmp	r3, #168	; 0xa8
 800618a:	d00a      	beq.n	80061a2 <xTaskCreateStatic+0x66>
	__asm volatile
 800618c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006190:	f383 8811 	msr	BASEPRI, r3
 8006194:	f3bf 8f6f 	isb	sy
 8006198:	f3bf 8f4f 	dsb	sy
 800619c:	61bb      	str	r3, [r7, #24]
}
 800619e:	bf00      	nop
 80061a0:	e7fe      	b.n	80061a0 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80061a2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80061a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d01e      	beq.n	80061e8 <xTaskCreateStatic+0xac>
 80061aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d01b      	beq.n	80061e8 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80061b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061b2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80061b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061b6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80061b8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80061ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061bc:	2202      	movs	r2, #2
 80061be:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80061c2:	2300      	movs	r3, #0
 80061c4:	9303      	str	r3, [sp, #12]
 80061c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061c8:	9302      	str	r3, [sp, #8]
 80061ca:	f107 0314 	add.w	r3, r7, #20
 80061ce:	9301      	str	r3, [sp, #4]
 80061d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061d2:	9300      	str	r3, [sp, #0]
 80061d4:	683b      	ldr	r3, [r7, #0]
 80061d6:	687a      	ldr	r2, [r7, #4]
 80061d8:	68b9      	ldr	r1, [r7, #8]
 80061da:	68f8      	ldr	r0, [r7, #12]
 80061dc:	f000 f850 	bl	8006280 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80061e0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80061e2:	f000 f8f3 	bl	80063cc <prvAddNewTaskToReadyList>
 80061e6:	e001      	b.n	80061ec <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80061e8:	2300      	movs	r3, #0
 80061ea:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80061ec:	697b      	ldr	r3, [r7, #20]
	}
 80061ee:	4618      	mov	r0, r3
 80061f0:	3728      	adds	r7, #40	; 0x28
 80061f2:	46bd      	mov	sp, r7
 80061f4:	bd80      	pop	{r7, pc}

080061f6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80061f6:	b580      	push	{r7, lr}
 80061f8:	b08c      	sub	sp, #48	; 0x30
 80061fa:	af04      	add	r7, sp, #16
 80061fc:	60f8      	str	r0, [r7, #12]
 80061fe:	60b9      	str	r1, [r7, #8]
 8006200:	603b      	str	r3, [r7, #0]
 8006202:	4613      	mov	r3, r2
 8006204:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006206:	88fb      	ldrh	r3, [r7, #6]
 8006208:	009b      	lsls	r3, r3, #2
 800620a:	4618      	mov	r0, r3
 800620c:	f001 fd34 	bl	8007c78 <pvPortMalloc>
 8006210:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006212:	697b      	ldr	r3, [r7, #20]
 8006214:	2b00      	cmp	r3, #0
 8006216:	d00e      	beq.n	8006236 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006218:	20a8      	movs	r0, #168	; 0xa8
 800621a:	f001 fd2d 	bl	8007c78 <pvPortMalloc>
 800621e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006220:	69fb      	ldr	r3, [r7, #28]
 8006222:	2b00      	cmp	r3, #0
 8006224:	d003      	beq.n	800622e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006226:	69fb      	ldr	r3, [r7, #28]
 8006228:	697a      	ldr	r2, [r7, #20]
 800622a:	631a      	str	r2, [r3, #48]	; 0x30
 800622c:	e005      	b.n	800623a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800622e:	6978      	ldr	r0, [r7, #20]
 8006230:	f001 fdee 	bl	8007e10 <vPortFree>
 8006234:	e001      	b.n	800623a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006236:	2300      	movs	r3, #0
 8006238:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800623a:	69fb      	ldr	r3, [r7, #28]
 800623c:	2b00      	cmp	r3, #0
 800623e:	d017      	beq.n	8006270 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006240:	69fb      	ldr	r3, [r7, #28]
 8006242:	2200      	movs	r2, #0
 8006244:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006248:	88fa      	ldrh	r2, [r7, #6]
 800624a:	2300      	movs	r3, #0
 800624c:	9303      	str	r3, [sp, #12]
 800624e:	69fb      	ldr	r3, [r7, #28]
 8006250:	9302      	str	r3, [sp, #8]
 8006252:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006254:	9301      	str	r3, [sp, #4]
 8006256:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006258:	9300      	str	r3, [sp, #0]
 800625a:	683b      	ldr	r3, [r7, #0]
 800625c:	68b9      	ldr	r1, [r7, #8]
 800625e:	68f8      	ldr	r0, [r7, #12]
 8006260:	f000 f80e 	bl	8006280 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006264:	69f8      	ldr	r0, [r7, #28]
 8006266:	f000 f8b1 	bl	80063cc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800626a:	2301      	movs	r3, #1
 800626c:	61bb      	str	r3, [r7, #24]
 800626e:	e002      	b.n	8006276 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006270:	f04f 33ff 	mov.w	r3, #4294967295
 8006274:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006276:	69bb      	ldr	r3, [r7, #24]
	}
 8006278:	4618      	mov	r0, r3
 800627a:	3720      	adds	r7, #32
 800627c:	46bd      	mov	sp, r7
 800627e:	bd80      	pop	{r7, pc}

08006280 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006280:	b580      	push	{r7, lr}
 8006282:	b088      	sub	sp, #32
 8006284:	af00      	add	r7, sp, #0
 8006286:	60f8      	str	r0, [r7, #12]
 8006288:	60b9      	str	r1, [r7, #8]
 800628a:	607a      	str	r2, [r7, #4]
 800628c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800628e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006290:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	009b      	lsls	r3, r3, #2
 8006296:	461a      	mov	r2, r3
 8006298:	21a5      	movs	r1, #165	; 0xa5
 800629a:	f001 ffa9 	bl	80081f0 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800629e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80062a8:	3b01      	subs	r3, #1
 80062aa:	009b      	lsls	r3, r3, #2
 80062ac:	4413      	add	r3, r2
 80062ae:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80062b0:	69bb      	ldr	r3, [r7, #24]
 80062b2:	f023 0307 	bic.w	r3, r3, #7
 80062b6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80062b8:	69bb      	ldr	r3, [r7, #24]
 80062ba:	f003 0307 	and.w	r3, r3, #7
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d00a      	beq.n	80062d8 <prvInitialiseNewTask+0x58>
	__asm volatile
 80062c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062c6:	f383 8811 	msr	BASEPRI, r3
 80062ca:	f3bf 8f6f 	isb	sy
 80062ce:	f3bf 8f4f 	dsb	sy
 80062d2:	617b      	str	r3, [r7, #20]
}
 80062d4:	bf00      	nop
 80062d6:	e7fe      	b.n	80062d6 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80062d8:	68bb      	ldr	r3, [r7, #8]
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d01f      	beq.n	800631e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80062de:	2300      	movs	r3, #0
 80062e0:	61fb      	str	r3, [r7, #28]
 80062e2:	e012      	b.n	800630a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80062e4:	68ba      	ldr	r2, [r7, #8]
 80062e6:	69fb      	ldr	r3, [r7, #28]
 80062e8:	4413      	add	r3, r2
 80062ea:	7819      	ldrb	r1, [r3, #0]
 80062ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80062ee:	69fb      	ldr	r3, [r7, #28]
 80062f0:	4413      	add	r3, r2
 80062f2:	3334      	adds	r3, #52	; 0x34
 80062f4:	460a      	mov	r2, r1
 80062f6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80062f8:	68ba      	ldr	r2, [r7, #8]
 80062fa:	69fb      	ldr	r3, [r7, #28]
 80062fc:	4413      	add	r3, r2
 80062fe:	781b      	ldrb	r3, [r3, #0]
 8006300:	2b00      	cmp	r3, #0
 8006302:	d006      	beq.n	8006312 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006304:	69fb      	ldr	r3, [r7, #28]
 8006306:	3301      	adds	r3, #1
 8006308:	61fb      	str	r3, [r7, #28]
 800630a:	69fb      	ldr	r3, [r7, #28]
 800630c:	2b0f      	cmp	r3, #15
 800630e:	d9e9      	bls.n	80062e4 <prvInitialiseNewTask+0x64>
 8006310:	e000      	b.n	8006314 <prvInitialiseNewTask+0x94>
			{
				break;
 8006312:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006314:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006316:	2200      	movs	r2, #0
 8006318:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800631c:	e003      	b.n	8006326 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800631e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006320:	2200      	movs	r2, #0
 8006322:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006326:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006328:	2b37      	cmp	r3, #55	; 0x37
 800632a:	d901      	bls.n	8006330 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800632c:	2337      	movs	r3, #55	; 0x37
 800632e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006330:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006332:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006334:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006336:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006338:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800633a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800633c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800633e:	2200      	movs	r2, #0
 8006340:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006342:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006344:	3304      	adds	r3, #4
 8006346:	4618      	mov	r0, r3
 8006348:	f7ff f8f2 	bl	8005530 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800634c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800634e:	3318      	adds	r3, #24
 8006350:	4618      	mov	r0, r3
 8006352:	f7ff f8ed 	bl	8005530 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006356:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006358:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800635a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800635c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800635e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006362:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006364:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006366:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006368:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800636a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800636c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800636e:	2200      	movs	r2, #0
 8006370:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006374:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006376:	2200      	movs	r2, #0
 8006378:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800637c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800637e:	3354      	adds	r3, #84	; 0x54
 8006380:	224c      	movs	r2, #76	; 0x4c
 8006382:	2100      	movs	r1, #0
 8006384:	4618      	mov	r0, r3
 8006386:	f001 ff33 	bl	80081f0 <memset>
 800638a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800638c:	4a0c      	ldr	r2, [pc, #48]	; (80063c0 <prvInitialiseNewTask+0x140>)
 800638e:	659a      	str	r2, [r3, #88]	; 0x58
 8006390:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006392:	4a0c      	ldr	r2, [pc, #48]	; (80063c4 <prvInitialiseNewTask+0x144>)
 8006394:	65da      	str	r2, [r3, #92]	; 0x5c
 8006396:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006398:	4a0b      	ldr	r2, [pc, #44]	; (80063c8 <prvInitialiseNewTask+0x148>)
 800639a:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800639c:	683a      	ldr	r2, [r7, #0]
 800639e:	68f9      	ldr	r1, [r7, #12]
 80063a0:	69b8      	ldr	r0, [r7, #24]
 80063a2:	f001 fa17 	bl	80077d4 <pxPortInitialiseStack>
 80063a6:	4602      	mov	r2, r0
 80063a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063aa:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80063ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d002      	beq.n	80063b8 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80063b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80063b6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80063b8:	bf00      	nop
 80063ba:	3720      	adds	r7, #32
 80063bc:	46bd      	mov	sp, r7
 80063be:	bd80      	pop	{r7, pc}
 80063c0:	20001c98 	.word	0x20001c98
 80063c4:	20001d00 	.word	0x20001d00
 80063c8:	20001d68 	.word	0x20001d68

080063cc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80063cc:	b580      	push	{r7, lr}
 80063ce:	b082      	sub	sp, #8
 80063d0:	af00      	add	r7, sp, #0
 80063d2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80063d4:	f001 fb2e 	bl	8007a34 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80063d8:	4b2d      	ldr	r3, [pc, #180]	; (8006490 <prvAddNewTaskToReadyList+0xc4>)
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	3301      	adds	r3, #1
 80063de:	4a2c      	ldr	r2, [pc, #176]	; (8006490 <prvAddNewTaskToReadyList+0xc4>)
 80063e0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80063e2:	4b2c      	ldr	r3, [pc, #176]	; (8006494 <prvAddNewTaskToReadyList+0xc8>)
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d109      	bne.n	80063fe <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80063ea:	4a2a      	ldr	r2, [pc, #168]	; (8006494 <prvAddNewTaskToReadyList+0xc8>)
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80063f0:	4b27      	ldr	r3, [pc, #156]	; (8006490 <prvAddNewTaskToReadyList+0xc4>)
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	2b01      	cmp	r3, #1
 80063f6:	d110      	bne.n	800641a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80063f8:	f000 fcc4 	bl	8006d84 <prvInitialiseTaskLists>
 80063fc:	e00d      	b.n	800641a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80063fe:	4b26      	ldr	r3, [pc, #152]	; (8006498 <prvAddNewTaskToReadyList+0xcc>)
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	2b00      	cmp	r3, #0
 8006404:	d109      	bne.n	800641a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006406:	4b23      	ldr	r3, [pc, #140]	; (8006494 <prvAddNewTaskToReadyList+0xc8>)
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006410:	429a      	cmp	r2, r3
 8006412:	d802      	bhi.n	800641a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006414:	4a1f      	ldr	r2, [pc, #124]	; (8006494 <prvAddNewTaskToReadyList+0xc8>)
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800641a:	4b20      	ldr	r3, [pc, #128]	; (800649c <prvAddNewTaskToReadyList+0xd0>)
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	3301      	adds	r3, #1
 8006420:	4a1e      	ldr	r2, [pc, #120]	; (800649c <prvAddNewTaskToReadyList+0xd0>)
 8006422:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006424:	4b1d      	ldr	r3, [pc, #116]	; (800649c <prvAddNewTaskToReadyList+0xd0>)
 8006426:	681a      	ldr	r2, [r3, #0]
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006430:	4b1b      	ldr	r3, [pc, #108]	; (80064a0 <prvAddNewTaskToReadyList+0xd4>)
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	429a      	cmp	r2, r3
 8006436:	d903      	bls.n	8006440 <prvAddNewTaskToReadyList+0x74>
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800643c:	4a18      	ldr	r2, [pc, #96]	; (80064a0 <prvAddNewTaskToReadyList+0xd4>)
 800643e:	6013      	str	r3, [r2, #0]
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006444:	4613      	mov	r3, r2
 8006446:	009b      	lsls	r3, r3, #2
 8006448:	4413      	add	r3, r2
 800644a:	009b      	lsls	r3, r3, #2
 800644c:	4a15      	ldr	r2, [pc, #84]	; (80064a4 <prvAddNewTaskToReadyList+0xd8>)
 800644e:	441a      	add	r2, r3
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	3304      	adds	r3, #4
 8006454:	4619      	mov	r1, r3
 8006456:	4610      	mov	r0, r2
 8006458:	f7ff f877 	bl	800554a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800645c:	f001 fb1a 	bl	8007a94 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006460:	4b0d      	ldr	r3, [pc, #52]	; (8006498 <prvAddNewTaskToReadyList+0xcc>)
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	2b00      	cmp	r3, #0
 8006466:	d00e      	beq.n	8006486 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006468:	4b0a      	ldr	r3, [pc, #40]	; (8006494 <prvAddNewTaskToReadyList+0xc8>)
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006472:	429a      	cmp	r2, r3
 8006474:	d207      	bcs.n	8006486 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006476:	4b0c      	ldr	r3, [pc, #48]	; (80064a8 <prvAddNewTaskToReadyList+0xdc>)
 8006478:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800647c:	601a      	str	r2, [r3, #0]
 800647e:	f3bf 8f4f 	dsb	sy
 8006482:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006486:	bf00      	nop
 8006488:	3708      	adds	r7, #8
 800648a:	46bd      	mov	sp, r7
 800648c:	bd80      	pop	{r7, pc}
 800648e:	bf00      	nop
 8006490:	20000f58 	.word	0x20000f58
 8006494:	20000a84 	.word	0x20000a84
 8006498:	20000f64 	.word	0x20000f64
 800649c:	20000f74 	.word	0x20000f74
 80064a0:	20000f60 	.word	0x20000f60
 80064a4:	20000a88 	.word	0x20000a88
 80064a8:	e000ed04 	.word	0xe000ed04

080064ac <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80064ac:	b580      	push	{r7, lr}
 80064ae:	b084      	sub	sp, #16
 80064b0:	af00      	add	r7, sp, #0
 80064b2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80064b4:	2300      	movs	r3, #0
 80064b6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d017      	beq.n	80064ee <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80064be:	4b13      	ldr	r3, [pc, #76]	; (800650c <vTaskDelay+0x60>)
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d00a      	beq.n	80064dc <vTaskDelay+0x30>
	__asm volatile
 80064c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064ca:	f383 8811 	msr	BASEPRI, r3
 80064ce:	f3bf 8f6f 	isb	sy
 80064d2:	f3bf 8f4f 	dsb	sy
 80064d6:	60bb      	str	r3, [r7, #8]
}
 80064d8:	bf00      	nop
 80064da:	e7fe      	b.n	80064da <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80064dc:	f000 f88a 	bl	80065f4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80064e0:	2100      	movs	r1, #0
 80064e2:	6878      	ldr	r0, [r7, #4]
 80064e4:	f000 fdb4 	bl	8007050 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80064e8:	f000 f892 	bl	8006610 <xTaskResumeAll>
 80064ec:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d107      	bne.n	8006504 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80064f4:	4b06      	ldr	r3, [pc, #24]	; (8006510 <vTaskDelay+0x64>)
 80064f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80064fa:	601a      	str	r2, [r3, #0]
 80064fc:	f3bf 8f4f 	dsb	sy
 8006500:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006504:	bf00      	nop
 8006506:	3710      	adds	r7, #16
 8006508:	46bd      	mov	sp, r7
 800650a:	bd80      	pop	{r7, pc}
 800650c:	20000f80 	.word	0x20000f80
 8006510:	e000ed04 	.word	0xe000ed04

08006514 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006514:	b580      	push	{r7, lr}
 8006516:	b08a      	sub	sp, #40	; 0x28
 8006518:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800651a:	2300      	movs	r3, #0
 800651c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800651e:	2300      	movs	r3, #0
 8006520:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006522:	463a      	mov	r2, r7
 8006524:	1d39      	adds	r1, r7, #4
 8006526:	f107 0308 	add.w	r3, r7, #8
 800652a:	4618      	mov	r0, r3
 800652c:	f7fe fdbe 	bl	80050ac <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006530:	6839      	ldr	r1, [r7, #0]
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	68ba      	ldr	r2, [r7, #8]
 8006536:	9202      	str	r2, [sp, #8]
 8006538:	9301      	str	r3, [sp, #4]
 800653a:	2300      	movs	r3, #0
 800653c:	9300      	str	r3, [sp, #0]
 800653e:	2300      	movs	r3, #0
 8006540:	460a      	mov	r2, r1
 8006542:	4924      	ldr	r1, [pc, #144]	; (80065d4 <vTaskStartScheduler+0xc0>)
 8006544:	4824      	ldr	r0, [pc, #144]	; (80065d8 <vTaskStartScheduler+0xc4>)
 8006546:	f7ff fdf9 	bl	800613c <xTaskCreateStatic>
 800654a:	4603      	mov	r3, r0
 800654c:	4a23      	ldr	r2, [pc, #140]	; (80065dc <vTaskStartScheduler+0xc8>)
 800654e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006550:	4b22      	ldr	r3, [pc, #136]	; (80065dc <vTaskStartScheduler+0xc8>)
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	2b00      	cmp	r3, #0
 8006556:	d002      	beq.n	800655e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006558:	2301      	movs	r3, #1
 800655a:	617b      	str	r3, [r7, #20]
 800655c:	e001      	b.n	8006562 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800655e:	2300      	movs	r3, #0
 8006560:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006562:	697b      	ldr	r3, [r7, #20]
 8006564:	2b01      	cmp	r3, #1
 8006566:	d102      	bne.n	800656e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006568:	f000 fdc6 	bl	80070f8 <xTimerCreateTimerTask>
 800656c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800656e:	697b      	ldr	r3, [r7, #20]
 8006570:	2b01      	cmp	r3, #1
 8006572:	d11b      	bne.n	80065ac <vTaskStartScheduler+0x98>
	__asm volatile
 8006574:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006578:	f383 8811 	msr	BASEPRI, r3
 800657c:	f3bf 8f6f 	isb	sy
 8006580:	f3bf 8f4f 	dsb	sy
 8006584:	613b      	str	r3, [r7, #16]
}
 8006586:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006588:	4b15      	ldr	r3, [pc, #84]	; (80065e0 <vTaskStartScheduler+0xcc>)
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	3354      	adds	r3, #84	; 0x54
 800658e:	4a15      	ldr	r2, [pc, #84]	; (80065e4 <vTaskStartScheduler+0xd0>)
 8006590:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006592:	4b15      	ldr	r3, [pc, #84]	; (80065e8 <vTaskStartScheduler+0xd4>)
 8006594:	f04f 32ff 	mov.w	r2, #4294967295
 8006598:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800659a:	4b14      	ldr	r3, [pc, #80]	; (80065ec <vTaskStartScheduler+0xd8>)
 800659c:	2201      	movs	r2, #1
 800659e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80065a0:	4b13      	ldr	r3, [pc, #76]	; (80065f0 <vTaskStartScheduler+0xdc>)
 80065a2:	2200      	movs	r2, #0
 80065a4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80065a6:	f001 f9a3 	bl	80078f0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80065aa:	e00e      	b.n	80065ca <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80065ac:	697b      	ldr	r3, [r7, #20]
 80065ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065b2:	d10a      	bne.n	80065ca <vTaskStartScheduler+0xb6>
	__asm volatile
 80065b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065b8:	f383 8811 	msr	BASEPRI, r3
 80065bc:	f3bf 8f6f 	isb	sy
 80065c0:	f3bf 8f4f 	dsb	sy
 80065c4:	60fb      	str	r3, [r7, #12]
}
 80065c6:	bf00      	nop
 80065c8:	e7fe      	b.n	80065c8 <vTaskStartScheduler+0xb4>
}
 80065ca:	bf00      	nop
 80065cc:	3718      	adds	r7, #24
 80065ce:	46bd      	mov	sp, r7
 80065d0:	bd80      	pop	{r7, pc}
 80065d2:	bf00      	nop
 80065d4:	0800845c 	.word	0x0800845c
 80065d8:	08006d55 	.word	0x08006d55
 80065dc:	20000f7c 	.word	0x20000f7c
 80065e0:	20000a84 	.word	0x20000a84
 80065e4:	200001b4 	.word	0x200001b4
 80065e8:	20000f78 	.word	0x20000f78
 80065ec:	20000f64 	.word	0x20000f64
 80065f0:	20000f5c 	.word	0x20000f5c

080065f4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80065f4:	b480      	push	{r7}
 80065f6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80065f8:	4b04      	ldr	r3, [pc, #16]	; (800660c <vTaskSuspendAll+0x18>)
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	3301      	adds	r3, #1
 80065fe:	4a03      	ldr	r2, [pc, #12]	; (800660c <vTaskSuspendAll+0x18>)
 8006600:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8006602:	bf00      	nop
 8006604:	46bd      	mov	sp, r7
 8006606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800660a:	4770      	bx	lr
 800660c:	20000f80 	.word	0x20000f80

08006610 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006610:	b580      	push	{r7, lr}
 8006612:	b084      	sub	sp, #16
 8006614:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006616:	2300      	movs	r3, #0
 8006618:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800661a:	2300      	movs	r3, #0
 800661c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800661e:	4b42      	ldr	r3, [pc, #264]	; (8006728 <xTaskResumeAll+0x118>)
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	2b00      	cmp	r3, #0
 8006624:	d10a      	bne.n	800663c <xTaskResumeAll+0x2c>
	__asm volatile
 8006626:	f04f 0350 	mov.w	r3, #80	; 0x50
 800662a:	f383 8811 	msr	BASEPRI, r3
 800662e:	f3bf 8f6f 	isb	sy
 8006632:	f3bf 8f4f 	dsb	sy
 8006636:	603b      	str	r3, [r7, #0]
}
 8006638:	bf00      	nop
 800663a:	e7fe      	b.n	800663a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800663c:	f001 f9fa 	bl	8007a34 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006640:	4b39      	ldr	r3, [pc, #228]	; (8006728 <xTaskResumeAll+0x118>)
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	3b01      	subs	r3, #1
 8006646:	4a38      	ldr	r2, [pc, #224]	; (8006728 <xTaskResumeAll+0x118>)
 8006648:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800664a:	4b37      	ldr	r3, [pc, #220]	; (8006728 <xTaskResumeAll+0x118>)
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	2b00      	cmp	r3, #0
 8006650:	d162      	bne.n	8006718 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006652:	4b36      	ldr	r3, [pc, #216]	; (800672c <xTaskResumeAll+0x11c>)
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	2b00      	cmp	r3, #0
 8006658:	d05e      	beq.n	8006718 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800665a:	e02f      	b.n	80066bc <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800665c:	4b34      	ldr	r3, [pc, #208]	; (8006730 <xTaskResumeAll+0x120>)
 800665e:	68db      	ldr	r3, [r3, #12]
 8006660:	68db      	ldr	r3, [r3, #12]
 8006662:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	3318      	adds	r3, #24
 8006668:	4618      	mov	r0, r3
 800666a:	f7fe ffcb 	bl	8005604 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	3304      	adds	r3, #4
 8006672:	4618      	mov	r0, r3
 8006674:	f7fe ffc6 	bl	8005604 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800667c:	4b2d      	ldr	r3, [pc, #180]	; (8006734 <xTaskResumeAll+0x124>)
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	429a      	cmp	r2, r3
 8006682:	d903      	bls.n	800668c <xTaskResumeAll+0x7c>
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006688:	4a2a      	ldr	r2, [pc, #168]	; (8006734 <xTaskResumeAll+0x124>)
 800668a:	6013      	str	r3, [r2, #0]
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006690:	4613      	mov	r3, r2
 8006692:	009b      	lsls	r3, r3, #2
 8006694:	4413      	add	r3, r2
 8006696:	009b      	lsls	r3, r3, #2
 8006698:	4a27      	ldr	r2, [pc, #156]	; (8006738 <xTaskResumeAll+0x128>)
 800669a:	441a      	add	r2, r3
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	3304      	adds	r3, #4
 80066a0:	4619      	mov	r1, r3
 80066a2:	4610      	mov	r0, r2
 80066a4:	f7fe ff51 	bl	800554a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066ac:	4b23      	ldr	r3, [pc, #140]	; (800673c <xTaskResumeAll+0x12c>)
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066b2:	429a      	cmp	r2, r3
 80066b4:	d302      	bcc.n	80066bc <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80066b6:	4b22      	ldr	r3, [pc, #136]	; (8006740 <xTaskResumeAll+0x130>)
 80066b8:	2201      	movs	r2, #1
 80066ba:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80066bc:	4b1c      	ldr	r3, [pc, #112]	; (8006730 <xTaskResumeAll+0x120>)
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d1cb      	bne.n	800665c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d001      	beq.n	80066ce <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80066ca:	f000 fbfd 	bl	8006ec8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80066ce:	4b1d      	ldr	r3, [pc, #116]	; (8006744 <xTaskResumeAll+0x134>)
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d010      	beq.n	80066fc <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80066da:	f000 f847 	bl	800676c <xTaskIncrementTick>
 80066de:	4603      	mov	r3, r0
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d002      	beq.n	80066ea <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80066e4:	4b16      	ldr	r3, [pc, #88]	; (8006740 <xTaskResumeAll+0x130>)
 80066e6:	2201      	movs	r2, #1
 80066e8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	3b01      	subs	r3, #1
 80066ee:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d1f1      	bne.n	80066da <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80066f6:	4b13      	ldr	r3, [pc, #76]	; (8006744 <xTaskResumeAll+0x134>)
 80066f8:	2200      	movs	r2, #0
 80066fa:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80066fc:	4b10      	ldr	r3, [pc, #64]	; (8006740 <xTaskResumeAll+0x130>)
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	2b00      	cmp	r3, #0
 8006702:	d009      	beq.n	8006718 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006704:	2301      	movs	r3, #1
 8006706:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006708:	4b0f      	ldr	r3, [pc, #60]	; (8006748 <xTaskResumeAll+0x138>)
 800670a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800670e:	601a      	str	r2, [r3, #0]
 8006710:	f3bf 8f4f 	dsb	sy
 8006714:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006718:	f001 f9bc 	bl	8007a94 <vPortExitCritical>

	return xAlreadyYielded;
 800671c:	68bb      	ldr	r3, [r7, #8]
}
 800671e:	4618      	mov	r0, r3
 8006720:	3710      	adds	r7, #16
 8006722:	46bd      	mov	sp, r7
 8006724:	bd80      	pop	{r7, pc}
 8006726:	bf00      	nop
 8006728:	20000f80 	.word	0x20000f80
 800672c:	20000f58 	.word	0x20000f58
 8006730:	20000f18 	.word	0x20000f18
 8006734:	20000f60 	.word	0x20000f60
 8006738:	20000a88 	.word	0x20000a88
 800673c:	20000a84 	.word	0x20000a84
 8006740:	20000f6c 	.word	0x20000f6c
 8006744:	20000f68 	.word	0x20000f68
 8006748:	e000ed04 	.word	0xe000ed04

0800674c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800674c:	b480      	push	{r7}
 800674e:	b083      	sub	sp, #12
 8006750:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006752:	4b05      	ldr	r3, [pc, #20]	; (8006768 <xTaskGetTickCount+0x1c>)
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006758:	687b      	ldr	r3, [r7, #4]
}
 800675a:	4618      	mov	r0, r3
 800675c:	370c      	adds	r7, #12
 800675e:	46bd      	mov	sp, r7
 8006760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006764:	4770      	bx	lr
 8006766:	bf00      	nop
 8006768:	20000f5c 	.word	0x20000f5c

0800676c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800676c:	b580      	push	{r7, lr}
 800676e:	b086      	sub	sp, #24
 8006770:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006772:	2300      	movs	r3, #0
 8006774:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006776:	4b4f      	ldr	r3, [pc, #316]	; (80068b4 <xTaskIncrementTick+0x148>)
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	2b00      	cmp	r3, #0
 800677c:	f040 808f 	bne.w	800689e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006780:	4b4d      	ldr	r3, [pc, #308]	; (80068b8 <xTaskIncrementTick+0x14c>)
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	3301      	adds	r3, #1
 8006786:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006788:	4a4b      	ldr	r2, [pc, #300]	; (80068b8 <xTaskIncrementTick+0x14c>)
 800678a:	693b      	ldr	r3, [r7, #16]
 800678c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800678e:	693b      	ldr	r3, [r7, #16]
 8006790:	2b00      	cmp	r3, #0
 8006792:	d120      	bne.n	80067d6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8006794:	4b49      	ldr	r3, [pc, #292]	; (80068bc <xTaskIncrementTick+0x150>)
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	2b00      	cmp	r3, #0
 800679c:	d00a      	beq.n	80067b4 <xTaskIncrementTick+0x48>
	__asm volatile
 800679e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067a2:	f383 8811 	msr	BASEPRI, r3
 80067a6:	f3bf 8f6f 	isb	sy
 80067aa:	f3bf 8f4f 	dsb	sy
 80067ae:	603b      	str	r3, [r7, #0]
}
 80067b0:	bf00      	nop
 80067b2:	e7fe      	b.n	80067b2 <xTaskIncrementTick+0x46>
 80067b4:	4b41      	ldr	r3, [pc, #260]	; (80068bc <xTaskIncrementTick+0x150>)
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	60fb      	str	r3, [r7, #12]
 80067ba:	4b41      	ldr	r3, [pc, #260]	; (80068c0 <xTaskIncrementTick+0x154>)
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	4a3f      	ldr	r2, [pc, #252]	; (80068bc <xTaskIncrementTick+0x150>)
 80067c0:	6013      	str	r3, [r2, #0]
 80067c2:	4a3f      	ldr	r2, [pc, #252]	; (80068c0 <xTaskIncrementTick+0x154>)
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	6013      	str	r3, [r2, #0]
 80067c8:	4b3e      	ldr	r3, [pc, #248]	; (80068c4 <xTaskIncrementTick+0x158>)
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	3301      	adds	r3, #1
 80067ce:	4a3d      	ldr	r2, [pc, #244]	; (80068c4 <xTaskIncrementTick+0x158>)
 80067d0:	6013      	str	r3, [r2, #0]
 80067d2:	f000 fb79 	bl	8006ec8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80067d6:	4b3c      	ldr	r3, [pc, #240]	; (80068c8 <xTaskIncrementTick+0x15c>)
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	693a      	ldr	r2, [r7, #16]
 80067dc:	429a      	cmp	r2, r3
 80067de:	d349      	bcc.n	8006874 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80067e0:	4b36      	ldr	r3, [pc, #216]	; (80068bc <xTaskIncrementTick+0x150>)
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d104      	bne.n	80067f4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80067ea:	4b37      	ldr	r3, [pc, #220]	; (80068c8 <xTaskIncrementTick+0x15c>)
 80067ec:	f04f 32ff 	mov.w	r2, #4294967295
 80067f0:	601a      	str	r2, [r3, #0]
					break;
 80067f2:	e03f      	b.n	8006874 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80067f4:	4b31      	ldr	r3, [pc, #196]	; (80068bc <xTaskIncrementTick+0x150>)
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	68db      	ldr	r3, [r3, #12]
 80067fa:	68db      	ldr	r3, [r3, #12]
 80067fc:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80067fe:	68bb      	ldr	r3, [r7, #8]
 8006800:	685b      	ldr	r3, [r3, #4]
 8006802:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006804:	693a      	ldr	r2, [r7, #16]
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	429a      	cmp	r2, r3
 800680a:	d203      	bcs.n	8006814 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800680c:	4a2e      	ldr	r2, [pc, #184]	; (80068c8 <xTaskIncrementTick+0x15c>)
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006812:	e02f      	b.n	8006874 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006814:	68bb      	ldr	r3, [r7, #8]
 8006816:	3304      	adds	r3, #4
 8006818:	4618      	mov	r0, r3
 800681a:	f7fe fef3 	bl	8005604 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800681e:	68bb      	ldr	r3, [r7, #8]
 8006820:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006822:	2b00      	cmp	r3, #0
 8006824:	d004      	beq.n	8006830 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006826:	68bb      	ldr	r3, [r7, #8]
 8006828:	3318      	adds	r3, #24
 800682a:	4618      	mov	r0, r3
 800682c:	f7fe feea 	bl	8005604 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006830:	68bb      	ldr	r3, [r7, #8]
 8006832:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006834:	4b25      	ldr	r3, [pc, #148]	; (80068cc <xTaskIncrementTick+0x160>)
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	429a      	cmp	r2, r3
 800683a:	d903      	bls.n	8006844 <xTaskIncrementTick+0xd8>
 800683c:	68bb      	ldr	r3, [r7, #8]
 800683e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006840:	4a22      	ldr	r2, [pc, #136]	; (80068cc <xTaskIncrementTick+0x160>)
 8006842:	6013      	str	r3, [r2, #0]
 8006844:	68bb      	ldr	r3, [r7, #8]
 8006846:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006848:	4613      	mov	r3, r2
 800684a:	009b      	lsls	r3, r3, #2
 800684c:	4413      	add	r3, r2
 800684e:	009b      	lsls	r3, r3, #2
 8006850:	4a1f      	ldr	r2, [pc, #124]	; (80068d0 <xTaskIncrementTick+0x164>)
 8006852:	441a      	add	r2, r3
 8006854:	68bb      	ldr	r3, [r7, #8]
 8006856:	3304      	adds	r3, #4
 8006858:	4619      	mov	r1, r3
 800685a:	4610      	mov	r0, r2
 800685c:	f7fe fe75 	bl	800554a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006860:	68bb      	ldr	r3, [r7, #8]
 8006862:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006864:	4b1b      	ldr	r3, [pc, #108]	; (80068d4 <xTaskIncrementTick+0x168>)
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800686a:	429a      	cmp	r2, r3
 800686c:	d3b8      	bcc.n	80067e0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800686e:	2301      	movs	r3, #1
 8006870:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006872:	e7b5      	b.n	80067e0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006874:	4b17      	ldr	r3, [pc, #92]	; (80068d4 <xTaskIncrementTick+0x168>)
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800687a:	4915      	ldr	r1, [pc, #84]	; (80068d0 <xTaskIncrementTick+0x164>)
 800687c:	4613      	mov	r3, r2
 800687e:	009b      	lsls	r3, r3, #2
 8006880:	4413      	add	r3, r2
 8006882:	009b      	lsls	r3, r3, #2
 8006884:	440b      	add	r3, r1
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	2b01      	cmp	r3, #1
 800688a:	d901      	bls.n	8006890 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800688c:	2301      	movs	r3, #1
 800688e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006890:	4b11      	ldr	r3, [pc, #68]	; (80068d8 <xTaskIncrementTick+0x16c>)
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	2b00      	cmp	r3, #0
 8006896:	d007      	beq.n	80068a8 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8006898:	2301      	movs	r3, #1
 800689a:	617b      	str	r3, [r7, #20]
 800689c:	e004      	b.n	80068a8 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800689e:	4b0f      	ldr	r3, [pc, #60]	; (80068dc <xTaskIncrementTick+0x170>)
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	3301      	adds	r3, #1
 80068a4:	4a0d      	ldr	r2, [pc, #52]	; (80068dc <xTaskIncrementTick+0x170>)
 80068a6:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80068a8:	697b      	ldr	r3, [r7, #20]
}
 80068aa:	4618      	mov	r0, r3
 80068ac:	3718      	adds	r7, #24
 80068ae:	46bd      	mov	sp, r7
 80068b0:	bd80      	pop	{r7, pc}
 80068b2:	bf00      	nop
 80068b4:	20000f80 	.word	0x20000f80
 80068b8:	20000f5c 	.word	0x20000f5c
 80068bc:	20000f10 	.word	0x20000f10
 80068c0:	20000f14 	.word	0x20000f14
 80068c4:	20000f70 	.word	0x20000f70
 80068c8:	20000f78 	.word	0x20000f78
 80068cc:	20000f60 	.word	0x20000f60
 80068d0:	20000a88 	.word	0x20000a88
 80068d4:	20000a84 	.word	0x20000a84
 80068d8:	20000f6c 	.word	0x20000f6c
 80068dc:	20000f68 	.word	0x20000f68

080068e0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80068e0:	b480      	push	{r7}
 80068e2:	b085      	sub	sp, #20
 80068e4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80068e6:	4b2a      	ldr	r3, [pc, #168]	; (8006990 <vTaskSwitchContext+0xb0>)
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d003      	beq.n	80068f6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80068ee:	4b29      	ldr	r3, [pc, #164]	; (8006994 <vTaskSwitchContext+0xb4>)
 80068f0:	2201      	movs	r2, #1
 80068f2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80068f4:	e046      	b.n	8006984 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 80068f6:	4b27      	ldr	r3, [pc, #156]	; (8006994 <vTaskSwitchContext+0xb4>)
 80068f8:	2200      	movs	r2, #0
 80068fa:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80068fc:	4b26      	ldr	r3, [pc, #152]	; (8006998 <vTaskSwitchContext+0xb8>)
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	60fb      	str	r3, [r7, #12]
 8006902:	e010      	b.n	8006926 <vTaskSwitchContext+0x46>
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	2b00      	cmp	r3, #0
 8006908:	d10a      	bne.n	8006920 <vTaskSwitchContext+0x40>
	__asm volatile
 800690a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800690e:	f383 8811 	msr	BASEPRI, r3
 8006912:	f3bf 8f6f 	isb	sy
 8006916:	f3bf 8f4f 	dsb	sy
 800691a:	607b      	str	r3, [r7, #4]
}
 800691c:	bf00      	nop
 800691e:	e7fe      	b.n	800691e <vTaskSwitchContext+0x3e>
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	3b01      	subs	r3, #1
 8006924:	60fb      	str	r3, [r7, #12]
 8006926:	491d      	ldr	r1, [pc, #116]	; (800699c <vTaskSwitchContext+0xbc>)
 8006928:	68fa      	ldr	r2, [r7, #12]
 800692a:	4613      	mov	r3, r2
 800692c:	009b      	lsls	r3, r3, #2
 800692e:	4413      	add	r3, r2
 8006930:	009b      	lsls	r3, r3, #2
 8006932:	440b      	add	r3, r1
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	2b00      	cmp	r3, #0
 8006938:	d0e4      	beq.n	8006904 <vTaskSwitchContext+0x24>
 800693a:	68fa      	ldr	r2, [r7, #12]
 800693c:	4613      	mov	r3, r2
 800693e:	009b      	lsls	r3, r3, #2
 8006940:	4413      	add	r3, r2
 8006942:	009b      	lsls	r3, r3, #2
 8006944:	4a15      	ldr	r2, [pc, #84]	; (800699c <vTaskSwitchContext+0xbc>)
 8006946:	4413      	add	r3, r2
 8006948:	60bb      	str	r3, [r7, #8]
 800694a:	68bb      	ldr	r3, [r7, #8]
 800694c:	685b      	ldr	r3, [r3, #4]
 800694e:	685a      	ldr	r2, [r3, #4]
 8006950:	68bb      	ldr	r3, [r7, #8]
 8006952:	605a      	str	r2, [r3, #4]
 8006954:	68bb      	ldr	r3, [r7, #8]
 8006956:	685a      	ldr	r2, [r3, #4]
 8006958:	68bb      	ldr	r3, [r7, #8]
 800695a:	3308      	adds	r3, #8
 800695c:	429a      	cmp	r2, r3
 800695e:	d104      	bne.n	800696a <vTaskSwitchContext+0x8a>
 8006960:	68bb      	ldr	r3, [r7, #8]
 8006962:	685b      	ldr	r3, [r3, #4]
 8006964:	685a      	ldr	r2, [r3, #4]
 8006966:	68bb      	ldr	r3, [r7, #8]
 8006968:	605a      	str	r2, [r3, #4]
 800696a:	68bb      	ldr	r3, [r7, #8]
 800696c:	685b      	ldr	r3, [r3, #4]
 800696e:	68db      	ldr	r3, [r3, #12]
 8006970:	4a0b      	ldr	r2, [pc, #44]	; (80069a0 <vTaskSwitchContext+0xc0>)
 8006972:	6013      	str	r3, [r2, #0]
 8006974:	4a08      	ldr	r2, [pc, #32]	; (8006998 <vTaskSwitchContext+0xb8>)
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800697a:	4b09      	ldr	r3, [pc, #36]	; (80069a0 <vTaskSwitchContext+0xc0>)
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	3354      	adds	r3, #84	; 0x54
 8006980:	4a08      	ldr	r2, [pc, #32]	; (80069a4 <vTaskSwitchContext+0xc4>)
 8006982:	6013      	str	r3, [r2, #0]
}
 8006984:	bf00      	nop
 8006986:	3714      	adds	r7, #20
 8006988:	46bd      	mov	sp, r7
 800698a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800698e:	4770      	bx	lr
 8006990:	20000f80 	.word	0x20000f80
 8006994:	20000f6c 	.word	0x20000f6c
 8006998:	20000f60 	.word	0x20000f60
 800699c:	20000a88 	.word	0x20000a88
 80069a0:	20000a84 	.word	0x20000a84
 80069a4:	200001b4 	.word	0x200001b4

080069a8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80069a8:	b580      	push	{r7, lr}
 80069aa:	b084      	sub	sp, #16
 80069ac:	af00      	add	r7, sp, #0
 80069ae:	6078      	str	r0, [r7, #4]
 80069b0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d10a      	bne.n	80069ce <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80069b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069bc:	f383 8811 	msr	BASEPRI, r3
 80069c0:	f3bf 8f6f 	isb	sy
 80069c4:	f3bf 8f4f 	dsb	sy
 80069c8:	60fb      	str	r3, [r7, #12]
}
 80069ca:	bf00      	nop
 80069cc:	e7fe      	b.n	80069cc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80069ce:	4b07      	ldr	r3, [pc, #28]	; (80069ec <vTaskPlaceOnEventList+0x44>)
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	3318      	adds	r3, #24
 80069d4:	4619      	mov	r1, r3
 80069d6:	6878      	ldr	r0, [r7, #4]
 80069d8:	f7fe fddb 	bl	8005592 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80069dc:	2101      	movs	r1, #1
 80069de:	6838      	ldr	r0, [r7, #0]
 80069e0:	f000 fb36 	bl	8007050 <prvAddCurrentTaskToDelayedList>
}
 80069e4:	bf00      	nop
 80069e6:	3710      	adds	r7, #16
 80069e8:	46bd      	mov	sp, r7
 80069ea:	bd80      	pop	{r7, pc}
 80069ec:	20000a84 	.word	0x20000a84

080069f0 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 80069f0:	b580      	push	{r7, lr}
 80069f2:	b086      	sub	sp, #24
 80069f4:	af00      	add	r7, sp, #0
 80069f6:	60f8      	str	r0, [r7, #12]
 80069f8:	60b9      	str	r1, [r7, #8]
 80069fa:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d10a      	bne.n	8006a18 <vTaskPlaceOnUnorderedEventList+0x28>
	__asm volatile
 8006a02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a06:	f383 8811 	msr	BASEPRI, r3
 8006a0a:	f3bf 8f6f 	isb	sy
 8006a0e:	f3bf 8f4f 	dsb	sy
 8006a12:	617b      	str	r3, [r7, #20]
}
 8006a14:	bf00      	nop
 8006a16:	e7fe      	b.n	8006a16 <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 8006a18:	4b11      	ldr	r3, [pc, #68]	; (8006a60 <vTaskPlaceOnUnorderedEventList+0x70>)
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d10a      	bne.n	8006a36 <vTaskPlaceOnUnorderedEventList+0x46>
	__asm volatile
 8006a20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a24:	f383 8811 	msr	BASEPRI, r3
 8006a28:	f3bf 8f6f 	isb	sy
 8006a2c:	f3bf 8f4f 	dsb	sy
 8006a30:	613b      	str	r3, [r7, #16]
}
 8006a32:	bf00      	nop
 8006a34:	e7fe      	b.n	8006a34 <vTaskPlaceOnUnorderedEventList+0x44>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8006a36:	4b0b      	ldr	r3, [pc, #44]	; (8006a64 <vTaskPlaceOnUnorderedEventList+0x74>)
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	68ba      	ldr	r2, [r7, #8]
 8006a3c:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8006a40:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006a42:	4b08      	ldr	r3, [pc, #32]	; (8006a64 <vTaskPlaceOnUnorderedEventList+0x74>)
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	3318      	adds	r3, #24
 8006a48:	4619      	mov	r1, r3
 8006a4a:	68f8      	ldr	r0, [r7, #12]
 8006a4c:	f7fe fd7d 	bl	800554a <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006a50:	2101      	movs	r1, #1
 8006a52:	6878      	ldr	r0, [r7, #4]
 8006a54:	f000 fafc 	bl	8007050 <prvAddCurrentTaskToDelayedList>
}
 8006a58:	bf00      	nop
 8006a5a:	3718      	adds	r7, #24
 8006a5c:	46bd      	mov	sp, r7
 8006a5e:	bd80      	pop	{r7, pc}
 8006a60:	20000f80 	.word	0x20000f80
 8006a64:	20000a84 	.word	0x20000a84

08006a68 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006a68:	b580      	push	{r7, lr}
 8006a6a:	b086      	sub	sp, #24
 8006a6c:	af00      	add	r7, sp, #0
 8006a6e:	60f8      	str	r0, [r7, #12]
 8006a70:	60b9      	str	r1, [r7, #8]
 8006a72:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d10a      	bne.n	8006a90 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8006a7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a7e:	f383 8811 	msr	BASEPRI, r3
 8006a82:	f3bf 8f6f 	isb	sy
 8006a86:	f3bf 8f4f 	dsb	sy
 8006a8a:	617b      	str	r3, [r7, #20]
}
 8006a8c:	bf00      	nop
 8006a8e:	e7fe      	b.n	8006a8e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006a90:	4b0a      	ldr	r3, [pc, #40]	; (8006abc <vTaskPlaceOnEventListRestricted+0x54>)
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	3318      	adds	r3, #24
 8006a96:	4619      	mov	r1, r3
 8006a98:	68f8      	ldr	r0, [r7, #12]
 8006a9a:	f7fe fd56 	bl	800554a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d002      	beq.n	8006aaa <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8006aa4:	f04f 33ff 	mov.w	r3, #4294967295
 8006aa8:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006aaa:	6879      	ldr	r1, [r7, #4]
 8006aac:	68b8      	ldr	r0, [r7, #8]
 8006aae:	f000 facf 	bl	8007050 <prvAddCurrentTaskToDelayedList>
	}
 8006ab2:	bf00      	nop
 8006ab4:	3718      	adds	r7, #24
 8006ab6:	46bd      	mov	sp, r7
 8006ab8:	bd80      	pop	{r7, pc}
 8006aba:	bf00      	nop
 8006abc:	20000a84 	.word	0x20000a84

08006ac0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006ac0:	b580      	push	{r7, lr}
 8006ac2:	b086      	sub	sp, #24
 8006ac4:	af00      	add	r7, sp, #0
 8006ac6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	68db      	ldr	r3, [r3, #12]
 8006acc:	68db      	ldr	r3, [r3, #12]
 8006ace:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006ad0:	693b      	ldr	r3, [r7, #16]
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d10a      	bne.n	8006aec <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8006ad6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ada:	f383 8811 	msr	BASEPRI, r3
 8006ade:	f3bf 8f6f 	isb	sy
 8006ae2:	f3bf 8f4f 	dsb	sy
 8006ae6:	60fb      	str	r3, [r7, #12]
}
 8006ae8:	bf00      	nop
 8006aea:	e7fe      	b.n	8006aea <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006aec:	693b      	ldr	r3, [r7, #16]
 8006aee:	3318      	adds	r3, #24
 8006af0:	4618      	mov	r0, r3
 8006af2:	f7fe fd87 	bl	8005604 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006af6:	4b1e      	ldr	r3, [pc, #120]	; (8006b70 <xTaskRemoveFromEventList+0xb0>)
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d11d      	bne.n	8006b3a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006afe:	693b      	ldr	r3, [r7, #16]
 8006b00:	3304      	adds	r3, #4
 8006b02:	4618      	mov	r0, r3
 8006b04:	f7fe fd7e 	bl	8005604 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006b08:	693b      	ldr	r3, [r7, #16]
 8006b0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b0c:	4b19      	ldr	r3, [pc, #100]	; (8006b74 <xTaskRemoveFromEventList+0xb4>)
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	429a      	cmp	r2, r3
 8006b12:	d903      	bls.n	8006b1c <xTaskRemoveFromEventList+0x5c>
 8006b14:	693b      	ldr	r3, [r7, #16]
 8006b16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b18:	4a16      	ldr	r2, [pc, #88]	; (8006b74 <xTaskRemoveFromEventList+0xb4>)
 8006b1a:	6013      	str	r3, [r2, #0]
 8006b1c:	693b      	ldr	r3, [r7, #16]
 8006b1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b20:	4613      	mov	r3, r2
 8006b22:	009b      	lsls	r3, r3, #2
 8006b24:	4413      	add	r3, r2
 8006b26:	009b      	lsls	r3, r3, #2
 8006b28:	4a13      	ldr	r2, [pc, #76]	; (8006b78 <xTaskRemoveFromEventList+0xb8>)
 8006b2a:	441a      	add	r2, r3
 8006b2c:	693b      	ldr	r3, [r7, #16]
 8006b2e:	3304      	adds	r3, #4
 8006b30:	4619      	mov	r1, r3
 8006b32:	4610      	mov	r0, r2
 8006b34:	f7fe fd09 	bl	800554a <vListInsertEnd>
 8006b38:	e005      	b.n	8006b46 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006b3a:	693b      	ldr	r3, [r7, #16]
 8006b3c:	3318      	adds	r3, #24
 8006b3e:	4619      	mov	r1, r3
 8006b40:	480e      	ldr	r0, [pc, #56]	; (8006b7c <xTaskRemoveFromEventList+0xbc>)
 8006b42:	f7fe fd02 	bl	800554a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006b46:	693b      	ldr	r3, [r7, #16]
 8006b48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b4a:	4b0d      	ldr	r3, [pc, #52]	; (8006b80 <xTaskRemoveFromEventList+0xc0>)
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b50:	429a      	cmp	r2, r3
 8006b52:	d905      	bls.n	8006b60 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006b54:	2301      	movs	r3, #1
 8006b56:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006b58:	4b0a      	ldr	r3, [pc, #40]	; (8006b84 <xTaskRemoveFromEventList+0xc4>)
 8006b5a:	2201      	movs	r2, #1
 8006b5c:	601a      	str	r2, [r3, #0]
 8006b5e:	e001      	b.n	8006b64 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8006b60:	2300      	movs	r3, #0
 8006b62:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006b64:	697b      	ldr	r3, [r7, #20]
}
 8006b66:	4618      	mov	r0, r3
 8006b68:	3718      	adds	r7, #24
 8006b6a:	46bd      	mov	sp, r7
 8006b6c:	bd80      	pop	{r7, pc}
 8006b6e:	bf00      	nop
 8006b70:	20000f80 	.word	0x20000f80
 8006b74:	20000f60 	.word	0x20000f60
 8006b78:	20000a88 	.word	0x20000a88
 8006b7c:	20000f18 	.word	0x20000f18
 8006b80:	20000a84 	.word	0x20000a84
 8006b84:	20000f6c 	.word	0x20000f6c

08006b88 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 8006b88:	b580      	push	{r7, lr}
 8006b8a:	b086      	sub	sp, #24
 8006b8c:	af00      	add	r7, sp, #0
 8006b8e:	6078      	str	r0, [r7, #4]
 8006b90:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 8006b92:	4b29      	ldr	r3, [pc, #164]	; (8006c38 <vTaskRemoveFromUnorderedEventList+0xb0>)
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d10a      	bne.n	8006bb0 <vTaskRemoveFromUnorderedEventList+0x28>
	__asm volatile
 8006b9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b9e:	f383 8811 	msr	BASEPRI, r3
 8006ba2:	f3bf 8f6f 	isb	sy
 8006ba6:	f3bf 8f4f 	dsb	sy
 8006baa:	613b      	str	r3, [r7, #16]
}
 8006bac:	bf00      	nop
 8006bae:	e7fe      	b.n	8006bae <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8006bb0:	683b      	ldr	r3, [r7, #0]
 8006bb2:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	68db      	ldr	r3, [r3, #12]
 8006bbe:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 8006bc0:	697b      	ldr	r3, [r7, #20]
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d10a      	bne.n	8006bdc <vTaskRemoveFromUnorderedEventList+0x54>
	__asm volatile
 8006bc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bca:	f383 8811 	msr	BASEPRI, r3
 8006bce:	f3bf 8f6f 	isb	sy
 8006bd2:	f3bf 8f4f 	dsb	sy
 8006bd6:	60fb      	str	r3, [r7, #12]
}
 8006bd8:	bf00      	nop
 8006bda:	e7fe      	b.n	8006bda <vTaskRemoveFromUnorderedEventList+0x52>
	( void ) uxListRemove( pxEventListItem );
 8006bdc:	6878      	ldr	r0, [r7, #4]
 8006bde:	f7fe fd11 	bl	8005604 <uxListRemove>
	#endif

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006be2:	697b      	ldr	r3, [r7, #20]
 8006be4:	3304      	adds	r3, #4
 8006be6:	4618      	mov	r0, r3
 8006be8:	f7fe fd0c 	bl	8005604 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 8006bec:	697b      	ldr	r3, [r7, #20]
 8006bee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006bf0:	4b12      	ldr	r3, [pc, #72]	; (8006c3c <vTaskRemoveFromUnorderedEventList+0xb4>)
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	429a      	cmp	r2, r3
 8006bf6:	d903      	bls.n	8006c00 <vTaskRemoveFromUnorderedEventList+0x78>
 8006bf8:	697b      	ldr	r3, [r7, #20]
 8006bfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bfc:	4a0f      	ldr	r2, [pc, #60]	; (8006c3c <vTaskRemoveFromUnorderedEventList+0xb4>)
 8006bfe:	6013      	str	r3, [r2, #0]
 8006c00:	697b      	ldr	r3, [r7, #20]
 8006c02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c04:	4613      	mov	r3, r2
 8006c06:	009b      	lsls	r3, r3, #2
 8006c08:	4413      	add	r3, r2
 8006c0a:	009b      	lsls	r3, r3, #2
 8006c0c:	4a0c      	ldr	r2, [pc, #48]	; (8006c40 <vTaskRemoveFromUnorderedEventList+0xb8>)
 8006c0e:	441a      	add	r2, r3
 8006c10:	697b      	ldr	r3, [r7, #20]
 8006c12:	3304      	adds	r3, #4
 8006c14:	4619      	mov	r1, r3
 8006c16:	4610      	mov	r0, r2
 8006c18:	f7fe fc97 	bl	800554a <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006c1c:	697b      	ldr	r3, [r7, #20]
 8006c1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c20:	4b08      	ldr	r3, [pc, #32]	; (8006c44 <vTaskRemoveFromUnorderedEventList+0xbc>)
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c26:	429a      	cmp	r2, r3
 8006c28:	d902      	bls.n	8006c30 <vTaskRemoveFromUnorderedEventList+0xa8>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 8006c2a:	4b07      	ldr	r3, [pc, #28]	; (8006c48 <vTaskRemoveFromUnorderedEventList+0xc0>)
 8006c2c:	2201      	movs	r2, #1
 8006c2e:	601a      	str	r2, [r3, #0]
	}
}
 8006c30:	bf00      	nop
 8006c32:	3718      	adds	r7, #24
 8006c34:	46bd      	mov	sp, r7
 8006c36:	bd80      	pop	{r7, pc}
 8006c38:	20000f80 	.word	0x20000f80
 8006c3c:	20000f60 	.word	0x20000f60
 8006c40:	20000a88 	.word	0x20000a88
 8006c44:	20000a84 	.word	0x20000a84
 8006c48:	20000f6c 	.word	0x20000f6c

08006c4c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006c4c:	b480      	push	{r7}
 8006c4e:	b083      	sub	sp, #12
 8006c50:	af00      	add	r7, sp, #0
 8006c52:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006c54:	4b06      	ldr	r3, [pc, #24]	; (8006c70 <vTaskInternalSetTimeOutState+0x24>)
 8006c56:	681a      	ldr	r2, [r3, #0]
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006c5c:	4b05      	ldr	r3, [pc, #20]	; (8006c74 <vTaskInternalSetTimeOutState+0x28>)
 8006c5e:	681a      	ldr	r2, [r3, #0]
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	605a      	str	r2, [r3, #4]
}
 8006c64:	bf00      	nop
 8006c66:	370c      	adds	r7, #12
 8006c68:	46bd      	mov	sp, r7
 8006c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c6e:	4770      	bx	lr
 8006c70:	20000f70 	.word	0x20000f70
 8006c74:	20000f5c 	.word	0x20000f5c

08006c78 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006c78:	b580      	push	{r7, lr}
 8006c7a:	b088      	sub	sp, #32
 8006c7c:	af00      	add	r7, sp, #0
 8006c7e:	6078      	str	r0, [r7, #4]
 8006c80:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d10a      	bne.n	8006c9e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8006c88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c8c:	f383 8811 	msr	BASEPRI, r3
 8006c90:	f3bf 8f6f 	isb	sy
 8006c94:	f3bf 8f4f 	dsb	sy
 8006c98:	613b      	str	r3, [r7, #16]
}
 8006c9a:	bf00      	nop
 8006c9c:	e7fe      	b.n	8006c9c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006c9e:	683b      	ldr	r3, [r7, #0]
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d10a      	bne.n	8006cba <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8006ca4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ca8:	f383 8811 	msr	BASEPRI, r3
 8006cac:	f3bf 8f6f 	isb	sy
 8006cb0:	f3bf 8f4f 	dsb	sy
 8006cb4:	60fb      	str	r3, [r7, #12]
}
 8006cb6:	bf00      	nop
 8006cb8:	e7fe      	b.n	8006cb8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8006cba:	f000 febb 	bl	8007a34 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006cbe:	4b1d      	ldr	r3, [pc, #116]	; (8006d34 <xTaskCheckForTimeOut+0xbc>)
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	685b      	ldr	r3, [r3, #4]
 8006cc8:	69ba      	ldr	r2, [r7, #24]
 8006cca:	1ad3      	subs	r3, r2, r3
 8006ccc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006cce:	683b      	ldr	r3, [r7, #0]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cd6:	d102      	bne.n	8006cde <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006cd8:	2300      	movs	r3, #0
 8006cda:	61fb      	str	r3, [r7, #28]
 8006cdc:	e023      	b.n	8006d26 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681a      	ldr	r2, [r3, #0]
 8006ce2:	4b15      	ldr	r3, [pc, #84]	; (8006d38 <xTaskCheckForTimeOut+0xc0>)
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	429a      	cmp	r2, r3
 8006ce8:	d007      	beq.n	8006cfa <xTaskCheckForTimeOut+0x82>
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	685b      	ldr	r3, [r3, #4]
 8006cee:	69ba      	ldr	r2, [r7, #24]
 8006cf0:	429a      	cmp	r2, r3
 8006cf2:	d302      	bcc.n	8006cfa <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006cf4:	2301      	movs	r3, #1
 8006cf6:	61fb      	str	r3, [r7, #28]
 8006cf8:	e015      	b.n	8006d26 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006cfa:	683b      	ldr	r3, [r7, #0]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	697a      	ldr	r2, [r7, #20]
 8006d00:	429a      	cmp	r2, r3
 8006d02:	d20b      	bcs.n	8006d1c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006d04:	683b      	ldr	r3, [r7, #0]
 8006d06:	681a      	ldr	r2, [r3, #0]
 8006d08:	697b      	ldr	r3, [r7, #20]
 8006d0a:	1ad2      	subs	r2, r2, r3
 8006d0c:	683b      	ldr	r3, [r7, #0]
 8006d0e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006d10:	6878      	ldr	r0, [r7, #4]
 8006d12:	f7ff ff9b 	bl	8006c4c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006d16:	2300      	movs	r3, #0
 8006d18:	61fb      	str	r3, [r7, #28]
 8006d1a:	e004      	b.n	8006d26 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8006d1c:	683b      	ldr	r3, [r7, #0]
 8006d1e:	2200      	movs	r2, #0
 8006d20:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006d22:	2301      	movs	r3, #1
 8006d24:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006d26:	f000 feb5 	bl	8007a94 <vPortExitCritical>

	return xReturn;
 8006d2a:	69fb      	ldr	r3, [r7, #28]
}
 8006d2c:	4618      	mov	r0, r3
 8006d2e:	3720      	adds	r7, #32
 8006d30:	46bd      	mov	sp, r7
 8006d32:	bd80      	pop	{r7, pc}
 8006d34:	20000f5c 	.word	0x20000f5c
 8006d38:	20000f70 	.word	0x20000f70

08006d3c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006d3c:	b480      	push	{r7}
 8006d3e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006d40:	4b03      	ldr	r3, [pc, #12]	; (8006d50 <vTaskMissedYield+0x14>)
 8006d42:	2201      	movs	r2, #1
 8006d44:	601a      	str	r2, [r3, #0]
}
 8006d46:	bf00      	nop
 8006d48:	46bd      	mov	sp, r7
 8006d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d4e:	4770      	bx	lr
 8006d50:	20000f6c 	.word	0x20000f6c

08006d54 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006d54:	b580      	push	{r7, lr}
 8006d56:	b082      	sub	sp, #8
 8006d58:	af00      	add	r7, sp, #0
 8006d5a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006d5c:	f000 f852 	bl	8006e04 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006d60:	4b06      	ldr	r3, [pc, #24]	; (8006d7c <prvIdleTask+0x28>)
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	2b01      	cmp	r3, #1
 8006d66:	d9f9      	bls.n	8006d5c <prvIdleTask+0x8>
			{
				taskYIELD();
 8006d68:	4b05      	ldr	r3, [pc, #20]	; (8006d80 <prvIdleTask+0x2c>)
 8006d6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d6e:	601a      	str	r2, [r3, #0]
 8006d70:	f3bf 8f4f 	dsb	sy
 8006d74:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006d78:	e7f0      	b.n	8006d5c <prvIdleTask+0x8>
 8006d7a:	bf00      	nop
 8006d7c:	20000a88 	.word	0x20000a88
 8006d80:	e000ed04 	.word	0xe000ed04

08006d84 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006d84:	b580      	push	{r7, lr}
 8006d86:	b082      	sub	sp, #8
 8006d88:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006d8a:	2300      	movs	r3, #0
 8006d8c:	607b      	str	r3, [r7, #4]
 8006d8e:	e00c      	b.n	8006daa <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006d90:	687a      	ldr	r2, [r7, #4]
 8006d92:	4613      	mov	r3, r2
 8006d94:	009b      	lsls	r3, r3, #2
 8006d96:	4413      	add	r3, r2
 8006d98:	009b      	lsls	r3, r3, #2
 8006d9a:	4a12      	ldr	r2, [pc, #72]	; (8006de4 <prvInitialiseTaskLists+0x60>)
 8006d9c:	4413      	add	r3, r2
 8006d9e:	4618      	mov	r0, r3
 8006da0:	f7fe fba6 	bl	80054f0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	3301      	adds	r3, #1
 8006da8:	607b      	str	r3, [r7, #4]
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	2b37      	cmp	r3, #55	; 0x37
 8006dae:	d9ef      	bls.n	8006d90 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006db0:	480d      	ldr	r0, [pc, #52]	; (8006de8 <prvInitialiseTaskLists+0x64>)
 8006db2:	f7fe fb9d 	bl	80054f0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006db6:	480d      	ldr	r0, [pc, #52]	; (8006dec <prvInitialiseTaskLists+0x68>)
 8006db8:	f7fe fb9a 	bl	80054f0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006dbc:	480c      	ldr	r0, [pc, #48]	; (8006df0 <prvInitialiseTaskLists+0x6c>)
 8006dbe:	f7fe fb97 	bl	80054f0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006dc2:	480c      	ldr	r0, [pc, #48]	; (8006df4 <prvInitialiseTaskLists+0x70>)
 8006dc4:	f7fe fb94 	bl	80054f0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006dc8:	480b      	ldr	r0, [pc, #44]	; (8006df8 <prvInitialiseTaskLists+0x74>)
 8006dca:	f7fe fb91 	bl	80054f0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006dce:	4b0b      	ldr	r3, [pc, #44]	; (8006dfc <prvInitialiseTaskLists+0x78>)
 8006dd0:	4a05      	ldr	r2, [pc, #20]	; (8006de8 <prvInitialiseTaskLists+0x64>)
 8006dd2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006dd4:	4b0a      	ldr	r3, [pc, #40]	; (8006e00 <prvInitialiseTaskLists+0x7c>)
 8006dd6:	4a05      	ldr	r2, [pc, #20]	; (8006dec <prvInitialiseTaskLists+0x68>)
 8006dd8:	601a      	str	r2, [r3, #0]
}
 8006dda:	bf00      	nop
 8006ddc:	3708      	adds	r7, #8
 8006dde:	46bd      	mov	sp, r7
 8006de0:	bd80      	pop	{r7, pc}
 8006de2:	bf00      	nop
 8006de4:	20000a88 	.word	0x20000a88
 8006de8:	20000ee8 	.word	0x20000ee8
 8006dec:	20000efc 	.word	0x20000efc
 8006df0:	20000f18 	.word	0x20000f18
 8006df4:	20000f2c 	.word	0x20000f2c
 8006df8:	20000f44 	.word	0x20000f44
 8006dfc:	20000f10 	.word	0x20000f10
 8006e00:	20000f14 	.word	0x20000f14

08006e04 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006e04:	b580      	push	{r7, lr}
 8006e06:	b082      	sub	sp, #8
 8006e08:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006e0a:	e019      	b.n	8006e40 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006e0c:	f000 fe12 	bl	8007a34 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006e10:	4b10      	ldr	r3, [pc, #64]	; (8006e54 <prvCheckTasksWaitingTermination+0x50>)
 8006e12:	68db      	ldr	r3, [r3, #12]
 8006e14:	68db      	ldr	r3, [r3, #12]
 8006e16:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	3304      	adds	r3, #4
 8006e1c:	4618      	mov	r0, r3
 8006e1e:	f7fe fbf1 	bl	8005604 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006e22:	4b0d      	ldr	r3, [pc, #52]	; (8006e58 <prvCheckTasksWaitingTermination+0x54>)
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	3b01      	subs	r3, #1
 8006e28:	4a0b      	ldr	r2, [pc, #44]	; (8006e58 <prvCheckTasksWaitingTermination+0x54>)
 8006e2a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006e2c:	4b0b      	ldr	r3, [pc, #44]	; (8006e5c <prvCheckTasksWaitingTermination+0x58>)
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	3b01      	subs	r3, #1
 8006e32:	4a0a      	ldr	r2, [pc, #40]	; (8006e5c <prvCheckTasksWaitingTermination+0x58>)
 8006e34:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006e36:	f000 fe2d 	bl	8007a94 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006e3a:	6878      	ldr	r0, [r7, #4]
 8006e3c:	f000 f810 	bl	8006e60 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006e40:	4b06      	ldr	r3, [pc, #24]	; (8006e5c <prvCheckTasksWaitingTermination+0x58>)
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d1e1      	bne.n	8006e0c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006e48:	bf00      	nop
 8006e4a:	bf00      	nop
 8006e4c:	3708      	adds	r7, #8
 8006e4e:	46bd      	mov	sp, r7
 8006e50:	bd80      	pop	{r7, pc}
 8006e52:	bf00      	nop
 8006e54:	20000f2c 	.word	0x20000f2c
 8006e58:	20000f58 	.word	0x20000f58
 8006e5c:	20000f40 	.word	0x20000f40

08006e60 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006e60:	b580      	push	{r7, lr}
 8006e62:	b084      	sub	sp, #16
 8006e64:	af00      	add	r7, sp, #0
 8006e66:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	3354      	adds	r3, #84	; 0x54
 8006e6c:	4618      	mov	r0, r3
 8006e6e:	f001 f9c7 	bl	8008200 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d108      	bne.n	8006e8e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e80:	4618      	mov	r0, r3
 8006e82:	f000 ffc5 	bl	8007e10 <vPortFree>
				vPortFree( pxTCB );
 8006e86:	6878      	ldr	r0, [r7, #4]
 8006e88:	f000 ffc2 	bl	8007e10 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006e8c:	e018      	b.n	8006ec0 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8006e94:	2b01      	cmp	r3, #1
 8006e96:	d103      	bne.n	8006ea0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8006e98:	6878      	ldr	r0, [r7, #4]
 8006e9a:	f000 ffb9 	bl	8007e10 <vPortFree>
	}
 8006e9e:	e00f      	b.n	8006ec0 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8006ea6:	2b02      	cmp	r3, #2
 8006ea8:	d00a      	beq.n	8006ec0 <prvDeleteTCB+0x60>
	__asm volatile
 8006eaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006eae:	f383 8811 	msr	BASEPRI, r3
 8006eb2:	f3bf 8f6f 	isb	sy
 8006eb6:	f3bf 8f4f 	dsb	sy
 8006eba:	60fb      	str	r3, [r7, #12]
}
 8006ebc:	bf00      	nop
 8006ebe:	e7fe      	b.n	8006ebe <prvDeleteTCB+0x5e>
	}
 8006ec0:	bf00      	nop
 8006ec2:	3710      	adds	r7, #16
 8006ec4:	46bd      	mov	sp, r7
 8006ec6:	bd80      	pop	{r7, pc}

08006ec8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006ec8:	b480      	push	{r7}
 8006eca:	b083      	sub	sp, #12
 8006ecc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006ece:	4b0c      	ldr	r3, [pc, #48]	; (8006f00 <prvResetNextTaskUnblockTime+0x38>)
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d104      	bne.n	8006ee2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006ed8:	4b0a      	ldr	r3, [pc, #40]	; (8006f04 <prvResetNextTaskUnblockTime+0x3c>)
 8006eda:	f04f 32ff 	mov.w	r2, #4294967295
 8006ede:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006ee0:	e008      	b.n	8006ef4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006ee2:	4b07      	ldr	r3, [pc, #28]	; (8006f00 <prvResetNextTaskUnblockTime+0x38>)
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	68db      	ldr	r3, [r3, #12]
 8006ee8:	68db      	ldr	r3, [r3, #12]
 8006eea:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	685b      	ldr	r3, [r3, #4]
 8006ef0:	4a04      	ldr	r2, [pc, #16]	; (8006f04 <prvResetNextTaskUnblockTime+0x3c>)
 8006ef2:	6013      	str	r3, [r2, #0]
}
 8006ef4:	bf00      	nop
 8006ef6:	370c      	adds	r7, #12
 8006ef8:	46bd      	mov	sp, r7
 8006efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006efe:	4770      	bx	lr
 8006f00:	20000f10 	.word	0x20000f10
 8006f04:	20000f78 	.word	0x20000f78

08006f08 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006f08:	b480      	push	{r7}
 8006f0a:	b083      	sub	sp, #12
 8006f0c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006f0e:	4b0b      	ldr	r3, [pc, #44]	; (8006f3c <xTaskGetSchedulerState+0x34>)
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d102      	bne.n	8006f1c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006f16:	2301      	movs	r3, #1
 8006f18:	607b      	str	r3, [r7, #4]
 8006f1a:	e008      	b.n	8006f2e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006f1c:	4b08      	ldr	r3, [pc, #32]	; (8006f40 <xTaskGetSchedulerState+0x38>)
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d102      	bne.n	8006f2a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006f24:	2302      	movs	r3, #2
 8006f26:	607b      	str	r3, [r7, #4]
 8006f28:	e001      	b.n	8006f2e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006f2a:	2300      	movs	r3, #0
 8006f2c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006f2e:	687b      	ldr	r3, [r7, #4]
	}
 8006f30:	4618      	mov	r0, r3
 8006f32:	370c      	adds	r7, #12
 8006f34:	46bd      	mov	sp, r7
 8006f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f3a:	4770      	bx	lr
 8006f3c:	20000f64 	.word	0x20000f64
 8006f40:	20000f80 	.word	0x20000f80

08006f44 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006f44:	b580      	push	{r7, lr}
 8006f46:	b086      	sub	sp, #24
 8006f48:	af00      	add	r7, sp, #0
 8006f4a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006f50:	2300      	movs	r3, #0
 8006f52:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d056      	beq.n	8007008 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006f5a:	4b2e      	ldr	r3, [pc, #184]	; (8007014 <xTaskPriorityDisinherit+0xd0>)
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	693a      	ldr	r2, [r7, #16]
 8006f60:	429a      	cmp	r2, r3
 8006f62:	d00a      	beq.n	8006f7a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8006f64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f68:	f383 8811 	msr	BASEPRI, r3
 8006f6c:	f3bf 8f6f 	isb	sy
 8006f70:	f3bf 8f4f 	dsb	sy
 8006f74:	60fb      	str	r3, [r7, #12]
}
 8006f76:	bf00      	nop
 8006f78:	e7fe      	b.n	8006f78 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006f7a:	693b      	ldr	r3, [r7, #16]
 8006f7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d10a      	bne.n	8006f98 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8006f82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f86:	f383 8811 	msr	BASEPRI, r3
 8006f8a:	f3bf 8f6f 	isb	sy
 8006f8e:	f3bf 8f4f 	dsb	sy
 8006f92:	60bb      	str	r3, [r7, #8]
}
 8006f94:	bf00      	nop
 8006f96:	e7fe      	b.n	8006f96 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8006f98:	693b      	ldr	r3, [r7, #16]
 8006f9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f9c:	1e5a      	subs	r2, r3, #1
 8006f9e:	693b      	ldr	r3, [r7, #16]
 8006fa0:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006fa2:	693b      	ldr	r3, [r7, #16]
 8006fa4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006fa6:	693b      	ldr	r3, [r7, #16]
 8006fa8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006faa:	429a      	cmp	r2, r3
 8006fac:	d02c      	beq.n	8007008 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006fae:	693b      	ldr	r3, [r7, #16]
 8006fb0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d128      	bne.n	8007008 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006fb6:	693b      	ldr	r3, [r7, #16]
 8006fb8:	3304      	adds	r3, #4
 8006fba:	4618      	mov	r0, r3
 8006fbc:	f7fe fb22 	bl	8005604 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006fc0:	693b      	ldr	r3, [r7, #16]
 8006fc2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006fc4:	693b      	ldr	r3, [r7, #16]
 8006fc6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006fc8:	693b      	ldr	r3, [r7, #16]
 8006fca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fcc:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006fd0:	693b      	ldr	r3, [r7, #16]
 8006fd2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006fd4:	693b      	ldr	r3, [r7, #16]
 8006fd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006fd8:	4b0f      	ldr	r3, [pc, #60]	; (8007018 <xTaskPriorityDisinherit+0xd4>)
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	429a      	cmp	r2, r3
 8006fde:	d903      	bls.n	8006fe8 <xTaskPriorityDisinherit+0xa4>
 8006fe0:	693b      	ldr	r3, [r7, #16]
 8006fe2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fe4:	4a0c      	ldr	r2, [pc, #48]	; (8007018 <xTaskPriorityDisinherit+0xd4>)
 8006fe6:	6013      	str	r3, [r2, #0]
 8006fe8:	693b      	ldr	r3, [r7, #16]
 8006fea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006fec:	4613      	mov	r3, r2
 8006fee:	009b      	lsls	r3, r3, #2
 8006ff0:	4413      	add	r3, r2
 8006ff2:	009b      	lsls	r3, r3, #2
 8006ff4:	4a09      	ldr	r2, [pc, #36]	; (800701c <xTaskPriorityDisinherit+0xd8>)
 8006ff6:	441a      	add	r2, r3
 8006ff8:	693b      	ldr	r3, [r7, #16]
 8006ffa:	3304      	adds	r3, #4
 8006ffc:	4619      	mov	r1, r3
 8006ffe:	4610      	mov	r0, r2
 8007000:	f7fe faa3 	bl	800554a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007004:	2301      	movs	r3, #1
 8007006:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007008:	697b      	ldr	r3, [r7, #20]
	}
 800700a:	4618      	mov	r0, r3
 800700c:	3718      	adds	r7, #24
 800700e:	46bd      	mov	sp, r7
 8007010:	bd80      	pop	{r7, pc}
 8007012:	bf00      	nop
 8007014:	20000a84 	.word	0x20000a84
 8007018:	20000f60 	.word	0x20000f60
 800701c:	20000a88 	.word	0x20000a88

08007020 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 8007020:	b480      	push	{r7}
 8007022:	b083      	sub	sp, #12
 8007024:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 8007026:	4b09      	ldr	r3, [pc, #36]	; (800704c <uxTaskResetEventItemValue+0x2c>)
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	699b      	ldr	r3, [r3, #24]
 800702c:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800702e:	4b07      	ldr	r3, [pc, #28]	; (800704c <uxTaskResetEventItemValue+0x2c>)
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007034:	4b05      	ldr	r3, [pc, #20]	; (800704c <uxTaskResetEventItemValue+0x2c>)
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 800703c:	619a      	str	r2, [r3, #24]

	return uxReturn;
 800703e:	687b      	ldr	r3, [r7, #4]
}
 8007040:	4618      	mov	r0, r3
 8007042:	370c      	adds	r7, #12
 8007044:	46bd      	mov	sp, r7
 8007046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800704a:	4770      	bx	lr
 800704c:	20000a84 	.word	0x20000a84

08007050 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007050:	b580      	push	{r7, lr}
 8007052:	b084      	sub	sp, #16
 8007054:	af00      	add	r7, sp, #0
 8007056:	6078      	str	r0, [r7, #4]
 8007058:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800705a:	4b21      	ldr	r3, [pc, #132]	; (80070e0 <prvAddCurrentTaskToDelayedList+0x90>)
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007060:	4b20      	ldr	r3, [pc, #128]	; (80070e4 <prvAddCurrentTaskToDelayedList+0x94>)
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	3304      	adds	r3, #4
 8007066:	4618      	mov	r0, r3
 8007068:	f7fe facc 	bl	8005604 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007072:	d10a      	bne.n	800708a <prvAddCurrentTaskToDelayedList+0x3a>
 8007074:	683b      	ldr	r3, [r7, #0]
 8007076:	2b00      	cmp	r3, #0
 8007078:	d007      	beq.n	800708a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800707a:	4b1a      	ldr	r3, [pc, #104]	; (80070e4 <prvAddCurrentTaskToDelayedList+0x94>)
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	3304      	adds	r3, #4
 8007080:	4619      	mov	r1, r3
 8007082:	4819      	ldr	r0, [pc, #100]	; (80070e8 <prvAddCurrentTaskToDelayedList+0x98>)
 8007084:	f7fe fa61 	bl	800554a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007088:	e026      	b.n	80070d8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800708a:	68fa      	ldr	r2, [r7, #12]
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	4413      	add	r3, r2
 8007090:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007092:	4b14      	ldr	r3, [pc, #80]	; (80070e4 <prvAddCurrentTaskToDelayedList+0x94>)
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	68ba      	ldr	r2, [r7, #8]
 8007098:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800709a:	68ba      	ldr	r2, [r7, #8]
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	429a      	cmp	r2, r3
 80070a0:	d209      	bcs.n	80070b6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80070a2:	4b12      	ldr	r3, [pc, #72]	; (80070ec <prvAddCurrentTaskToDelayedList+0x9c>)
 80070a4:	681a      	ldr	r2, [r3, #0]
 80070a6:	4b0f      	ldr	r3, [pc, #60]	; (80070e4 <prvAddCurrentTaskToDelayedList+0x94>)
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	3304      	adds	r3, #4
 80070ac:	4619      	mov	r1, r3
 80070ae:	4610      	mov	r0, r2
 80070b0:	f7fe fa6f 	bl	8005592 <vListInsert>
}
 80070b4:	e010      	b.n	80070d8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80070b6:	4b0e      	ldr	r3, [pc, #56]	; (80070f0 <prvAddCurrentTaskToDelayedList+0xa0>)
 80070b8:	681a      	ldr	r2, [r3, #0]
 80070ba:	4b0a      	ldr	r3, [pc, #40]	; (80070e4 <prvAddCurrentTaskToDelayedList+0x94>)
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	3304      	adds	r3, #4
 80070c0:	4619      	mov	r1, r3
 80070c2:	4610      	mov	r0, r2
 80070c4:	f7fe fa65 	bl	8005592 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80070c8:	4b0a      	ldr	r3, [pc, #40]	; (80070f4 <prvAddCurrentTaskToDelayedList+0xa4>)
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	68ba      	ldr	r2, [r7, #8]
 80070ce:	429a      	cmp	r2, r3
 80070d0:	d202      	bcs.n	80070d8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80070d2:	4a08      	ldr	r2, [pc, #32]	; (80070f4 <prvAddCurrentTaskToDelayedList+0xa4>)
 80070d4:	68bb      	ldr	r3, [r7, #8]
 80070d6:	6013      	str	r3, [r2, #0]
}
 80070d8:	bf00      	nop
 80070da:	3710      	adds	r7, #16
 80070dc:	46bd      	mov	sp, r7
 80070de:	bd80      	pop	{r7, pc}
 80070e0:	20000f5c 	.word	0x20000f5c
 80070e4:	20000a84 	.word	0x20000a84
 80070e8:	20000f44 	.word	0x20000f44
 80070ec:	20000f14 	.word	0x20000f14
 80070f0:	20000f10 	.word	0x20000f10
 80070f4:	20000f78 	.word	0x20000f78

080070f8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80070f8:	b580      	push	{r7, lr}
 80070fa:	b08a      	sub	sp, #40	; 0x28
 80070fc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80070fe:	2300      	movs	r3, #0
 8007100:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8007102:	f000 fb07 	bl	8007714 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8007106:	4b1c      	ldr	r3, [pc, #112]	; (8007178 <xTimerCreateTimerTask+0x80>)
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	2b00      	cmp	r3, #0
 800710c:	d021      	beq.n	8007152 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800710e:	2300      	movs	r3, #0
 8007110:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8007112:	2300      	movs	r3, #0
 8007114:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8007116:	1d3a      	adds	r2, r7, #4
 8007118:	f107 0108 	add.w	r1, r7, #8
 800711c:	f107 030c 	add.w	r3, r7, #12
 8007120:	4618      	mov	r0, r3
 8007122:	f7fd ffdd 	bl	80050e0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8007126:	6879      	ldr	r1, [r7, #4]
 8007128:	68bb      	ldr	r3, [r7, #8]
 800712a:	68fa      	ldr	r2, [r7, #12]
 800712c:	9202      	str	r2, [sp, #8]
 800712e:	9301      	str	r3, [sp, #4]
 8007130:	2302      	movs	r3, #2
 8007132:	9300      	str	r3, [sp, #0]
 8007134:	2300      	movs	r3, #0
 8007136:	460a      	mov	r2, r1
 8007138:	4910      	ldr	r1, [pc, #64]	; (800717c <xTimerCreateTimerTask+0x84>)
 800713a:	4811      	ldr	r0, [pc, #68]	; (8007180 <xTimerCreateTimerTask+0x88>)
 800713c:	f7fe fffe 	bl	800613c <xTaskCreateStatic>
 8007140:	4603      	mov	r3, r0
 8007142:	4a10      	ldr	r2, [pc, #64]	; (8007184 <xTimerCreateTimerTask+0x8c>)
 8007144:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8007146:	4b0f      	ldr	r3, [pc, #60]	; (8007184 <xTimerCreateTimerTask+0x8c>)
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	2b00      	cmp	r3, #0
 800714c:	d001      	beq.n	8007152 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800714e:	2301      	movs	r3, #1
 8007150:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8007152:	697b      	ldr	r3, [r7, #20]
 8007154:	2b00      	cmp	r3, #0
 8007156:	d10a      	bne.n	800716e <xTimerCreateTimerTask+0x76>
	__asm volatile
 8007158:	f04f 0350 	mov.w	r3, #80	; 0x50
 800715c:	f383 8811 	msr	BASEPRI, r3
 8007160:	f3bf 8f6f 	isb	sy
 8007164:	f3bf 8f4f 	dsb	sy
 8007168:	613b      	str	r3, [r7, #16]
}
 800716a:	bf00      	nop
 800716c:	e7fe      	b.n	800716c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800716e:	697b      	ldr	r3, [r7, #20]
}
 8007170:	4618      	mov	r0, r3
 8007172:	3718      	adds	r7, #24
 8007174:	46bd      	mov	sp, r7
 8007176:	bd80      	pop	{r7, pc}
 8007178:	20000fb4 	.word	0x20000fb4
 800717c:	08008464 	.word	0x08008464
 8007180:	080072bd 	.word	0x080072bd
 8007184:	20000fb8 	.word	0x20000fb8

08007188 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007188:	b580      	push	{r7, lr}
 800718a:	b08a      	sub	sp, #40	; 0x28
 800718c:	af00      	add	r7, sp, #0
 800718e:	60f8      	str	r0, [r7, #12]
 8007190:	60b9      	str	r1, [r7, #8]
 8007192:	607a      	str	r2, [r7, #4]
 8007194:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8007196:	2300      	movs	r3, #0
 8007198:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	2b00      	cmp	r3, #0
 800719e:	d10a      	bne.n	80071b6 <xTimerGenericCommand+0x2e>
	__asm volatile
 80071a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071a4:	f383 8811 	msr	BASEPRI, r3
 80071a8:	f3bf 8f6f 	isb	sy
 80071ac:	f3bf 8f4f 	dsb	sy
 80071b0:	623b      	str	r3, [r7, #32]
}
 80071b2:	bf00      	nop
 80071b4:	e7fe      	b.n	80071b4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80071b6:	4b1a      	ldr	r3, [pc, #104]	; (8007220 <xTimerGenericCommand+0x98>)
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d02a      	beq.n	8007214 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80071be:	68bb      	ldr	r3, [r7, #8]
 80071c0:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80071ca:	68bb      	ldr	r3, [r7, #8]
 80071cc:	2b05      	cmp	r3, #5
 80071ce:	dc18      	bgt.n	8007202 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80071d0:	f7ff fe9a 	bl	8006f08 <xTaskGetSchedulerState>
 80071d4:	4603      	mov	r3, r0
 80071d6:	2b02      	cmp	r3, #2
 80071d8:	d109      	bne.n	80071ee <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80071da:	4b11      	ldr	r3, [pc, #68]	; (8007220 <xTimerGenericCommand+0x98>)
 80071dc:	6818      	ldr	r0, [r3, #0]
 80071de:	f107 0110 	add.w	r1, r7, #16
 80071e2:	2300      	movs	r3, #0
 80071e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80071e6:	f7fe fbc1 	bl	800596c <xQueueGenericSend>
 80071ea:	6278      	str	r0, [r7, #36]	; 0x24
 80071ec:	e012      	b.n	8007214 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80071ee:	4b0c      	ldr	r3, [pc, #48]	; (8007220 <xTimerGenericCommand+0x98>)
 80071f0:	6818      	ldr	r0, [r3, #0]
 80071f2:	f107 0110 	add.w	r1, r7, #16
 80071f6:	2300      	movs	r3, #0
 80071f8:	2200      	movs	r2, #0
 80071fa:	f7fe fbb7 	bl	800596c <xQueueGenericSend>
 80071fe:	6278      	str	r0, [r7, #36]	; 0x24
 8007200:	e008      	b.n	8007214 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007202:	4b07      	ldr	r3, [pc, #28]	; (8007220 <xTimerGenericCommand+0x98>)
 8007204:	6818      	ldr	r0, [r3, #0]
 8007206:	f107 0110 	add.w	r1, r7, #16
 800720a:	2300      	movs	r3, #0
 800720c:	683a      	ldr	r2, [r7, #0]
 800720e:	f7fe fcab 	bl	8005b68 <xQueueGenericSendFromISR>
 8007212:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007216:	4618      	mov	r0, r3
 8007218:	3728      	adds	r7, #40	; 0x28
 800721a:	46bd      	mov	sp, r7
 800721c:	bd80      	pop	{r7, pc}
 800721e:	bf00      	nop
 8007220:	20000fb4 	.word	0x20000fb4

08007224 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007224:	b580      	push	{r7, lr}
 8007226:	b088      	sub	sp, #32
 8007228:	af02      	add	r7, sp, #8
 800722a:	6078      	str	r0, [r7, #4]
 800722c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800722e:	4b22      	ldr	r3, [pc, #136]	; (80072b8 <prvProcessExpiredTimer+0x94>)
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	68db      	ldr	r3, [r3, #12]
 8007234:	68db      	ldr	r3, [r3, #12]
 8007236:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007238:	697b      	ldr	r3, [r7, #20]
 800723a:	3304      	adds	r3, #4
 800723c:	4618      	mov	r0, r3
 800723e:	f7fe f9e1 	bl	8005604 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007242:	697b      	ldr	r3, [r7, #20]
 8007244:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007248:	f003 0304 	and.w	r3, r3, #4
 800724c:	2b00      	cmp	r3, #0
 800724e:	d022      	beq.n	8007296 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007250:	697b      	ldr	r3, [r7, #20]
 8007252:	699a      	ldr	r2, [r3, #24]
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	18d1      	adds	r1, r2, r3
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	683a      	ldr	r2, [r7, #0]
 800725c:	6978      	ldr	r0, [r7, #20]
 800725e:	f000 f8d1 	bl	8007404 <prvInsertTimerInActiveList>
 8007262:	4603      	mov	r3, r0
 8007264:	2b00      	cmp	r3, #0
 8007266:	d01f      	beq.n	80072a8 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007268:	2300      	movs	r3, #0
 800726a:	9300      	str	r3, [sp, #0]
 800726c:	2300      	movs	r3, #0
 800726e:	687a      	ldr	r2, [r7, #4]
 8007270:	2100      	movs	r1, #0
 8007272:	6978      	ldr	r0, [r7, #20]
 8007274:	f7ff ff88 	bl	8007188 <xTimerGenericCommand>
 8007278:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800727a:	693b      	ldr	r3, [r7, #16]
 800727c:	2b00      	cmp	r3, #0
 800727e:	d113      	bne.n	80072a8 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8007280:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007284:	f383 8811 	msr	BASEPRI, r3
 8007288:	f3bf 8f6f 	isb	sy
 800728c:	f3bf 8f4f 	dsb	sy
 8007290:	60fb      	str	r3, [r7, #12]
}
 8007292:	bf00      	nop
 8007294:	e7fe      	b.n	8007294 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007296:	697b      	ldr	r3, [r7, #20]
 8007298:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800729c:	f023 0301 	bic.w	r3, r3, #1
 80072a0:	b2da      	uxtb	r2, r3
 80072a2:	697b      	ldr	r3, [r7, #20]
 80072a4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80072a8:	697b      	ldr	r3, [r7, #20]
 80072aa:	6a1b      	ldr	r3, [r3, #32]
 80072ac:	6978      	ldr	r0, [r7, #20]
 80072ae:	4798      	blx	r3
}
 80072b0:	bf00      	nop
 80072b2:	3718      	adds	r7, #24
 80072b4:	46bd      	mov	sp, r7
 80072b6:	bd80      	pop	{r7, pc}
 80072b8:	20000fac 	.word	0x20000fac

080072bc <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80072bc:	b580      	push	{r7, lr}
 80072be:	b084      	sub	sp, #16
 80072c0:	af00      	add	r7, sp, #0
 80072c2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80072c4:	f107 0308 	add.w	r3, r7, #8
 80072c8:	4618      	mov	r0, r3
 80072ca:	f000 f857 	bl	800737c <prvGetNextExpireTime>
 80072ce:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80072d0:	68bb      	ldr	r3, [r7, #8]
 80072d2:	4619      	mov	r1, r3
 80072d4:	68f8      	ldr	r0, [r7, #12]
 80072d6:	f000 f803 	bl	80072e0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80072da:	f000 f8d5 	bl	8007488 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80072de:	e7f1      	b.n	80072c4 <prvTimerTask+0x8>

080072e0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80072e0:	b580      	push	{r7, lr}
 80072e2:	b084      	sub	sp, #16
 80072e4:	af00      	add	r7, sp, #0
 80072e6:	6078      	str	r0, [r7, #4]
 80072e8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80072ea:	f7ff f983 	bl	80065f4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80072ee:	f107 0308 	add.w	r3, r7, #8
 80072f2:	4618      	mov	r0, r3
 80072f4:	f000 f866 	bl	80073c4 <prvSampleTimeNow>
 80072f8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80072fa:	68bb      	ldr	r3, [r7, #8]
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d130      	bne.n	8007362 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007300:	683b      	ldr	r3, [r7, #0]
 8007302:	2b00      	cmp	r3, #0
 8007304:	d10a      	bne.n	800731c <prvProcessTimerOrBlockTask+0x3c>
 8007306:	687a      	ldr	r2, [r7, #4]
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	429a      	cmp	r2, r3
 800730c:	d806      	bhi.n	800731c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800730e:	f7ff f97f 	bl	8006610 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007312:	68f9      	ldr	r1, [r7, #12]
 8007314:	6878      	ldr	r0, [r7, #4]
 8007316:	f7ff ff85 	bl	8007224 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800731a:	e024      	b.n	8007366 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800731c:	683b      	ldr	r3, [r7, #0]
 800731e:	2b00      	cmp	r3, #0
 8007320:	d008      	beq.n	8007334 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007322:	4b13      	ldr	r3, [pc, #76]	; (8007370 <prvProcessTimerOrBlockTask+0x90>)
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	2b00      	cmp	r3, #0
 800732a:	d101      	bne.n	8007330 <prvProcessTimerOrBlockTask+0x50>
 800732c:	2301      	movs	r3, #1
 800732e:	e000      	b.n	8007332 <prvProcessTimerOrBlockTask+0x52>
 8007330:	2300      	movs	r3, #0
 8007332:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007334:	4b0f      	ldr	r3, [pc, #60]	; (8007374 <prvProcessTimerOrBlockTask+0x94>)
 8007336:	6818      	ldr	r0, [r3, #0]
 8007338:	687a      	ldr	r2, [r7, #4]
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	1ad3      	subs	r3, r2, r3
 800733e:	683a      	ldr	r2, [r7, #0]
 8007340:	4619      	mov	r1, r3
 8007342:	f7fe fec7 	bl	80060d4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8007346:	f7ff f963 	bl	8006610 <xTaskResumeAll>
 800734a:	4603      	mov	r3, r0
 800734c:	2b00      	cmp	r3, #0
 800734e:	d10a      	bne.n	8007366 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007350:	4b09      	ldr	r3, [pc, #36]	; (8007378 <prvProcessTimerOrBlockTask+0x98>)
 8007352:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007356:	601a      	str	r2, [r3, #0]
 8007358:	f3bf 8f4f 	dsb	sy
 800735c:	f3bf 8f6f 	isb	sy
}
 8007360:	e001      	b.n	8007366 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8007362:	f7ff f955 	bl	8006610 <xTaskResumeAll>
}
 8007366:	bf00      	nop
 8007368:	3710      	adds	r7, #16
 800736a:	46bd      	mov	sp, r7
 800736c:	bd80      	pop	{r7, pc}
 800736e:	bf00      	nop
 8007370:	20000fb0 	.word	0x20000fb0
 8007374:	20000fb4 	.word	0x20000fb4
 8007378:	e000ed04 	.word	0xe000ed04

0800737c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800737c:	b480      	push	{r7}
 800737e:	b085      	sub	sp, #20
 8007380:	af00      	add	r7, sp, #0
 8007382:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007384:	4b0e      	ldr	r3, [pc, #56]	; (80073c0 <prvGetNextExpireTime+0x44>)
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	2b00      	cmp	r3, #0
 800738c:	d101      	bne.n	8007392 <prvGetNextExpireTime+0x16>
 800738e:	2201      	movs	r2, #1
 8007390:	e000      	b.n	8007394 <prvGetNextExpireTime+0x18>
 8007392:	2200      	movs	r2, #0
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	2b00      	cmp	r3, #0
 800739e:	d105      	bne.n	80073ac <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80073a0:	4b07      	ldr	r3, [pc, #28]	; (80073c0 <prvGetNextExpireTime+0x44>)
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	68db      	ldr	r3, [r3, #12]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	60fb      	str	r3, [r7, #12]
 80073aa:	e001      	b.n	80073b0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80073ac:	2300      	movs	r3, #0
 80073ae:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80073b0:	68fb      	ldr	r3, [r7, #12]
}
 80073b2:	4618      	mov	r0, r3
 80073b4:	3714      	adds	r7, #20
 80073b6:	46bd      	mov	sp, r7
 80073b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073bc:	4770      	bx	lr
 80073be:	bf00      	nop
 80073c0:	20000fac 	.word	0x20000fac

080073c4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80073c4:	b580      	push	{r7, lr}
 80073c6:	b084      	sub	sp, #16
 80073c8:	af00      	add	r7, sp, #0
 80073ca:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80073cc:	f7ff f9be 	bl	800674c <xTaskGetTickCount>
 80073d0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80073d2:	4b0b      	ldr	r3, [pc, #44]	; (8007400 <prvSampleTimeNow+0x3c>)
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	68fa      	ldr	r2, [r7, #12]
 80073d8:	429a      	cmp	r2, r3
 80073da:	d205      	bcs.n	80073e8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80073dc:	f000 f936 	bl	800764c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	2201      	movs	r2, #1
 80073e4:	601a      	str	r2, [r3, #0]
 80073e6:	e002      	b.n	80073ee <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	2200      	movs	r2, #0
 80073ec:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80073ee:	4a04      	ldr	r2, [pc, #16]	; (8007400 <prvSampleTimeNow+0x3c>)
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80073f4:	68fb      	ldr	r3, [r7, #12]
}
 80073f6:	4618      	mov	r0, r3
 80073f8:	3710      	adds	r7, #16
 80073fa:	46bd      	mov	sp, r7
 80073fc:	bd80      	pop	{r7, pc}
 80073fe:	bf00      	nop
 8007400:	20000fbc 	.word	0x20000fbc

08007404 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007404:	b580      	push	{r7, lr}
 8007406:	b086      	sub	sp, #24
 8007408:	af00      	add	r7, sp, #0
 800740a:	60f8      	str	r0, [r7, #12]
 800740c:	60b9      	str	r1, [r7, #8]
 800740e:	607a      	str	r2, [r7, #4]
 8007410:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8007412:	2300      	movs	r3, #0
 8007414:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	68ba      	ldr	r2, [r7, #8]
 800741a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	68fa      	ldr	r2, [r7, #12]
 8007420:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8007422:	68ba      	ldr	r2, [r7, #8]
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	429a      	cmp	r2, r3
 8007428:	d812      	bhi.n	8007450 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800742a:	687a      	ldr	r2, [r7, #4]
 800742c:	683b      	ldr	r3, [r7, #0]
 800742e:	1ad2      	subs	r2, r2, r3
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	699b      	ldr	r3, [r3, #24]
 8007434:	429a      	cmp	r2, r3
 8007436:	d302      	bcc.n	800743e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007438:	2301      	movs	r3, #1
 800743a:	617b      	str	r3, [r7, #20]
 800743c:	e01b      	b.n	8007476 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800743e:	4b10      	ldr	r3, [pc, #64]	; (8007480 <prvInsertTimerInActiveList+0x7c>)
 8007440:	681a      	ldr	r2, [r3, #0]
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	3304      	adds	r3, #4
 8007446:	4619      	mov	r1, r3
 8007448:	4610      	mov	r0, r2
 800744a:	f7fe f8a2 	bl	8005592 <vListInsert>
 800744e:	e012      	b.n	8007476 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007450:	687a      	ldr	r2, [r7, #4]
 8007452:	683b      	ldr	r3, [r7, #0]
 8007454:	429a      	cmp	r2, r3
 8007456:	d206      	bcs.n	8007466 <prvInsertTimerInActiveList+0x62>
 8007458:	68ba      	ldr	r2, [r7, #8]
 800745a:	683b      	ldr	r3, [r7, #0]
 800745c:	429a      	cmp	r2, r3
 800745e:	d302      	bcc.n	8007466 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007460:	2301      	movs	r3, #1
 8007462:	617b      	str	r3, [r7, #20]
 8007464:	e007      	b.n	8007476 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007466:	4b07      	ldr	r3, [pc, #28]	; (8007484 <prvInsertTimerInActiveList+0x80>)
 8007468:	681a      	ldr	r2, [r3, #0]
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	3304      	adds	r3, #4
 800746e:	4619      	mov	r1, r3
 8007470:	4610      	mov	r0, r2
 8007472:	f7fe f88e 	bl	8005592 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8007476:	697b      	ldr	r3, [r7, #20]
}
 8007478:	4618      	mov	r0, r3
 800747a:	3718      	adds	r7, #24
 800747c:	46bd      	mov	sp, r7
 800747e:	bd80      	pop	{r7, pc}
 8007480:	20000fb0 	.word	0x20000fb0
 8007484:	20000fac 	.word	0x20000fac

08007488 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007488:	b580      	push	{r7, lr}
 800748a:	b08e      	sub	sp, #56	; 0x38
 800748c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800748e:	e0ca      	b.n	8007626 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	2b00      	cmp	r3, #0
 8007494:	da18      	bge.n	80074c8 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8007496:	1d3b      	adds	r3, r7, #4
 8007498:	3304      	adds	r3, #4
 800749a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800749c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d10a      	bne.n	80074b8 <prvProcessReceivedCommands+0x30>
	__asm volatile
 80074a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074a6:	f383 8811 	msr	BASEPRI, r3
 80074aa:	f3bf 8f6f 	isb	sy
 80074ae:	f3bf 8f4f 	dsb	sy
 80074b2:	61fb      	str	r3, [r7, #28]
}
 80074b4:	bf00      	nop
 80074b6:	e7fe      	b.n	80074b6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80074b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80074be:	6850      	ldr	r0, [r2, #4]
 80074c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80074c2:	6892      	ldr	r2, [r2, #8]
 80074c4:	4611      	mov	r1, r2
 80074c6:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	f2c0 80ab 	blt.w	8007626 <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80074d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074d6:	695b      	ldr	r3, [r3, #20]
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d004      	beq.n	80074e6 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80074dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074de:	3304      	adds	r3, #4
 80074e0:	4618      	mov	r0, r3
 80074e2:	f7fe f88f 	bl	8005604 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80074e6:	463b      	mov	r3, r7
 80074e8:	4618      	mov	r0, r3
 80074ea:	f7ff ff6b 	bl	80073c4 <prvSampleTimeNow>
 80074ee:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	2b09      	cmp	r3, #9
 80074f4:	f200 8096 	bhi.w	8007624 <prvProcessReceivedCommands+0x19c>
 80074f8:	a201      	add	r2, pc, #4	; (adr r2, 8007500 <prvProcessReceivedCommands+0x78>)
 80074fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074fe:	bf00      	nop
 8007500:	08007529 	.word	0x08007529
 8007504:	08007529 	.word	0x08007529
 8007508:	08007529 	.word	0x08007529
 800750c:	0800759d 	.word	0x0800759d
 8007510:	080075b1 	.word	0x080075b1
 8007514:	080075fb 	.word	0x080075fb
 8007518:	08007529 	.word	0x08007529
 800751c:	08007529 	.word	0x08007529
 8007520:	0800759d 	.word	0x0800759d
 8007524:	080075b1 	.word	0x080075b1
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007528:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800752a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800752e:	f043 0301 	orr.w	r3, r3, #1
 8007532:	b2da      	uxtb	r2, r3
 8007534:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007536:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800753a:	68ba      	ldr	r2, [r7, #8]
 800753c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800753e:	699b      	ldr	r3, [r3, #24]
 8007540:	18d1      	adds	r1, r2, r3
 8007542:	68bb      	ldr	r3, [r7, #8]
 8007544:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007546:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007548:	f7ff ff5c 	bl	8007404 <prvInsertTimerInActiveList>
 800754c:	4603      	mov	r3, r0
 800754e:	2b00      	cmp	r3, #0
 8007550:	d069      	beq.n	8007626 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007552:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007554:	6a1b      	ldr	r3, [r3, #32]
 8007556:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007558:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800755a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800755c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007560:	f003 0304 	and.w	r3, r3, #4
 8007564:	2b00      	cmp	r3, #0
 8007566:	d05e      	beq.n	8007626 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007568:	68ba      	ldr	r2, [r7, #8]
 800756a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800756c:	699b      	ldr	r3, [r3, #24]
 800756e:	441a      	add	r2, r3
 8007570:	2300      	movs	r3, #0
 8007572:	9300      	str	r3, [sp, #0]
 8007574:	2300      	movs	r3, #0
 8007576:	2100      	movs	r1, #0
 8007578:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800757a:	f7ff fe05 	bl	8007188 <xTimerGenericCommand>
 800757e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007580:	6a3b      	ldr	r3, [r7, #32]
 8007582:	2b00      	cmp	r3, #0
 8007584:	d14f      	bne.n	8007626 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8007586:	f04f 0350 	mov.w	r3, #80	; 0x50
 800758a:	f383 8811 	msr	BASEPRI, r3
 800758e:	f3bf 8f6f 	isb	sy
 8007592:	f3bf 8f4f 	dsb	sy
 8007596:	61bb      	str	r3, [r7, #24]
}
 8007598:	bf00      	nop
 800759a:	e7fe      	b.n	800759a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800759c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800759e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80075a2:	f023 0301 	bic.w	r3, r3, #1
 80075a6:	b2da      	uxtb	r2, r3
 80075a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075aa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80075ae:	e03a      	b.n	8007626 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80075b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075b2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80075b6:	f043 0301 	orr.w	r3, r3, #1
 80075ba:	b2da      	uxtb	r2, r3
 80075bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075be:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80075c2:	68ba      	ldr	r2, [r7, #8]
 80075c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075c6:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80075c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075ca:	699b      	ldr	r3, [r3, #24]
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d10a      	bne.n	80075e6 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80075d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075d4:	f383 8811 	msr	BASEPRI, r3
 80075d8:	f3bf 8f6f 	isb	sy
 80075dc:	f3bf 8f4f 	dsb	sy
 80075e0:	617b      	str	r3, [r7, #20]
}
 80075e2:	bf00      	nop
 80075e4:	e7fe      	b.n	80075e4 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80075e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075e8:	699a      	ldr	r2, [r3, #24]
 80075ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075ec:	18d1      	adds	r1, r2, r3
 80075ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80075f2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80075f4:	f7ff ff06 	bl	8007404 <prvInsertTimerInActiveList>
					break;
 80075f8:	e015      	b.n	8007626 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80075fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075fc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007600:	f003 0302 	and.w	r3, r3, #2
 8007604:	2b00      	cmp	r3, #0
 8007606:	d103      	bne.n	8007610 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8007608:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800760a:	f000 fc01 	bl	8007e10 <vPortFree>
 800760e:	e00a      	b.n	8007626 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007610:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007612:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007616:	f023 0301 	bic.w	r3, r3, #1
 800761a:	b2da      	uxtb	r2, r3
 800761c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800761e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8007622:	e000      	b.n	8007626 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 8007624:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007626:	4b08      	ldr	r3, [pc, #32]	; (8007648 <prvProcessReceivedCommands+0x1c0>)
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	1d39      	adds	r1, r7, #4
 800762c:	2200      	movs	r2, #0
 800762e:	4618      	mov	r0, r3
 8007630:	f7fe fb36 	bl	8005ca0 <xQueueReceive>
 8007634:	4603      	mov	r3, r0
 8007636:	2b00      	cmp	r3, #0
 8007638:	f47f af2a 	bne.w	8007490 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800763c:	bf00      	nop
 800763e:	bf00      	nop
 8007640:	3730      	adds	r7, #48	; 0x30
 8007642:	46bd      	mov	sp, r7
 8007644:	bd80      	pop	{r7, pc}
 8007646:	bf00      	nop
 8007648:	20000fb4 	.word	0x20000fb4

0800764c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800764c:	b580      	push	{r7, lr}
 800764e:	b088      	sub	sp, #32
 8007650:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007652:	e048      	b.n	80076e6 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007654:	4b2d      	ldr	r3, [pc, #180]	; (800770c <prvSwitchTimerLists+0xc0>)
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	68db      	ldr	r3, [r3, #12]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800765e:	4b2b      	ldr	r3, [pc, #172]	; (800770c <prvSwitchTimerLists+0xc0>)
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	68db      	ldr	r3, [r3, #12]
 8007664:	68db      	ldr	r3, [r3, #12]
 8007666:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	3304      	adds	r3, #4
 800766c:	4618      	mov	r0, r3
 800766e:	f7fd ffc9 	bl	8005604 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	6a1b      	ldr	r3, [r3, #32]
 8007676:	68f8      	ldr	r0, [r7, #12]
 8007678:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007680:	f003 0304 	and.w	r3, r3, #4
 8007684:	2b00      	cmp	r3, #0
 8007686:	d02e      	beq.n	80076e6 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	699b      	ldr	r3, [r3, #24]
 800768c:	693a      	ldr	r2, [r7, #16]
 800768e:	4413      	add	r3, r2
 8007690:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8007692:	68ba      	ldr	r2, [r7, #8]
 8007694:	693b      	ldr	r3, [r7, #16]
 8007696:	429a      	cmp	r2, r3
 8007698:	d90e      	bls.n	80076b8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	68ba      	ldr	r2, [r7, #8]
 800769e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	68fa      	ldr	r2, [r7, #12]
 80076a4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80076a6:	4b19      	ldr	r3, [pc, #100]	; (800770c <prvSwitchTimerLists+0xc0>)
 80076a8:	681a      	ldr	r2, [r3, #0]
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	3304      	adds	r3, #4
 80076ae:	4619      	mov	r1, r3
 80076b0:	4610      	mov	r0, r2
 80076b2:	f7fd ff6e 	bl	8005592 <vListInsert>
 80076b6:	e016      	b.n	80076e6 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80076b8:	2300      	movs	r3, #0
 80076ba:	9300      	str	r3, [sp, #0]
 80076bc:	2300      	movs	r3, #0
 80076be:	693a      	ldr	r2, [r7, #16]
 80076c0:	2100      	movs	r1, #0
 80076c2:	68f8      	ldr	r0, [r7, #12]
 80076c4:	f7ff fd60 	bl	8007188 <xTimerGenericCommand>
 80076c8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d10a      	bne.n	80076e6 <prvSwitchTimerLists+0x9a>
	__asm volatile
 80076d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076d4:	f383 8811 	msr	BASEPRI, r3
 80076d8:	f3bf 8f6f 	isb	sy
 80076dc:	f3bf 8f4f 	dsb	sy
 80076e0:	603b      	str	r3, [r7, #0]
}
 80076e2:	bf00      	nop
 80076e4:	e7fe      	b.n	80076e4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80076e6:	4b09      	ldr	r3, [pc, #36]	; (800770c <prvSwitchTimerLists+0xc0>)
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d1b1      	bne.n	8007654 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80076f0:	4b06      	ldr	r3, [pc, #24]	; (800770c <prvSwitchTimerLists+0xc0>)
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80076f6:	4b06      	ldr	r3, [pc, #24]	; (8007710 <prvSwitchTimerLists+0xc4>)
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	4a04      	ldr	r2, [pc, #16]	; (800770c <prvSwitchTimerLists+0xc0>)
 80076fc:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80076fe:	4a04      	ldr	r2, [pc, #16]	; (8007710 <prvSwitchTimerLists+0xc4>)
 8007700:	697b      	ldr	r3, [r7, #20]
 8007702:	6013      	str	r3, [r2, #0]
}
 8007704:	bf00      	nop
 8007706:	3718      	adds	r7, #24
 8007708:	46bd      	mov	sp, r7
 800770a:	bd80      	pop	{r7, pc}
 800770c:	20000fac 	.word	0x20000fac
 8007710:	20000fb0 	.word	0x20000fb0

08007714 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007714:	b580      	push	{r7, lr}
 8007716:	b082      	sub	sp, #8
 8007718:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800771a:	f000 f98b 	bl	8007a34 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800771e:	4b15      	ldr	r3, [pc, #84]	; (8007774 <prvCheckForValidListAndQueue+0x60>)
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	2b00      	cmp	r3, #0
 8007724:	d120      	bne.n	8007768 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8007726:	4814      	ldr	r0, [pc, #80]	; (8007778 <prvCheckForValidListAndQueue+0x64>)
 8007728:	f7fd fee2 	bl	80054f0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800772c:	4813      	ldr	r0, [pc, #76]	; (800777c <prvCheckForValidListAndQueue+0x68>)
 800772e:	f7fd fedf 	bl	80054f0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007732:	4b13      	ldr	r3, [pc, #76]	; (8007780 <prvCheckForValidListAndQueue+0x6c>)
 8007734:	4a10      	ldr	r2, [pc, #64]	; (8007778 <prvCheckForValidListAndQueue+0x64>)
 8007736:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007738:	4b12      	ldr	r3, [pc, #72]	; (8007784 <prvCheckForValidListAndQueue+0x70>)
 800773a:	4a10      	ldr	r2, [pc, #64]	; (800777c <prvCheckForValidListAndQueue+0x68>)
 800773c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800773e:	2300      	movs	r3, #0
 8007740:	9300      	str	r3, [sp, #0]
 8007742:	4b11      	ldr	r3, [pc, #68]	; (8007788 <prvCheckForValidListAndQueue+0x74>)
 8007744:	4a11      	ldr	r2, [pc, #68]	; (800778c <prvCheckForValidListAndQueue+0x78>)
 8007746:	2110      	movs	r1, #16
 8007748:	200a      	movs	r0, #10
 800774a:	f7fd ffed 	bl	8005728 <xQueueGenericCreateStatic>
 800774e:	4603      	mov	r3, r0
 8007750:	4a08      	ldr	r2, [pc, #32]	; (8007774 <prvCheckForValidListAndQueue+0x60>)
 8007752:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007754:	4b07      	ldr	r3, [pc, #28]	; (8007774 <prvCheckForValidListAndQueue+0x60>)
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	2b00      	cmp	r3, #0
 800775a:	d005      	beq.n	8007768 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800775c:	4b05      	ldr	r3, [pc, #20]	; (8007774 <prvCheckForValidListAndQueue+0x60>)
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	490b      	ldr	r1, [pc, #44]	; (8007790 <prvCheckForValidListAndQueue+0x7c>)
 8007762:	4618      	mov	r0, r3
 8007764:	f7fe fc8c 	bl	8006080 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007768:	f000 f994 	bl	8007a94 <vPortExitCritical>
}
 800776c:	bf00      	nop
 800776e:	46bd      	mov	sp, r7
 8007770:	bd80      	pop	{r7, pc}
 8007772:	bf00      	nop
 8007774:	20000fb4 	.word	0x20000fb4
 8007778:	20000f84 	.word	0x20000f84
 800777c:	20000f98 	.word	0x20000f98
 8007780:	20000fac 	.word	0x20000fac
 8007784:	20000fb0 	.word	0x20000fb0
 8007788:	20001060 	.word	0x20001060
 800778c:	20000fc0 	.word	0x20000fc0
 8007790:	0800846c 	.word	0x0800846c

08007794 <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8007794:	b580      	push	{r7, lr}
 8007796:	b08a      	sub	sp, #40	; 0x28
 8007798:	af00      	add	r7, sp, #0
 800779a:	60f8      	str	r0, [r7, #12]
 800779c:	60b9      	str	r1, [r7, #8]
 800779e:	607a      	str	r2, [r7, #4]
 80077a0:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 80077a2:	f06f 0301 	mvn.w	r3, #1
 80077a6:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 80077ac:	68bb      	ldr	r3, [r7, #8]
 80077ae:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80077b4:	4b06      	ldr	r3, [pc, #24]	; (80077d0 <xTimerPendFunctionCallFromISR+0x3c>)
 80077b6:	6818      	ldr	r0, [r3, #0]
 80077b8:	f107 0114 	add.w	r1, r7, #20
 80077bc:	2300      	movs	r3, #0
 80077be:	683a      	ldr	r2, [r7, #0]
 80077c0:	f7fe f9d2 	bl	8005b68 <xQueueGenericSendFromISR>
 80077c4:	6278      	str	r0, [r7, #36]	; 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 80077c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 80077c8:	4618      	mov	r0, r3
 80077ca:	3728      	adds	r7, #40	; 0x28
 80077cc:	46bd      	mov	sp, r7
 80077ce:	bd80      	pop	{r7, pc}
 80077d0:	20000fb4 	.word	0x20000fb4

080077d4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80077d4:	b480      	push	{r7}
 80077d6:	b085      	sub	sp, #20
 80077d8:	af00      	add	r7, sp, #0
 80077da:	60f8      	str	r0, [r7, #12]
 80077dc:	60b9      	str	r1, [r7, #8]
 80077de:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	3b04      	subs	r3, #4
 80077e4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80077ec:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	3b04      	subs	r3, #4
 80077f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80077f4:	68bb      	ldr	r3, [r7, #8]
 80077f6:	f023 0201 	bic.w	r2, r3, #1
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	3b04      	subs	r3, #4
 8007802:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007804:	4a0c      	ldr	r2, [pc, #48]	; (8007838 <pxPortInitialiseStack+0x64>)
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	3b14      	subs	r3, #20
 800780e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007810:	687a      	ldr	r2, [r7, #4]
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	3b04      	subs	r3, #4
 800781a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	f06f 0202 	mvn.w	r2, #2
 8007822:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	3b20      	subs	r3, #32
 8007828:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800782a:	68fb      	ldr	r3, [r7, #12]
}
 800782c:	4618      	mov	r0, r3
 800782e:	3714      	adds	r7, #20
 8007830:	46bd      	mov	sp, r7
 8007832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007836:	4770      	bx	lr
 8007838:	0800783d 	.word	0x0800783d

0800783c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800783c:	b480      	push	{r7}
 800783e:	b085      	sub	sp, #20
 8007840:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007842:	2300      	movs	r3, #0
 8007844:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007846:	4b12      	ldr	r3, [pc, #72]	; (8007890 <prvTaskExitError+0x54>)
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800784e:	d00a      	beq.n	8007866 <prvTaskExitError+0x2a>
	__asm volatile
 8007850:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007854:	f383 8811 	msr	BASEPRI, r3
 8007858:	f3bf 8f6f 	isb	sy
 800785c:	f3bf 8f4f 	dsb	sy
 8007860:	60fb      	str	r3, [r7, #12]
}
 8007862:	bf00      	nop
 8007864:	e7fe      	b.n	8007864 <prvTaskExitError+0x28>
	__asm volatile
 8007866:	f04f 0350 	mov.w	r3, #80	; 0x50
 800786a:	f383 8811 	msr	BASEPRI, r3
 800786e:	f3bf 8f6f 	isb	sy
 8007872:	f3bf 8f4f 	dsb	sy
 8007876:	60bb      	str	r3, [r7, #8]
}
 8007878:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800787a:	bf00      	nop
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	2b00      	cmp	r3, #0
 8007880:	d0fc      	beq.n	800787c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007882:	bf00      	nop
 8007884:	bf00      	nop
 8007886:	3714      	adds	r7, #20
 8007888:	46bd      	mov	sp, r7
 800788a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800788e:	4770      	bx	lr
 8007890:	20000164 	.word	0x20000164
	...

080078a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80078a0:	4b07      	ldr	r3, [pc, #28]	; (80078c0 <pxCurrentTCBConst2>)
 80078a2:	6819      	ldr	r1, [r3, #0]
 80078a4:	6808      	ldr	r0, [r1, #0]
 80078a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078aa:	f380 8809 	msr	PSP, r0
 80078ae:	f3bf 8f6f 	isb	sy
 80078b2:	f04f 0000 	mov.w	r0, #0
 80078b6:	f380 8811 	msr	BASEPRI, r0
 80078ba:	4770      	bx	lr
 80078bc:	f3af 8000 	nop.w

080078c0 <pxCurrentTCBConst2>:
 80078c0:	20000a84 	.word	0x20000a84
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80078c4:	bf00      	nop
 80078c6:	bf00      	nop

080078c8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80078c8:	4808      	ldr	r0, [pc, #32]	; (80078ec <prvPortStartFirstTask+0x24>)
 80078ca:	6800      	ldr	r0, [r0, #0]
 80078cc:	6800      	ldr	r0, [r0, #0]
 80078ce:	f380 8808 	msr	MSP, r0
 80078d2:	f04f 0000 	mov.w	r0, #0
 80078d6:	f380 8814 	msr	CONTROL, r0
 80078da:	b662      	cpsie	i
 80078dc:	b661      	cpsie	f
 80078de:	f3bf 8f4f 	dsb	sy
 80078e2:	f3bf 8f6f 	isb	sy
 80078e6:	df00      	svc	0
 80078e8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80078ea:	bf00      	nop
 80078ec:	e000ed08 	.word	0xe000ed08

080078f0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80078f0:	b580      	push	{r7, lr}
 80078f2:	b086      	sub	sp, #24
 80078f4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80078f6:	4b46      	ldr	r3, [pc, #280]	; (8007a10 <xPortStartScheduler+0x120>)
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	4a46      	ldr	r2, [pc, #280]	; (8007a14 <xPortStartScheduler+0x124>)
 80078fc:	4293      	cmp	r3, r2
 80078fe:	d10a      	bne.n	8007916 <xPortStartScheduler+0x26>
	__asm volatile
 8007900:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007904:	f383 8811 	msr	BASEPRI, r3
 8007908:	f3bf 8f6f 	isb	sy
 800790c:	f3bf 8f4f 	dsb	sy
 8007910:	613b      	str	r3, [r7, #16]
}
 8007912:	bf00      	nop
 8007914:	e7fe      	b.n	8007914 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007916:	4b3e      	ldr	r3, [pc, #248]	; (8007a10 <xPortStartScheduler+0x120>)
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	4a3f      	ldr	r2, [pc, #252]	; (8007a18 <xPortStartScheduler+0x128>)
 800791c:	4293      	cmp	r3, r2
 800791e:	d10a      	bne.n	8007936 <xPortStartScheduler+0x46>
	__asm volatile
 8007920:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007924:	f383 8811 	msr	BASEPRI, r3
 8007928:	f3bf 8f6f 	isb	sy
 800792c:	f3bf 8f4f 	dsb	sy
 8007930:	60fb      	str	r3, [r7, #12]
}
 8007932:	bf00      	nop
 8007934:	e7fe      	b.n	8007934 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007936:	4b39      	ldr	r3, [pc, #228]	; (8007a1c <xPortStartScheduler+0x12c>)
 8007938:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800793a:	697b      	ldr	r3, [r7, #20]
 800793c:	781b      	ldrb	r3, [r3, #0]
 800793e:	b2db      	uxtb	r3, r3
 8007940:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007942:	697b      	ldr	r3, [r7, #20]
 8007944:	22ff      	movs	r2, #255	; 0xff
 8007946:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007948:	697b      	ldr	r3, [r7, #20]
 800794a:	781b      	ldrb	r3, [r3, #0]
 800794c:	b2db      	uxtb	r3, r3
 800794e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007950:	78fb      	ldrb	r3, [r7, #3]
 8007952:	b2db      	uxtb	r3, r3
 8007954:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007958:	b2da      	uxtb	r2, r3
 800795a:	4b31      	ldr	r3, [pc, #196]	; (8007a20 <xPortStartScheduler+0x130>)
 800795c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800795e:	4b31      	ldr	r3, [pc, #196]	; (8007a24 <xPortStartScheduler+0x134>)
 8007960:	2207      	movs	r2, #7
 8007962:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007964:	e009      	b.n	800797a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8007966:	4b2f      	ldr	r3, [pc, #188]	; (8007a24 <xPortStartScheduler+0x134>)
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	3b01      	subs	r3, #1
 800796c:	4a2d      	ldr	r2, [pc, #180]	; (8007a24 <xPortStartScheduler+0x134>)
 800796e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007970:	78fb      	ldrb	r3, [r7, #3]
 8007972:	b2db      	uxtb	r3, r3
 8007974:	005b      	lsls	r3, r3, #1
 8007976:	b2db      	uxtb	r3, r3
 8007978:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800797a:	78fb      	ldrb	r3, [r7, #3]
 800797c:	b2db      	uxtb	r3, r3
 800797e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007982:	2b80      	cmp	r3, #128	; 0x80
 8007984:	d0ef      	beq.n	8007966 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007986:	4b27      	ldr	r3, [pc, #156]	; (8007a24 <xPortStartScheduler+0x134>)
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	f1c3 0307 	rsb	r3, r3, #7
 800798e:	2b04      	cmp	r3, #4
 8007990:	d00a      	beq.n	80079a8 <xPortStartScheduler+0xb8>
	__asm volatile
 8007992:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007996:	f383 8811 	msr	BASEPRI, r3
 800799a:	f3bf 8f6f 	isb	sy
 800799e:	f3bf 8f4f 	dsb	sy
 80079a2:	60bb      	str	r3, [r7, #8]
}
 80079a4:	bf00      	nop
 80079a6:	e7fe      	b.n	80079a6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80079a8:	4b1e      	ldr	r3, [pc, #120]	; (8007a24 <xPortStartScheduler+0x134>)
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	021b      	lsls	r3, r3, #8
 80079ae:	4a1d      	ldr	r2, [pc, #116]	; (8007a24 <xPortStartScheduler+0x134>)
 80079b0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80079b2:	4b1c      	ldr	r3, [pc, #112]	; (8007a24 <xPortStartScheduler+0x134>)
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80079ba:	4a1a      	ldr	r2, [pc, #104]	; (8007a24 <xPortStartScheduler+0x134>)
 80079bc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	b2da      	uxtb	r2, r3
 80079c2:	697b      	ldr	r3, [r7, #20]
 80079c4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80079c6:	4b18      	ldr	r3, [pc, #96]	; (8007a28 <xPortStartScheduler+0x138>)
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	4a17      	ldr	r2, [pc, #92]	; (8007a28 <xPortStartScheduler+0x138>)
 80079cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80079d0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80079d2:	4b15      	ldr	r3, [pc, #84]	; (8007a28 <xPortStartScheduler+0x138>)
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	4a14      	ldr	r2, [pc, #80]	; (8007a28 <xPortStartScheduler+0x138>)
 80079d8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80079dc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80079de:	f000 f8dd 	bl	8007b9c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80079e2:	4b12      	ldr	r3, [pc, #72]	; (8007a2c <xPortStartScheduler+0x13c>)
 80079e4:	2200      	movs	r2, #0
 80079e6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80079e8:	f000 f8fc 	bl	8007be4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80079ec:	4b10      	ldr	r3, [pc, #64]	; (8007a30 <xPortStartScheduler+0x140>)
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	4a0f      	ldr	r2, [pc, #60]	; (8007a30 <xPortStartScheduler+0x140>)
 80079f2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80079f6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80079f8:	f7ff ff66 	bl	80078c8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80079fc:	f7fe ff70 	bl	80068e0 <vTaskSwitchContext>
	prvTaskExitError();
 8007a00:	f7ff ff1c 	bl	800783c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007a04:	2300      	movs	r3, #0
}
 8007a06:	4618      	mov	r0, r3
 8007a08:	3718      	adds	r7, #24
 8007a0a:	46bd      	mov	sp, r7
 8007a0c:	bd80      	pop	{r7, pc}
 8007a0e:	bf00      	nop
 8007a10:	e000ed00 	.word	0xe000ed00
 8007a14:	410fc271 	.word	0x410fc271
 8007a18:	410fc270 	.word	0x410fc270
 8007a1c:	e000e400 	.word	0xe000e400
 8007a20:	200010b0 	.word	0x200010b0
 8007a24:	200010b4 	.word	0x200010b4
 8007a28:	e000ed20 	.word	0xe000ed20
 8007a2c:	20000164 	.word	0x20000164
 8007a30:	e000ef34 	.word	0xe000ef34

08007a34 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007a34:	b480      	push	{r7}
 8007a36:	b083      	sub	sp, #12
 8007a38:	af00      	add	r7, sp, #0
	__asm volatile
 8007a3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a3e:	f383 8811 	msr	BASEPRI, r3
 8007a42:	f3bf 8f6f 	isb	sy
 8007a46:	f3bf 8f4f 	dsb	sy
 8007a4a:	607b      	str	r3, [r7, #4]
}
 8007a4c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007a4e:	4b0f      	ldr	r3, [pc, #60]	; (8007a8c <vPortEnterCritical+0x58>)
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	3301      	adds	r3, #1
 8007a54:	4a0d      	ldr	r2, [pc, #52]	; (8007a8c <vPortEnterCritical+0x58>)
 8007a56:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007a58:	4b0c      	ldr	r3, [pc, #48]	; (8007a8c <vPortEnterCritical+0x58>)
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	2b01      	cmp	r3, #1
 8007a5e:	d10f      	bne.n	8007a80 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007a60:	4b0b      	ldr	r3, [pc, #44]	; (8007a90 <vPortEnterCritical+0x5c>)
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	b2db      	uxtb	r3, r3
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d00a      	beq.n	8007a80 <vPortEnterCritical+0x4c>
	__asm volatile
 8007a6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a6e:	f383 8811 	msr	BASEPRI, r3
 8007a72:	f3bf 8f6f 	isb	sy
 8007a76:	f3bf 8f4f 	dsb	sy
 8007a7a:	603b      	str	r3, [r7, #0]
}
 8007a7c:	bf00      	nop
 8007a7e:	e7fe      	b.n	8007a7e <vPortEnterCritical+0x4a>
	}
}
 8007a80:	bf00      	nop
 8007a82:	370c      	adds	r7, #12
 8007a84:	46bd      	mov	sp, r7
 8007a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a8a:	4770      	bx	lr
 8007a8c:	20000164 	.word	0x20000164
 8007a90:	e000ed04 	.word	0xe000ed04

08007a94 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007a94:	b480      	push	{r7}
 8007a96:	b083      	sub	sp, #12
 8007a98:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007a9a:	4b12      	ldr	r3, [pc, #72]	; (8007ae4 <vPortExitCritical+0x50>)
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d10a      	bne.n	8007ab8 <vPortExitCritical+0x24>
	__asm volatile
 8007aa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007aa6:	f383 8811 	msr	BASEPRI, r3
 8007aaa:	f3bf 8f6f 	isb	sy
 8007aae:	f3bf 8f4f 	dsb	sy
 8007ab2:	607b      	str	r3, [r7, #4]
}
 8007ab4:	bf00      	nop
 8007ab6:	e7fe      	b.n	8007ab6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007ab8:	4b0a      	ldr	r3, [pc, #40]	; (8007ae4 <vPortExitCritical+0x50>)
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	3b01      	subs	r3, #1
 8007abe:	4a09      	ldr	r2, [pc, #36]	; (8007ae4 <vPortExitCritical+0x50>)
 8007ac0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007ac2:	4b08      	ldr	r3, [pc, #32]	; (8007ae4 <vPortExitCritical+0x50>)
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d105      	bne.n	8007ad6 <vPortExitCritical+0x42>
 8007aca:	2300      	movs	r3, #0
 8007acc:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007ace:	683b      	ldr	r3, [r7, #0]
 8007ad0:	f383 8811 	msr	BASEPRI, r3
}
 8007ad4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007ad6:	bf00      	nop
 8007ad8:	370c      	adds	r7, #12
 8007ada:	46bd      	mov	sp, r7
 8007adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae0:	4770      	bx	lr
 8007ae2:	bf00      	nop
 8007ae4:	20000164 	.word	0x20000164
	...

08007af0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007af0:	f3ef 8009 	mrs	r0, PSP
 8007af4:	f3bf 8f6f 	isb	sy
 8007af8:	4b15      	ldr	r3, [pc, #84]	; (8007b50 <pxCurrentTCBConst>)
 8007afa:	681a      	ldr	r2, [r3, #0]
 8007afc:	f01e 0f10 	tst.w	lr, #16
 8007b00:	bf08      	it	eq
 8007b02:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007b06:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b0a:	6010      	str	r0, [r2, #0]
 8007b0c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007b10:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007b14:	f380 8811 	msr	BASEPRI, r0
 8007b18:	f3bf 8f4f 	dsb	sy
 8007b1c:	f3bf 8f6f 	isb	sy
 8007b20:	f7fe fede 	bl	80068e0 <vTaskSwitchContext>
 8007b24:	f04f 0000 	mov.w	r0, #0
 8007b28:	f380 8811 	msr	BASEPRI, r0
 8007b2c:	bc09      	pop	{r0, r3}
 8007b2e:	6819      	ldr	r1, [r3, #0]
 8007b30:	6808      	ldr	r0, [r1, #0]
 8007b32:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b36:	f01e 0f10 	tst.w	lr, #16
 8007b3a:	bf08      	it	eq
 8007b3c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007b40:	f380 8809 	msr	PSP, r0
 8007b44:	f3bf 8f6f 	isb	sy
 8007b48:	4770      	bx	lr
 8007b4a:	bf00      	nop
 8007b4c:	f3af 8000 	nop.w

08007b50 <pxCurrentTCBConst>:
 8007b50:	20000a84 	.word	0x20000a84
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007b54:	bf00      	nop
 8007b56:	bf00      	nop

08007b58 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007b58:	b580      	push	{r7, lr}
 8007b5a:	b082      	sub	sp, #8
 8007b5c:	af00      	add	r7, sp, #0
	__asm volatile
 8007b5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b62:	f383 8811 	msr	BASEPRI, r3
 8007b66:	f3bf 8f6f 	isb	sy
 8007b6a:	f3bf 8f4f 	dsb	sy
 8007b6e:	607b      	str	r3, [r7, #4]
}
 8007b70:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007b72:	f7fe fdfb 	bl	800676c <xTaskIncrementTick>
 8007b76:	4603      	mov	r3, r0
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d003      	beq.n	8007b84 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007b7c:	4b06      	ldr	r3, [pc, #24]	; (8007b98 <xPortSysTickHandler+0x40>)
 8007b7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007b82:	601a      	str	r2, [r3, #0]
 8007b84:	2300      	movs	r3, #0
 8007b86:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007b88:	683b      	ldr	r3, [r7, #0]
 8007b8a:	f383 8811 	msr	BASEPRI, r3
}
 8007b8e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007b90:	bf00      	nop
 8007b92:	3708      	adds	r7, #8
 8007b94:	46bd      	mov	sp, r7
 8007b96:	bd80      	pop	{r7, pc}
 8007b98:	e000ed04 	.word	0xe000ed04

08007b9c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007b9c:	b480      	push	{r7}
 8007b9e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007ba0:	4b0b      	ldr	r3, [pc, #44]	; (8007bd0 <vPortSetupTimerInterrupt+0x34>)
 8007ba2:	2200      	movs	r2, #0
 8007ba4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007ba6:	4b0b      	ldr	r3, [pc, #44]	; (8007bd4 <vPortSetupTimerInterrupt+0x38>)
 8007ba8:	2200      	movs	r2, #0
 8007baa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007bac:	4b0a      	ldr	r3, [pc, #40]	; (8007bd8 <vPortSetupTimerInterrupt+0x3c>)
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	4a0a      	ldr	r2, [pc, #40]	; (8007bdc <vPortSetupTimerInterrupt+0x40>)
 8007bb2:	fba2 2303 	umull	r2, r3, r2, r3
 8007bb6:	099b      	lsrs	r3, r3, #6
 8007bb8:	4a09      	ldr	r2, [pc, #36]	; (8007be0 <vPortSetupTimerInterrupt+0x44>)
 8007bba:	3b01      	subs	r3, #1
 8007bbc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007bbe:	4b04      	ldr	r3, [pc, #16]	; (8007bd0 <vPortSetupTimerInterrupt+0x34>)
 8007bc0:	2207      	movs	r2, #7
 8007bc2:	601a      	str	r2, [r3, #0]
}
 8007bc4:	bf00      	nop
 8007bc6:	46bd      	mov	sp, r7
 8007bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bcc:	4770      	bx	lr
 8007bce:	bf00      	nop
 8007bd0:	e000e010 	.word	0xe000e010
 8007bd4:	e000e018 	.word	0xe000e018
 8007bd8:	20000158 	.word	0x20000158
 8007bdc:	10624dd3 	.word	0x10624dd3
 8007be0:	e000e014 	.word	0xe000e014

08007be4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007be4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007bf4 <vPortEnableVFP+0x10>
 8007be8:	6801      	ldr	r1, [r0, #0]
 8007bea:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8007bee:	6001      	str	r1, [r0, #0]
 8007bf0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007bf2:	bf00      	nop
 8007bf4:	e000ed88 	.word	0xe000ed88

08007bf8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007bf8:	b480      	push	{r7}
 8007bfa:	b085      	sub	sp, #20
 8007bfc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007bfe:	f3ef 8305 	mrs	r3, IPSR
 8007c02:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	2b0f      	cmp	r3, #15
 8007c08:	d914      	bls.n	8007c34 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007c0a:	4a17      	ldr	r2, [pc, #92]	; (8007c68 <vPortValidateInterruptPriority+0x70>)
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	4413      	add	r3, r2
 8007c10:	781b      	ldrb	r3, [r3, #0]
 8007c12:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007c14:	4b15      	ldr	r3, [pc, #84]	; (8007c6c <vPortValidateInterruptPriority+0x74>)
 8007c16:	781b      	ldrb	r3, [r3, #0]
 8007c18:	7afa      	ldrb	r2, [r7, #11]
 8007c1a:	429a      	cmp	r2, r3
 8007c1c:	d20a      	bcs.n	8007c34 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8007c1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c22:	f383 8811 	msr	BASEPRI, r3
 8007c26:	f3bf 8f6f 	isb	sy
 8007c2a:	f3bf 8f4f 	dsb	sy
 8007c2e:	607b      	str	r3, [r7, #4]
}
 8007c30:	bf00      	nop
 8007c32:	e7fe      	b.n	8007c32 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007c34:	4b0e      	ldr	r3, [pc, #56]	; (8007c70 <vPortValidateInterruptPriority+0x78>)
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007c3c:	4b0d      	ldr	r3, [pc, #52]	; (8007c74 <vPortValidateInterruptPriority+0x7c>)
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	429a      	cmp	r2, r3
 8007c42:	d90a      	bls.n	8007c5a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8007c44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c48:	f383 8811 	msr	BASEPRI, r3
 8007c4c:	f3bf 8f6f 	isb	sy
 8007c50:	f3bf 8f4f 	dsb	sy
 8007c54:	603b      	str	r3, [r7, #0]
}
 8007c56:	bf00      	nop
 8007c58:	e7fe      	b.n	8007c58 <vPortValidateInterruptPriority+0x60>
	}
 8007c5a:	bf00      	nop
 8007c5c:	3714      	adds	r7, #20
 8007c5e:	46bd      	mov	sp, r7
 8007c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c64:	4770      	bx	lr
 8007c66:	bf00      	nop
 8007c68:	e000e3f0 	.word	0xe000e3f0
 8007c6c:	200010b0 	.word	0x200010b0
 8007c70:	e000ed0c 	.word	0xe000ed0c
 8007c74:	200010b4 	.word	0x200010b4

08007c78 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007c78:	b580      	push	{r7, lr}
 8007c7a:	b08a      	sub	sp, #40	; 0x28
 8007c7c:	af00      	add	r7, sp, #0
 8007c7e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007c80:	2300      	movs	r3, #0
 8007c82:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007c84:	f7fe fcb6 	bl	80065f4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007c88:	4b5b      	ldr	r3, [pc, #364]	; (8007df8 <pvPortMalloc+0x180>)
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d101      	bne.n	8007c94 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007c90:	f000 f920 	bl	8007ed4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007c94:	4b59      	ldr	r3, [pc, #356]	; (8007dfc <pvPortMalloc+0x184>)
 8007c96:	681a      	ldr	r2, [r3, #0]
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	4013      	ands	r3, r2
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	f040 8093 	bne.w	8007dc8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d01d      	beq.n	8007ce4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8007ca8:	2208      	movs	r2, #8
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	4413      	add	r3, r2
 8007cae:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	f003 0307 	and.w	r3, r3, #7
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d014      	beq.n	8007ce4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	f023 0307 	bic.w	r3, r3, #7
 8007cc0:	3308      	adds	r3, #8
 8007cc2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	f003 0307 	and.w	r3, r3, #7
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d00a      	beq.n	8007ce4 <pvPortMalloc+0x6c>
	__asm volatile
 8007cce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cd2:	f383 8811 	msr	BASEPRI, r3
 8007cd6:	f3bf 8f6f 	isb	sy
 8007cda:	f3bf 8f4f 	dsb	sy
 8007cde:	617b      	str	r3, [r7, #20]
}
 8007ce0:	bf00      	nop
 8007ce2:	e7fe      	b.n	8007ce2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d06e      	beq.n	8007dc8 <pvPortMalloc+0x150>
 8007cea:	4b45      	ldr	r3, [pc, #276]	; (8007e00 <pvPortMalloc+0x188>)
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	687a      	ldr	r2, [r7, #4]
 8007cf0:	429a      	cmp	r2, r3
 8007cf2:	d869      	bhi.n	8007dc8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007cf4:	4b43      	ldr	r3, [pc, #268]	; (8007e04 <pvPortMalloc+0x18c>)
 8007cf6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007cf8:	4b42      	ldr	r3, [pc, #264]	; (8007e04 <pvPortMalloc+0x18c>)
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007cfe:	e004      	b.n	8007d0a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8007d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d02:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d0c:	685b      	ldr	r3, [r3, #4]
 8007d0e:	687a      	ldr	r2, [r7, #4]
 8007d10:	429a      	cmp	r2, r3
 8007d12:	d903      	bls.n	8007d1c <pvPortMalloc+0xa4>
 8007d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d1f1      	bne.n	8007d00 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007d1c:	4b36      	ldr	r3, [pc, #216]	; (8007df8 <pvPortMalloc+0x180>)
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007d22:	429a      	cmp	r2, r3
 8007d24:	d050      	beq.n	8007dc8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007d26:	6a3b      	ldr	r3, [r7, #32]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	2208      	movs	r2, #8
 8007d2c:	4413      	add	r3, r2
 8007d2e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d32:	681a      	ldr	r2, [r3, #0]
 8007d34:	6a3b      	ldr	r3, [r7, #32]
 8007d36:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d3a:	685a      	ldr	r2, [r3, #4]
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	1ad2      	subs	r2, r2, r3
 8007d40:	2308      	movs	r3, #8
 8007d42:	005b      	lsls	r3, r3, #1
 8007d44:	429a      	cmp	r2, r3
 8007d46:	d91f      	bls.n	8007d88 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007d48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	4413      	add	r3, r2
 8007d4e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007d50:	69bb      	ldr	r3, [r7, #24]
 8007d52:	f003 0307 	and.w	r3, r3, #7
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d00a      	beq.n	8007d70 <pvPortMalloc+0xf8>
	__asm volatile
 8007d5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d5e:	f383 8811 	msr	BASEPRI, r3
 8007d62:	f3bf 8f6f 	isb	sy
 8007d66:	f3bf 8f4f 	dsb	sy
 8007d6a:	613b      	str	r3, [r7, #16]
}
 8007d6c:	bf00      	nop
 8007d6e:	e7fe      	b.n	8007d6e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d72:	685a      	ldr	r2, [r3, #4]
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	1ad2      	subs	r2, r2, r3
 8007d78:	69bb      	ldr	r3, [r7, #24]
 8007d7a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007d7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d7e:	687a      	ldr	r2, [r7, #4]
 8007d80:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007d82:	69b8      	ldr	r0, [r7, #24]
 8007d84:	f000 f908 	bl	8007f98 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007d88:	4b1d      	ldr	r3, [pc, #116]	; (8007e00 <pvPortMalloc+0x188>)
 8007d8a:	681a      	ldr	r2, [r3, #0]
 8007d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d8e:	685b      	ldr	r3, [r3, #4]
 8007d90:	1ad3      	subs	r3, r2, r3
 8007d92:	4a1b      	ldr	r2, [pc, #108]	; (8007e00 <pvPortMalloc+0x188>)
 8007d94:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007d96:	4b1a      	ldr	r3, [pc, #104]	; (8007e00 <pvPortMalloc+0x188>)
 8007d98:	681a      	ldr	r2, [r3, #0]
 8007d9a:	4b1b      	ldr	r3, [pc, #108]	; (8007e08 <pvPortMalloc+0x190>)
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	429a      	cmp	r2, r3
 8007da0:	d203      	bcs.n	8007daa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007da2:	4b17      	ldr	r3, [pc, #92]	; (8007e00 <pvPortMalloc+0x188>)
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	4a18      	ldr	r2, [pc, #96]	; (8007e08 <pvPortMalloc+0x190>)
 8007da8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dac:	685a      	ldr	r2, [r3, #4]
 8007dae:	4b13      	ldr	r3, [pc, #76]	; (8007dfc <pvPortMalloc+0x184>)
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	431a      	orrs	r2, r3
 8007db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007db6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dba:	2200      	movs	r2, #0
 8007dbc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8007dbe:	4b13      	ldr	r3, [pc, #76]	; (8007e0c <pvPortMalloc+0x194>)
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	3301      	adds	r3, #1
 8007dc4:	4a11      	ldr	r2, [pc, #68]	; (8007e0c <pvPortMalloc+0x194>)
 8007dc6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007dc8:	f7fe fc22 	bl	8006610 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007dcc:	69fb      	ldr	r3, [r7, #28]
 8007dce:	f003 0307 	and.w	r3, r3, #7
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d00a      	beq.n	8007dec <pvPortMalloc+0x174>
	__asm volatile
 8007dd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dda:	f383 8811 	msr	BASEPRI, r3
 8007dde:	f3bf 8f6f 	isb	sy
 8007de2:	f3bf 8f4f 	dsb	sy
 8007de6:	60fb      	str	r3, [r7, #12]
}
 8007de8:	bf00      	nop
 8007dea:	e7fe      	b.n	8007dea <pvPortMalloc+0x172>
	return pvReturn;
 8007dec:	69fb      	ldr	r3, [r7, #28]
}
 8007dee:	4618      	mov	r0, r3
 8007df0:	3728      	adds	r7, #40	; 0x28
 8007df2:	46bd      	mov	sp, r7
 8007df4:	bd80      	pop	{r7, pc}
 8007df6:	bf00      	nop
 8007df8:	20001c78 	.word	0x20001c78
 8007dfc:	20001c8c 	.word	0x20001c8c
 8007e00:	20001c7c 	.word	0x20001c7c
 8007e04:	20001c70 	.word	0x20001c70
 8007e08:	20001c80 	.word	0x20001c80
 8007e0c:	20001c84 	.word	0x20001c84

08007e10 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007e10:	b580      	push	{r7, lr}
 8007e12:	b086      	sub	sp, #24
 8007e14:	af00      	add	r7, sp, #0
 8007e16:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d04d      	beq.n	8007ebe <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007e22:	2308      	movs	r3, #8
 8007e24:	425b      	negs	r3, r3
 8007e26:	697a      	ldr	r2, [r7, #20]
 8007e28:	4413      	add	r3, r2
 8007e2a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007e2c:	697b      	ldr	r3, [r7, #20]
 8007e2e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007e30:	693b      	ldr	r3, [r7, #16]
 8007e32:	685a      	ldr	r2, [r3, #4]
 8007e34:	4b24      	ldr	r3, [pc, #144]	; (8007ec8 <vPortFree+0xb8>)
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	4013      	ands	r3, r2
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d10a      	bne.n	8007e54 <vPortFree+0x44>
	__asm volatile
 8007e3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e42:	f383 8811 	msr	BASEPRI, r3
 8007e46:	f3bf 8f6f 	isb	sy
 8007e4a:	f3bf 8f4f 	dsb	sy
 8007e4e:	60fb      	str	r3, [r7, #12]
}
 8007e50:	bf00      	nop
 8007e52:	e7fe      	b.n	8007e52 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007e54:	693b      	ldr	r3, [r7, #16]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d00a      	beq.n	8007e72 <vPortFree+0x62>
	__asm volatile
 8007e5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e60:	f383 8811 	msr	BASEPRI, r3
 8007e64:	f3bf 8f6f 	isb	sy
 8007e68:	f3bf 8f4f 	dsb	sy
 8007e6c:	60bb      	str	r3, [r7, #8]
}
 8007e6e:	bf00      	nop
 8007e70:	e7fe      	b.n	8007e70 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007e72:	693b      	ldr	r3, [r7, #16]
 8007e74:	685a      	ldr	r2, [r3, #4]
 8007e76:	4b14      	ldr	r3, [pc, #80]	; (8007ec8 <vPortFree+0xb8>)
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	4013      	ands	r3, r2
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d01e      	beq.n	8007ebe <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007e80:	693b      	ldr	r3, [r7, #16]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d11a      	bne.n	8007ebe <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007e88:	693b      	ldr	r3, [r7, #16]
 8007e8a:	685a      	ldr	r2, [r3, #4]
 8007e8c:	4b0e      	ldr	r3, [pc, #56]	; (8007ec8 <vPortFree+0xb8>)
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	43db      	mvns	r3, r3
 8007e92:	401a      	ands	r2, r3
 8007e94:	693b      	ldr	r3, [r7, #16]
 8007e96:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007e98:	f7fe fbac 	bl	80065f4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007e9c:	693b      	ldr	r3, [r7, #16]
 8007e9e:	685a      	ldr	r2, [r3, #4]
 8007ea0:	4b0a      	ldr	r3, [pc, #40]	; (8007ecc <vPortFree+0xbc>)
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	4413      	add	r3, r2
 8007ea6:	4a09      	ldr	r2, [pc, #36]	; (8007ecc <vPortFree+0xbc>)
 8007ea8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007eaa:	6938      	ldr	r0, [r7, #16]
 8007eac:	f000 f874 	bl	8007f98 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007eb0:	4b07      	ldr	r3, [pc, #28]	; (8007ed0 <vPortFree+0xc0>)
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	3301      	adds	r3, #1
 8007eb6:	4a06      	ldr	r2, [pc, #24]	; (8007ed0 <vPortFree+0xc0>)
 8007eb8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8007eba:	f7fe fba9 	bl	8006610 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007ebe:	bf00      	nop
 8007ec0:	3718      	adds	r7, #24
 8007ec2:	46bd      	mov	sp, r7
 8007ec4:	bd80      	pop	{r7, pc}
 8007ec6:	bf00      	nop
 8007ec8:	20001c8c 	.word	0x20001c8c
 8007ecc:	20001c7c 	.word	0x20001c7c
 8007ed0:	20001c88 	.word	0x20001c88

08007ed4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007ed4:	b480      	push	{r7}
 8007ed6:	b085      	sub	sp, #20
 8007ed8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007eda:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8007ede:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007ee0:	4b27      	ldr	r3, [pc, #156]	; (8007f80 <prvHeapInit+0xac>)
 8007ee2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	f003 0307 	and.w	r3, r3, #7
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d00c      	beq.n	8007f08 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	3307      	adds	r3, #7
 8007ef2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	f023 0307 	bic.w	r3, r3, #7
 8007efa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007efc:	68ba      	ldr	r2, [r7, #8]
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	1ad3      	subs	r3, r2, r3
 8007f02:	4a1f      	ldr	r2, [pc, #124]	; (8007f80 <prvHeapInit+0xac>)
 8007f04:	4413      	add	r3, r2
 8007f06:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007f0c:	4a1d      	ldr	r2, [pc, #116]	; (8007f84 <prvHeapInit+0xb0>)
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007f12:	4b1c      	ldr	r3, [pc, #112]	; (8007f84 <prvHeapInit+0xb0>)
 8007f14:	2200      	movs	r2, #0
 8007f16:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	68ba      	ldr	r2, [r7, #8]
 8007f1c:	4413      	add	r3, r2
 8007f1e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007f20:	2208      	movs	r2, #8
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	1a9b      	subs	r3, r3, r2
 8007f26:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	f023 0307 	bic.w	r3, r3, #7
 8007f2e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	4a15      	ldr	r2, [pc, #84]	; (8007f88 <prvHeapInit+0xb4>)
 8007f34:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007f36:	4b14      	ldr	r3, [pc, #80]	; (8007f88 <prvHeapInit+0xb4>)
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	2200      	movs	r2, #0
 8007f3c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007f3e:	4b12      	ldr	r3, [pc, #72]	; (8007f88 <prvHeapInit+0xb4>)
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	2200      	movs	r2, #0
 8007f44:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007f4a:	683b      	ldr	r3, [r7, #0]
 8007f4c:	68fa      	ldr	r2, [r7, #12]
 8007f4e:	1ad2      	subs	r2, r2, r3
 8007f50:	683b      	ldr	r3, [r7, #0]
 8007f52:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007f54:	4b0c      	ldr	r3, [pc, #48]	; (8007f88 <prvHeapInit+0xb4>)
 8007f56:	681a      	ldr	r2, [r3, #0]
 8007f58:	683b      	ldr	r3, [r7, #0]
 8007f5a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007f5c:	683b      	ldr	r3, [r7, #0]
 8007f5e:	685b      	ldr	r3, [r3, #4]
 8007f60:	4a0a      	ldr	r2, [pc, #40]	; (8007f8c <prvHeapInit+0xb8>)
 8007f62:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007f64:	683b      	ldr	r3, [r7, #0]
 8007f66:	685b      	ldr	r3, [r3, #4]
 8007f68:	4a09      	ldr	r2, [pc, #36]	; (8007f90 <prvHeapInit+0xbc>)
 8007f6a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007f6c:	4b09      	ldr	r3, [pc, #36]	; (8007f94 <prvHeapInit+0xc0>)
 8007f6e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007f72:	601a      	str	r2, [r3, #0]
}
 8007f74:	bf00      	nop
 8007f76:	3714      	adds	r7, #20
 8007f78:	46bd      	mov	sp, r7
 8007f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f7e:	4770      	bx	lr
 8007f80:	200010b8 	.word	0x200010b8
 8007f84:	20001c70 	.word	0x20001c70
 8007f88:	20001c78 	.word	0x20001c78
 8007f8c:	20001c80 	.word	0x20001c80
 8007f90:	20001c7c 	.word	0x20001c7c
 8007f94:	20001c8c 	.word	0x20001c8c

08007f98 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007f98:	b480      	push	{r7}
 8007f9a:	b085      	sub	sp, #20
 8007f9c:	af00      	add	r7, sp, #0
 8007f9e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007fa0:	4b28      	ldr	r3, [pc, #160]	; (8008044 <prvInsertBlockIntoFreeList+0xac>)
 8007fa2:	60fb      	str	r3, [r7, #12]
 8007fa4:	e002      	b.n	8007fac <prvInsertBlockIntoFreeList+0x14>
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	60fb      	str	r3, [r7, #12]
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	687a      	ldr	r2, [r7, #4]
 8007fb2:	429a      	cmp	r2, r3
 8007fb4:	d8f7      	bhi.n	8007fa6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	685b      	ldr	r3, [r3, #4]
 8007fbe:	68ba      	ldr	r2, [r7, #8]
 8007fc0:	4413      	add	r3, r2
 8007fc2:	687a      	ldr	r2, [r7, #4]
 8007fc4:	429a      	cmp	r2, r3
 8007fc6:	d108      	bne.n	8007fda <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	685a      	ldr	r2, [r3, #4]
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	685b      	ldr	r3, [r3, #4]
 8007fd0:	441a      	add	r2, r3
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	685b      	ldr	r3, [r3, #4]
 8007fe2:	68ba      	ldr	r2, [r7, #8]
 8007fe4:	441a      	add	r2, r3
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	429a      	cmp	r2, r3
 8007fec:	d118      	bne.n	8008020 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	681a      	ldr	r2, [r3, #0]
 8007ff2:	4b15      	ldr	r3, [pc, #84]	; (8008048 <prvInsertBlockIntoFreeList+0xb0>)
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	429a      	cmp	r2, r3
 8007ff8:	d00d      	beq.n	8008016 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	685a      	ldr	r2, [r3, #4]
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	685b      	ldr	r3, [r3, #4]
 8008004:	441a      	add	r2, r3
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	681a      	ldr	r2, [r3, #0]
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	601a      	str	r2, [r3, #0]
 8008014:	e008      	b.n	8008028 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008016:	4b0c      	ldr	r3, [pc, #48]	; (8008048 <prvInsertBlockIntoFreeList+0xb0>)
 8008018:	681a      	ldr	r2, [r3, #0]
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	601a      	str	r2, [r3, #0]
 800801e:	e003      	b.n	8008028 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	681a      	ldr	r2, [r3, #0]
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008028:	68fa      	ldr	r2, [r7, #12]
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	429a      	cmp	r2, r3
 800802e:	d002      	beq.n	8008036 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	687a      	ldr	r2, [r7, #4]
 8008034:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008036:	bf00      	nop
 8008038:	3714      	adds	r7, #20
 800803a:	46bd      	mov	sp, r7
 800803c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008040:	4770      	bx	lr
 8008042:	bf00      	nop
 8008044:	20001c70 	.word	0x20001c70
 8008048:	20001c78 	.word	0x20001c78

0800804c <calloc>:
 800804c:	4b02      	ldr	r3, [pc, #8]	; (8008058 <calloc+0xc>)
 800804e:	460a      	mov	r2, r1
 8008050:	4601      	mov	r1, r0
 8008052:	6818      	ldr	r0, [r3, #0]
 8008054:	f000 b802 	b.w	800805c <_calloc_r>
 8008058:	200001b4 	.word	0x200001b4

0800805c <_calloc_r>:
 800805c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800805e:	fba1 2402 	umull	r2, r4, r1, r2
 8008062:	b94c      	cbnz	r4, 8008078 <_calloc_r+0x1c>
 8008064:	4611      	mov	r1, r2
 8008066:	9201      	str	r2, [sp, #4]
 8008068:	f000 f836 	bl	80080d8 <_malloc_r>
 800806c:	9a01      	ldr	r2, [sp, #4]
 800806e:	4605      	mov	r5, r0
 8008070:	b930      	cbnz	r0, 8008080 <_calloc_r+0x24>
 8008072:	4628      	mov	r0, r5
 8008074:	b003      	add	sp, #12
 8008076:	bd30      	pop	{r4, r5, pc}
 8008078:	220c      	movs	r2, #12
 800807a:	6002      	str	r2, [r0, #0]
 800807c:	2500      	movs	r5, #0
 800807e:	e7f8      	b.n	8008072 <_calloc_r+0x16>
 8008080:	4621      	mov	r1, r4
 8008082:	f000 f8b5 	bl	80081f0 <memset>
 8008086:	e7f4      	b.n	8008072 <_calloc_r+0x16>

08008088 <free>:
 8008088:	4b02      	ldr	r3, [pc, #8]	; (8008094 <free+0xc>)
 800808a:	4601      	mov	r1, r0
 800808c:	6818      	ldr	r0, [r3, #0]
 800808e:	f000 b957 	b.w	8008340 <_free_r>
 8008092:	bf00      	nop
 8008094:	200001b4 	.word	0x200001b4

08008098 <sbrk_aligned>:
 8008098:	b570      	push	{r4, r5, r6, lr}
 800809a:	4e0e      	ldr	r6, [pc, #56]	; (80080d4 <sbrk_aligned+0x3c>)
 800809c:	460c      	mov	r4, r1
 800809e:	6831      	ldr	r1, [r6, #0]
 80080a0:	4605      	mov	r5, r0
 80080a2:	b911      	cbnz	r1, 80080aa <sbrk_aligned+0x12>
 80080a4:	f000 f902 	bl	80082ac <_sbrk_r>
 80080a8:	6030      	str	r0, [r6, #0]
 80080aa:	4621      	mov	r1, r4
 80080ac:	4628      	mov	r0, r5
 80080ae:	f000 f8fd 	bl	80082ac <_sbrk_r>
 80080b2:	1c43      	adds	r3, r0, #1
 80080b4:	d00a      	beq.n	80080cc <sbrk_aligned+0x34>
 80080b6:	1cc4      	adds	r4, r0, #3
 80080b8:	f024 0403 	bic.w	r4, r4, #3
 80080bc:	42a0      	cmp	r0, r4
 80080be:	d007      	beq.n	80080d0 <sbrk_aligned+0x38>
 80080c0:	1a21      	subs	r1, r4, r0
 80080c2:	4628      	mov	r0, r5
 80080c4:	f000 f8f2 	bl	80082ac <_sbrk_r>
 80080c8:	3001      	adds	r0, #1
 80080ca:	d101      	bne.n	80080d0 <sbrk_aligned+0x38>
 80080cc:	f04f 34ff 	mov.w	r4, #4294967295
 80080d0:	4620      	mov	r0, r4
 80080d2:	bd70      	pop	{r4, r5, r6, pc}
 80080d4:	20001c94 	.word	0x20001c94

080080d8 <_malloc_r>:
 80080d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80080dc:	1ccd      	adds	r5, r1, #3
 80080de:	f025 0503 	bic.w	r5, r5, #3
 80080e2:	3508      	adds	r5, #8
 80080e4:	2d0c      	cmp	r5, #12
 80080e6:	bf38      	it	cc
 80080e8:	250c      	movcc	r5, #12
 80080ea:	2d00      	cmp	r5, #0
 80080ec:	4607      	mov	r7, r0
 80080ee:	db01      	blt.n	80080f4 <_malloc_r+0x1c>
 80080f0:	42a9      	cmp	r1, r5
 80080f2:	d905      	bls.n	8008100 <_malloc_r+0x28>
 80080f4:	230c      	movs	r3, #12
 80080f6:	603b      	str	r3, [r7, #0]
 80080f8:	2600      	movs	r6, #0
 80080fa:	4630      	mov	r0, r6
 80080fc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008100:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80081d4 <_malloc_r+0xfc>
 8008104:	f000 f868 	bl	80081d8 <__malloc_lock>
 8008108:	f8d8 3000 	ldr.w	r3, [r8]
 800810c:	461c      	mov	r4, r3
 800810e:	bb5c      	cbnz	r4, 8008168 <_malloc_r+0x90>
 8008110:	4629      	mov	r1, r5
 8008112:	4638      	mov	r0, r7
 8008114:	f7ff ffc0 	bl	8008098 <sbrk_aligned>
 8008118:	1c43      	adds	r3, r0, #1
 800811a:	4604      	mov	r4, r0
 800811c:	d155      	bne.n	80081ca <_malloc_r+0xf2>
 800811e:	f8d8 4000 	ldr.w	r4, [r8]
 8008122:	4626      	mov	r6, r4
 8008124:	2e00      	cmp	r6, #0
 8008126:	d145      	bne.n	80081b4 <_malloc_r+0xdc>
 8008128:	2c00      	cmp	r4, #0
 800812a:	d048      	beq.n	80081be <_malloc_r+0xe6>
 800812c:	6823      	ldr	r3, [r4, #0]
 800812e:	4631      	mov	r1, r6
 8008130:	4638      	mov	r0, r7
 8008132:	eb04 0903 	add.w	r9, r4, r3
 8008136:	f000 f8b9 	bl	80082ac <_sbrk_r>
 800813a:	4581      	cmp	r9, r0
 800813c:	d13f      	bne.n	80081be <_malloc_r+0xe6>
 800813e:	6821      	ldr	r1, [r4, #0]
 8008140:	1a6d      	subs	r5, r5, r1
 8008142:	4629      	mov	r1, r5
 8008144:	4638      	mov	r0, r7
 8008146:	f7ff ffa7 	bl	8008098 <sbrk_aligned>
 800814a:	3001      	adds	r0, #1
 800814c:	d037      	beq.n	80081be <_malloc_r+0xe6>
 800814e:	6823      	ldr	r3, [r4, #0]
 8008150:	442b      	add	r3, r5
 8008152:	6023      	str	r3, [r4, #0]
 8008154:	f8d8 3000 	ldr.w	r3, [r8]
 8008158:	2b00      	cmp	r3, #0
 800815a:	d038      	beq.n	80081ce <_malloc_r+0xf6>
 800815c:	685a      	ldr	r2, [r3, #4]
 800815e:	42a2      	cmp	r2, r4
 8008160:	d12b      	bne.n	80081ba <_malloc_r+0xe2>
 8008162:	2200      	movs	r2, #0
 8008164:	605a      	str	r2, [r3, #4]
 8008166:	e00f      	b.n	8008188 <_malloc_r+0xb0>
 8008168:	6822      	ldr	r2, [r4, #0]
 800816a:	1b52      	subs	r2, r2, r5
 800816c:	d41f      	bmi.n	80081ae <_malloc_r+0xd6>
 800816e:	2a0b      	cmp	r2, #11
 8008170:	d917      	bls.n	80081a2 <_malloc_r+0xca>
 8008172:	1961      	adds	r1, r4, r5
 8008174:	42a3      	cmp	r3, r4
 8008176:	6025      	str	r5, [r4, #0]
 8008178:	bf18      	it	ne
 800817a:	6059      	strne	r1, [r3, #4]
 800817c:	6863      	ldr	r3, [r4, #4]
 800817e:	bf08      	it	eq
 8008180:	f8c8 1000 	streq.w	r1, [r8]
 8008184:	5162      	str	r2, [r4, r5]
 8008186:	604b      	str	r3, [r1, #4]
 8008188:	4638      	mov	r0, r7
 800818a:	f104 060b 	add.w	r6, r4, #11
 800818e:	f000 f829 	bl	80081e4 <__malloc_unlock>
 8008192:	f026 0607 	bic.w	r6, r6, #7
 8008196:	1d23      	adds	r3, r4, #4
 8008198:	1af2      	subs	r2, r6, r3
 800819a:	d0ae      	beq.n	80080fa <_malloc_r+0x22>
 800819c:	1b9b      	subs	r3, r3, r6
 800819e:	50a3      	str	r3, [r4, r2]
 80081a0:	e7ab      	b.n	80080fa <_malloc_r+0x22>
 80081a2:	42a3      	cmp	r3, r4
 80081a4:	6862      	ldr	r2, [r4, #4]
 80081a6:	d1dd      	bne.n	8008164 <_malloc_r+0x8c>
 80081a8:	f8c8 2000 	str.w	r2, [r8]
 80081ac:	e7ec      	b.n	8008188 <_malloc_r+0xb0>
 80081ae:	4623      	mov	r3, r4
 80081b0:	6864      	ldr	r4, [r4, #4]
 80081b2:	e7ac      	b.n	800810e <_malloc_r+0x36>
 80081b4:	4634      	mov	r4, r6
 80081b6:	6876      	ldr	r6, [r6, #4]
 80081b8:	e7b4      	b.n	8008124 <_malloc_r+0x4c>
 80081ba:	4613      	mov	r3, r2
 80081bc:	e7cc      	b.n	8008158 <_malloc_r+0x80>
 80081be:	230c      	movs	r3, #12
 80081c0:	603b      	str	r3, [r7, #0]
 80081c2:	4638      	mov	r0, r7
 80081c4:	f000 f80e 	bl	80081e4 <__malloc_unlock>
 80081c8:	e797      	b.n	80080fa <_malloc_r+0x22>
 80081ca:	6025      	str	r5, [r4, #0]
 80081cc:	e7dc      	b.n	8008188 <_malloc_r+0xb0>
 80081ce:	605b      	str	r3, [r3, #4]
 80081d0:	deff      	udf	#255	; 0xff
 80081d2:	bf00      	nop
 80081d4:	20001c90 	.word	0x20001c90

080081d8 <__malloc_lock>:
 80081d8:	4801      	ldr	r0, [pc, #4]	; (80081e0 <__malloc_lock+0x8>)
 80081da:	f000 b8a1 	b.w	8008320 <__retarget_lock_acquire_recursive>
 80081de:	bf00      	nop
 80081e0:	20001dd4 	.word	0x20001dd4

080081e4 <__malloc_unlock>:
 80081e4:	4801      	ldr	r0, [pc, #4]	; (80081ec <__malloc_unlock+0x8>)
 80081e6:	f000 b89c 	b.w	8008322 <__retarget_lock_release_recursive>
 80081ea:	bf00      	nop
 80081ec:	20001dd4 	.word	0x20001dd4

080081f0 <memset>:
 80081f0:	4402      	add	r2, r0
 80081f2:	4603      	mov	r3, r0
 80081f4:	4293      	cmp	r3, r2
 80081f6:	d100      	bne.n	80081fa <memset+0xa>
 80081f8:	4770      	bx	lr
 80081fa:	f803 1b01 	strb.w	r1, [r3], #1
 80081fe:	e7f9      	b.n	80081f4 <memset+0x4>

08008200 <_reclaim_reent>:
 8008200:	4b29      	ldr	r3, [pc, #164]	; (80082a8 <_reclaim_reent+0xa8>)
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	4283      	cmp	r3, r0
 8008206:	b570      	push	{r4, r5, r6, lr}
 8008208:	4604      	mov	r4, r0
 800820a:	d04b      	beq.n	80082a4 <_reclaim_reent+0xa4>
 800820c:	69c3      	ldr	r3, [r0, #28]
 800820e:	b143      	cbz	r3, 8008222 <_reclaim_reent+0x22>
 8008210:	68db      	ldr	r3, [r3, #12]
 8008212:	2b00      	cmp	r3, #0
 8008214:	d144      	bne.n	80082a0 <_reclaim_reent+0xa0>
 8008216:	69e3      	ldr	r3, [r4, #28]
 8008218:	6819      	ldr	r1, [r3, #0]
 800821a:	b111      	cbz	r1, 8008222 <_reclaim_reent+0x22>
 800821c:	4620      	mov	r0, r4
 800821e:	f000 f88f 	bl	8008340 <_free_r>
 8008222:	6961      	ldr	r1, [r4, #20]
 8008224:	b111      	cbz	r1, 800822c <_reclaim_reent+0x2c>
 8008226:	4620      	mov	r0, r4
 8008228:	f000 f88a 	bl	8008340 <_free_r>
 800822c:	69e1      	ldr	r1, [r4, #28]
 800822e:	b111      	cbz	r1, 8008236 <_reclaim_reent+0x36>
 8008230:	4620      	mov	r0, r4
 8008232:	f000 f885 	bl	8008340 <_free_r>
 8008236:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8008238:	b111      	cbz	r1, 8008240 <_reclaim_reent+0x40>
 800823a:	4620      	mov	r0, r4
 800823c:	f000 f880 	bl	8008340 <_free_r>
 8008240:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008242:	b111      	cbz	r1, 800824a <_reclaim_reent+0x4a>
 8008244:	4620      	mov	r0, r4
 8008246:	f000 f87b 	bl	8008340 <_free_r>
 800824a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800824c:	b111      	cbz	r1, 8008254 <_reclaim_reent+0x54>
 800824e:	4620      	mov	r0, r4
 8008250:	f000 f876 	bl	8008340 <_free_r>
 8008254:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8008256:	b111      	cbz	r1, 800825e <_reclaim_reent+0x5e>
 8008258:	4620      	mov	r0, r4
 800825a:	f000 f871 	bl	8008340 <_free_r>
 800825e:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8008260:	b111      	cbz	r1, 8008268 <_reclaim_reent+0x68>
 8008262:	4620      	mov	r0, r4
 8008264:	f000 f86c 	bl	8008340 <_free_r>
 8008268:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800826a:	b111      	cbz	r1, 8008272 <_reclaim_reent+0x72>
 800826c:	4620      	mov	r0, r4
 800826e:	f000 f867 	bl	8008340 <_free_r>
 8008272:	6a23      	ldr	r3, [r4, #32]
 8008274:	b1b3      	cbz	r3, 80082a4 <_reclaim_reent+0xa4>
 8008276:	4620      	mov	r0, r4
 8008278:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800827c:	4718      	bx	r3
 800827e:	5949      	ldr	r1, [r1, r5]
 8008280:	b941      	cbnz	r1, 8008294 <_reclaim_reent+0x94>
 8008282:	3504      	adds	r5, #4
 8008284:	69e3      	ldr	r3, [r4, #28]
 8008286:	2d80      	cmp	r5, #128	; 0x80
 8008288:	68d9      	ldr	r1, [r3, #12]
 800828a:	d1f8      	bne.n	800827e <_reclaim_reent+0x7e>
 800828c:	4620      	mov	r0, r4
 800828e:	f000 f857 	bl	8008340 <_free_r>
 8008292:	e7c0      	b.n	8008216 <_reclaim_reent+0x16>
 8008294:	680e      	ldr	r6, [r1, #0]
 8008296:	4620      	mov	r0, r4
 8008298:	f000 f852 	bl	8008340 <_free_r>
 800829c:	4631      	mov	r1, r6
 800829e:	e7ef      	b.n	8008280 <_reclaim_reent+0x80>
 80082a0:	2500      	movs	r5, #0
 80082a2:	e7ef      	b.n	8008284 <_reclaim_reent+0x84>
 80082a4:	bd70      	pop	{r4, r5, r6, pc}
 80082a6:	bf00      	nop
 80082a8:	200001b4 	.word	0x200001b4

080082ac <_sbrk_r>:
 80082ac:	b538      	push	{r3, r4, r5, lr}
 80082ae:	4d06      	ldr	r5, [pc, #24]	; (80082c8 <_sbrk_r+0x1c>)
 80082b0:	2300      	movs	r3, #0
 80082b2:	4604      	mov	r4, r0
 80082b4:	4608      	mov	r0, r1
 80082b6:	602b      	str	r3, [r5, #0]
 80082b8:	f7f9 f884 	bl	80013c4 <_sbrk>
 80082bc:	1c43      	adds	r3, r0, #1
 80082be:	d102      	bne.n	80082c6 <_sbrk_r+0x1a>
 80082c0:	682b      	ldr	r3, [r5, #0]
 80082c2:	b103      	cbz	r3, 80082c6 <_sbrk_r+0x1a>
 80082c4:	6023      	str	r3, [r4, #0]
 80082c6:	bd38      	pop	{r3, r4, r5, pc}
 80082c8:	20001dd0 	.word	0x20001dd0

080082cc <__errno>:
 80082cc:	4b01      	ldr	r3, [pc, #4]	; (80082d4 <__errno+0x8>)
 80082ce:	6818      	ldr	r0, [r3, #0]
 80082d0:	4770      	bx	lr
 80082d2:	bf00      	nop
 80082d4:	200001b4 	.word	0x200001b4

080082d8 <__libc_init_array>:
 80082d8:	b570      	push	{r4, r5, r6, lr}
 80082da:	4d0d      	ldr	r5, [pc, #52]	; (8008310 <__libc_init_array+0x38>)
 80082dc:	4c0d      	ldr	r4, [pc, #52]	; (8008314 <__libc_init_array+0x3c>)
 80082de:	1b64      	subs	r4, r4, r5
 80082e0:	10a4      	asrs	r4, r4, #2
 80082e2:	2600      	movs	r6, #0
 80082e4:	42a6      	cmp	r6, r4
 80082e6:	d109      	bne.n	80082fc <__libc_init_array+0x24>
 80082e8:	4d0b      	ldr	r5, [pc, #44]	; (8008318 <__libc_init_array+0x40>)
 80082ea:	4c0c      	ldr	r4, [pc, #48]	; (800831c <__libc_init_array+0x44>)
 80082ec:	f000 f874 	bl	80083d8 <_init>
 80082f0:	1b64      	subs	r4, r4, r5
 80082f2:	10a4      	asrs	r4, r4, #2
 80082f4:	2600      	movs	r6, #0
 80082f6:	42a6      	cmp	r6, r4
 80082f8:	d105      	bne.n	8008306 <__libc_init_array+0x2e>
 80082fa:	bd70      	pop	{r4, r5, r6, pc}
 80082fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8008300:	4798      	blx	r3
 8008302:	3601      	adds	r6, #1
 8008304:	e7ee      	b.n	80082e4 <__libc_init_array+0xc>
 8008306:	f855 3b04 	ldr.w	r3, [r5], #4
 800830a:	4798      	blx	r3
 800830c:	3601      	adds	r6, #1
 800830e:	e7f2      	b.n	80082f6 <__libc_init_array+0x1e>
 8008310:	080088dc 	.word	0x080088dc
 8008314:	080088dc 	.word	0x080088dc
 8008318:	080088dc 	.word	0x080088dc
 800831c:	080088e0 	.word	0x080088e0

08008320 <__retarget_lock_acquire_recursive>:
 8008320:	4770      	bx	lr

08008322 <__retarget_lock_release_recursive>:
 8008322:	4770      	bx	lr

08008324 <memcpy>:
 8008324:	440a      	add	r2, r1
 8008326:	4291      	cmp	r1, r2
 8008328:	f100 33ff 	add.w	r3, r0, #4294967295
 800832c:	d100      	bne.n	8008330 <memcpy+0xc>
 800832e:	4770      	bx	lr
 8008330:	b510      	push	{r4, lr}
 8008332:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008336:	f803 4f01 	strb.w	r4, [r3, #1]!
 800833a:	4291      	cmp	r1, r2
 800833c:	d1f9      	bne.n	8008332 <memcpy+0xe>
 800833e:	bd10      	pop	{r4, pc}

08008340 <_free_r>:
 8008340:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008342:	2900      	cmp	r1, #0
 8008344:	d044      	beq.n	80083d0 <_free_r+0x90>
 8008346:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800834a:	9001      	str	r0, [sp, #4]
 800834c:	2b00      	cmp	r3, #0
 800834e:	f1a1 0404 	sub.w	r4, r1, #4
 8008352:	bfb8      	it	lt
 8008354:	18e4      	addlt	r4, r4, r3
 8008356:	f7ff ff3f 	bl	80081d8 <__malloc_lock>
 800835a:	4a1e      	ldr	r2, [pc, #120]	; (80083d4 <_free_r+0x94>)
 800835c:	9801      	ldr	r0, [sp, #4]
 800835e:	6813      	ldr	r3, [r2, #0]
 8008360:	b933      	cbnz	r3, 8008370 <_free_r+0x30>
 8008362:	6063      	str	r3, [r4, #4]
 8008364:	6014      	str	r4, [r2, #0]
 8008366:	b003      	add	sp, #12
 8008368:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800836c:	f7ff bf3a 	b.w	80081e4 <__malloc_unlock>
 8008370:	42a3      	cmp	r3, r4
 8008372:	d908      	bls.n	8008386 <_free_r+0x46>
 8008374:	6825      	ldr	r5, [r4, #0]
 8008376:	1961      	adds	r1, r4, r5
 8008378:	428b      	cmp	r3, r1
 800837a:	bf01      	itttt	eq
 800837c:	6819      	ldreq	r1, [r3, #0]
 800837e:	685b      	ldreq	r3, [r3, #4]
 8008380:	1949      	addeq	r1, r1, r5
 8008382:	6021      	streq	r1, [r4, #0]
 8008384:	e7ed      	b.n	8008362 <_free_r+0x22>
 8008386:	461a      	mov	r2, r3
 8008388:	685b      	ldr	r3, [r3, #4]
 800838a:	b10b      	cbz	r3, 8008390 <_free_r+0x50>
 800838c:	42a3      	cmp	r3, r4
 800838e:	d9fa      	bls.n	8008386 <_free_r+0x46>
 8008390:	6811      	ldr	r1, [r2, #0]
 8008392:	1855      	adds	r5, r2, r1
 8008394:	42a5      	cmp	r5, r4
 8008396:	d10b      	bne.n	80083b0 <_free_r+0x70>
 8008398:	6824      	ldr	r4, [r4, #0]
 800839a:	4421      	add	r1, r4
 800839c:	1854      	adds	r4, r2, r1
 800839e:	42a3      	cmp	r3, r4
 80083a0:	6011      	str	r1, [r2, #0]
 80083a2:	d1e0      	bne.n	8008366 <_free_r+0x26>
 80083a4:	681c      	ldr	r4, [r3, #0]
 80083a6:	685b      	ldr	r3, [r3, #4]
 80083a8:	6053      	str	r3, [r2, #4]
 80083aa:	440c      	add	r4, r1
 80083ac:	6014      	str	r4, [r2, #0]
 80083ae:	e7da      	b.n	8008366 <_free_r+0x26>
 80083b0:	d902      	bls.n	80083b8 <_free_r+0x78>
 80083b2:	230c      	movs	r3, #12
 80083b4:	6003      	str	r3, [r0, #0]
 80083b6:	e7d6      	b.n	8008366 <_free_r+0x26>
 80083b8:	6825      	ldr	r5, [r4, #0]
 80083ba:	1961      	adds	r1, r4, r5
 80083bc:	428b      	cmp	r3, r1
 80083be:	bf04      	itt	eq
 80083c0:	6819      	ldreq	r1, [r3, #0]
 80083c2:	685b      	ldreq	r3, [r3, #4]
 80083c4:	6063      	str	r3, [r4, #4]
 80083c6:	bf04      	itt	eq
 80083c8:	1949      	addeq	r1, r1, r5
 80083ca:	6021      	streq	r1, [r4, #0]
 80083cc:	6054      	str	r4, [r2, #4]
 80083ce:	e7ca      	b.n	8008366 <_free_r+0x26>
 80083d0:	b003      	add	sp, #12
 80083d2:	bd30      	pop	{r4, r5, pc}
 80083d4:	20001c90 	.word	0x20001c90

080083d8 <_init>:
 80083d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80083da:	bf00      	nop
 80083dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80083de:	bc08      	pop	{r3}
 80083e0:	469e      	mov	lr, r3
 80083e2:	4770      	bx	lr

080083e4 <_fini>:
 80083e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80083e6:	bf00      	nop
 80083e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80083ea:	bc08      	pop	{r3}
 80083ec:	469e      	mov	lr, r3
 80083ee:	4770      	bx	lr
