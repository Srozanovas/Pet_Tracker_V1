
Pet_Tracker.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000079d0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f0  08007b60  08007b60  00017b60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007c50  08007c50  00020084  2**0
                  CONTENTS
  4 .ARM          00000008  08007c50  08007c50  00017c50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007c58  08007c58  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007c58  08007c58  00017c58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007c5c  08007c5c  00017c5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  08007c60  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001bf0  20000084  08007ce4  00020084  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001c74  08007ce4  00021c74  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 12 .debug_info   00020b8c  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003d75  00000000  00000000  00040c40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001a70  00000000  00000000  000449b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001908  00000000  00000000  00046428  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003c7a  00000000  00000000  00047d30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001dcd7  00000000  00000000  0004b9aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e1f80  00000000  00000000  00069681  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0014b601  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007378  00000000  00000000  0014b654  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000084 	.word	0x20000084
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007b48 	.word	0x08007b48

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000088 	.word	0x20000088
 80001cc:	08007b48 	.word	0x08007b48

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b974 	b.w	80004d0 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	4604      	mov	r4, r0
 8000208:	468e      	mov	lr, r1
 800020a:	2b00      	cmp	r3, #0
 800020c:	d14d      	bne.n	80002aa <__udivmoddi4+0xaa>
 800020e:	428a      	cmp	r2, r1
 8000210:	4694      	mov	ip, r2
 8000212:	d969      	bls.n	80002e8 <__udivmoddi4+0xe8>
 8000214:	fab2 f282 	clz	r2, r2
 8000218:	b152      	cbz	r2, 8000230 <__udivmoddi4+0x30>
 800021a:	fa01 f302 	lsl.w	r3, r1, r2
 800021e:	f1c2 0120 	rsb	r1, r2, #32
 8000222:	fa20 f101 	lsr.w	r1, r0, r1
 8000226:	fa0c fc02 	lsl.w	ip, ip, r2
 800022a:	ea41 0e03 	orr.w	lr, r1, r3
 800022e:	4094      	lsls	r4, r2
 8000230:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000234:	0c21      	lsrs	r1, r4, #16
 8000236:	fbbe f6f8 	udiv	r6, lr, r8
 800023a:	fa1f f78c 	uxth.w	r7, ip
 800023e:	fb08 e316 	mls	r3, r8, r6, lr
 8000242:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000246:	fb06 f107 	mul.w	r1, r6, r7
 800024a:	4299      	cmp	r1, r3
 800024c:	d90a      	bls.n	8000264 <__udivmoddi4+0x64>
 800024e:	eb1c 0303 	adds.w	r3, ip, r3
 8000252:	f106 30ff 	add.w	r0, r6, #4294967295
 8000256:	f080 811f 	bcs.w	8000498 <__udivmoddi4+0x298>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 811c 	bls.w	8000498 <__udivmoddi4+0x298>
 8000260:	3e02      	subs	r6, #2
 8000262:	4463      	add	r3, ip
 8000264:	1a5b      	subs	r3, r3, r1
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb3 f0f8 	udiv	r0, r3, r8
 800026c:	fb08 3310 	mls	r3, r8, r0, r3
 8000270:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000274:	fb00 f707 	mul.w	r7, r0, r7
 8000278:	42a7      	cmp	r7, r4
 800027a:	d90a      	bls.n	8000292 <__udivmoddi4+0x92>
 800027c:	eb1c 0404 	adds.w	r4, ip, r4
 8000280:	f100 33ff 	add.w	r3, r0, #4294967295
 8000284:	f080 810a 	bcs.w	800049c <__udivmoddi4+0x29c>
 8000288:	42a7      	cmp	r7, r4
 800028a:	f240 8107 	bls.w	800049c <__udivmoddi4+0x29c>
 800028e:	4464      	add	r4, ip
 8000290:	3802      	subs	r0, #2
 8000292:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000296:	1be4      	subs	r4, r4, r7
 8000298:	2600      	movs	r6, #0
 800029a:	b11d      	cbz	r5, 80002a4 <__udivmoddi4+0xa4>
 800029c:	40d4      	lsrs	r4, r2
 800029e:	2300      	movs	r3, #0
 80002a0:	e9c5 4300 	strd	r4, r3, [r5]
 80002a4:	4631      	mov	r1, r6
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d909      	bls.n	80002c2 <__udivmoddi4+0xc2>
 80002ae:	2d00      	cmp	r5, #0
 80002b0:	f000 80ef 	beq.w	8000492 <__udivmoddi4+0x292>
 80002b4:	2600      	movs	r6, #0
 80002b6:	e9c5 0100 	strd	r0, r1, [r5]
 80002ba:	4630      	mov	r0, r6
 80002bc:	4631      	mov	r1, r6
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	fab3 f683 	clz	r6, r3
 80002c6:	2e00      	cmp	r6, #0
 80002c8:	d14a      	bne.n	8000360 <__udivmoddi4+0x160>
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xd4>
 80002ce:	4282      	cmp	r2, r0
 80002d0:	f200 80f9 	bhi.w	80004c6 <__udivmoddi4+0x2c6>
 80002d4:	1a84      	subs	r4, r0, r2
 80002d6:	eb61 0303 	sbc.w	r3, r1, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	469e      	mov	lr, r3
 80002de:	2d00      	cmp	r5, #0
 80002e0:	d0e0      	beq.n	80002a4 <__udivmoddi4+0xa4>
 80002e2:	e9c5 4e00 	strd	r4, lr, [r5]
 80002e6:	e7dd      	b.n	80002a4 <__udivmoddi4+0xa4>
 80002e8:	b902      	cbnz	r2, 80002ec <__udivmoddi4+0xec>
 80002ea:	deff      	udf	#255	; 0xff
 80002ec:	fab2 f282 	clz	r2, r2
 80002f0:	2a00      	cmp	r2, #0
 80002f2:	f040 8092 	bne.w	800041a <__udivmoddi4+0x21a>
 80002f6:	eba1 010c 	sub.w	r1, r1, ip
 80002fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fe:	fa1f fe8c 	uxth.w	lr, ip
 8000302:	2601      	movs	r6, #1
 8000304:	0c20      	lsrs	r0, r4, #16
 8000306:	fbb1 f3f7 	udiv	r3, r1, r7
 800030a:	fb07 1113 	mls	r1, r7, r3, r1
 800030e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000312:	fb0e f003 	mul.w	r0, lr, r3
 8000316:	4288      	cmp	r0, r1
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x12c>
 800031a:	eb1c 0101 	adds.w	r1, ip, r1
 800031e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x12a>
 8000324:	4288      	cmp	r0, r1
 8000326:	f200 80cb 	bhi.w	80004c0 <__udivmoddi4+0x2c0>
 800032a:	4643      	mov	r3, r8
 800032c:	1a09      	subs	r1, r1, r0
 800032e:	b2a4      	uxth	r4, r4
 8000330:	fbb1 f0f7 	udiv	r0, r1, r7
 8000334:	fb07 1110 	mls	r1, r7, r0, r1
 8000338:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800033c:	fb0e fe00 	mul.w	lr, lr, r0
 8000340:	45a6      	cmp	lr, r4
 8000342:	d908      	bls.n	8000356 <__udivmoddi4+0x156>
 8000344:	eb1c 0404 	adds.w	r4, ip, r4
 8000348:	f100 31ff 	add.w	r1, r0, #4294967295
 800034c:	d202      	bcs.n	8000354 <__udivmoddi4+0x154>
 800034e:	45a6      	cmp	lr, r4
 8000350:	f200 80bb 	bhi.w	80004ca <__udivmoddi4+0x2ca>
 8000354:	4608      	mov	r0, r1
 8000356:	eba4 040e 	sub.w	r4, r4, lr
 800035a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800035e:	e79c      	b.n	800029a <__udivmoddi4+0x9a>
 8000360:	f1c6 0720 	rsb	r7, r6, #32
 8000364:	40b3      	lsls	r3, r6
 8000366:	fa22 fc07 	lsr.w	ip, r2, r7
 800036a:	ea4c 0c03 	orr.w	ip, ip, r3
 800036e:	fa20 f407 	lsr.w	r4, r0, r7
 8000372:	fa01 f306 	lsl.w	r3, r1, r6
 8000376:	431c      	orrs	r4, r3
 8000378:	40f9      	lsrs	r1, r7
 800037a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800037e:	fa00 f306 	lsl.w	r3, r0, r6
 8000382:	fbb1 f8f9 	udiv	r8, r1, r9
 8000386:	0c20      	lsrs	r0, r4, #16
 8000388:	fa1f fe8c 	uxth.w	lr, ip
 800038c:	fb09 1118 	mls	r1, r9, r8, r1
 8000390:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000394:	fb08 f00e 	mul.w	r0, r8, lr
 8000398:	4288      	cmp	r0, r1
 800039a:	fa02 f206 	lsl.w	r2, r2, r6
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b8>
 80003a0:	eb1c 0101 	adds.w	r1, ip, r1
 80003a4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a8:	f080 8088 	bcs.w	80004bc <__udivmoddi4+0x2bc>
 80003ac:	4288      	cmp	r0, r1
 80003ae:	f240 8085 	bls.w	80004bc <__udivmoddi4+0x2bc>
 80003b2:	f1a8 0802 	sub.w	r8, r8, #2
 80003b6:	4461      	add	r1, ip
 80003b8:	1a09      	subs	r1, r1, r0
 80003ba:	b2a4      	uxth	r4, r4
 80003bc:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c0:	fb09 1110 	mls	r1, r9, r0, r1
 80003c4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003cc:	458e      	cmp	lr, r1
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1e2>
 80003d0:	eb1c 0101 	adds.w	r1, ip, r1
 80003d4:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d8:	d26c      	bcs.n	80004b4 <__udivmoddi4+0x2b4>
 80003da:	458e      	cmp	lr, r1
 80003dc:	d96a      	bls.n	80004b4 <__udivmoddi4+0x2b4>
 80003de:	3802      	subs	r0, #2
 80003e0:	4461      	add	r1, ip
 80003e2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003e6:	fba0 9402 	umull	r9, r4, r0, r2
 80003ea:	eba1 010e 	sub.w	r1, r1, lr
 80003ee:	42a1      	cmp	r1, r4
 80003f0:	46c8      	mov	r8, r9
 80003f2:	46a6      	mov	lr, r4
 80003f4:	d356      	bcc.n	80004a4 <__udivmoddi4+0x2a4>
 80003f6:	d053      	beq.n	80004a0 <__udivmoddi4+0x2a0>
 80003f8:	b15d      	cbz	r5, 8000412 <__udivmoddi4+0x212>
 80003fa:	ebb3 0208 	subs.w	r2, r3, r8
 80003fe:	eb61 010e 	sbc.w	r1, r1, lr
 8000402:	fa01 f707 	lsl.w	r7, r1, r7
 8000406:	fa22 f306 	lsr.w	r3, r2, r6
 800040a:	40f1      	lsrs	r1, r6
 800040c:	431f      	orrs	r7, r3
 800040e:	e9c5 7100 	strd	r7, r1, [r5]
 8000412:	2600      	movs	r6, #0
 8000414:	4631      	mov	r1, r6
 8000416:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041a:	f1c2 0320 	rsb	r3, r2, #32
 800041e:	40d8      	lsrs	r0, r3
 8000420:	fa0c fc02 	lsl.w	ip, ip, r2
 8000424:	fa21 f303 	lsr.w	r3, r1, r3
 8000428:	4091      	lsls	r1, r2
 800042a:	4301      	orrs	r1, r0
 800042c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000430:	fa1f fe8c 	uxth.w	lr, ip
 8000434:	fbb3 f0f7 	udiv	r0, r3, r7
 8000438:	fb07 3610 	mls	r6, r7, r0, r3
 800043c:	0c0b      	lsrs	r3, r1, #16
 800043e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000442:	fb00 f60e 	mul.w	r6, r0, lr
 8000446:	429e      	cmp	r6, r3
 8000448:	fa04 f402 	lsl.w	r4, r4, r2
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x260>
 800044e:	eb1c 0303 	adds.w	r3, ip, r3
 8000452:	f100 38ff 	add.w	r8, r0, #4294967295
 8000456:	d22f      	bcs.n	80004b8 <__udivmoddi4+0x2b8>
 8000458:	429e      	cmp	r6, r3
 800045a:	d92d      	bls.n	80004b8 <__udivmoddi4+0x2b8>
 800045c:	3802      	subs	r0, #2
 800045e:	4463      	add	r3, ip
 8000460:	1b9b      	subs	r3, r3, r6
 8000462:	b289      	uxth	r1, r1
 8000464:	fbb3 f6f7 	udiv	r6, r3, r7
 8000468:	fb07 3316 	mls	r3, r7, r6, r3
 800046c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000470:	fb06 f30e 	mul.w	r3, r6, lr
 8000474:	428b      	cmp	r3, r1
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x28a>
 8000478:	eb1c 0101 	adds.w	r1, ip, r1
 800047c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000480:	d216      	bcs.n	80004b0 <__udivmoddi4+0x2b0>
 8000482:	428b      	cmp	r3, r1
 8000484:	d914      	bls.n	80004b0 <__udivmoddi4+0x2b0>
 8000486:	3e02      	subs	r6, #2
 8000488:	4461      	add	r1, ip
 800048a:	1ac9      	subs	r1, r1, r3
 800048c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000490:	e738      	b.n	8000304 <__udivmoddi4+0x104>
 8000492:	462e      	mov	r6, r5
 8000494:	4628      	mov	r0, r5
 8000496:	e705      	b.n	80002a4 <__udivmoddi4+0xa4>
 8000498:	4606      	mov	r6, r0
 800049a:	e6e3      	b.n	8000264 <__udivmoddi4+0x64>
 800049c:	4618      	mov	r0, r3
 800049e:	e6f8      	b.n	8000292 <__udivmoddi4+0x92>
 80004a0:	454b      	cmp	r3, r9
 80004a2:	d2a9      	bcs.n	80003f8 <__udivmoddi4+0x1f8>
 80004a4:	ebb9 0802 	subs.w	r8, r9, r2
 80004a8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004ac:	3801      	subs	r0, #1
 80004ae:	e7a3      	b.n	80003f8 <__udivmoddi4+0x1f8>
 80004b0:	4646      	mov	r6, r8
 80004b2:	e7ea      	b.n	800048a <__udivmoddi4+0x28a>
 80004b4:	4620      	mov	r0, r4
 80004b6:	e794      	b.n	80003e2 <__udivmoddi4+0x1e2>
 80004b8:	4640      	mov	r0, r8
 80004ba:	e7d1      	b.n	8000460 <__udivmoddi4+0x260>
 80004bc:	46d0      	mov	r8, sl
 80004be:	e77b      	b.n	80003b8 <__udivmoddi4+0x1b8>
 80004c0:	3b02      	subs	r3, #2
 80004c2:	4461      	add	r1, ip
 80004c4:	e732      	b.n	800032c <__udivmoddi4+0x12c>
 80004c6:	4630      	mov	r0, r6
 80004c8:	e709      	b.n	80002de <__udivmoddi4+0xde>
 80004ca:	4464      	add	r4, ip
 80004cc:	3802      	subs	r0, #2
 80004ce:	e742      	b.n	8000356 <__udivmoddi4+0x156>

080004d0 <__aeabi_idiv0>:
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop

080004d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d8:	f000 fcaf 	bl	8000e3a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004dc:	f000 f81e 	bl	800051c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004e0:	f000 f93e 	bl	8000760 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80004e4:	f000 f8dc 	bl	80006a0 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 80004e8:	f000 f85e 	bl	80005a8 <MX_I2C1_Init>
  MX_I2C2_Init();
 80004ec:	f000 f89a 	bl	8000624 <MX_I2C2_Init>
  MX_USART2_UART_Init();
 80004f0:	f000 f906 	bl	8000700 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80004f4:	f004 fcb0 	bl	8004e58 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80004f8:	4a05      	ldr	r2, [pc, #20]	; (8000510 <main+0x3c>)
 80004fa:	2100      	movs	r1, #0
 80004fc:	4805      	ldr	r0, [pc, #20]	; (8000514 <main+0x40>)
 80004fe:	f004 fcf5 	bl	8004eec <osThreadNew>
 8000502:	4603      	mov	r3, r0
 8000504:	4a04      	ldr	r2, [pc, #16]	; (8000518 <main+0x44>)
 8000506:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000508:	f004 fcca 	bl	8004ea0 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800050c:	e7fe      	b.n	800050c <main+0x38>
 800050e:	bf00      	nop
 8000510:	08007b84 	.word	0x08007b84
 8000514:	0800086d 	.word	0x0800086d
 8000518:	20000250 	.word	0x20000250

0800051c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	b096      	sub	sp, #88	; 0x58
 8000520:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000522:	f107 0314 	add.w	r3, r7, #20
 8000526:	2244      	movs	r2, #68	; 0x44
 8000528:	2100      	movs	r1, #0
 800052a:	4618      	mov	r0, r3
 800052c:	f007 fa42 	bl	80079b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000530:	463b      	mov	r3, r7
 8000532:	2200      	movs	r2, #0
 8000534:	601a      	str	r2, [r3, #0]
 8000536:	605a      	str	r2, [r3, #4]
 8000538:	609a      	str	r2, [r3, #8]
 800053a:	60da      	str	r2, [r3, #12]
 800053c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800053e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000542:	f001 fe9b 	bl	800227c <HAL_PWREx_ControlVoltageScaling>
 8000546:	4603      	mov	r3, r0
 8000548:	2b00      	cmp	r3, #0
 800054a:	d001      	beq.n	8000550 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800054c:	f000 f9b8 	bl	80008c0 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000550:	2301      	movs	r3, #1
 8000552:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000554:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000558:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800055a:	2300      	movs	r3, #0
 800055c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800055e:	f107 0314 	add.w	r3, r7, #20
 8000562:	4618      	mov	r0, r3
 8000564:	f001 fee0 	bl	8002328 <HAL_RCC_OscConfig>
 8000568:	4603      	mov	r3, r0
 800056a:	2b00      	cmp	r3, #0
 800056c:	d001      	beq.n	8000572 <SystemClock_Config+0x56>
  {
    Error_Handler();
 800056e:	f000 f9a7 	bl	80008c0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000572:	230f      	movs	r3, #15
 8000574:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8000576:	2302      	movs	r3, #2
 8000578:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800057a:	2300      	movs	r3, #0
 800057c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800057e:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8000582:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8000584:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8000588:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800058a:	463b      	mov	r3, r7
 800058c:	2100      	movs	r1, #0
 800058e:	4618      	mov	r0, r3
 8000590:	f002 fade 	bl	8002b50 <HAL_RCC_ClockConfig>
 8000594:	4603      	mov	r3, r0
 8000596:	2b00      	cmp	r3, #0
 8000598:	d001      	beq.n	800059e <SystemClock_Config+0x82>
  {
    Error_Handler();
 800059a:	f000 f991 	bl	80008c0 <Error_Handler>
  }
}
 800059e:	bf00      	nop
 80005a0:	3758      	adds	r7, #88	; 0x58
 80005a2:	46bd      	mov	sp, r7
 80005a4:	bd80      	pop	{r7, pc}
	...

080005a8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80005ac:	4b1b      	ldr	r3, [pc, #108]	; (800061c <MX_I2C1_Init+0x74>)
 80005ae:	4a1c      	ldr	r2, [pc, #112]	; (8000620 <MX_I2C1_Init+0x78>)
 80005b0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00000E14;
 80005b2:	4b1a      	ldr	r3, [pc, #104]	; (800061c <MX_I2C1_Init+0x74>)
 80005b4:	f640 6214 	movw	r2, #3604	; 0xe14
 80005b8:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80005ba:	4b18      	ldr	r3, [pc, #96]	; (800061c <MX_I2C1_Init+0x74>)
 80005bc:	2200      	movs	r2, #0
 80005be:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80005c0:	4b16      	ldr	r3, [pc, #88]	; (800061c <MX_I2C1_Init+0x74>)
 80005c2:	2201      	movs	r2, #1
 80005c4:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80005c6:	4b15      	ldr	r3, [pc, #84]	; (800061c <MX_I2C1_Init+0x74>)
 80005c8:	2200      	movs	r2, #0
 80005ca:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80005cc:	4b13      	ldr	r3, [pc, #76]	; (800061c <MX_I2C1_Init+0x74>)
 80005ce:	2200      	movs	r2, #0
 80005d0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80005d2:	4b12      	ldr	r3, [pc, #72]	; (800061c <MX_I2C1_Init+0x74>)
 80005d4:	2200      	movs	r2, #0
 80005d6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80005d8:	4b10      	ldr	r3, [pc, #64]	; (800061c <MX_I2C1_Init+0x74>)
 80005da:	2200      	movs	r2, #0
 80005dc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80005de:	4b0f      	ldr	r3, [pc, #60]	; (800061c <MX_I2C1_Init+0x74>)
 80005e0:	2200      	movs	r2, #0
 80005e2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80005e4:	480d      	ldr	r0, [pc, #52]	; (800061c <MX_I2C1_Init+0x74>)
 80005e6:	f000 ff7d 	bl	80014e4 <HAL_I2C_Init>
 80005ea:	4603      	mov	r3, r0
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	d001      	beq.n	80005f4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80005f0:	f000 f966 	bl	80008c0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80005f4:	2100      	movs	r1, #0
 80005f6:	4809      	ldr	r0, [pc, #36]	; (800061c <MX_I2C1_Init+0x74>)
 80005f8:	f001 fd9b 	bl	8002132 <HAL_I2CEx_ConfigAnalogFilter>
 80005fc:	4603      	mov	r3, r0
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d001      	beq.n	8000606 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8000602:	f000 f95d 	bl	80008c0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000606:	2100      	movs	r1, #0
 8000608:	4804      	ldr	r0, [pc, #16]	; (800061c <MX_I2C1_Init+0x74>)
 800060a:	f001 fddd 	bl	80021c8 <HAL_I2CEx_ConfigDigitalFilter>
 800060e:	4603      	mov	r3, r0
 8000610:	2b00      	cmp	r3, #0
 8000612:	d001      	beq.n	8000618 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8000614:	f000 f954 	bl	80008c0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000618:	bf00      	nop
 800061a:	bd80      	pop	{r7, pc}
 800061c:	200000a0 	.word	0x200000a0
 8000620:	40005400 	.word	0x40005400

08000624 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000628:	4b1b      	ldr	r3, [pc, #108]	; (8000698 <MX_I2C2_Init+0x74>)
 800062a:	4a1c      	ldr	r2, [pc, #112]	; (800069c <MX_I2C2_Init+0x78>)
 800062c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00000E14;
 800062e:	4b1a      	ldr	r3, [pc, #104]	; (8000698 <MX_I2C2_Init+0x74>)
 8000630:	f640 6214 	movw	r2, #3604	; 0xe14
 8000634:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000636:	4b18      	ldr	r3, [pc, #96]	; (8000698 <MX_I2C2_Init+0x74>)
 8000638:	2200      	movs	r2, #0
 800063a:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800063c:	4b16      	ldr	r3, [pc, #88]	; (8000698 <MX_I2C2_Init+0x74>)
 800063e:	2201      	movs	r2, #1
 8000640:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000642:	4b15      	ldr	r3, [pc, #84]	; (8000698 <MX_I2C2_Init+0x74>)
 8000644:	2200      	movs	r2, #0
 8000646:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000648:	4b13      	ldr	r3, [pc, #76]	; (8000698 <MX_I2C2_Init+0x74>)
 800064a:	2200      	movs	r2, #0
 800064c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800064e:	4b12      	ldr	r3, [pc, #72]	; (8000698 <MX_I2C2_Init+0x74>)
 8000650:	2200      	movs	r2, #0
 8000652:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000654:	4b10      	ldr	r3, [pc, #64]	; (8000698 <MX_I2C2_Init+0x74>)
 8000656:	2200      	movs	r2, #0
 8000658:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800065a:	4b0f      	ldr	r3, [pc, #60]	; (8000698 <MX_I2C2_Init+0x74>)
 800065c:	2200      	movs	r2, #0
 800065e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000660:	480d      	ldr	r0, [pc, #52]	; (8000698 <MX_I2C2_Init+0x74>)
 8000662:	f000 ff3f 	bl	80014e4 <HAL_I2C_Init>
 8000666:	4603      	mov	r3, r0
 8000668:	2b00      	cmp	r3, #0
 800066a:	d001      	beq.n	8000670 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 800066c:	f000 f928 	bl	80008c0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000670:	2100      	movs	r1, #0
 8000672:	4809      	ldr	r0, [pc, #36]	; (8000698 <MX_I2C2_Init+0x74>)
 8000674:	f001 fd5d 	bl	8002132 <HAL_I2CEx_ConfigAnalogFilter>
 8000678:	4603      	mov	r3, r0
 800067a:	2b00      	cmp	r3, #0
 800067c:	d001      	beq.n	8000682 <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 800067e:	f000 f91f 	bl	80008c0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000682:	2100      	movs	r1, #0
 8000684:	4804      	ldr	r0, [pc, #16]	; (8000698 <MX_I2C2_Init+0x74>)
 8000686:	f001 fd9f 	bl	80021c8 <HAL_I2CEx_ConfigDigitalFilter>
 800068a:	4603      	mov	r3, r0
 800068c:	2b00      	cmp	r3, #0
 800068e:	d001      	beq.n	8000694 <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 8000690:	f000 f916 	bl	80008c0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000694:	bf00      	nop
 8000696:	bd80      	pop	{r7, pc}
 8000698:	200000f4 	.word	0x200000f4
 800069c:	40005800 	.word	0x40005800

080006a0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80006a4:	4b14      	ldr	r3, [pc, #80]	; (80006f8 <MX_USART1_UART_Init+0x58>)
 80006a6:	4a15      	ldr	r2, [pc, #84]	; (80006fc <MX_USART1_UART_Init+0x5c>)
 80006a8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80006aa:	4b13      	ldr	r3, [pc, #76]	; (80006f8 <MX_USART1_UART_Init+0x58>)
 80006ac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006b0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80006b2:	4b11      	ldr	r3, [pc, #68]	; (80006f8 <MX_USART1_UART_Init+0x58>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80006b8:	4b0f      	ldr	r3, [pc, #60]	; (80006f8 <MX_USART1_UART_Init+0x58>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80006be:	4b0e      	ldr	r3, [pc, #56]	; (80006f8 <MX_USART1_UART_Init+0x58>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80006c4:	4b0c      	ldr	r3, [pc, #48]	; (80006f8 <MX_USART1_UART_Init+0x58>)
 80006c6:	220c      	movs	r2, #12
 80006c8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006ca:	4b0b      	ldr	r3, [pc, #44]	; (80006f8 <MX_USART1_UART_Init+0x58>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80006d0:	4b09      	ldr	r3, [pc, #36]	; (80006f8 <MX_USART1_UART_Init+0x58>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006d6:	4b08      	ldr	r3, [pc, #32]	; (80006f8 <MX_USART1_UART_Init+0x58>)
 80006d8:	2200      	movs	r2, #0
 80006da:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006dc:	4b06      	ldr	r3, [pc, #24]	; (80006f8 <MX_USART1_UART_Init+0x58>)
 80006de:	2200      	movs	r2, #0
 80006e0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80006e2:	4805      	ldr	r0, [pc, #20]	; (80006f8 <MX_USART1_UART_Init+0x58>)
 80006e4:	f003 fa44 	bl	8003b70 <HAL_UART_Init>
 80006e8:	4603      	mov	r3, r0
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d001      	beq.n	80006f2 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80006ee:	f000 f8e7 	bl	80008c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80006f2:	bf00      	nop
 80006f4:	bd80      	pop	{r7, pc}
 80006f6:	bf00      	nop
 80006f8:	20000148 	.word	0x20000148
 80006fc:	40013800 	.word	0x40013800

08000700 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000704:	4b14      	ldr	r3, [pc, #80]	; (8000758 <MX_USART2_UART_Init+0x58>)
 8000706:	4a15      	ldr	r2, [pc, #84]	; (800075c <MX_USART2_UART_Init+0x5c>)
 8000708:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800070a:	4b13      	ldr	r3, [pc, #76]	; (8000758 <MX_USART2_UART_Init+0x58>)
 800070c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000710:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000712:	4b11      	ldr	r3, [pc, #68]	; (8000758 <MX_USART2_UART_Init+0x58>)
 8000714:	2200      	movs	r2, #0
 8000716:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000718:	4b0f      	ldr	r3, [pc, #60]	; (8000758 <MX_USART2_UART_Init+0x58>)
 800071a:	2200      	movs	r2, #0
 800071c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800071e:	4b0e      	ldr	r3, [pc, #56]	; (8000758 <MX_USART2_UART_Init+0x58>)
 8000720:	2200      	movs	r2, #0
 8000722:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000724:	4b0c      	ldr	r3, [pc, #48]	; (8000758 <MX_USART2_UART_Init+0x58>)
 8000726:	220c      	movs	r2, #12
 8000728:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800072a:	4b0b      	ldr	r3, [pc, #44]	; (8000758 <MX_USART2_UART_Init+0x58>)
 800072c:	2200      	movs	r2, #0
 800072e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000730:	4b09      	ldr	r3, [pc, #36]	; (8000758 <MX_USART2_UART_Init+0x58>)
 8000732:	2200      	movs	r2, #0
 8000734:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000736:	4b08      	ldr	r3, [pc, #32]	; (8000758 <MX_USART2_UART_Init+0x58>)
 8000738:	2200      	movs	r2, #0
 800073a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800073c:	4b06      	ldr	r3, [pc, #24]	; (8000758 <MX_USART2_UART_Init+0x58>)
 800073e:	2200      	movs	r2, #0
 8000740:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000742:	4805      	ldr	r0, [pc, #20]	; (8000758 <MX_USART2_UART_Init+0x58>)
 8000744:	f003 fa14 	bl	8003b70 <HAL_UART_Init>
 8000748:	4603      	mov	r3, r0
 800074a:	2b00      	cmp	r3, #0
 800074c:	d001      	beq.n	8000752 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800074e:	f000 f8b7 	bl	80008c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000752:	bf00      	nop
 8000754:	bd80      	pop	{r7, pc}
 8000756:	bf00      	nop
 8000758:	200001cc 	.word	0x200001cc
 800075c:	40004400 	.word	0x40004400

08000760 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b08a      	sub	sp, #40	; 0x28
 8000764:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000766:	f107 0314 	add.w	r3, r7, #20
 800076a:	2200      	movs	r2, #0
 800076c:	601a      	str	r2, [r3, #0]
 800076e:	605a      	str	r2, [r3, #4]
 8000770:	609a      	str	r2, [r3, #8]
 8000772:	60da      	str	r2, [r3, #12]
 8000774:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000776:	4b3a      	ldr	r3, [pc, #232]	; (8000860 <MX_GPIO_Init+0x100>)
 8000778:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800077a:	4a39      	ldr	r2, [pc, #228]	; (8000860 <MX_GPIO_Init+0x100>)
 800077c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000780:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000782:	4b37      	ldr	r3, [pc, #220]	; (8000860 <MX_GPIO_Init+0x100>)
 8000784:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000786:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800078a:	613b      	str	r3, [r7, #16]
 800078c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800078e:	4b34      	ldr	r3, [pc, #208]	; (8000860 <MX_GPIO_Init+0x100>)
 8000790:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000792:	4a33      	ldr	r2, [pc, #204]	; (8000860 <MX_GPIO_Init+0x100>)
 8000794:	f043 0301 	orr.w	r3, r3, #1
 8000798:	64d3      	str	r3, [r2, #76]	; 0x4c
 800079a:	4b31      	ldr	r3, [pc, #196]	; (8000860 <MX_GPIO_Init+0x100>)
 800079c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800079e:	f003 0301 	and.w	r3, r3, #1
 80007a2:	60fb      	str	r3, [r7, #12]
 80007a4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007a6:	4b2e      	ldr	r3, [pc, #184]	; (8000860 <MX_GPIO_Init+0x100>)
 80007a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007aa:	4a2d      	ldr	r2, [pc, #180]	; (8000860 <MX_GPIO_Init+0x100>)
 80007ac:	f043 0304 	orr.w	r3, r3, #4
 80007b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007b2:	4b2b      	ldr	r3, [pc, #172]	; (8000860 <MX_GPIO_Init+0x100>)
 80007b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007b6:	f003 0304 	and.w	r3, r3, #4
 80007ba:	60bb      	str	r3, [r7, #8]
 80007bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007be:	4b28      	ldr	r3, [pc, #160]	; (8000860 <MX_GPIO_Init+0x100>)
 80007c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007c2:	4a27      	ldr	r2, [pc, #156]	; (8000860 <MX_GPIO_Init+0x100>)
 80007c4:	f043 0302 	orr.w	r3, r3, #2
 80007c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007ca:	4b25      	ldr	r3, [pc, #148]	; (8000860 <MX_GPIO_Init+0x100>)
 80007cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007ce:	f003 0302 	and.w	r3, r3, #2
 80007d2:	607b      	str	r3, [r7, #4]
 80007d4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 80007d6:	2200      	movs	r2, #0
 80007d8:	f641 11fa 	movw	r1, #6650	; 0x19fa
 80007dc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007e0:	f000 fe4e 	bl	8001480 <HAL_GPIO_WritePin>
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_11
                          |GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 80007e4:	2200      	movs	r2, #0
 80007e6:	f44f 7174 	mov.w	r1, #976	; 0x3d0
 80007ea:	481e      	ldr	r0, [pc, #120]	; (8000864 <MX_GPIO_Init+0x104>)
 80007ec:	f000 fe48 	bl	8001480 <HAL_GPIO_WritePin>
                          |GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_12
 80007f0:	2200      	movs	r2, #0
 80007f2:	f24f 0107 	movw	r1, #61447	; 0xf007
 80007f6:	481c      	ldr	r0, [pc, #112]	; (8000868 <MX_GPIO_Init+0x108>)
 80007f8:	f000 fe42 	bl	8001480 <HAL_GPIO_WritePin>
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pins : PA1 PA3 PA4 PA5
                           PA6 PA7 PA8 PA11
                           PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 80007fc:	f641 13fa 	movw	r3, #6650	; 0x19fa
 8000800:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_11
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000802:	2301      	movs	r3, #1
 8000804:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000806:	2300      	movs	r3, #0
 8000808:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800080a:	2300      	movs	r3, #0
 800080c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800080e:	f107 0314 	add.w	r3, r7, #20
 8000812:	4619      	mov	r1, r3
 8000814:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000818:	f000 fcb8 	bl	800118c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC4 PC6 PC7 PC8
                           PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 800081c:	f44f 7374 	mov.w	r3, #976	; 0x3d0
 8000820:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000822:	2301      	movs	r3, #1
 8000824:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000826:	2300      	movs	r3, #0
 8000828:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800082a:	2300      	movs	r3, #0
 800082c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800082e:	f107 0314 	add.w	r3, r7, #20
 8000832:	4619      	mov	r1, r3
 8000834:	480b      	ldr	r0, [pc, #44]	; (8000864 <MX_GPIO_Init+0x104>)
 8000836:	f000 fca9 	bl	800118c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB12
                           PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_12
 800083a:	f24f 0307 	movw	r3, #61447	; 0xf007
 800083e:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000840:	2301      	movs	r3, #1
 8000842:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000844:	2300      	movs	r3, #0
 8000846:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000848:	2300      	movs	r3, #0
 800084a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800084c:	f107 0314 	add.w	r3, r7, #20
 8000850:	4619      	mov	r1, r3
 8000852:	4805      	ldr	r0, [pc, #20]	; (8000868 <MX_GPIO_Init+0x108>)
 8000854:	f000 fc9a 	bl	800118c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000858:	bf00      	nop
 800085a:	3728      	adds	r7, #40	; 0x28
 800085c:	46bd      	mov	sp, r7
 800085e:	bd80      	pop	{r7, pc}
 8000860:	40021000 	.word	0x40021000
 8000864:	48000800 	.word	0x48000800
 8000868:	48000400 	.word	0x48000400

0800086c <StartDefaultTask>:
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
uint8_t data[] = "Labadiena jums\n";
void StartDefaultTask(void *argument)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b082      	sub	sp, #8
 8000870:	af00      	add	r7, sp, #0
 8000872:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 8000874:	2101      	movs	r1, #1
 8000876:	4806      	ldr	r0, [pc, #24]	; (8000890 <StartDefaultTask+0x24>)
 8000878:	f000 fe1a 	bl	80014b0 <HAL_GPIO_TogglePin>
    HAL_UART_Transmit_IT(&huart1, data, sizeof(data)-1);
 800087c:	220f      	movs	r2, #15
 800087e:	4905      	ldr	r1, [pc, #20]	; (8000894 <StartDefaultTask+0x28>)
 8000880:	4805      	ldr	r0, [pc, #20]	; (8000898 <StartDefaultTask+0x2c>)
 8000882:	f003 f9c3 	bl	8003c0c <HAL_UART_Transmit_IT>
    osDelay(500);
 8000886:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800088a:	f004 fbc1 	bl	8005010 <osDelay>
    HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 800088e:	e7f1      	b.n	8000874 <StartDefaultTask+0x8>
 8000890:	48000400 	.word	0x48000400
 8000894:	20000000 	.word	0x20000000
 8000898:	20000148 	.word	0x20000148

0800089c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b082      	sub	sp, #8
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	4a04      	ldr	r2, [pc, #16]	; (80008bc <HAL_TIM_PeriodElapsedCallback+0x20>)
 80008aa:	4293      	cmp	r3, r2
 80008ac:	d101      	bne.n	80008b2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80008ae:	f000 fadd 	bl	8000e6c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80008b2:	bf00      	nop
 80008b4:	3708      	adds	r7, #8
 80008b6:	46bd      	mov	sp, r7
 80008b8:	bd80      	pop	{r7, pc}
 80008ba:	bf00      	nop
 80008bc:	40012c00 	.word	0x40012c00

080008c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008c0:	b480      	push	{r7}
 80008c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008c4:	b672      	cpsid	i
}
 80008c6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008c8:	e7fe      	b.n	80008c8 <Error_Handler+0x8>
	...

080008cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b082      	sub	sp, #8
 80008d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008d2:	4b11      	ldr	r3, [pc, #68]	; (8000918 <HAL_MspInit+0x4c>)
 80008d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008d6:	4a10      	ldr	r2, [pc, #64]	; (8000918 <HAL_MspInit+0x4c>)
 80008d8:	f043 0301 	orr.w	r3, r3, #1
 80008dc:	6613      	str	r3, [r2, #96]	; 0x60
 80008de:	4b0e      	ldr	r3, [pc, #56]	; (8000918 <HAL_MspInit+0x4c>)
 80008e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008e2:	f003 0301 	and.w	r3, r3, #1
 80008e6:	607b      	str	r3, [r7, #4]
 80008e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008ea:	4b0b      	ldr	r3, [pc, #44]	; (8000918 <HAL_MspInit+0x4c>)
 80008ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008ee:	4a0a      	ldr	r2, [pc, #40]	; (8000918 <HAL_MspInit+0x4c>)
 80008f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008f4:	6593      	str	r3, [r2, #88]	; 0x58
 80008f6:	4b08      	ldr	r3, [pc, #32]	; (8000918 <HAL_MspInit+0x4c>)
 80008f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008fe:	603b      	str	r3, [r7, #0]
 8000900:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000902:	2200      	movs	r2, #0
 8000904:	210f      	movs	r1, #15
 8000906:	f06f 0001 	mvn.w	r0, #1
 800090a:	f000 fb87 	bl	800101c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800090e:	bf00      	nop
 8000910:	3708      	adds	r7, #8
 8000912:	46bd      	mov	sp, r7
 8000914:	bd80      	pop	{r7, pc}
 8000916:	bf00      	nop
 8000918:	40021000 	.word	0x40021000

0800091c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b0a4      	sub	sp, #144	; 0x90
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000924:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000928:	2200      	movs	r2, #0
 800092a:	601a      	str	r2, [r3, #0]
 800092c:	605a      	str	r2, [r3, #4]
 800092e:	609a      	str	r2, [r3, #8]
 8000930:	60da      	str	r2, [r3, #12]
 8000932:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000934:	f107 031c 	add.w	r3, r7, #28
 8000938:	2260      	movs	r2, #96	; 0x60
 800093a:	2100      	movs	r1, #0
 800093c:	4618      	mov	r0, r3
 800093e:	f007 f839 	bl	80079b4 <memset>
  if(hi2c->Instance==I2C1)
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	4a52      	ldr	r2, [pc, #328]	; (8000a90 <HAL_I2C_MspInit+0x174>)
 8000948:	4293      	cmp	r3, r2
 800094a:	d14c      	bne.n	80009e6 <HAL_I2C_MspInit+0xca>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800094c:	2340      	movs	r3, #64	; 0x40
 800094e:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000950:	2300      	movs	r3, #0
 8000952:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000954:	f107 031c 	add.w	r3, r7, #28
 8000958:	4618      	mov	r0, r3
 800095a:	f002 fb4d 	bl	8002ff8 <HAL_RCCEx_PeriphCLKConfig>
 800095e:	4603      	mov	r3, r0
 8000960:	2b00      	cmp	r3, #0
 8000962:	d001      	beq.n	8000968 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000964:	f7ff ffac 	bl	80008c0 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000968:	4b4a      	ldr	r3, [pc, #296]	; (8000a94 <HAL_I2C_MspInit+0x178>)
 800096a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800096c:	4a49      	ldr	r2, [pc, #292]	; (8000a94 <HAL_I2C_MspInit+0x178>)
 800096e:	f043 0301 	orr.w	r3, r3, #1
 8000972:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000974:	4b47      	ldr	r3, [pc, #284]	; (8000a94 <HAL_I2C_MspInit+0x178>)
 8000976:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000978:	f003 0301 	and.w	r3, r3, #1
 800097c:	61bb      	str	r3, [r7, #24]
 800097e:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000980:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000984:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000986:	2312      	movs	r3, #18
 8000988:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098c:	2300      	movs	r3, #0
 800098e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000992:	2303      	movs	r3, #3
 8000994:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000998:	2304      	movs	r3, #4
 800099a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800099e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80009a2:	4619      	mov	r1, r3
 80009a4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009a8:	f000 fbf0 	bl	800118c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80009ac:	4b39      	ldr	r3, [pc, #228]	; (8000a94 <HAL_I2C_MspInit+0x178>)
 80009ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009b0:	4a38      	ldr	r2, [pc, #224]	; (8000a94 <HAL_I2C_MspInit+0x178>)
 80009b2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80009b6:	6593      	str	r3, [r2, #88]	; 0x58
 80009b8:	4b36      	ldr	r3, [pc, #216]	; (8000a94 <HAL_I2C_MspInit+0x178>)
 80009ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80009c0:	617b      	str	r3, [r7, #20]
 80009c2:	697b      	ldr	r3, [r7, #20]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 80009c4:	2200      	movs	r2, #0
 80009c6:	2105      	movs	r1, #5
 80009c8:	201f      	movs	r0, #31
 80009ca:	f000 fb27 	bl	800101c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80009ce:	201f      	movs	r0, #31
 80009d0:	f000 fb40 	bl	8001054 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 5, 0);
 80009d4:	2200      	movs	r2, #0
 80009d6:	2105      	movs	r1, #5
 80009d8:	2020      	movs	r0, #32
 80009da:	f000 fb1f 	bl	800101c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80009de:	2020      	movs	r0, #32
 80009e0:	f000 fb38 	bl	8001054 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80009e4:	e04f      	b.n	8000a86 <HAL_I2C_MspInit+0x16a>
  else if(hi2c->Instance==I2C2)
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	4a2b      	ldr	r2, [pc, #172]	; (8000a98 <HAL_I2C_MspInit+0x17c>)
 80009ec:	4293      	cmp	r3, r2
 80009ee:	d14a      	bne.n	8000a86 <HAL_I2C_MspInit+0x16a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80009f0:	2380      	movs	r3, #128	; 0x80
 80009f2:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80009f4:	2300      	movs	r3, #0
 80009f6:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80009f8:	f107 031c 	add.w	r3, r7, #28
 80009fc:	4618      	mov	r0, r3
 80009fe:	f002 fafb 	bl	8002ff8 <HAL_RCCEx_PeriphCLKConfig>
 8000a02:	4603      	mov	r3, r0
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d001      	beq.n	8000a0c <HAL_I2C_MspInit+0xf0>
      Error_Handler();
 8000a08:	f7ff ff5a 	bl	80008c0 <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a0c:	4b21      	ldr	r3, [pc, #132]	; (8000a94 <HAL_I2C_MspInit+0x178>)
 8000a0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a10:	4a20      	ldr	r2, [pc, #128]	; (8000a94 <HAL_I2C_MspInit+0x178>)
 8000a12:	f043 0302 	orr.w	r3, r3, #2
 8000a16:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a18:	4b1e      	ldr	r3, [pc, #120]	; (8000a94 <HAL_I2C_MspInit+0x178>)
 8000a1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a1c:	f003 0302 	and.w	r3, r3, #2
 8000a20:	613b      	str	r3, [r7, #16]
 8000a22:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000a24:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000a28:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a2a:	2312      	movs	r3, #18
 8000a2c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a30:	2300      	movs	r3, #0
 8000a32:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a36:	2303      	movs	r3, #3
 8000a38:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000a3c:	2304      	movs	r3, #4
 8000a3e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a42:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000a46:	4619      	mov	r1, r3
 8000a48:	4814      	ldr	r0, [pc, #80]	; (8000a9c <HAL_I2C_MspInit+0x180>)
 8000a4a:	f000 fb9f 	bl	800118c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000a4e:	4b11      	ldr	r3, [pc, #68]	; (8000a94 <HAL_I2C_MspInit+0x178>)
 8000a50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a52:	4a10      	ldr	r2, [pc, #64]	; (8000a94 <HAL_I2C_MspInit+0x178>)
 8000a54:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000a58:	6593      	str	r3, [r2, #88]	; 0x58
 8000a5a:	4b0e      	ldr	r3, [pc, #56]	; (8000a94 <HAL_I2C_MspInit+0x178>)
 8000a5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000a62:	60fb      	str	r3, [r7, #12]
 8000a64:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 5, 0);
 8000a66:	2200      	movs	r2, #0
 8000a68:	2105      	movs	r1, #5
 8000a6a:	2021      	movs	r0, #33	; 0x21
 8000a6c:	f000 fad6 	bl	800101c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8000a70:	2021      	movs	r0, #33	; 0x21
 8000a72:	f000 faef 	bl	8001054 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 5, 0);
 8000a76:	2200      	movs	r2, #0
 8000a78:	2105      	movs	r1, #5
 8000a7a:	2022      	movs	r0, #34	; 0x22
 8000a7c:	f000 face 	bl	800101c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 8000a80:	2022      	movs	r0, #34	; 0x22
 8000a82:	f000 fae7 	bl	8001054 <HAL_NVIC_EnableIRQ>
}
 8000a86:	bf00      	nop
 8000a88:	3790      	adds	r7, #144	; 0x90
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bd80      	pop	{r7, pc}
 8000a8e:	bf00      	nop
 8000a90:	40005400 	.word	0x40005400
 8000a94:	40021000 	.word	0x40021000
 8000a98:	40005800 	.word	0x40005800
 8000a9c:	48000400 	.word	0x48000400

08000aa0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b0a4      	sub	sp, #144	; 0x90
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aa8:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000aac:	2200      	movs	r2, #0
 8000aae:	601a      	str	r2, [r3, #0]
 8000ab0:	605a      	str	r2, [r3, #4]
 8000ab2:	609a      	str	r2, [r3, #8]
 8000ab4:	60da      	str	r2, [r3, #12]
 8000ab6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ab8:	f107 031c 	add.w	r3, r7, #28
 8000abc:	2260      	movs	r2, #96	; 0x60
 8000abe:	2100      	movs	r1, #0
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	f006 ff77 	bl	80079b4 <memset>
  if(huart->Instance==USART1)
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	4a54      	ldr	r2, [pc, #336]	; (8000c1c <HAL_UART_MspInit+0x17c>)
 8000acc:	4293      	cmp	r3, r2
 8000ace:	d142      	bne.n	8000b56 <HAL_UART_MspInit+0xb6>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000ad0:	2301      	movs	r3, #1
 8000ad2:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ad8:	f107 031c 	add.w	r3, r7, #28
 8000adc:	4618      	mov	r0, r3
 8000ade:	f002 fa8b 	bl	8002ff8 <HAL_RCCEx_PeriphCLKConfig>
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d001      	beq.n	8000aec <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000ae8:	f7ff feea 	bl	80008c0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000aec:	4b4c      	ldr	r3, [pc, #304]	; (8000c20 <HAL_UART_MspInit+0x180>)
 8000aee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000af0:	4a4b      	ldr	r2, [pc, #300]	; (8000c20 <HAL_UART_MspInit+0x180>)
 8000af2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000af6:	6613      	str	r3, [r2, #96]	; 0x60
 8000af8:	4b49      	ldr	r3, [pc, #292]	; (8000c20 <HAL_UART_MspInit+0x180>)
 8000afa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000afc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b00:	61bb      	str	r3, [r7, #24]
 8000b02:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b04:	4b46      	ldr	r3, [pc, #280]	; (8000c20 <HAL_UART_MspInit+0x180>)
 8000b06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b08:	4a45      	ldr	r2, [pc, #276]	; (8000c20 <HAL_UART_MspInit+0x180>)
 8000b0a:	f043 0302 	orr.w	r3, r3, #2
 8000b0e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b10:	4b43      	ldr	r3, [pc, #268]	; (8000c20 <HAL_UART_MspInit+0x180>)
 8000b12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b14:	f003 0302 	and.w	r3, r3, #2
 8000b18:	617b      	str	r3, [r7, #20]
 8000b1a:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000b1c:	23c0      	movs	r3, #192	; 0xc0
 8000b1e:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b20:	2302      	movs	r3, #2
 8000b22:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b26:	2300      	movs	r3, #0
 8000b28:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b2c:	2303      	movs	r3, #3
 8000b2e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000b32:	2307      	movs	r3, #7
 8000b34:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b38:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000b3c:	4619      	mov	r1, r3
 8000b3e:	4839      	ldr	r0, [pc, #228]	; (8000c24 <HAL_UART_MspInit+0x184>)
 8000b40:	f000 fb24 	bl	800118c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8000b44:	2200      	movs	r2, #0
 8000b46:	2105      	movs	r1, #5
 8000b48:	2025      	movs	r0, #37	; 0x25
 8000b4a:	f000 fa67 	bl	800101c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000b4e:	2025      	movs	r0, #37	; 0x25
 8000b50:	f000 fa80 	bl	8001054 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000b54:	e05d      	b.n	8000c12 <HAL_UART_MspInit+0x172>
  else if(huart->Instance==USART2)
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	4a33      	ldr	r2, [pc, #204]	; (8000c28 <HAL_UART_MspInit+0x188>)
 8000b5c:	4293      	cmp	r3, r2
 8000b5e:	d158      	bne.n	8000c12 <HAL_UART_MspInit+0x172>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000b60:	2302      	movs	r3, #2
 8000b62:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000b64:	2300      	movs	r3, #0
 8000b66:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b68:	f107 031c 	add.w	r3, r7, #28
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	f002 fa43 	bl	8002ff8 <HAL_RCCEx_PeriphCLKConfig>
 8000b72:	4603      	mov	r3, r0
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d001      	beq.n	8000b7c <HAL_UART_MspInit+0xdc>
      Error_Handler();
 8000b78:	f7ff fea2 	bl	80008c0 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b7c:	4b28      	ldr	r3, [pc, #160]	; (8000c20 <HAL_UART_MspInit+0x180>)
 8000b7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b80:	4a27      	ldr	r2, [pc, #156]	; (8000c20 <HAL_UART_MspInit+0x180>)
 8000b82:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b86:	6593      	str	r3, [r2, #88]	; 0x58
 8000b88:	4b25      	ldr	r3, [pc, #148]	; (8000c20 <HAL_UART_MspInit+0x180>)
 8000b8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b90:	613b      	str	r3, [r7, #16]
 8000b92:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b94:	4b22      	ldr	r3, [pc, #136]	; (8000c20 <HAL_UART_MspInit+0x180>)
 8000b96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b98:	4a21      	ldr	r2, [pc, #132]	; (8000c20 <HAL_UART_MspInit+0x180>)
 8000b9a:	f043 0301 	orr.w	r3, r3, #1
 8000b9e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ba0:	4b1f      	ldr	r3, [pc, #124]	; (8000c20 <HAL_UART_MspInit+0x180>)
 8000ba2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ba4:	f003 0301 	and.w	r3, r3, #1
 8000ba8:	60fb      	str	r3, [r7, #12]
 8000baa:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000bac:	2304      	movs	r3, #4
 8000bae:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bb0:	2302      	movs	r3, #2
 8000bb2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bbc:	2303      	movs	r3, #3
 8000bbe:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000bc2:	2307      	movs	r3, #7
 8000bc4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bc8:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000bcc:	4619      	mov	r1, r3
 8000bce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bd2:	f000 fadb 	bl	800118c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000bd6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000bda:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bdc:	2302      	movs	r3, #2
 8000bde:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be2:	2300      	movs	r3, #0
 8000be4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000be8:	2303      	movs	r3, #3
 8000bea:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8000bee:	2303      	movs	r3, #3
 8000bf0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bf4:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000bf8:	4619      	mov	r1, r3
 8000bfa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bfe:	f000 fac5 	bl	800118c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8000c02:	2200      	movs	r2, #0
 8000c04:	2105      	movs	r1, #5
 8000c06:	2026      	movs	r0, #38	; 0x26
 8000c08:	f000 fa08 	bl	800101c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000c0c:	2026      	movs	r0, #38	; 0x26
 8000c0e:	f000 fa21 	bl	8001054 <HAL_NVIC_EnableIRQ>
}
 8000c12:	bf00      	nop
 8000c14:	3790      	adds	r7, #144	; 0x90
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bd80      	pop	{r7, pc}
 8000c1a:	bf00      	nop
 8000c1c:	40013800 	.word	0x40013800
 8000c20:	40021000 	.word	0x40021000
 8000c24:	48000400 	.word	0x48000400
 8000c28:	40004400 	.word	0x40004400

08000c2c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b08c      	sub	sp, #48	; 0x30
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8000c34:	2300      	movs	r3, #0
 8000c36:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000c3a:	4b2f      	ldr	r3, [pc, #188]	; (8000cf8 <HAL_InitTick+0xcc>)
 8000c3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c3e:	4a2e      	ldr	r2, [pc, #184]	; (8000cf8 <HAL_InitTick+0xcc>)
 8000c40:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000c44:	6613      	str	r3, [r2, #96]	; 0x60
 8000c46:	4b2c      	ldr	r3, [pc, #176]	; (8000cf8 <HAL_InitTick+0xcc>)
 8000c48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c4a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000c4e:	60bb      	str	r3, [r7, #8]
 8000c50:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000c52:	f107 020c 	add.w	r2, r7, #12
 8000c56:	f107 0310 	add.w	r3, r7, #16
 8000c5a:	4611      	mov	r1, r2
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	f002 f939 	bl	8002ed4 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8000c62:	f002 f921 	bl	8002ea8 <HAL_RCC_GetPCLK2Freq>
 8000c66:	4603      	mov	r3, r0
 8000c68:	005b      	lsls	r3, r3, #1
 8000c6a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000c6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c6e:	4a23      	ldr	r2, [pc, #140]	; (8000cfc <HAL_InitTick+0xd0>)
 8000c70:	fba2 2303 	umull	r2, r3, r2, r3
 8000c74:	0c9b      	lsrs	r3, r3, #18
 8000c76:	3b01      	subs	r3, #1
 8000c78:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000c7a:	4b21      	ldr	r3, [pc, #132]	; (8000d00 <HAL_InitTick+0xd4>)
 8000c7c:	4a21      	ldr	r2, [pc, #132]	; (8000d04 <HAL_InitTick+0xd8>)
 8000c7e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000c80:	4b1f      	ldr	r3, [pc, #124]	; (8000d00 <HAL_InitTick+0xd4>)
 8000c82:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000c86:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000c88:	4a1d      	ldr	r2, [pc, #116]	; (8000d00 <HAL_InitTick+0xd4>)
 8000c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c8c:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000c8e:	4b1c      	ldr	r3, [pc, #112]	; (8000d00 <HAL_InitTick+0xd4>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c94:	4b1a      	ldr	r3, [pc, #104]	; (8000d00 <HAL_InitTick+0xd4>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c9a:	4b19      	ldr	r3, [pc, #100]	; (8000d00 <HAL_InitTick+0xd4>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000ca0:	4817      	ldr	r0, [pc, #92]	; (8000d00 <HAL_InitTick+0xd4>)
 8000ca2:	f002 fce5 	bl	8003670 <HAL_TIM_Base_Init>
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8000cac:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d11b      	bne.n	8000cec <HAL_InitTick+0xc0>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000cb4:	4812      	ldr	r0, [pc, #72]	; (8000d00 <HAL_InitTick+0xd4>)
 8000cb6:	f002 fd3d 	bl	8003734 <HAL_TIM_Base_Start_IT>
 8000cba:	4603      	mov	r3, r0
 8000cbc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8000cc0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d111      	bne.n	8000cec <HAL_InitTick+0xc0>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000cc8:	2019      	movs	r0, #25
 8000cca:	f000 f9c3 	bl	8001054 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	2b0f      	cmp	r3, #15
 8000cd2:	d808      	bhi.n	8000ce6 <HAL_InitTick+0xba>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	6879      	ldr	r1, [r7, #4]
 8000cd8:	2019      	movs	r0, #25
 8000cda:	f000 f99f 	bl	800101c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000cde:	4a0a      	ldr	r2, [pc, #40]	; (8000d08 <HAL_InitTick+0xdc>)
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	6013      	str	r3, [r2, #0]
 8000ce4:	e002      	b.n	8000cec <HAL_InitTick+0xc0>
      }
      else
      {
        status = HAL_ERROR;
 8000ce6:	2301      	movs	r3, #1
 8000ce8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000cec:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	3730      	adds	r7, #48	; 0x30
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	bd80      	pop	{r7, pc}
 8000cf8:	40021000 	.word	0x40021000
 8000cfc:	431bde83 	.word	0x431bde83
 8000d00:	20000254 	.word	0x20000254
 8000d04:	40012c00 	.word	0x40012c00
 8000d08:	20000014 	.word	0x20000014

08000d0c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d10:	e7fe      	b.n	8000d10 <NMI_Handler+0x4>

08000d12 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d12:	b480      	push	{r7}
 8000d14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d16:	e7fe      	b.n	8000d16 <HardFault_Handler+0x4>

08000d18 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d1c:	e7fe      	b.n	8000d1c <MemManage_Handler+0x4>

08000d1e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d1e:	b480      	push	{r7}
 8000d20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d22:	e7fe      	b.n	8000d22 <BusFault_Handler+0x4>

08000d24 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d24:	b480      	push	{r7}
 8000d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d28:	e7fe      	b.n	8000d28 <UsageFault_Handler+0x4>

08000d2a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d2a:	b480      	push	{r7}
 8000d2c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d2e:	bf00      	nop
 8000d30:	46bd      	mov	sp, r7
 8000d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d36:	4770      	bx	lr

08000d38 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000d3c:	4802      	ldr	r0, [pc, #8]	; (8000d48 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8000d3e:	f002 fd4d 	bl	80037dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8000d42:	bf00      	nop
 8000d44:	bd80      	pop	{r7, pc}
 8000d46:	bf00      	nop
 8000d48:	20000254 	.word	0x20000254

08000d4c <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8000d50:	4802      	ldr	r0, [pc, #8]	; (8000d5c <I2C1_EV_IRQHandler+0x10>)
 8000d52:	f000 fc56 	bl	8001602 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8000d56:	bf00      	nop
 8000d58:	bd80      	pop	{r7, pc}
 8000d5a:	bf00      	nop
 8000d5c:	200000a0 	.word	0x200000a0

08000d60 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8000d64:	4802      	ldr	r0, [pc, #8]	; (8000d70 <I2C1_ER_IRQHandler+0x10>)
 8000d66:	f000 fc66 	bl	8001636 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8000d6a:	bf00      	nop
 8000d6c:	bd80      	pop	{r7, pc}
 8000d6e:	bf00      	nop
 8000d70:	200000a0 	.word	0x200000a0

08000d74 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8000d78:	4802      	ldr	r0, [pc, #8]	; (8000d84 <I2C2_EV_IRQHandler+0x10>)
 8000d7a:	f000 fc42 	bl	8001602 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8000d7e:	bf00      	nop
 8000d80:	bd80      	pop	{r7, pc}
 8000d82:	bf00      	nop
 8000d84:	200000f4 	.word	0x200000f4

08000d88 <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 8000d8c:	4802      	ldr	r0, [pc, #8]	; (8000d98 <I2C2_ER_IRQHandler+0x10>)
 8000d8e:	f000 fc52 	bl	8001636 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 8000d92:	bf00      	nop
 8000d94:	bd80      	pop	{r7, pc}
 8000d96:	bf00      	nop
 8000d98:	200000f4 	.word	0x200000f4

08000d9c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000da0:	4802      	ldr	r0, [pc, #8]	; (8000dac <USART1_IRQHandler+0x10>)
 8000da2:	f002 ffa1 	bl	8003ce8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000da6:	bf00      	nop
 8000da8:	bd80      	pop	{r7, pc}
 8000daa:	bf00      	nop
 8000dac:	20000148 	.word	0x20000148

08000db0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000db4:	4802      	ldr	r0, [pc, #8]	; (8000dc0 <USART2_IRQHandler+0x10>)
 8000db6:	f002 ff97 	bl	8003ce8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000dba:	bf00      	nop
 8000dbc:	bd80      	pop	{r7, pc}
 8000dbe:	bf00      	nop
 8000dc0:	200001cc 	.word	0x200001cc

08000dc4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000dc8:	4b06      	ldr	r3, [pc, #24]	; (8000de4 <SystemInit+0x20>)
 8000dca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000dce:	4a05      	ldr	r2, [pc, #20]	; (8000de4 <SystemInit+0x20>)
 8000dd0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000dd4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000dd8:	bf00      	nop
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de0:	4770      	bx	lr
 8000de2:	bf00      	nop
 8000de4:	e000ed00 	.word	0xe000ed00

08000de8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000de8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e20 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000dec:	f7ff ffea 	bl	8000dc4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000df0:	480c      	ldr	r0, [pc, #48]	; (8000e24 <LoopForever+0x6>)
  ldr r1, =_edata
 8000df2:	490d      	ldr	r1, [pc, #52]	; (8000e28 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000df4:	4a0d      	ldr	r2, [pc, #52]	; (8000e2c <LoopForever+0xe>)
  movs r3, #0
 8000df6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000df8:	e002      	b.n	8000e00 <LoopCopyDataInit>

08000dfa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dfa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000dfc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dfe:	3304      	adds	r3, #4

08000e00 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e00:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e02:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e04:	d3f9      	bcc.n	8000dfa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e06:	4a0a      	ldr	r2, [pc, #40]	; (8000e30 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000e08:	4c0a      	ldr	r4, [pc, #40]	; (8000e34 <LoopForever+0x16>)
  movs r3, #0
 8000e0a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e0c:	e001      	b.n	8000e12 <LoopFillZerobss>

08000e0e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e0e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e10:	3204      	adds	r2, #4

08000e12 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e12:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e14:	d3fb      	bcc.n	8000e0e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e16:	f006 fd99 	bl	800794c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000e1a:	f7ff fb5b 	bl	80004d4 <main>

08000e1e <LoopForever>:

LoopForever:
    b LoopForever
 8000e1e:	e7fe      	b.n	8000e1e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000e20:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000e24:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e28:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 8000e2c:	08007c60 	.word	0x08007c60
  ldr r2, =_sbss
 8000e30:	20000084 	.word	0x20000084
  ldr r4, =_ebss
 8000e34:	20001c74 	.word	0x20001c74

08000e38 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000e38:	e7fe      	b.n	8000e38 <ADC1_IRQHandler>

08000e3a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e3a:	b580      	push	{r7, lr}
 8000e3c:	b082      	sub	sp, #8
 8000e3e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000e40:	2300      	movs	r3, #0
 8000e42:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e44:	2003      	movs	r0, #3
 8000e46:	f000 f8de 	bl	8001006 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e4a:	200f      	movs	r0, #15
 8000e4c:	f7ff feee 	bl	8000c2c <HAL_InitTick>
 8000e50:	4603      	mov	r3, r0
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d002      	beq.n	8000e5c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000e56:	2301      	movs	r3, #1
 8000e58:	71fb      	strb	r3, [r7, #7]
 8000e5a:	e001      	b.n	8000e60 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000e5c:	f7ff fd36 	bl	80008cc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000e60:	79fb      	ldrb	r3, [r7, #7]
}
 8000e62:	4618      	mov	r0, r3
 8000e64:	3708      	adds	r7, #8
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bd80      	pop	{r7, pc}
	...

08000e6c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000e70:	4b06      	ldr	r3, [pc, #24]	; (8000e8c <HAL_IncTick+0x20>)
 8000e72:	781b      	ldrb	r3, [r3, #0]
 8000e74:	461a      	mov	r2, r3
 8000e76:	4b06      	ldr	r3, [pc, #24]	; (8000e90 <HAL_IncTick+0x24>)
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	4413      	add	r3, r2
 8000e7c:	4a04      	ldr	r2, [pc, #16]	; (8000e90 <HAL_IncTick+0x24>)
 8000e7e:	6013      	str	r3, [r2, #0]
}
 8000e80:	bf00      	nop
 8000e82:	46bd      	mov	sp, r7
 8000e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e88:	4770      	bx	lr
 8000e8a:	bf00      	nop
 8000e8c:	20000018 	.word	0x20000018
 8000e90:	200002a0 	.word	0x200002a0

08000e94 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e94:	b480      	push	{r7}
 8000e96:	af00      	add	r7, sp, #0
  return uwTick;
 8000e98:	4b03      	ldr	r3, [pc, #12]	; (8000ea8 <HAL_GetTick+0x14>)
 8000e9a:	681b      	ldr	r3, [r3, #0]
}
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea4:	4770      	bx	lr
 8000ea6:	bf00      	nop
 8000ea8:	200002a0 	.word	0x200002a0

08000eac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000eac:	b480      	push	{r7}
 8000eae:	b085      	sub	sp, #20
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	f003 0307 	and.w	r3, r3, #7
 8000eba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ebc:	4b0c      	ldr	r3, [pc, #48]	; (8000ef0 <__NVIC_SetPriorityGrouping+0x44>)
 8000ebe:	68db      	ldr	r3, [r3, #12]
 8000ec0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ec2:	68ba      	ldr	r2, [r7, #8]
 8000ec4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ec8:	4013      	ands	r3, r2
 8000eca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ecc:	68fb      	ldr	r3, [r7, #12]
 8000ece:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ed0:	68bb      	ldr	r3, [r7, #8]
 8000ed2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ed4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ed8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000edc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ede:	4a04      	ldr	r2, [pc, #16]	; (8000ef0 <__NVIC_SetPriorityGrouping+0x44>)
 8000ee0:	68bb      	ldr	r3, [r7, #8]
 8000ee2:	60d3      	str	r3, [r2, #12]
}
 8000ee4:	bf00      	nop
 8000ee6:	3714      	adds	r7, #20
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eee:	4770      	bx	lr
 8000ef0:	e000ed00 	.word	0xe000ed00

08000ef4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ef8:	4b04      	ldr	r3, [pc, #16]	; (8000f0c <__NVIC_GetPriorityGrouping+0x18>)
 8000efa:	68db      	ldr	r3, [r3, #12]
 8000efc:	0a1b      	lsrs	r3, r3, #8
 8000efe:	f003 0307 	and.w	r3, r3, #7
}
 8000f02:	4618      	mov	r0, r3
 8000f04:	46bd      	mov	sp, r7
 8000f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0a:	4770      	bx	lr
 8000f0c:	e000ed00 	.word	0xe000ed00

08000f10 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f10:	b480      	push	{r7}
 8000f12:	b083      	sub	sp, #12
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	4603      	mov	r3, r0
 8000f18:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	db0b      	blt.n	8000f3a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f22:	79fb      	ldrb	r3, [r7, #7]
 8000f24:	f003 021f 	and.w	r2, r3, #31
 8000f28:	4907      	ldr	r1, [pc, #28]	; (8000f48 <__NVIC_EnableIRQ+0x38>)
 8000f2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f2e:	095b      	lsrs	r3, r3, #5
 8000f30:	2001      	movs	r0, #1
 8000f32:	fa00 f202 	lsl.w	r2, r0, r2
 8000f36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000f3a:	bf00      	nop
 8000f3c:	370c      	adds	r7, #12
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f44:	4770      	bx	lr
 8000f46:	bf00      	nop
 8000f48:	e000e100 	.word	0xe000e100

08000f4c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	b083      	sub	sp, #12
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	4603      	mov	r3, r0
 8000f54:	6039      	str	r1, [r7, #0]
 8000f56:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	db0a      	blt.n	8000f76 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f60:	683b      	ldr	r3, [r7, #0]
 8000f62:	b2da      	uxtb	r2, r3
 8000f64:	490c      	ldr	r1, [pc, #48]	; (8000f98 <__NVIC_SetPriority+0x4c>)
 8000f66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f6a:	0112      	lsls	r2, r2, #4
 8000f6c:	b2d2      	uxtb	r2, r2
 8000f6e:	440b      	add	r3, r1
 8000f70:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f74:	e00a      	b.n	8000f8c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f76:	683b      	ldr	r3, [r7, #0]
 8000f78:	b2da      	uxtb	r2, r3
 8000f7a:	4908      	ldr	r1, [pc, #32]	; (8000f9c <__NVIC_SetPriority+0x50>)
 8000f7c:	79fb      	ldrb	r3, [r7, #7]
 8000f7e:	f003 030f 	and.w	r3, r3, #15
 8000f82:	3b04      	subs	r3, #4
 8000f84:	0112      	lsls	r2, r2, #4
 8000f86:	b2d2      	uxtb	r2, r2
 8000f88:	440b      	add	r3, r1
 8000f8a:	761a      	strb	r2, [r3, #24]
}
 8000f8c:	bf00      	nop
 8000f8e:	370c      	adds	r7, #12
 8000f90:	46bd      	mov	sp, r7
 8000f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f96:	4770      	bx	lr
 8000f98:	e000e100 	.word	0xe000e100
 8000f9c:	e000ed00 	.word	0xe000ed00

08000fa0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	b089      	sub	sp, #36	; 0x24
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	60f8      	str	r0, [r7, #12]
 8000fa8:	60b9      	str	r1, [r7, #8]
 8000faa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	f003 0307 	and.w	r3, r3, #7
 8000fb2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fb4:	69fb      	ldr	r3, [r7, #28]
 8000fb6:	f1c3 0307 	rsb	r3, r3, #7
 8000fba:	2b04      	cmp	r3, #4
 8000fbc:	bf28      	it	cs
 8000fbe:	2304      	movcs	r3, #4
 8000fc0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fc2:	69fb      	ldr	r3, [r7, #28]
 8000fc4:	3304      	adds	r3, #4
 8000fc6:	2b06      	cmp	r3, #6
 8000fc8:	d902      	bls.n	8000fd0 <NVIC_EncodePriority+0x30>
 8000fca:	69fb      	ldr	r3, [r7, #28]
 8000fcc:	3b03      	subs	r3, #3
 8000fce:	e000      	b.n	8000fd2 <NVIC_EncodePriority+0x32>
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fd4:	f04f 32ff 	mov.w	r2, #4294967295
 8000fd8:	69bb      	ldr	r3, [r7, #24]
 8000fda:	fa02 f303 	lsl.w	r3, r2, r3
 8000fde:	43da      	mvns	r2, r3
 8000fe0:	68bb      	ldr	r3, [r7, #8]
 8000fe2:	401a      	ands	r2, r3
 8000fe4:	697b      	ldr	r3, [r7, #20]
 8000fe6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fe8:	f04f 31ff 	mov.w	r1, #4294967295
 8000fec:	697b      	ldr	r3, [r7, #20]
 8000fee:	fa01 f303 	lsl.w	r3, r1, r3
 8000ff2:	43d9      	mvns	r1, r3
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ff8:	4313      	orrs	r3, r2
         );
}
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	3724      	adds	r7, #36	; 0x24
 8000ffe:	46bd      	mov	sp, r7
 8001000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001004:	4770      	bx	lr

08001006 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001006:	b580      	push	{r7, lr}
 8001008:	b082      	sub	sp, #8
 800100a:	af00      	add	r7, sp, #0
 800100c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800100e:	6878      	ldr	r0, [r7, #4]
 8001010:	f7ff ff4c 	bl	8000eac <__NVIC_SetPriorityGrouping>
}
 8001014:	bf00      	nop
 8001016:	3708      	adds	r7, #8
 8001018:	46bd      	mov	sp, r7
 800101a:	bd80      	pop	{r7, pc}

0800101c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b086      	sub	sp, #24
 8001020:	af00      	add	r7, sp, #0
 8001022:	4603      	mov	r3, r0
 8001024:	60b9      	str	r1, [r7, #8]
 8001026:	607a      	str	r2, [r7, #4]
 8001028:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800102a:	2300      	movs	r3, #0
 800102c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800102e:	f7ff ff61 	bl	8000ef4 <__NVIC_GetPriorityGrouping>
 8001032:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001034:	687a      	ldr	r2, [r7, #4]
 8001036:	68b9      	ldr	r1, [r7, #8]
 8001038:	6978      	ldr	r0, [r7, #20]
 800103a:	f7ff ffb1 	bl	8000fa0 <NVIC_EncodePriority>
 800103e:	4602      	mov	r2, r0
 8001040:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001044:	4611      	mov	r1, r2
 8001046:	4618      	mov	r0, r3
 8001048:	f7ff ff80 	bl	8000f4c <__NVIC_SetPriority>
}
 800104c:	bf00      	nop
 800104e:	3718      	adds	r7, #24
 8001050:	46bd      	mov	sp, r7
 8001052:	bd80      	pop	{r7, pc}

08001054 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b082      	sub	sp, #8
 8001058:	af00      	add	r7, sp, #0
 800105a:	4603      	mov	r3, r0
 800105c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800105e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001062:	4618      	mov	r0, r3
 8001064:	f7ff ff54 	bl	8000f10 <__NVIC_EnableIRQ>
}
 8001068:	bf00      	nop
 800106a:	3708      	adds	r7, #8
 800106c:	46bd      	mov	sp, r7
 800106e:	bd80      	pop	{r7, pc}

08001070 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001070:	b480      	push	{r7}
 8001072:	b085      	sub	sp, #20
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001078:	2300      	movs	r3, #0
 800107a:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001082:	b2db      	uxtb	r3, r3
 8001084:	2b02      	cmp	r3, #2
 8001086:	d008      	beq.n	800109a <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	2204      	movs	r2, #4
 800108c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	2200      	movs	r2, #0
 8001092:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001096:	2301      	movs	r3, #1
 8001098:	e022      	b.n	80010e0 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	681a      	ldr	r2, [r3, #0]
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	f022 020e 	bic.w	r2, r2, #14
 80010a8:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	681a      	ldr	r2, [r3, #0]
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	f022 0201 	bic.w	r2, r2, #1
 80010b8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010be:	f003 021c 	and.w	r2, r3, #28
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010c6:	2101      	movs	r1, #1
 80010c8:	fa01 f202 	lsl.w	r2, r1, r2
 80010cc:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	2201      	movs	r2, #1
 80010d2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	2200      	movs	r2, #0
 80010da:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 80010de:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80010e0:	4618      	mov	r0, r3
 80010e2:	3714      	adds	r7, #20
 80010e4:	46bd      	mov	sp, r7
 80010e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ea:	4770      	bx	lr

080010ec <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b084      	sub	sp, #16
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80010f4:	2300      	movs	r3, #0
 80010f6:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80010fe:	b2db      	uxtb	r3, r3
 8001100:	2b02      	cmp	r3, #2
 8001102:	d005      	beq.n	8001110 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	2204      	movs	r2, #4
 8001108:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800110a:	2301      	movs	r3, #1
 800110c:	73fb      	strb	r3, [r7, #15]
 800110e:	e029      	b.n	8001164 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	681a      	ldr	r2, [r3, #0]
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	f022 020e 	bic.w	r2, r2, #14
 800111e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	681a      	ldr	r2, [r3, #0]
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	f022 0201 	bic.w	r2, r2, #1
 800112e:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001134:	f003 021c 	and.w	r2, r3, #28
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800113c:	2101      	movs	r1, #1
 800113e:	fa01 f202 	lsl.w	r2, r1, r2
 8001142:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	2201      	movs	r2, #1
 8001148:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	2200      	movs	r2, #0
 8001150:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001158:	2b00      	cmp	r3, #0
 800115a:	d003      	beq.n	8001164 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001160:	6878      	ldr	r0, [r7, #4]
 8001162:	4798      	blx	r3
    }
  }
  return status;
 8001164:	7bfb      	ldrb	r3, [r7, #15]
}
 8001166:	4618      	mov	r0, r3
 8001168:	3710      	adds	r7, #16
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}

0800116e <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800116e:	b480      	push	{r7}
 8001170:	b083      	sub	sp, #12
 8001172:	af00      	add	r7, sp, #0
 8001174:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800117c:	b2db      	uxtb	r3, r3
}
 800117e:	4618      	mov	r0, r3
 8001180:	370c      	adds	r7, #12
 8001182:	46bd      	mov	sp, r7
 8001184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001188:	4770      	bx	lr
	...

0800118c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800118c:	b480      	push	{r7}
 800118e:	b087      	sub	sp, #28
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
 8001194:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001196:	2300      	movs	r3, #0
 8001198:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800119a:	e154      	b.n	8001446 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800119c:	683b      	ldr	r3, [r7, #0]
 800119e:	681a      	ldr	r2, [r3, #0]
 80011a0:	2101      	movs	r1, #1
 80011a2:	697b      	ldr	r3, [r7, #20]
 80011a4:	fa01 f303 	lsl.w	r3, r1, r3
 80011a8:	4013      	ands	r3, r2
 80011aa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	f000 8146 	beq.w	8001440 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	685b      	ldr	r3, [r3, #4]
 80011b8:	f003 0303 	and.w	r3, r3, #3
 80011bc:	2b01      	cmp	r3, #1
 80011be:	d005      	beq.n	80011cc <HAL_GPIO_Init+0x40>
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	685b      	ldr	r3, [r3, #4]
 80011c4:	f003 0303 	and.w	r3, r3, #3
 80011c8:	2b02      	cmp	r3, #2
 80011ca:	d130      	bne.n	800122e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	689b      	ldr	r3, [r3, #8]
 80011d0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80011d2:	697b      	ldr	r3, [r7, #20]
 80011d4:	005b      	lsls	r3, r3, #1
 80011d6:	2203      	movs	r2, #3
 80011d8:	fa02 f303 	lsl.w	r3, r2, r3
 80011dc:	43db      	mvns	r3, r3
 80011de:	693a      	ldr	r2, [r7, #16]
 80011e0:	4013      	ands	r3, r2
 80011e2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80011e4:	683b      	ldr	r3, [r7, #0]
 80011e6:	68da      	ldr	r2, [r3, #12]
 80011e8:	697b      	ldr	r3, [r7, #20]
 80011ea:	005b      	lsls	r3, r3, #1
 80011ec:	fa02 f303 	lsl.w	r3, r2, r3
 80011f0:	693a      	ldr	r2, [r7, #16]
 80011f2:	4313      	orrs	r3, r2
 80011f4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	693a      	ldr	r2, [r7, #16]
 80011fa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	685b      	ldr	r3, [r3, #4]
 8001200:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001202:	2201      	movs	r2, #1
 8001204:	697b      	ldr	r3, [r7, #20]
 8001206:	fa02 f303 	lsl.w	r3, r2, r3
 800120a:	43db      	mvns	r3, r3
 800120c:	693a      	ldr	r2, [r7, #16]
 800120e:	4013      	ands	r3, r2
 8001210:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001212:	683b      	ldr	r3, [r7, #0]
 8001214:	685b      	ldr	r3, [r3, #4]
 8001216:	091b      	lsrs	r3, r3, #4
 8001218:	f003 0201 	and.w	r2, r3, #1
 800121c:	697b      	ldr	r3, [r7, #20]
 800121e:	fa02 f303 	lsl.w	r3, r2, r3
 8001222:	693a      	ldr	r2, [r7, #16]
 8001224:	4313      	orrs	r3, r2
 8001226:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	693a      	ldr	r2, [r7, #16]
 800122c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800122e:	683b      	ldr	r3, [r7, #0]
 8001230:	685b      	ldr	r3, [r3, #4]
 8001232:	f003 0303 	and.w	r3, r3, #3
 8001236:	2b03      	cmp	r3, #3
 8001238:	d017      	beq.n	800126a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	68db      	ldr	r3, [r3, #12]
 800123e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001240:	697b      	ldr	r3, [r7, #20]
 8001242:	005b      	lsls	r3, r3, #1
 8001244:	2203      	movs	r2, #3
 8001246:	fa02 f303 	lsl.w	r3, r2, r3
 800124a:	43db      	mvns	r3, r3
 800124c:	693a      	ldr	r2, [r7, #16]
 800124e:	4013      	ands	r3, r2
 8001250:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001252:	683b      	ldr	r3, [r7, #0]
 8001254:	689a      	ldr	r2, [r3, #8]
 8001256:	697b      	ldr	r3, [r7, #20]
 8001258:	005b      	lsls	r3, r3, #1
 800125a:	fa02 f303 	lsl.w	r3, r2, r3
 800125e:	693a      	ldr	r2, [r7, #16]
 8001260:	4313      	orrs	r3, r2
 8001262:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	693a      	ldr	r2, [r7, #16]
 8001268:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800126a:	683b      	ldr	r3, [r7, #0]
 800126c:	685b      	ldr	r3, [r3, #4]
 800126e:	f003 0303 	and.w	r3, r3, #3
 8001272:	2b02      	cmp	r3, #2
 8001274:	d123      	bne.n	80012be <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001276:	697b      	ldr	r3, [r7, #20]
 8001278:	08da      	lsrs	r2, r3, #3
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	3208      	adds	r2, #8
 800127e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001282:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001284:	697b      	ldr	r3, [r7, #20]
 8001286:	f003 0307 	and.w	r3, r3, #7
 800128a:	009b      	lsls	r3, r3, #2
 800128c:	220f      	movs	r2, #15
 800128e:	fa02 f303 	lsl.w	r3, r2, r3
 8001292:	43db      	mvns	r3, r3
 8001294:	693a      	ldr	r2, [r7, #16]
 8001296:	4013      	ands	r3, r2
 8001298:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800129a:	683b      	ldr	r3, [r7, #0]
 800129c:	691a      	ldr	r2, [r3, #16]
 800129e:	697b      	ldr	r3, [r7, #20]
 80012a0:	f003 0307 	and.w	r3, r3, #7
 80012a4:	009b      	lsls	r3, r3, #2
 80012a6:	fa02 f303 	lsl.w	r3, r2, r3
 80012aa:	693a      	ldr	r2, [r7, #16]
 80012ac:	4313      	orrs	r3, r2
 80012ae:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80012b0:	697b      	ldr	r3, [r7, #20]
 80012b2:	08da      	lsrs	r2, r3, #3
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	3208      	adds	r2, #8
 80012b8:	6939      	ldr	r1, [r7, #16]
 80012ba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80012c4:	697b      	ldr	r3, [r7, #20]
 80012c6:	005b      	lsls	r3, r3, #1
 80012c8:	2203      	movs	r2, #3
 80012ca:	fa02 f303 	lsl.w	r3, r2, r3
 80012ce:	43db      	mvns	r3, r3
 80012d0:	693a      	ldr	r2, [r7, #16]
 80012d2:	4013      	ands	r3, r2
 80012d4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80012d6:	683b      	ldr	r3, [r7, #0]
 80012d8:	685b      	ldr	r3, [r3, #4]
 80012da:	f003 0203 	and.w	r2, r3, #3
 80012de:	697b      	ldr	r3, [r7, #20]
 80012e0:	005b      	lsls	r3, r3, #1
 80012e2:	fa02 f303 	lsl.w	r3, r2, r3
 80012e6:	693a      	ldr	r2, [r7, #16]
 80012e8:	4313      	orrs	r3, r2
 80012ea:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	693a      	ldr	r2, [r7, #16]
 80012f0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80012f2:	683b      	ldr	r3, [r7, #0]
 80012f4:	685b      	ldr	r3, [r3, #4]
 80012f6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	f000 80a0 	beq.w	8001440 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001300:	4b58      	ldr	r3, [pc, #352]	; (8001464 <HAL_GPIO_Init+0x2d8>)
 8001302:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001304:	4a57      	ldr	r2, [pc, #348]	; (8001464 <HAL_GPIO_Init+0x2d8>)
 8001306:	f043 0301 	orr.w	r3, r3, #1
 800130a:	6613      	str	r3, [r2, #96]	; 0x60
 800130c:	4b55      	ldr	r3, [pc, #340]	; (8001464 <HAL_GPIO_Init+0x2d8>)
 800130e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001310:	f003 0301 	and.w	r3, r3, #1
 8001314:	60bb      	str	r3, [r7, #8]
 8001316:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001318:	4a53      	ldr	r2, [pc, #332]	; (8001468 <HAL_GPIO_Init+0x2dc>)
 800131a:	697b      	ldr	r3, [r7, #20]
 800131c:	089b      	lsrs	r3, r3, #2
 800131e:	3302      	adds	r3, #2
 8001320:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001324:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001326:	697b      	ldr	r3, [r7, #20]
 8001328:	f003 0303 	and.w	r3, r3, #3
 800132c:	009b      	lsls	r3, r3, #2
 800132e:	220f      	movs	r2, #15
 8001330:	fa02 f303 	lsl.w	r3, r2, r3
 8001334:	43db      	mvns	r3, r3
 8001336:	693a      	ldr	r2, [r7, #16]
 8001338:	4013      	ands	r3, r2
 800133a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001342:	d019      	beq.n	8001378 <HAL_GPIO_Init+0x1ec>
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	4a49      	ldr	r2, [pc, #292]	; (800146c <HAL_GPIO_Init+0x2e0>)
 8001348:	4293      	cmp	r3, r2
 800134a:	d013      	beq.n	8001374 <HAL_GPIO_Init+0x1e8>
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	4a48      	ldr	r2, [pc, #288]	; (8001470 <HAL_GPIO_Init+0x2e4>)
 8001350:	4293      	cmp	r3, r2
 8001352:	d00d      	beq.n	8001370 <HAL_GPIO_Init+0x1e4>
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	4a47      	ldr	r2, [pc, #284]	; (8001474 <HAL_GPIO_Init+0x2e8>)
 8001358:	4293      	cmp	r3, r2
 800135a:	d007      	beq.n	800136c <HAL_GPIO_Init+0x1e0>
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	4a46      	ldr	r2, [pc, #280]	; (8001478 <HAL_GPIO_Init+0x2ec>)
 8001360:	4293      	cmp	r3, r2
 8001362:	d101      	bne.n	8001368 <HAL_GPIO_Init+0x1dc>
 8001364:	2304      	movs	r3, #4
 8001366:	e008      	b.n	800137a <HAL_GPIO_Init+0x1ee>
 8001368:	2307      	movs	r3, #7
 800136a:	e006      	b.n	800137a <HAL_GPIO_Init+0x1ee>
 800136c:	2303      	movs	r3, #3
 800136e:	e004      	b.n	800137a <HAL_GPIO_Init+0x1ee>
 8001370:	2302      	movs	r3, #2
 8001372:	e002      	b.n	800137a <HAL_GPIO_Init+0x1ee>
 8001374:	2301      	movs	r3, #1
 8001376:	e000      	b.n	800137a <HAL_GPIO_Init+0x1ee>
 8001378:	2300      	movs	r3, #0
 800137a:	697a      	ldr	r2, [r7, #20]
 800137c:	f002 0203 	and.w	r2, r2, #3
 8001380:	0092      	lsls	r2, r2, #2
 8001382:	4093      	lsls	r3, r2
 8001384:	693a      	ldr	r2, [r7, #16]
 8001386:	4313      	orrs	r3, r2
 8001388:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800138a:	4937      	ldr	r1, [pc, #220]	; (8001468 <HAL_GPIO_Init+0x2dc>)
 800138c:	697b      	ldr	r3, [r7, #20]
 800138e:	089b      	lsrs	r3, r3, #2
 8001390:	3302      	adds	r3, #2
 8001392:	693a      	ldr	r2, [r7, #16]
 8001394:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001398:	4b38      	ldr	r3, [pc, #224]	; (800147c <HAL_GPIO_Init+0x2f0>)
 800139a:	689b      	ldr	r3, [r3, #8]
 800139c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	43db      	mvns	r3, r3
 80013a2:	693a      	ldr	r2, [r7, #16]
 80013a4:	4013      	ands	r3, r2
 80013a6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	685b      	ldr	r3, [r3, #4]
 80013ac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d003      	beq.n	80013bc <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 80013b4:	693a      	ldr	r2, [r7, #16]
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	4313      	orrs	r3, r2
 80013ba:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80013bc:	4a2f      	ldr	r2, [pc, #188]	; (800147c <HAL_GPIO_Init+0x2f0>)
 80013be:	693b      	ldr	r3, [r7, #16]
 80013c0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80013c2:	4b2e      	ldr	r3, [pc, #184]	; (800147c <HAL_GPIO_Init+0x2f0>)
 80013c4:	68db      	ldr	r3, [r3, #12]
 80013c6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	43db      	mvns	r3, r3
 80013cc:	693a      	ldr	r2, [r7, #16]
 80013ce:	4013      	ands	r3, r2
 80013d0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80013d2:	683b      	ldr	r3, [r7, #0]
 80013d4:	685b      	ldr	r3, [r3, #4]
 80013d6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d003      	beq.n	80013e6 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 80013de:	693a      	ldr	r2, [r7, #16]
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	4313      	orrs	r3, r2
 80013e4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80013e6:	4a25      	ldr	r2, [pc, #148]	; (800147c <HAL_GPIO_Init+0x2f0>)
 80013e8:	693b      	ldr	r3, [r7, #16]
 80013ea:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80013ec:	4b23      	ldr	r3, [pc, #140]	; (800147c <HAL_GPIO_Init+0x2f0>)
 80013ee:	685b      	ldr	r3, [r3, #4]
 80013f0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	43db      	mvns	r3, r3
 80013f6:	693a      	ldr	r2, [r7, #16]
 80013f8:	4013      	ands	r3, r2
 80013fa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80013fc:	683b      	ldr	r3, [r7, #0]
 80013fe:	685b      	ldr	r3, [r3, #4]
 8001400:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001404:	2b00      	cmp	r3, #0
 8001406:	d003      	beq.n	8001410 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8001408:	693a      	ldr	r2, [r7, #16]
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	4313      	orrs	r3, r2
 800140e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001410:	4a1a      	ldr	r2, [pc, #104]	; (800147c <HAL_GPIO_Init+0x2f0>)
 8001412:	693b      	ldr	r3, [r7, #16]
 8001414:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001416:	4b19      	ldr	r3, [pc, #100]	; (800147c <HAL_GPIO_Init+0x2f0>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	43db      	mvns	r3, r3
 8001420:	693a      	ldr	r2, [r7, #16]
 8001422:	4013      	ands	r3, r2
 8001424:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001426:	683b      	ldr	r3, [r7, #0]
 8001428:	685b      	ldr	r3, [r3, #4]
 800142a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800142e:	2b00      	cmp	r3, #0
 8001430:	d003      	beq.n	800143a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001432:	693a      	ldr	r2, [r7, #16]
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	4313      	orrs	r3, r2
 8001438:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800143a:	4a10      	ldr	r2, [pc, #64]	; (800147c <HAL_GPIO_Init+0x2f0>)
 800143c:	693b      	ldr	r3, [r7, #16]
 800143e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001440:	697b      	ldr	r3, [r7, #20]
 8001442:	3301      	adds	r3, #1
 8001444:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001446:	683b      	ldr	r3, [r7, #0]
 8001448:	681a      	ldr	r2, [r3, #0]
 800144a:	697b      	ldr	r3, [r7, #20]
 800144c:	fa22 f303 	lsr.w	r3, r2, r3
 8001450:	2b00      	cmp	r3, #0
 8001452:	f47f aea3 	bne.w	800119c <HAL_GPIO_Init+0x10>
  }
}
 8001456:	bf00      	nop
 8001458:	bf00      	nop
 800145a:	371c      	adds	r7, #28
 800145c:	46bd      	mov	sp, r7
 800145e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001462:	4770      	bx	lr
 8001464:	40021000 	.word	0x40021000
 8001468:	40010000 	.word	0x40010000
 800146c:	48000400 	.word	0x48000400
 8001470:	48000800 	.word	0x48000800
 8001474:	48000c00 	.word	0x48000c00
 8001478:	48001000 	.word	0x48001000
 800147c:	40010400 	.word	0x40010400

08001480 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001480:	b480      	push	{r7}
 8001482:	b083      	sub	sp, #12
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
 8001488:	460b      	mov	r3, r1
 800148a:	807b      	strh	r3, [r7, #2]
 800148c:	4613      	mov	r3, r2
 800148e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001490:	787b      	ldrb	r3, [r7, #1]
 8001492:	2b00      	cmp	r3, #0
 8001494:	d003      	beq.n	800149e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001496:	887a      	ldrh	r2, [r7, #2]
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800149c:	e002      	b.n	80014a4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800149e:	887a      	ldrh	r2, [r7, #2]
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80014a4:	bf00      	nop
 80014a6:	370c      	adds	r7, #12
 80014a8:	46bd      	mov	sp, r7
 80014aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ae:	4770      	bx	lr

080014b0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80014b0:	b480      	push	{r7}
 80014b2:	b085      	sub	sp, #20
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
 80014b8:	460b      	mov	r3, r1
 80014ba:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	695b      	ldr	r3, [r3, #20]
 80014c0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80014c2:	887a      	ldrh	r2, [r7, #2]
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	4013      	ands	r3, r2
 80014c8:	041a      	lsls	r2, r3, #16
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	43d9      	mvns	r1, r3
 80014ce:	887b      	ldrh	r3, [r7, #2]
 80014d0:	400b      	ands	r3, r1
 80014d2:	431a      	orrs	r2, r3
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	619a      	str	r2, [r3, #24]
}
 80014d8:	bf00      	nop
 80014da:	3714      	adds	r7, #20
 80014dc:	46bd      	mov	sp, r7
 80014de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e2:	4770      	bx	lr

080014e4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b082      	sub	sp, #8
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d101      	bne.n	80014f6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80014f2:	2301      	movs	r3, #1
 80014f4:	e081      	b.n	80015fa <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80014fc:	b2db      	uxtb	r3, r3
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d106      	bne.n	8001510 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	2200      	movs	r2, #0
 8001506:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800150a:	6878      	ldr	r0, [r7, #4]
 800150c:	f7ff fa06 	bl	800091c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	2224      	movs	r2, #36	; 0x24
 8001514:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	681a      	ldr	r2, [r3, #0]
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f022 0201 	bic.w	r2, r2, #1
 8001526:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	685a      	ldr	r2, [r3, #4]
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001534:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	689a      	ldr	r2, [r3, #8]
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001544:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	68db      	ldr	r3, [r3, #12]
 800154a:	2b01      	cmp	r3, #1
 800154c:	d107      	bne.n	800155e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	689a      	ldr	r2, [r3, #8]
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800155a:	609a      	str	r2, [r3, #8]
 800155c:	e006      	b.n	800156c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	689a      	ldr	r2, [r3, #8]
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800156a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	68db      	ldr	r3, [r3, #12]
 8001570:	2b02      	cmp	r3, #2
 8001572:	d104      	bne.n	800157e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800157c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	685b      	ldr	r3, [r3, #4]
 8001584:	687a      	ldr	r2, [r7, #4]
 8001586:	6812      	ldr	r2, [r2, #0]
 8001588:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800158c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001590:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	68da      	ldr	r2, [r3, #12]
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80015a0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	691a      	ldr	r2, [r3, #16]
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	695b      	ldr	r3, [r3, #20]
 80015aa:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	699b      	ldr	r3, [r3, #24]
 80015b2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	430a      	orrs	r2, r1
 80015ba:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	69d9      	ldr	r1, [r3, #28]
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	6a1a      	ldr	r2, [r3, #32]
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	430a      	orrs	r2, r1
 80015ca:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	681a      	ldr	r2, [r3, #0]
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f042 0201 	orr.w	r2, r2, #1
 80015da:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	2200      	movs	r2, #0
 80015e0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	2220      	movs	r2, #32
 80015e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	2200      	movs	r2, #0
 80015ee:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	2200      	movs	r2, #0
 80015f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80015f8:	2300      	movs	r3, #0
}
 80015fa:	4618      	mov	r0, r3
 80015fc:	3708      	adds	r7, #8
 80015fe:	46bd      	mov	sp, r7
 8001600:	bd80      	pop	{r7, pc}

08001602 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001602:	b580      	push	{r7, lr}
 8001604:	b084      	sub	sp, #16
 8001606:	af00      	add	r7, sp, #0
 8001608:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	699b      	ldr	r3, [r3, #24]
 8001610:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800161e:	2b00      	cmp	r3, #0
 8001620:	d005      	beq.n	800162e <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001626:	68ba      	ldr	r2, [r7, #8]
 8001628:	68f9      	ldr	r1, [r7, #12]
 800162a:	6878      	ldr	r0, [r7, #4]
 800162c:	4798      	blx	r3
  }
}
 800162e:	bf00      	nop
 8001630:	3710      	adds	r7, #16
 8001632:	46bd      	mov	sp, r7
 8001634:	bd80      	pop	{r7, pc}

08001636 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001636:	b580      	push	{r7, lr}
 8001638:	b086      	sub	sp, #24
 800163a:	af00      	add	r7, sp, #0
 800163c:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	699b      	ldr	r3, [r3, #24]
 8001644:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800164e:	697b      	ldr	r3, [r7, #20]
 8001650:	0a1b      	lsrs	r3, r3, #8
 8001652:	f003 0301 	and.w	r3, r3, #1
 8001656:	2b00      	cmp	r3, #0
 8001658:	d010      	beq.n	800167c <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800165a:	693b      	ldr	r3, [r7, #16]
 800165c:	09db      	lsrs	r3, r3, #7
 800165e:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8001662:	2b00      	cmp	r3, #0
 8001664:	d00a      	beq.n	800167c <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800166a:	f043 0201 	orr.w	r2, r3, #1
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f44f 7280 	mov.w	r2, #256	; 0x100
 800167a:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800167c:	697b      	ldr	r3, [r7, #20]
 800167e:	0a9b      	lsrs	r3, r3, #10
 8001680:	f003 0301 	and.w	r3, r3, #1
 8001684:	2b00      	cmp	r3, #0
 8001686:	d010      	beq.n	80016aa <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8001688:	693b      	ldr	r3, [r7, #16]
 800168a:	09db      	lsrs	r3, r3, #7
 800168c:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8001690:	2b00      	cmp	r3, #0
 8001692:	d00a      	beq.n	80016aa <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001698:	f043 0208 	orr.w	r2, r3, #8
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80016a8:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80016aa:	697b      	ldr	r3, [r7, #20]
 80016ac:	0a5b      	lsrs	r3, r3, #9
 80016ae:	f003 0301 	and.w	r3, r3, #1
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d010      	beq.n	80016d8 <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80016b6:	693b      	ldr	r3, [r7, #16]
 80016b8:	09db      	lsrs	r3, r3, #7
 80016ba:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d00a      	beq.n	80016d8 <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016c6:	f043 0202 	orr.w	r2, r3, #2
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80016d6:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016dc:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	f003 030b 	and.w	r3, r3, #11
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d003      	beq.n	80016f0 <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 80016e8:	68f9      	ldr	r1, [r7, #12]
 80016ea:	6878      	ldr	r0, [r7, #4]
 80016ec:	f000 fb8a 	bl	8001e04 <I2C_ITError>
  }
}
 80016f0:	bf00      	nop
 80016f2:	3718      	adds	r7, #24
 80016f4:	46bd      	mov	sp, r7
 80016f6:	bd80      	pop	{r7, pc}

080016f8 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80016f8:	b480      	push	{r7}
 80016fa:	b083      	sub	sp, #12
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8001700:	bf00      	nop
 8001702:	370c      	adds	r7, #12
 8001704:	46bd      	mov	sp, r7
 8001706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170a:	4770      	bx	lr

0800170c <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800170c:	b480      	push	{r7}
 800170e:	b083      	sub	sp, #12
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8001714:	bf00      	nop
 8001716:	370c      	adds	r7, #12
 8001718:	46bd      	mov	sp, r7
 800171a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171e:	4770      	bx	lr

08001720 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8001720:	b480      	push	{r7}
 8001722:	b083      	sub	sp, #12
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
 8001728:	460b      	mov	r3, r1
 800172a:	70fb      	strb	r3, [r7, #3]
 800172c:	4613      	mov	r3, r2
 800172e:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8001730:	bf00      	nop
 8001732:	370c      	adds	r7, #12
 8001734:	46bd      	mov	sp, r7
 8001736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173a:	4770      	bx	lr

0800173c <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800173c:	b480      	push	{r7}
 800173e:	b083      	sub	sp, #12
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8001744:	bf00      	nop
 8001746:	370c      	adds	r7, #12
 8001748:	46bd      	mov	sp, r7
 800174a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174e:	4770      	bx	lr

08001750 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8001750:	b480      	push	{r7}
 8001752:	b083      	sub	sp, #12
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8001758:	bf00      	nop
 800175a:	370c      	adds	r7, #12
 800175c:	46bd      	mov	sp, r7
 800175e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001762:	4770      	bx	lr

08001764 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001764:	b480      	push	{r7}
 8001766:	b083      	sub	sp, #12
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800176c:	bf00      	nop
 800176e:	370c      	adds	r7, #12
 8001770:	46bd      	mov	sp, r7
 8001772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001776:	4770      	bx	lr

08001778 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b086      	sub	sp, #24
 800177c:	af00      	add	r7, sp, #0
 800177e:	60f8      	str	r0, [r7, #12]
 8001780:	60b9      	str	r1, [r7, #8]
 8001782:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001788:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 800178a:	68bb      	ldr	r3, [r7, #8]
 800178c:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001794:	2b01      	cmp	r3, #1
 8001796:	d101      	bne.n	800179c <I2C_Slave_ISR_IT+0x24>
 8001798:	2302      	movs	r3, #2
 800179a:	e0ec      	b.n	8001976 <I2C_Slave_ISR_IT+0x1fe>
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	2201      	movs	r2, #1
 80017a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80017a4:	693b      	ldr	r3, [r7, #16]
 80017a6:	095b      	lsrs	r3, r3, #5
 80017a8:	f003 0301 	and.w	r3, r3, #1
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d009      	beq.n	80017c4 <I2C_Slave_ISR_IT+0x4c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	095b      	lsrs	r3, r3, #5
 80017b4:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d003      	beq.n	80017c4 <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 80017bc:	6939      	ldr	r1, [r7, #16]
 80017be:	68f8      	ldr	r0, [r7, #12]
 80017c0:	f000 f9c0 	bl	8001b44 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80017c4:	693b      	ldr	r3, [r7, #16]
 80017c6:	091b      	lsrs	r3, r3, #4
 80017c8:	f003 0301 	and.w	r3, r3, #1
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d04d      	beq.n	800186c <I2C_Slave_ISR_IT+0xf4>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	091b      	lsrs	r3, r3, #4
 80017d4:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d047      	beq.n	800186c <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017e0:	b29b      	uxth	r3, r3
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d128      	bne.n	8001838 <I2C_Slave_ISR_IT+0xc0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80017ec:	b2db      	uxtb	r3, r3
 80017ee:	2b28      	cmp	r3, #40	; 0x28
 80017f0:	d108      	bne.n	8001804 <I2C_Slave_ISR_IT+0x8c>
 80017f2:	697b      	ldr	r3, [r7, #20]
 80017f4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80017f8:	d104      	bne.n	8001804 <I2C_Slave_ISR_IT+0x8c>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80017fa:	6939      	ldr	r1, [r7, #16]
 80017fc:	68f8      	ldr	r0, [r7, #12]
 80017fe:	f000 faab 	bl	8001d58 <I2C_ITListenCplt>
 8001802:	e032      	b.n	800186a <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800180a:	b2db      	uxtb	r3, r3
 800180c:	2b29      	cmp	r3, #41	; 0x29
 800180e:	d10e      	bne.n	800182e <I2C_Slave_ISR_IT+0xb6>
 8001810:	697b      	ldr	r3, [r7, #20]
 8001812:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001816:	d00a      	beq.n	800182e <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	2210      	movs	r2, #16
 800181e:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8001820:	68f8      	ldr	r0, [r7, #12]
 8001822:	f000 fbe6 	bl	8001ff2 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8001826:	68f8      	ldr	r0, [r7, #12]
 8001828:	f000 f92d 	bl	8001a86 <I2C_ITSlaveSeqCplt>
 800182c:	e01d      	b.n	800186a <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	2210      	movs	r2, #16
 8001834:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8001836:	e096      	b.n	8001966 <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	2210      	movs	r2, #16
 800183e:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001844:	f043 0204 	orr.w	r2, r3, #4
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800184c:	697b      	ldr	r3, [r7, #20]
 800184e:	2b00      	cmp	r3, #0
 8001850:	d004      	beq.n	800185c <I2C_Slave_ISR_IT+0xe4>
 8001852:	697b      	ldr	r3, [r7, #20]
 8001854:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001858:	f040 8085 	bne.w	8001966 <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001860:	4619      	mov	r1, r3
 8001862:	68f8      	ldr	r0, [r7, #12]
 8001864:	f000 face 	bl	8001e04 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8001868:	e07d      	b.n	8001966 <I2C_Slave_ISR_IT+0x1ee>
 800186a:	e07c      	b.n	8001966 <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800186c:	693b      	ldr	r3, [r7, #16]
 800186e:	089b      	lsrs	r3, r3, #2
 8001870:	f003 0301 	and.w	r3, r3, #1
 8001874:	2b00      	cmp	r3, #0
 8001876:	d030      	beq.n	80018da <I2C_Slave_ISR_IT+0x162>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	089b      	lsrs	r3, r3, #2
 800187c:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8001880:	2b00      	cmp	r3, #0
 8001882:	d02a      	beq.n	80018da <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001888:	b29b      	uxth	r3, r3
 800188a:	2b00      	cmp	r3, #0
 800188c:	d018      	beq.n	80018c0 <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001898:	b2d2      	uxtb	r2, r2
 800189a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018a0:	1c5a      	adds	r2, r3, #1
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018aa:	3b01      	subs	r3, #1
 80018ac:	b29a      	uxth	r2, r3
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018b6:	b29b      	uxth	r3, r3
 80018b8:	3b01      	subs	r3, #1
 80018ba:	b29a      	uxth	r2, r3
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018c4:	b29b      	uxth	r3, r3
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d14f      	bne.n	800196a <I2C_Slave_ISR_IT+0x1f2>
 80018ca:	697b      	ldr	r3, [r7, #20]
 80018cc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80018d0:	d04b      	beq.n	800196a <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 80018d2:	68f8      	ldr	r0, [r7, #12]
 80018d4:	f000 f8d7 	bl	8001a86 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 80018d8:	e047      	b.n	800196a <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80018da:	693b      	ldr	r3, [r7, #16]
 80018dc:	08db      	lsrs	r3, r3, #3
 80018de:	f003 0301 	and.w	r3, r3, #1
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d00a      	beq.n	80018fc <I2C_Slave_ISR_IT+0x184>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	08db      	lsrs	r3, r3, #3
 80018ea:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d004      	beq.n	80018fc <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 80018f2:	6939      	ldr	r1, [r7, #16]
 80018f4:	68f8      	ldr	r0, [r7, #12]
 80018f6:	f000 f842 	bl	800197e <I2C_ITAddrCplt>
 80018fa:	e037      	b.n	800196c <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80018fc:	693b      	ldr	r3, [r7, #16]
 80018fe:	085b      	lsrs	r3, r3, #1
 8001900:	f003 0301 	and.w	r3, r3, #1
 8001904:	2b00      	cmp	r3, #0
 8001906:	d031      	beq.n	800196c <I2C_Slave_ISR_IT+0x1f4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	085b      	lsrs	r3, r3, #1
 800190c:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8001910:	2b00      	cmp	r3, #0
 8001912:	d02b      	beq.n	800196c <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001918:	b29b      	uxth	r3, r3
 800191a:	2b00      	cmp	r3, #0
 800191c:	d018      	beq.n	8001950 <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001922:	781a      	ldrb	r2, [r3, #0]
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800192e:	1c5a      	adds	r2, r3, #1
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001938:	b29b      	uxth	r3, r3
 800193a:	3b01      	subs	r3, #1
 800193c:	b29a      	uxth	r2, r3
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001946:	3b01      	subs	r3, #1
 8001948:	b29a      	uxth	r2, r3
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	851a      	strh	r2, [r3, #40]	; 0x28
 800194e:	e00d      	b.n	800196c <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8001950:	697b      	ldr	r3, [r7, #20]
 8001952:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001956:	d002      	beq.n	800195e <I2C_Slave_ISR_IT+0x1e6>
 8001958:	697b      	ldr	r3, [r7, #20]
 800195a:	2b00      	cmp	r3, #0
 800195c:	d106      	bne.n	800196c <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800195e:	68f8      	ldr	r0, [r7, #12]
 8001960:	f000 f891 	bl	8001a86 <I2C_ITSlaveSeqCplt>
 8001964:	e002      	b.n	800196c <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 8001966:	bf00      	nop
 8001968:	e000      	b.n	800196c <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 800196a:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	2200      	movs	r2, #0
 8001970:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8001974:	2300      	movs	r3, #0
}
 8001976:	4618      	mov	r0, r3
 8001978:	3718      	adds	r7, #24
 800197a:	46bd      	mov	sp, r7
 800197c:	bd80      	pop	{r7, pc}

0800197e <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800197e:	b580      	push	{r7, lr}
 8001980:	b084      	sub	sp, #16
 8001982:	af00      	add	r7, sp, #0
 8001984:	6078      	str	r0, [r7, #4]
 8001986:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800198e:	b2db      	uxtb	r3, r3
 8001990:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8001994:	2b28      	cmp	r3, #40	; 0x28
 8001996:	d16a      	bne.n	8001a6e <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	699b      	ldr	r3, [r3, #24]
 800199e:	0c1b      	lsrs	r3, r3, #16
 80019a0:	b2db      	uxtb	r3, r3
 80019a2:	f003 0301 	and.w	r3, r3, #1
 80019a6:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	699b      	ldr	r3, [r3, #24]
 80019ae:	0c1b      	lsrs	r3, r3, #16
 80019b0:	b29b      	uxth	r3, r3
 80019b2:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 80019b6:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	689b      	ldr	r3, [r3, #8]
 80019be:	b29b      	uxth	r3, r3
 80019c0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80019c4:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	68db      	ldr	r3, [r3, #12]
 80019cc:	b29b      	uxth	r3, r3
 80019ce:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 80019d2:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	68db      	ldr	r3, [r3, #12]
 80019d8:	2b02      	cmp	r3, #2
 80019da:	d138      	bne.n	8001a4e <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 80019dc:	897b      	ldrh	r3, [r7, #10]
 80019de:	09db      	lsrs	r3, r3, #7
 80019e0:	b29a      	uxth	r2, r3
 80019e2:	89bb      	ldrh	r3, [r7, #12]
 80019e4:	4053      	eors	r3, r2
 80019e6:	b29b      	uxth	r3, r3
 80019e8:	f003 0306 	and.w	r3, r3, #6
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d11c      	bne.n	8001a2a <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 80019f0:	897b      	ldrh	r3, [r7, #10]
 80019f2:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80019f8:	1c5a      	adds	r2, r3, #1
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a02:	2b02      	cmp	r3, #2
 8001a04:	d13b      	bne.n	8001a7e <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	2200      	movs	r2, #0
 8001a0a:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	2208      	movs	r2, #8
 8001a12:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	2200      	movs	r2, #0
 8001a18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8001a1c:	89ba      	ldrh	r2, [r7, #12]
 8001a1e:	7bfb      	ldrb	r3, [r7, #15]
 8001a20:	4619      	mov	r1, r3
 8001a22:	6878      	ldr	r0, [r7, #4]
 8001a24:	f7ff fe7c 	bl	8001720 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8001a28:	e029      	b.n	8001a7e <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8001a2a:	893b      	ldrh	r3, [r7, #8]
 8001a2c:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8001a2e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001a32:	6878      	ldr	r0, [r7, #4]
 8001a34:	f000 fb1f 	bl	8002076 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8001a40:	89ba      	ldrh	r2, [r7, #12]
 8001a42:	7bfb      	ldrb	r3, [r7, #15]
 8001a44:	4619      	mov	r1, r3
 8001a46:	6878      	ldr	r0, [r7, #4]
 8001a48:	f7ff fe6a 	bl	8001720 <HAL_I2C_AddrCallback>
}
 8001a4c:	e017      	b.n	8001a7e <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8001a4e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001a52:	6878      	ldr	r0, [r7, #4]
 8001a54:	f000 fb0f 	bl	8002076 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8001a60:	89ba      	ldrh	r2, [r7, #12]
 8001a62:	7bfb      	ldrb	r3, [r7, #15]
 8001a64:	4619      	mov	r1, r3
 8001a66:	6878      	ldr	r0, [r7, #4]
 8001a68:	f7ff fe5a 	bl	8001720 <HAL_I2C_AddrCallback>
}
 8001a6c:	e007      	b.n	8001a7e <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	2208      	movs	r2, #8
 8001a74:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	2200      	movs	r2, #0
 8001a7a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8001a7e:	bf00      	nop
 8001a80:	3710      	adds	r7, #16
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bd80      	pop	{r7, pc}

08001a86 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8001a86:	b580      	push	{r7, lr}
 8001a88:	b084      	sub	sp, #16
 8001a8a:	af00      	add	r7, sp, #0
 8001a8c:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	2200      	movs	r2, #0
 8001a9a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	0b9b      	lsrs	r3, r3, #14
 8001aa2:	f003 0301 	and.w	r3, r3, #1
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d008      	beq.n	8001abc <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	681a      	ldr	r2, [r3, #0]
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001ab8:	601a      	str	r2, [r3, #0]
 8001aba:	e00d      	b.n	8001ad8 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	0bdb      	lsrs	r3, r3, #15
 8001ac0:	f003 0301 	and.w	r3, r3, #1
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d007      	beq.n	8001ad8 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	681a      	ldr	r2, [r3, #0]
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001ad6:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001ade:	b2db      	uxtb	r3, r3
 8001ae0:	2b29      	cmp	r3, #41	; 0x29
 8001ae2:	d112      	bne.n	8001b0a <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	2228      	movs	r2, #40	; 0x28
 8001ae8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	2221      	movs	r2, #33	; 0x21
 8001af0:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8001af2:	2101      	movs	r1, #1
 8001af4:	6878      	ldr	r0, [r7, #4]
 8001af6:	f000 fabe 	bl	8002076 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	2200      	movs	r2, #0
 8001afe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8001b02:	6878      	ldr	r0, [r7, #4]
 8001b04:	f7ff fdf8 	bl	80016f8 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8001b08:	e017      	b.n	8001b3a <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001b10:	b2db      	uxtb	r3, r3
 8001b12:	2b2a      	cmp	r3, #42	; 0x2a
 8001b14:	d111      	bne.n	8001b3a <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	2228      	movs	r2, #40	; 0x28
 8001b1a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	2222      	movs	r2, #34	; 0x22
 8001b22:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8001b24:	2102      	movs	r1, #2
 8001b26:	6878      	ldr	r0, [r7, #4]
 8001b28:	f000 faa5 	bl	8002076 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	2200      	movs	r2, #0
 8001b30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8001b34:	6878      	ldr	r0, [r7, #4]
 8001b36:	f7ff fde9 	bl	800170c <HAL_I2C_SlaveRxCpltCallback>
}
 8001b3a:	bf00      	nop
 8001b3c:	3710      	adds	r7, #16
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bd80      	pop	{r7, pc}
	...

08001b44 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b086      	sub	sp, #24
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
 8001b4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8001b56:	683b      	ldr	r3, [r7, #0]
 8001b58:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001b60:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	2220      	movs	r2, #32
 8001b68:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8001b6a:	7bfb      	ldrb	r3, [r7, #15]
 8001b6c:	2b21      	cmp	r3, #33	; 0x21
 8001b6e:	d002      	beq.n	8001b76 <I2C_ITSlaveCplt+0x32>
 8001b70:	7bfb      	ldrb	r3, [r7, #15]
 8001b72:	2b29      	cmp	r3, #41	; 0x29
 8001b74:	d108      	bne.n	8001b88 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8001b76:	f248 0101 	movw	r1, #32769	; 0x8001
 8001b7a:	6878      	ldr	r0, [r7, #4]
 8001b7c:	f000 fa7b 	bl	8002076 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	2221      	movs	r2, #33	; 0x21
 8001b84:	631a      	str	r2, [r3, #48]	; 0x30
 8001b86:	e00d      	b.n	8001ba4 <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8001b88:	7bfb      	ldrb	r3, [r7, #15]
 8001b8a:	2b22      	cmp	r3, #34	; 0x22
 8001b8c:	d002      	beq.n	8001b94 <I2C_ITSlaveCplt+0x50>
 8001b8e:	7bfb      	ldrb	r3, [r7, #15]
 8001b90:	2b2a      	cmp	r3, #42	; 0x2a
 8001b92:	d107      	bne.n	8001ba4 <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8001b94:	f248 0102 	movw	r1, #32770	; 0x8002
 8001b98:	6878      	ldr	r0, [r7, #4]
 8001b9a:	f000 fa6c 	bl	8002076 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	2222      	movs	r2, #34	; 0x22
 8001ba2:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	685a      	ldr	r2, [r3, #4]
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001bb2:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	6859      	ldr	r1, [r3, #4]
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681a      	ldr	r2, [r3, #0]
 8001bbe:	4b64      	ldr	r3, [pc, #400]	; (8001d50 <I2C_ITSlaveCplt+0x20c>)
 8001bc0:	400b      	ands	r3, r1
 8001bc2:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8001bc4:	6878      	ldr	r0, [r7, #4]
 8001bc6:	f000 fa14 	bl	8001ff2 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8001bca:	693b      	ldr	r3, [r7, #16]
 8001bcc:	0b9b      	lsrs	r3, r3, #14
 8001bce:	f003 0301 	and.w	r3, r3, #1
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d013      	beq.n	8001bfe <I2C_ITSlaveCplt+0xba>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	681a      	ldr	r2, [r3, #0]
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001be4:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d020      	beq.n	8001c30 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	685b      	ldr	r3, [r3, #4]
 8001bf6:	b29a      	uxth	r2, r3
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001bfc:	e018      	b.n	8001c30 <I2C_ITSlaveCplt+0xec>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8001bfe:	693b      	ldr	r3, [r7, #16]
 8001c00:	0bdb      	lsrs	r3, r3, #15
 8001c02:	f003 0301 	and.w	r3, r3, #1
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d012      	beq.n	8001c30 <I2C_ITSlaveCplt+0xec>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	681a      	ldr	r2, [r3, #0]
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001c18:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d006      	beq.n	8001c30 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	685b      	ldr	r3, [r3, #4]
 8001c2a:	b29a      	uxth	r2, r3
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8001c30:	697b      	ldr	r3, [r7, #20]
 8001c32:	089b      	lsrs	r3, r3, #2
 8001c34:	f003 0301 	and.w	r3, r3, #1
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d020      	beq.n	8001c7e <I2C_ITSlaveCplt+0x13a>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8001c3c:	697b      	ldr	r3, [r7, #20]
 8001c3e:	f023 0304 	bic.w	r3, r3, #4
 8001c42:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c4e:	b2d2      	uxtb	r2, r2
 8001c50:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c56:	1c5a      	adds	r2, r3, #1
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d00c      	beq.n	8001c7e <I2C_ITSlaveCplt+0x13a>
    {
      hi2c->XferSize--;
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c68:	3b01      	subs	r3, #1
 8001c6a:	b29a      	uxth	r2, r3
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c74:	b29b      	uxth	r3, r3
 8001c76:	3b01      	subs	r3, #1
 8001c78:	b29a      	uxth	r2, r3
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c82:	b29b      	uxth	r3, r3
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d005      	beq.n	8001c94 <I2C_ITSlaveCplt+0x150>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c8c:	f043 0204 	orr.w	r2, r3, #4
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	2200      	movs	r2, #0
 8001c98:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d010      	beq.n	8001ccc <I2C_ITSlaveCplt+0x188>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cae:	4619      	mov	r1, r3
 8001cb0:	6878      	ldr	r0, [r7, #4]
 8001cb2:	f000 f8a7 	bl	8001e04 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001cbc:	b2db      	uxtb	r3, r3
 8001cbe:	2b28      	cmp	r3, #40	; 0x28
 8001cc0:	d141      	bne.n	8001d46 <I2C_ITSlaveCplt+0x202>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8001cc2:	6979      	ldr	r1, [r7, #20]
 8001cc4:	6878      	ldr	r0, [r7, #4]
 8001cc6:	f000 f847 	bl	8001d58 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8001cca:	e03c      	b.n	8001d46 <I2C_ITSlaveCplt+0x202>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cd0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001cd4:	d014      	beq.n	8001d00 <I2C_ITSlaveCplt+0x1bc>
    I2C_ITSlaveSeqCplt(hi2c);
 8001cd6:	6878      	ldr	r0, [r7, #4]
 8001cd8:	f7ff fed5 	bl	8001a86 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	4a1d      	ldr	r2, [pc, #116]	; (8001d54 <I2C_ITSlaveCplt+0x210>)
 8001ce0:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	2220      	movs	r2, #32
 8001ce6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	2200      	movs	r2, #0
 8001cee:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8001cf8:	6878      	ldr	r0, [r7, #4]
 8001cfa:	f7ff fd1f 	bl	800173c <HAL_I2C_ListenCpltCallback>
}
 8001cfe:	e022      	b.n	8001d46 <I2C_ITSlaveCplt+0x202>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001d06:	b2db      	uxtb	r3, r3
 8001d08:	2b22      	cmp	r3, #34	; 0x22
 8001d0a:	d10e      	bne.n	8001d2a <I2C_ITSlaveCplt+0x1e6>
    hi2c->State = HAL_I2C_STATE_READY;
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	2220      	movs	r2, #32
 8001d10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	2200      	movs	r2, #0
 8001d18:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8001d22:	6878      	ldr	r0, [r7, #4]
 8001d24:	f7ff fcf2 	bl	800170c <HAL_I2C_SlaveRxCpltCallback>
}
 8001d28:	e00d      	b.n	8001d46 <I2C_ITSlaveCplt+0x202>
    hi2c->State = HAL_I2C_STATE_READY;
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	2220      	movs	r2, #32
 8001d2e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	2200      	movs	r2, #0
 8001d36:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8001d40:	6878      	ldr	r0, [r7, #4]
 8001d42:	f7ff fcd9 	bl	80016f8 <HAL_I2C_SlaveTxCpltCallback>
}
 8001d46:	bf00      	nop
 8001d48:	3718      	adds	r7, #24
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bd80      	pop	{r7, pc}
 8001d4e:	bf00      	nop
 8001d50:	fe00e800 	.word	0xfe00e800
 8001d54:	ffff0000 	.word	0xffff0000

08001d58 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b082      	sub	sp, #8
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
 8001d60:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	4a26      	ldr	r2, [pc, #152]	; (8001e00 <I2C_ITListenCplt+0xa8>)
 8001d66:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	2220      	movs	r2, #32
 8001d72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	2200      	movs	r2, #0
 8001d7a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	2200      	movs	r2, #0
 8001d82:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	089b      	lsrs	r3, r3, #2
 8001d88:	f003 0301 	and.w	r3, r3, #1
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d022      	beq.n	8001dd6 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d9a:	b2d2      	uxtb	r2, r2
 8001d9c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001da2:	1c5a      	adds	r2, r3, #1
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d012      	beq.n	8001dd6 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001db4:	3b01      	subs	r3, #1
 8001db6:	b29a      	uxth	r2, r3
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001dc0:	b29b      	uxth	r3, r3
 8001dc2:	3b01      	subs	r3, #1
 8001dc4:	b29a      	uxth	r2, r3
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dce:	f043 0204 	orr.w	r2, r3, #4
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8001dd6:	f248 0103 	movw	r1, #32771	; 0x8003
 8001dda:	6878      	ldr	r0, [r7, #4]
 8001ddc:	f000 f94b 	bl	8002076 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	2210      	movs	r2, #16
 8001de6:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	2200      	movs	r2, #0
 8001dec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8001df0:	6878      	ldr	r0, [r7, #4]
 8001df2:	f7ff fca3 	bl	800173c <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8001df6:	bf00      	nop
 8001df8:	3708      	adds	r7, #8
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bd80      	pop	{r7, pc}
 8001dfe:	bf00      	nop
 8001e00:	ffff0000 	.word	0xffff0000

08001e04 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b084      	sub	sp, #16
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
 8001e0c:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001e14:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	2200      	movs	r2, #0
 8001e1a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	4a5d      	ldr	r2, [pc, #372]	; (8001f98 <I2C_ITError+0x194>)
 8001e22:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	2200      	movs	r2, #0
 8001e28:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001e2e:	683b      	ldr	r3, [r7, #0]
 8001e30:	431a      	orrs	r2, r3
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8001e36:	7bfb      	ldrb	r3, [r7, #15]
 8001e38:	2b28      	cmp	r3, #40	; 0x28
 8001e3a:	d005      	beq.n	8001e48 <I2C_ITError+0x44>
 8001e3c:	7bfb      	ldrb	r3, [r7, #15]
 8001e3e:	2b29      	cmp	r3, #41	; 0x29
 8001e40:	d002      	beq.n	8001e48 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8001e42:	7bfb      	ldrb	r3, [r7, #15]
 8001e44:	2b2a      	cmp	r3, #42	; 0x2a
 8001e46:	d10b      	bne.n	8001e60 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8001e48:	2103      	movs	r1, #3
 8001e4a:	6878      	ldr	r0, [r7, #4]
 8001e4c:	f000 f913 	bl	8002076 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	2228      	movs	r2, #40	; 0x28
 8001e54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	4a50      	ldr	r2, [pc, #320]	; (8001f9c <I2C_ITError+0x198>)
 8001e5c:	635a      	str	r2, [r3, #52]	; 0x34
 8001e5e:	e011      	b.n	8001e84 <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8001e60:	f248 0103 	movw	r1, #32771	; 0x8003
 8001e64:	6878      	ldr	r0, [r7, #4]
 8001e66:	f000 f906 	bl	8002076 <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001e70:	b2db      	uxtb	r3, r3
 8001e72:	2b60      	cmp	r3, #96	; 0x60
 8001e74:	d003      	beq.n	8001e7e <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	2220      	movs	r2, #32
 8001e7a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	2200      	movs	r2, #0
 8001e82:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e88:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d039      	beq.n	8001f06 <I2C_ITError+0x102>
 8001e92:	68bb      	ldr	r3, [r7, #8]
 8001e94:	2b11      	cmp	r3, #17
 8001e96:	d002      	beq.n	8001e9e <I2C_ITError+0x9a>
 8001e98:	68bb      	ldr	r3, [r7, #8]
 8001e9a:	2b21      	cmp	r3, #33	; 0x21
 8001e9c:	d133      	bne.n	8001f06 <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ea8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001eac:	d107      	bne.n	8001ebe <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	681a      	ldr	r2, [r3, #0]
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001ebc:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	f7ff f953 	bl	800116e <HAL_DMA_GetState>
 8001ec8:	4603      	mov	r3, r0
 8001eca:	2b01      	cmp	r3, #1
 8001ecc:	d017      	beq.n	8001efe <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ed2:	4a33      	ldr	r2, [pc, #204]	; (8001fa0 <I2C_ITError+0x19c>)
 8001ed4:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	2200      	movs	r2, #0
 8001eda:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	f7ff f902 	bl	80010ec <HAL_DMA_Abort_IT>
 8001ee8:	4603      	mov	r3, r0
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d04d      	beq.n	8001f8a <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ef2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ef4:	687a      	ldr	r2, [r7, #4]
 8001ef6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001ef8:	4610      	mov	r0, r2
 8001efa:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8001efc:	e045      	b.n	8001f8a <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8001efe:	6878      	ldr	r0, [r7, #4]
 8001f00:	f000 f850 	bl	8001fa4 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8001f04:	e041      	b.n	8001f8a <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d039      	beq.n	8001f82 <I2C_ITError+0x17e>
 8001f0e:	68bb      	ldr	r3, [r7, #8]
 8001f10:	2b12      	cmp	r3, #18
 8001f12:	d002      	beq.n	8001f1a <I2C_ITError+0x116>
 8001f14:	68bb      	ldr	r3, [r7, #8]
 8001f16:	2b22      	cmp	r3, #34	; 0x22
 8001f18:	d133      	bne.n	8001f82 <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001f24:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001f28:	d107      	bne.n	8001f3a <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	681a      	ldr	r2, [r3, #0]
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001f38:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f3e:	4618      	mov	r0, r3
 8001f40:	f7ff f915 	bl	800116e <HAL_DMA_GetState>
 8001f44:	4603      	mov	r3, r0
 8001f46:	2b01      	cmp	r3, #1
 8001f48:	d017      	beq.n	8001f7a <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f4e:	4a14      	ldr	r2, [pc, #80]	; (8001fa0 <I2C_ITError+0x19c>)
 8001f50:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	2200      	movs	r2, #0
 8001f56:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f5e:	4618      	mov	r0, r3
 8001f60:	f7ff f8c4 	bl	80010ec <HAL_DMA_Abort_IT>
 8001f64:	4603      	mov	r3, r0
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d011      	beq.n	8001f8e <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f70:	687a      	ldr	r2, [r7, #4]
 8001f72:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001f74:	4610      	mov	r0, r2
 8001f76:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8001f78:	e009      	b.n	8001f8e <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8001f7a:	6878      	ldr	r0, [r7, #4]
 8001f7c:	f000 f812 	bl	8001fa4 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8001f80:	e005      	b.n	8001f8e <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8001f82:	6878      	ldr	r0, [r7, #4]
 8001f84:	f000 f80e 	bl	8001fa4 <I2C_TreatErrorCallback>
  }
}
 8001f88:	e002      	b.n	8001f90 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8001f8a:	bf00      	nop
 8001f8c:	e000      	b.n	8001f90 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8001f8e:	bf00      	nop
}
 8001f90:	bf00      	nop
 8001f92:	3710      	adds	r7, #16
 8001f94:	46bd      	mov	sp, r7
 8001f96:	bd80      	pop	{r7, pc}
 8001f98:	ffff0000 	.word	0xffff0000
 8001f9c:	08001779 	.word	0x08001779
 8001fa0:	0800203b 	.word	0x0800203b

08001fa4 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b082      	sub	sp, #8
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001fb2:	b2db      	uxtb	r3, r3
 8001fb4:	2b60      	cmp	r3, #96	; 0x60
 8001fb6:	d10e      	bne.n	8001fd6 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	2220      	movs	r2, #32
 8001fbc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	2200      	movs	r2, #0
 8001fca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8001fce:	6878      	ldr	r0, [r7, #4]
 8001fd0:	f7ff fbc8 	bl	8001764 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8001fd4:	e009      	b.n	8001fea <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	2200      	movs	r2, #0
 8001fda:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	2200      	movs	r2, #0
 8001fe0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8001fe4:	6878      	ldr	r0, [r7, #4]
 8001fe6:	f7ff fbb3 	bl	8001750 <HAL_I2C_ErrorCallback>
}
 8001fea:	bf00      	nop
 8001fec:	3708      	adds	r7, #8
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bd80      	pop	{r7, pc}

08001ff2 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001ff2:	b480      	push	{r7}
 8001ff4:	b083      	sub	sp, #12
 8001ff6:	af00      	add	r7, sp, #0
 8001ff8:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	699b      	ldr	r3, [r3, #24]
 8002000:	f003 0302 	and.w	r3, r3, #2
 8002004:	2b02      	cmp	r3, #2
 8002006:	d103      	bne.n	8002010 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	2200      	movs	r2, #0
 800200e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	699b      	ldr	r3, [r3, #24]
 8002016:	f003 0301 	and.w	r3, r3, #1
 800201a:	2b01      	cmp	r3, #1
 800201c:	d007      	beq.n	800202e <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	699a      	ldr	r2, [r3, #24]
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f042 0201 	orr.w	r2, r2, #1
 800202c:	619a      	str	r2, [r3, #24]
  }
}
 800202e:	bf00      	nop
 8002030:	370c      	adds	r7, #12
 8002032:	46bd      	mov	sp, r7
 8002034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002038:	4770      	bx	lr

0800203a <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800203a:	b580      	push	{r7, lr}
 800203c:	b084      	sub	sp, #16
 800203e:	af00      	add	r7, sp, #0
 8002040:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002046:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800204c:	2b00      	cmp	r3, #0
 800204e:	d003      	beq.n	8002058 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002054:	2200      	movs	r2, #0
 8002056:	639a      	str	r2, [r3, #56]	; 0x38
  }
  if (hi2c->hdmarx != NULL)
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800205c:	2b00      	cmp	r3, #0
 800205e:	d003      	beq.n	8002068 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002064:	2200      	movs	r2, #0
 8002066:	639a      	str	r2, [r3, #56]	; 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8002068:	68f8      	ldr	r0, [r7, #12]
 800206a:	f7ff ff9b 	bl	8001fa4 <I2C_TreatErrorCallback>
}
 800206e:	bf00      	nop
 8002070:	3710      	adds	r7, #16
 8002072:	46bd      	mov	sp, r7
 8002074:	bd80      	pop	{r7, pc}

08002076 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8002076:	b480      	push	{r7}
 8002078:	b085      	sub	sp, #20
 800207a:	af00      	add	r7, sp, #0
 800207c:	6078      	str	r0, [r7, #4]
 800207e:	460b      	mov	r3, r1
 8002080:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8002082:	2300      	movs	r3, #0
 8002084:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8002086:	887b      	ldrh	r3, [r7, #2]
 8002088:	f003 0301 	and.w	r3, r3, #1
 800208c:	2b00      	cmp	r3, #0
 800208e:	d00f      	beq.n	80020b0 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8002096:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800209e:	b2db      	uxtb	r3, r3
 80020a0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80020a4:	2b28      	cmp	r3, #40	; 0x28
 80020a6:	d003      	beq.n	80020b0 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 80020ae:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80020b0:	887b      	ldrh	r3, [r7, #2]
 80020b2:	f003 0302 	and.w	r3, r3, #2
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d00f      	beq.n	80020da <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 80020c0:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80020c8:	b2db      	uxtb	r3, r3
 80020ca:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80020ce:	2b28      	cmp	r3, #40	; 0x28
 80020d0:	d003      	beq.n	80020da <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 80020d8:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80020da:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80020de:	2b00      	cmp	r3, #0
 80020e0:	da03      	bge.n	80020ea <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 80020e8:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 80020ea:	887b      	ldrh	r3, [r7, #2]
 80020ec:	2b10      	cmp	r3, #16
 80020ee:	d103      	bne.n	80020f8 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 80020f6:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 80020f8:	887b      	ldrh	r3, [r7, #2]
 80020fa:	2b20      	cmp	r3, #32
 80020fc:	d103      	bne.n	8002106 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	f043 0320 	orr.w	r3, r3, #32
 8002104:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8002106:	887b      	ldrh	r3, [r7, #2]
 8002108:	2b40      	cmp	r3, #64	; 0x40
 800210a:	d103      	bne.n	8002114 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002112:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	6819      	ldr	r1, [r3, #0]
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	43da      	mvns	r2, r3
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	400a      	ands	r2, r1
 8002124:	601a      	str	r2, [r3, #0]
}
 8002126:	bf00      	nop
 8002128:	3714      	adds	r7, #20
 800212a:	46bd      	mov	sp, r7
 800212c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002130:	4770      	bx	lr

08002132 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002132:	b480      	push	{r7}
 8002134:	b083      	sub	sp, #12
 8002136:	af00      	add	r7, sp, #0
 8002138:	6078      	str	r0, [r7, #4]
 800213a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002142:	b2db      	uxtb	r3, r3
 8002144:	2b20      	cmp	r3, #32
 8002146:	d138      	bne.n	80021ba <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800214e:	2b01      	cmp	r3, #1
 8002150:	d101      	bne.n	8002156 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002152:	2302      	movs	r3, #2
 8002154:	e032      	b.n	80021bc <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	2201      	movs	r2, #1
 800215a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	2224      	movs	r2, #36	; 0x24
 8002162:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	681a      	ldr	r2, [r3, #0]
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f022 0201 	bic.w	r2, r2, #1
 8002174:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	681a      	ldr	r2, [r3, #0]
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002184:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	6819      	ldr	r1, [r3, #0]
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	683a      	ldr	r2, [r7, #0]
 8002192:	430a      	orrs	r2, r1
 8002194:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	681a      	ldr	r2, [r3, #0]
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f042 0201 	orr.w	r2, r2, #1
 80021a4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	2220      	movs	r2, #32
 80021aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	2200      	movs	r2, #0
 80021b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80021b6:	2300      	movs	r3, #0
 80021b8:	e000      	b.n	80021bc <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80021ba:	2302      	movs	r3, #2
  }
}
 80021bc:	4618      	mov	r0, r3
 80021be:	370c      	adds	r7, #12
 80021c0:	46bd      	mov	sp, r7
 80021c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c6:	4770      	bx	lr

080021c8 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80021c8:	b480      	push	{r7}
 80021ca:	b085      	sub	sp, #20
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
 80021d0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80021d8:	b2db      	uxtb	r3, r3
 80021da:	2b20      	cmp	r3, #32
 80021dc:	d139      	bne.n	8002252 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80021e4:	2b01      	cmp	r3, #1
 80021e6:	d101      	bne.n	80021ec <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80021e8:	2302      	movs	r3, #2
 80021ea:	e033      	b.n	8002254 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	2201      	movs	r2, #1
 80021f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	2224      	movs	r2, #36	; 0x24
 80021f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	681a      	ldr	r2, [r3, #0]
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f022 0201 	bic.w	r2, r2, #1
 800220a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800221a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	021b      	lsls	r3, r3, #8
 8002220:	68fa      	ldr	r2, [r7, #12]
 8002222:	4313      	orrs	r3, r2
 8002224:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	68fa      	ldr	r2, [r7, #12]
 800222c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	681a      	ldr	r2, [r3, #0]
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f042 0201 	orr.w	r2, r2, #1
 800223c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	2220      	movs	r2, #32
 8002242:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	2200      	movs	r2, #0
 800224a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800224e:	2300      	movs	r3, #0
 8002250:	e000      	b.n	8002254 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002252:	2302      	movs	r3, #2
  }
}
 8002254:	4618      	mov	r0, r3
 8002256:	3714      	adds	r7, #20
 8002258:	46bd      	mov	sp, r7
 800225a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225e:	4770      	bx	lr

08002260 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002260:	b480      	push	{r7}
 8002262:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002264:	4b04      	ldr	r3, [pc, #16]	; (8002278 <HAL_PWREx_GetVoltageRange+0x18>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800226c:	4618      	mov	r0, r3
 800226e:	46bd      	mov	sp, r7
 8002270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002274:	4770      	bx	lr
 8002276:	bf00      	nop
 8002278:	40007000 	.word	0x40007000

0800227c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800227c:	b480      	push	{r7}
 800227e:	b085      	sub	sp, #20
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800228a:	d130      	bne.n	80022ee <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800228c:	4b23      	ldr	r3, [pc, #140]	; (800231c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002294:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002298:	d038      	beq.n	800230c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800229a:	4b20      	ldr	r3, [pc, #128]	; (800231c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80022a2:	4a1e      	ldr	r2, [pc, #120]	; (800231c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80022a4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80022a8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80022aa:	4b1d      	ldr	r3, [pc, #116]	; (8002320 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	2232      	movs	r2, #50	; 0x32
 80022b0:	fb02 f303 	mul.w	r3, r2, r3
 80022b4:	4a1b      	ldr	r2, [pc, #108]	; (8002324 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80022b6:	fba2 2303 	umull	r2, r3, r2, r3
 80022ba:	0c9b      	lsrs	r3, r3, #18
 80022bc:	3301      	adds	r3, #1
 80022be:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80022c0:	e002      	b.n	80022c8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	3b01      	subs	r3, #1
 80022c6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80022c8:	4b14      	ldr	r3, [pc, #80]	; (800231c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80022ca:	695b      	ldr	r3, [r3, #20]
 80022cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80022d4:	d102      	bne.n	80022dc <HAL_PWREx_ControlVoltageScaling+0x60>
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d1f2      	bne.n	80022c2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80022dc:	4b0f      	ldr	r3, [pc, #60]	; (800231c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80022de:	695b      	ldr	r3, [r3, #20]
 80022e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80022e8:	d110      	bne.n	800230c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80022ea:	2303      	movs	r3, #3
 80022ec:	e00f      	b.n	800230e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80022ee:	4b0b      	ldr	r3, [pc, #44]	; (800231c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80022f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80022fa:	d007      	beq.n	800230c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80022fc:	4b07      	ldr	r3, [pc, #28]	; (800231c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002304:	4a05      	ldr	r2, [pc, #20]	; (800231c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002306:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800230a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800230c:	2300      	movs	r3, #0
}
 800230e:	4618      	mov	r0, r3
 8002310:	3714      	adds	r7, #20
 8002312:	46bd      	mov	sp, r7
 8002314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002318:	4770      	bx	lr
 800231a:	bf00      	nop
 800231c:	40007000 	.word	0x40007000
 8002320:	20000010 	.word	0x20000010
 8002324:	431bde83 	.word	0x431bde83

08002328 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b088      	sub	sp, #32
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	2b00      	cmp	r3, #0
 8002334:	d102      	bne.n	800233c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002336:	2301      	movs	r3, #1
 8002338:	f000 bc02 	b.w	8002b40 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800233c:	4b96      	ldr	r3, [pc, #600]	; (8002598 <HAL_RCC_OscConfig+0x270>)
 800233e:	689b      	ldr	r3, [r3, #8]
 8002340:	f003 030c 	and.w	r3, r3, #12
 8002344:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002346:	4b94      	ldr	r3, [pc, #592]	; (8002598 <HAL_RCC_OscConfig+0x270>)
 8002348:	68db      	ldr	r3, [r3, #12]
 800234a:	f003 0303 	and.w	r3, r3, #3
 800234e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f003 0310 	and.w	r3, r3, #16
 8002358:	2b00      	cmp	r3, #0
 800235a:	f000 80e4 	beq.w	8002526 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800235e:	69bb      	ldr	r3, [r7, #24]
 8002360:	2b00      	cmp	r3, #0
 8002362:	d007      	beq.n	8002374 <HAL_RCC_OscConfig+0x4c>
 8002364:	69bb      	ldr	r3, [r7, #24]
 8002366:	2b0c      	cmp	r3, #12
 8002368:	f040 808b 	bne.w	8002482 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800236c:	697b      	ldr	r3, [r7, #20]
 800236e:	2b01      	cmp	r3, #1
 8002370:	f040 8087 	bne.w	8002482 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002374:	4b88      	ldr	r3, [pc, #544]	; (8002598 <HAL_RCC_OscConfig+0x270>)
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f003 0302 	and.w	r3, r3, #2
 800237c:	2b00      	cmp	r3, #0
 800237e:	d005      	beq.n	800238c <HAL_RCC_OscConfig+0x64>
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	699b      	ldr	r3, [r3, #24]
 8002384:	2b00      	cmp	r3, #0
 8002386:	d101      	bne.n	800238c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002388:	2301      	movs	r3, #1
 800238a:	e3d9      	b.n	8002b40 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6a1a      	ldr	r2, [r3, #32]
 8002390:	4b81      	ldr	r3, [pc, #516]	; (8002598 <HAL_RCC_OscConfig+0x270>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f003 0308 	and.w	r3, r3, #8
 8002398:	2b00      	cmp	r3, #0
 800239a:	d004      	beq.n	80023a6 <HAL_RCC_OscConfig+0x7e>
 800239c:	4b7e      	ldr	r3, [pc, #504]	; (8002598 <HAL_RCC_OscConfig+0x270>)
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80023a4:	e005      	b.n	80023b2 <HAL_RCC_OscConfig+0x8a>
 80023a6:	4b7c      	ldr	r3, [pc, #496]	; (8002598 <HAL_RCC_OscConfig+0x270>)
 80023a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80023ac:	091b      	lsrs	r3, r3, #4
 80023ae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80023b2:	4293      	cmp	r3, r2
 80023b4:	d223      	bcs.n	80023fe <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	6a1b      	ldr	r3, [r3, #32]
 80023ba:	4618      	mov	r0, r3
 80023bc:	f000 fdbc 	bl	8002f38 <RCC_SetFlashLatencyFromMSIRange>
 80023c0:	4603      	mov	r3, r0
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d001      	beq.n	80023ca <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80023c6:	2301      	movs	r3, #1
 80023c8:	e3ba      	b.n	8002b40 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80023ca:	4b73      	ldr	r3, [pc, #460]	; (8002598 <HAL_RCC_OscConfig+0x270>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	4a72      	ldr	r2, [pc, #456]	; (8002598 <HAL_RCC_OscConfig+0x270>)
 80023d0:	f043 0308 	orr.w	r3, r3, #8
 80023d4:	6013      	str	r3, [r2, #0]
 80023d6:	4b70      	ldr	r3, [pc, #448]	; (8002598 <HAL_RCC_OscConfig+0x270>)
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6a1b      	ldr	r3, [r3, #32]
 80023e2:	496d      	ldr	r1, [pc, #436]	; (8002598 <HAL_RCC_OscConfig+0x270>)
 80023e4:	4313      	orrs	r3, r2
 80023e6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80023e8:	4b6b      	ldr	r3, [pc, #428]	; (8002598 <HAL_RCC_OscConfig+0x270>)
 80023ea:	685b      	ldr	r3, [r3, #4]
 80023ec:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	69db      	ldr	r3, [r3, #28]
 80023f4:	021b      	lsls	r3, r3, #8
 80023f6:	4968      	ldr	r1, [pc, #416]	; (8002598 <HAL_RCC_OscConfig+0x270>)
 80023f8:	4313      	orrs	r3, r2
 80023fa:	604b      	str	r3, [r1, #4]
 80023fc:	e025      	b.n	800244a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80023fe:	4b66      	ldr	r3, [pc, #408]	; (8002598 <HAL_RCC_OscConfig+0x270>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	4a65      	ldr	r2, [pc, #404]	; (8002598 <HAL_RCC_OscConfig+0x270>)
 8002404:	f043 0308 	orr.w	r3, r3, #8
 8002408:	6013      	str	r3, [r2, #0]
 800240a:	4b63      	ldr	r3, [pc, #396]	; (8002598 <HAL_RCC_OscConfig+0x270>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	6a1b      	ldr	r3, [r3, #32]
 8002416:	4960      	ldr	r1, [pc, #384]	; (8002598 <HAL_RCC_OscConfig+0x270>)
 8002418:	4313      	orrs	r3, r2
 800241a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800241c:	4b5e      	ldr	r3, [pc, #376]	; (8002598 <HAL_RCC_OscConfig+0x270>)
 800241e:	685b      	ldr	r3, [r3, #4]
 8002420:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	69db      	ldr	r3, [r3, #28]
 8002428:	021b      	lsls	r3, r3, #8
 800242a:	495b      	ldr	r1, [pc, #364]	; (8002598 <HAL_RCC_OscConfig+0x270>)
 800242c:	4313      	orrs	r3, r2
 800242e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002430:	69bb      	ldr	r3, [r7, #24]
 8002432:	2b00      	cmp	r3, #0
 8002434:	d109      	bne.n	800244a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6a1b      	ldr	r3, [r3, #32]
 800243a:	4618      	mov	r0, r3
 800243c:	f000 fd7c 	bl	8002f38 <RCC_SetFlashLatencyFromMSIRange>
 8002440:	4603      	mov	r3, r0
 8002442:	2b00      	cmp	r3, #0
 8002444:	d001      	beq.n	800244a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8002446:	2301      	movs	r3, #1
 8002448:	e37a      	b.n	8002b40 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800244a:	f000 fc81 	bl	8002d50 <HAL_RCC_GetSysClockFreq>
 800244e:	4602      	mov	r2, r0
 8002450:	4b51      	ldr	r3, [pc, #324]	; (8002598 <HAL_RCC_OscConfig+0x270>)
 8002452:	689b      	ldr	r3, [r3, #8]
 8002454:	091b      	lsrs	r3, r3, #4
 8002456:	f003 030f 	and.w	r3, r3, #15
 800245a:	4950      	ldr	r1, [pc, #320]	; (800259c <HAL_RCC_OscConfig+0x274>)
 800245c:	5ccb      	ldrb	r3, [r1, r3]
 800245e:	f003 031f 	and.w	r3, r3, #31
 8002462:	fa22 f303 	lsr.w	r3, r2, r3
 8002466:	4a4e      	ldr	r2, [pc, #312]	; (80025a0 <HAL_RCC_OscConfig+0x278>)
 8002468:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800246a:	4b4e      	ldr	r3, [pc, #312]	; (80025a4 <HAL_RCC_OscConfig+0x27c>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	4618      	mov	r0, r3
 8002470:	f7fe fbdc 	bl	8000c2c <HAL_InitTick>
 8002474:	4603      	mov	r3, r0
 8002476:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002478:	7bfb      	ldrb	r3, [r7, #15]
 800247a:	2b00      	cmp	r3, #0
 800247c:	d052      	beq.n	8002524 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800247e:	7bfb      	ldrb	r3, [r7, #15]
 8002480:	e35e      	b.n	8002b40 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	699b      	ldr	r3, [r3, #24]
 8002486:	2b00      	cmp	r3, #0
 8002488:	d032      	beq.n	80024f0 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800248a:	4b43      	ldr	r3, [pc, #268]	; (8002598 <HAL_RCC_OscConfig+0x270>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	4a42      	ldr	r2, [pc, #264]	; (8002598 <HAL_RCC_OscConfig+0x270>)
 8002490:	f043 0301 	orr.w	r3, r3, #1
 8002494:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002496:	f7fe fcfd 	bl	8000e94 <HAL_GetTick>
 800249a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800249c:	e008      	b.n	80024b0 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800249e:	f7fe fcf9 	bl	8000e94 <HAL_GetTick>
 80024a2:	4602      	mov	r2, r0
 80024a4:	693b      	ldr	r3, [r7, #16]
 80024a6:	1ad3      	subs	r3, r2, r3
 80024a8:	2b02      	cmp	r3, #2
 80024aa:	d901      	bls.n	80024b0 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80024ac:	2303      	movs	r3, #3
 80024ae:	e347      	b.n	8002b40 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80024b0:	4b39      	ldr	r3, [pc, #228]	; (8002598 <HAL_RCC_OscConfig+0x270>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f003 0302 	and.w	r3, r3, #2
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d0f0      	beq.n	800249e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80024bc:	4b36      	ldr	r3, [pc, #216]	; (8002598 <HAL_RCC_OscConfig+0x270>)
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	4a35      	ldr	r2, [pc, #212]	; (8002598 <HAL_RCC_OscConfig+0x270>)
 80024c2:	f043 0308 	orr.w	r3, r3, #8
 80024c6:	6013      	str	r3, [r2, #0]
 80024c8:	4b33      	ldr	r3, [pc, #204]	; (8002598 <HAL_RCC_OscConfig+0x270>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	6a1b      	ldr	r3, [r3, #32]
 80024d4:	4930      	ldr	r1, [pc, #192]	; (8002598 <HAL_RCC_OscConfig+0x270>)
 80024d6:	4313      	orrs	r3, r2
 80024d8:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80024da:	4b2f      	ldr	r3, [pc, #188]	; (8002598 <HAL_RCC_OscConfig+0x270>)
 80024dc:	685b      	ldr	r3, [r3, #4]
 80024de:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	69db      	ldr	r3, [r3, #28]
 80024e6:	021b      	lsls	r3, r3, #8
 80024e8:	492b      	ldr	r1, [pc, #172]	; (8002598 <HAL_RCC_OscConfig+0x270>)
 80024ea:	4313      	orrs	r3, r2
 80024ec:	604b      	str	r3, [r1, #4]
 80024ee:	e01a      	b.n	8002526 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80024f0:	4b29      	ldr	r3, [pc, #164]	; (8002598 <HAL_RCC_OscConfig+0x270>)
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	4a28      	ldr	r2, [pc, #160]	; (8002598 <HAL_RCC_OscConfig+0x270>)
 80024f6:	f023 0301 	bic.w	r3, r3, #1
 80024fa:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80024fc:	f7fe fcca 	bl	8000e94 <HAL_GetTick>
 8002500:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002502:	e008      	b.n	8002516 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002504:	f7fe fcc6 	bl	8000e94 <HAL_GetTick>
 8002508:	4602      	mov	r2, r0
 800250a:	693b      	ldr	r3, [r7, #16]
 800250c:	1ad3      	subs	r3, r2, r3
 800250e:	2b02      	cmp	r3, #2
 8002510:	d901      	bls.n	8002516 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8002512:	2303      	movs	r3, #3
 8002514:	e314      	b.n	8002b40 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002516:	4b20      	ldr	r3, [pc, #128]	; (8002598 <HAL_RCC_OscConfig+0x270>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f003 0302 	and.w	r3, r3, #2
 800251e:	2b00      	cmp	r3, #0
 8002520:	d1f0      	bne.n	8002504 <HAL_RCC_OscConfig+0x1dc>
 8002522:	e000      	b.n	8002526 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002524:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f003 0301 	and.w	r3, r3, #1
 800252e:	2b00      	cmp	r3, #0
 8002530:	d073      	beq.n	800261a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002532:	69bb      	ldr	r3, [r7, #24]
 8002534:	2b08      	cmp	r3, #8
 8002536:	d005      	beq.n	8002544 <HAL_RCC_OscConfig+0x21c>
 8002538:	69bb      	ldr	r3, [r7, #24]
 800253a:	2b0c      	cmp	r3, #12
 800253c:	d10e      	bne.n	800255c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800253e:	697b      	ldr	r3, [r7, #20]
 8002540:	2b03      	cmp	r3, #3
 8002542:	d10b      	bne.n	800255c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002544:	4b14      	ldr	r3, [pc, #80]	; (8002598 <HAL_RCC_OscConfig+0x270>)
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800254c:	2b00      	cmp	r3, #0
 800254e:	d063      	beq.n	8002618 <HAL_RCC_OscConfig+0x2f0>
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	685b      	ldr	r3, [r3, #4]
 8002554:	2b00      	cmp	r3, #0
 8002556:	d15f      	bne.n	8002618 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002558:	2301      	movs	r3, #1
 800255a:	e2f1      	b.n	8002b40 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	685b      	ldr	r3, [r3, #4]
 8002560:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002564:	d106      	bne.n	8002574 <HAL_RCC_OscConfig+0x24c>
 8002566:	4b0c      	ldr	r3, [pc, #48]	; (8002598 <HAL_RCC_OscConfig+0x270>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	4a0b      	ldr	r2, [pc, #44]	; (8002598 <HAL_RCC_OscConfig+0x270>)
 800256c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002570:	6013      	str	r3, [r2, #0]
 8002572:	e025      	b.n	80025c0 <HAL_RCC_OscConfig+0x298>
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	685b      	ldr	r3, [r3, #4]
 8002578:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800257c:	d114      	bne.n	80025a8 <HAL_RCC_OscConfig+0x280>
 800257e:	4b06      	ldr	r3, [pc, #24]	; (8002598 <HAL_RCC_OscConfig+0x270>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	4a05      	ldr	r2, [pc, #20]	; (8002598 <HAL_RCC_OscConfig+0x270>)
 8002584:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002588:	6013      	str	r3, [r2, #0]
 800258a:	4b03      	ldr	r3, [pc, #12]	; (8002598 <HAL_RCC_OscConfig+0x270>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	4a02      	ldr	r2, [pc, #8]	; (8002598 <HAL_RCC_OscConfig+0x270>)
 8002590:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002594:	6013      	str	r3, [r2, #0]
 8002596:	e013      	b.n	80025c0 <HAL_RCC_OscConfig+0x298>
 8002598:	40021000 	.word	0x40021000
 800259c:	08007ba8 	.word	0x08007ba8
 80025a0:	20000010 	.word	0x20000010
 80025a4:	20000014 	.word	0x20000014
 80025a8:	4ba0      	ldr	r3, [pc, #640]	; (800282c <HAL_RCC_OscConfig+0x504>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	4a9f      	ldr	r2, [pc, #636]	; (800282c <HAL_RCC_OscConfig+0x504>)
 80025ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80025b2:	6013      	str	r3, [r2, #0]
 80025b4:	4b9d      	ldr	r3, [pc, #628]	; (800282c <HAL_RCC_OscConfig+0x504>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	4a9c      	ldr	r2, [pc, #624]	; (800282c <HAL_RCC_OscConfig+0x504>)
 80025ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80025be:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	685b      	ldr	r3, [r3, #4]
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d013      	beq.n	80025f0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025c8:	f7fe fc64 	bl	8000e94 <HAL_GetTick>
 80025cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80025ce:	e008      	b.n	80025e2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025d0:	f7fe fc60 	bl	8000e94 <HAL_GetTick>
 80025d4:	4602      	mov	r2, r0
 80025d6:	693b      	ldr	r3, [r7, #16]
 80025d8:	1ad3      	subs	r3, r2, r3
 80025da:	2b64      	cmp	r3, #100	; 0x64
 80025dc:	d901      	bls.n	80025e2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80025de:	2303      	movs	r3, #3
 80025e0:	e2ae      	b.n	8002b40 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80025e2:	4b92      	ldr	r3, [pc, #584]	; (800282c <HAL_RCC_OscConfig+0x504>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d0f0      	beq.n	80025d0 <HAL_RCC_OscConfig+0x2a8>
 80025ee:	e014      	b.n	800261a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025f0:	f7fe fc50 	bl	8000e94 <HAL_GetTick>
 80025f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80025f6:	e008      	b.n	800260a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025f8:	f7fe fc4c 	bl	8000e94 <HAL_GetTick>
 80025fc:	4602      	mov	r2, r0
 80025fe:	693b      	ldr	r3, [r7, #16]
 8002600:	1ad3      	subs	r3, r2, r3
 8002602:	2b64      	cmp	r3, #100	; 0x64
 8002604:	d901      	bls.n	800260a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002606:	2303      	movs	r3, #3
 8002608:	e29a      	b.n	8002b40 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800260a:	4b88      	ldr	r3, [pc, #544]	; (800282c <HAL_RCC_OscConfig+0x504>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002612:	2b00      	cmp	r3, #0
 8002614:	d1f0      	bne.n	80025f8 <HAL_RCC_OscConfig+0x2d0>
 8002616:	e000      	b.n	800261a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002618:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f003 0302 	and.w	r3, r3, #2
 8002622:	2b00      	cmp	r3, #0
 8002624:	d060      	beq.n	80026e8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002626:	69bb      	ldr	r3, [r7, #24]
 8002628:	2b04      	cmp	r3, #4
 800262a:	d005      	beq.n	8002638 <HAL_RCC_OscConfig+0x310>
 800262c:	69bb      	ldr	r3, [r7, #24]
 800262e:	2b0c      	cmp	r3, #12
 8002630:	d119      	bne.n	8002666 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002632:	697b      	ldr	r3, [r7, #20]
 8002634:	2b02      	cmp	r3, #2
 8002636:	d116      	bne.n	8002666 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002638:	4b7c      	ldr	r3, [pc, #496]	; (800282c <HAL_RCC_OscConfig+0x504>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002640:	2b00      	cmp	r3, #0
 8002642:	d005      	beq.n	8002650 <HAL_RCC_OscConfig+0x328>
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	68db      	ldr	r3, [r3, #12]
 8002648:	2b00      	cmp	r3, #0
 800264a:	d101      	bne.n	8002650 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800264c:	2301      	movs	r3, #1
 800264e:	e277      	b.n	8002b40 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002650:	4b76      	ldr	r3, [pc, #472]	; (800282c <HAL_RCC_OscConfig+0x504>)
 8002652:	685b      	ldr	r3, [r3, #4]
 8002654:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	691b      	ldr	r3, [r3, #16]
 800265c:	061b      	lsls	r3, r3, #24
 800265e:	4973      	ldr	r1, [pc, #460]	; (800282c <HAL_RCC_OscConfig+0x504>)
 8002660:	4313      	orrs	r3, r2
 8002662:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002664:	e040      	b.n	80026e8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	68db      	ldr	r3, [r3, #12]
 800266a:	2b00      	cmp	r3, #0
 800266c:	d023      	beq.n	80026b6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800266e:	4b6f      	ldr	r3, [pc, #444]	; (800282c <HAL_RCC_OscConfig+0x504>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	4a6e      	ldr	r2, [pc, #440]	; (800282c <HAL_RCC_OscConfig+0x504>)
 8002674:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002678:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800267a:	f7fe fc0b 	bl	8000e94 <HAL_GetTick>
 800267e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002680:	e008      	b.n	8002694 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002682:	f7fe fc07 	bl	8000e94 <HAL_GetTick>
 8002686:	4602      	mov	r2, r0
 8002688:	693b      	ldr	r3, [r7, #16]
 800268a:	1ad3      	subs	r3, r2, r3
 800268c:	2b02      	cmp	r3, #2
 800268e:	d901      	bls.n	8002694 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002690:	2303      	movs	r3, #3
 8002692:	e255      	b.n	8002b40 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002694:	4b65      	ldr	r3, [pc, #404]	; (800282c <HAL_RCC_OscConfig+0x504>)
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800269c:	2b00      	cmp	r3, #0
 800269e:	d0f0      	beq.n	8002682 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026a0:	4b62      	ldr	r3, [pc, #392]	; (800282c <HAL_RCC_OscConfig+0x504>)
 80026a2:	685b      	ldr	r3, [r3, #4]
 80026a4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	691b      	ldr	r3, [r3, #16]
 80026ac:	061b      	lsls	r3, r3, #24
 80026ae:	495f      	ldr	r1, [pc, #380]	; (800282c <HAL_RCC_OscConfig+0x504>)
 80026b0:	4313      	orrs	r3, r2
 80026b2:	604b      	str	r3, [r1, #4]
 80026b4:	e018      	b.n	80026e8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80026b6:	4b5d      	ldr	r3, [pc, #372]	; (800282c <HAL_RCC_OscConfig+0x504>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	4a5c      	ldr	r2, [pc, #368]	; (800282c <HAL_RCC_OscConfig+0x504>)
 80026bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80026c0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026c2:	f7fe fbe7 	bl	8000e94 <HAL_GetTick>
 80026c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80026c8:	e008      	b.n	80026dc <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026ca:	f7fe fbe3 	bl	8000e94 <HAL_GetTick>
 80026ce:	4602      	mov	r2, r0
 80026d0:	693b      	ldr	r3, [r7, #16]
 80026d2:	1ad3      	subs	r3, r2, r3
 80026d4:	2b02      	cmp	r3, #2
 80026d6:	d901      	bls.n	80026dc <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80026d8:	2303      	movs	r3, #3
 80026da:	e231      	b.n	8002b40 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80026dc:	4b53      	ldr	r3, [pc, #332]	; (800282c <HAL_RCC_OscConfig+0x504>)
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d1f0      	bne.n	80026ca <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f003 0308 	and.w	r3, r3, #8
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d03c      	beq.n	800276e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	695b      	ldr	r3, [r3, #20]
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d01c      	beq.n	8002736 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80026fc:	4b4b      	ldr	r3, [pc, #300]	; (800282c <HAL_RCC_OscConfig+0x504>)
 80026fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002702:	4a4a      	ldr	r2, [pc, #296]	; (800282c <HAL_RCC_OscConfig+0x504>)
 8002704:	f043 0301 	orr.w	r3, r3, #1
 8002708:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800270c:	f7fe fbc2 	bl	8000e94 <HAL_GetTick>
 8002710:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002712:	e008      	b.n	8002726 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002714:	f7fe fbbe 	bl	8000e94 <HAL_GetTick>
 8002718:	4602      	mov	r2, r0
 800271a:	693b      	ldr	r3, [r7, #16]
 800271c:	1ad3      	subs	r3, r2, r3
 800271e:	2b02      	cmp	r3, #2
 8002720:	d901      	bls.n	8002726 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002722:	2303      	movs	r3, #3
 8002724:	e20c      	b.n	8002b40 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002726:	4b41      	ldr	r3, [pc, #260]	; (800282c <HAL_RCC_OscConfig+0x504>)
 8002728:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800272c:	f003 0302 	and.w	r3, r3, #2
 8002730:	2b00      	cmp	r3, #0
 8002732:	d0ef      	beq.n	8002714 <HAL_RCC_OscConfig+0x3ec>
 8002734:	e01b      	b.n	800276e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002736:	4b3d      	ldr	r3, [pc, #244]	; (800282c <HAL_RCC_OscConfig+0x504>)
 8002738:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800273c:	4a3b      	ldr	r2, [pc, #236]	; (800282c <HAL_RCC_OscConfig+0x504>)
 800273e:	f023 0301 	bic.w	r3, r3, #1
 8002742:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002746:	f7fe fba5 	bl	8000e94 <HAL_GetTick>
 800274a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800274c:	e008      	b.n	8002760 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800274e:	f7fe fba1 	bl	8000e94 <HAL_GetTick>
 8002752:	4602      	mov	r2, r0
 8002754:	693b      	ldr	r3, [r7, #16]
 8002756:	1ad3      	subs	r3, r2, r3
 8002758:	2b02      	cmp	r3, #2
 800275a:	d901      	bls.n	8002760 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800275c:	2303      	movs	r3, #3
 800275e:	e1ef      	b.n	8002b40 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002760:	4b32      	ldr	r3, [pc, #200]	; (800282c <HAL_RCC_OscConfig+0x504>)
 8002762:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002766:	f003 0302 	and.w	r3, r3, #2
 800276a:	2b00      	cmp	r3, #0
 800276c:	d1ef      	bne.n	800274e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f003 0304 	and.w	r3, r3, #4
 8002776:	2b00      	cmp	r3, #0
 8002778:	f000 80a6 	beq.w	80028c8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800277c:	2300      	movs	r3, #0
 800277e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002780:	4b2a      	ldr	r3, [pc, #168]	; (800282c <HAL_RCC_OscConfig+0x504>)
 8002782:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002784:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002788:	2b00      	cmp	r3, #0
 800278a:	d10d      	bne.n	80027a8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800278c:	4b27      	ldr	r3, [pc, #156]	; (800282c <HAL_RCC_OscConfig+0x504>)
 800278e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002790:	4a26      	ldr	r2, [pc, #152]	; (800282c <HAL_RCC_OscConfig+0x504>)
 8002792:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002796:	6593      	str	r3, [r2, #88]	; 0x58
 8002798:	4b24      	ldr	r3, [pc, #144]	; (800282c <HAL_RCC_OscConfig+0x504>)
 800279a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800279c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027a0:	60bb      	str	r3, [r7, #8]
 80027a2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80027a4:	2301      	movs	r3, #1
 80027a6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80027a8:	4b21      	ldr	r3, [pc, #132]	; (8002830 <HAL_RCC_OscConfig+0x508>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d118      	bne.n	80027e6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80027b4:	4b1e      	ldr	r3, [pc, #120]	; (8002830 <HAL_RCC_OscConfig+0x508>)
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	4a1d      	ldr	r2, [pc, #116]	; (8002830 <HAL_RCC_OscConfig+0x508>)
 80027ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027be:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80027c0:	f7fe fb68 	bl	8000e94 <HAL_GetTick>
 80027c4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80027c6:	e008      	b.n	80027da <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027c8:	f7fe fb64 	bl	8000e94 <HAL_GetTick>
 80027cc:	4602      	mov	r2, r0
 80027ce:	693b      	ldr	r3, [r7, #16]
 80027d0:	1ad3      	subs	r3, r2, r3
 80027d2:	2b02      	cmp	r3, #2
 80027d4:	d901      	bls.n	80027da <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80027d6:	2303      	movs	r3, #3
 80027d8:	e1b2      	b.n	8002b40 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80027da:	4b15      	ldr	r3, [pc, #84]	; (8002830 <HAL_RCC_OscConfig+0x508>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d0f0      	beq.n	80027c8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	689b      	ldr	r3, [r3, #8]
 80027ea:	2b01      	cmp	r3, #1
 80027ec:	d108      	bne.n	8002800 <HAL_RCC_OscConfig+0x4d8>
 80027ee:	4b0f      	ldr	r3, [pc, #60]	; (800282c <HAL_RCC_OscConfig+0x504>)
 80027f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027f4:	4a0d      	ldr	r2, [pc, #52]	; (800282c <HAL_RCC_OscConfig+0x504>)
 80027f6:	f043 0301 	orr.w	r3, r3, #1
 80027fa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80027fe:	e029      	b.n	8002854 <HAL_RCC_OscConfig+0x52c>
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	689b      	ldr	r3, [r3, #8]
 8002804:	2b05      	cmp	r3, #5
 8002806:	d115      	bne.n	8002834 <HAL_RCC_OscConfig+0x50c>
 8002808:	4b08      	ldr	r3, [pc, #32]	; (800282c <HAL_RCC_OscConfig+0x504>)
 800280a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800280e:	4a07      	ldr	r2, [pc, #28]	; (800282c <HAL_RCC_OscConfig+0x504>)
 8002810:	f043 0304 	orr.w	r3, r3, #4
 8002814:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002818:	4b04      	ldr	r3, [pc, #16]	; (800282c <HAL_RCC_OscConfig+0x504>)
 800281a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800281e:	4a03      	ldr	r2, [pc, #12]	; (800282c <HAL_RCC_OscConfig+0x504>)
 8002820:	f043 0301 	orr.w	r3, r3, #1
 8002824:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002828:	e014      	b.n	8002854 <HAL_RCC_OscConfig+0x52c>
 800282a:	bf00      	nop
 800282c:	40021000 	.word	0x40021000
 8002830:	40007000 	.word	0x40007000
 8002834:	4b9a      	ldr	r3, [pc, #616]	; (8002aa0 <HAL_RCC_OscConfig+0x778>)
 8002836:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800283a:	4a99      	ldr	r2, [pc, #612]	; (8002aa0 <HAL_RCC_OscConfig+0x778>)
 800283c:	f023 0301 	bic.w	r3, r3, #1
 8002840:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002844:	4b96      	ldr	r3, [pc, #600]	; (8002aa0 <HAL_RCC_OscConfig+0x778>)
 8002846:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800284a:	4a95      	ldr	r2, [pc, #596]	; (8002aa0 <HAL_RCC_OscConfig+0x778>)
 800284c:	f023 0304 	bic.w	r3, r3, #4
 8002850:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	689b      	ldr	r3, [r3, #8]
 8002858:	2b00      	cmp	r3, #0
 800285a:	d016      	beq.n	800288a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800285c:	f7fe fb1a 	bl	8000e94 <HAL_GetTick>
 8002860:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002862:	e00a      	b.n	800287a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002864:	f7fe fb16 	bl	8000e94 <HAL_GetTick>
 8002868:	4602      	mov	r2, r0
 800286a:	693b      	ldr	r3, [r7, #16]
 800286c:	1ad3      	subs	r3, r2, r3
 800286e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002872:	4293      	cmp	r3, r2
 8002874:	d901      	bls.n	800287a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002876:	2303      	movs	r3, #3
 8002878:	e162      	b.n	8002b40 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800287a:	4b89      	ldr	r3, [pc, #548]	; (8002aa0 <HAL_RCC_OscConfig+0x778>)
 800287c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002880:	f003 0302 	and.w	r3, r3, #2
 8002884:	2b00      	cmp	r3, #0
 8002886:	d0ed      	beq.n	8002864 <HAL_RCC_OscConfig+0x53c>
 8002888:	e015      	b.n	80028b6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800288a:	f7fe fb03 	bl	8000e94 <HAL_GetTick>
 800288e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002890:	e00a      	b.n	80028a8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002892:	f7fe faff 	bl	8000e94 <HAL_GetTick>
 8002896:	4602      	mov	r2, r0
 8002898:	693b      	ldr	r3, [r7, #16]
 800289a:	1ad3      	subs	r3, r2, r3
 800289c:	f241 3288 	movw	r2, #5000	; 0x1388
 80028a0:	4293      	cmp	r3, r2
 80028a2:	d901      	bls.n	80028a8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80028a4:	2303      	movs	r3, #3
 80028a6:	e14b      	b.n	8002b40 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80028a8:	4b7d      	ldr	r3, [pc, #500]	; (8002aa0 <HAL_RCC_OscConfig+0x778>)
 80028aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028ae:	f003 0302 	and.w	r3, r3, #2
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d1ed      	bne.n	8002892 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80028b6:	7ffb      	ldrb	r3, [r7, #31]
 80028b8:	2b01      	cmp	r3, #1
 80028ba:	d105      	bne.n	80028c8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028bc:	4b78      	ldr	r3, [pc, #480]	; (8002aa0 <HAL_RCC_OscConfig+0x778>)
 80028be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028c0:	4a77      	ldr	r2, [pc, #476]	; (8002aa0 <HAL_RCC_OscConfig+0x778>)
 80028c2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80028c6:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f003 0320 	and.w	r3, r3, #32
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d03c      	beq.n	800294e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d01c      	beq.n	8002916 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80028dc:	4b70      	ldr	r3, [pc, #448]	; (8002aa0 <HAL_RCC_OscConfig+0x778>)
 80028de:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80028e2:	4a6f      	ldr	r2, [pc, #444]	; (8002aa0 <HAL_RCC_OscConfig+0x778>)
 80028e4:	f043 0301 	orr.w	r3, r3, #1
 80028e8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028ec:	f7fe fad2 	bl	8000e94 <HAL_GetTick>
 80028f0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80028f2:	e008      	b.n	8002906 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80028f4:	f7fe face 	bl	8000e94 <HAL_GetTick>
 80028f8:	4602      	mov	r2, r0
 80028fa:	693b      	ldr	r3, [r7, #16]
 80028fc:	1ad3      	subs	r3, r2, r3
 80028fe:	2b02      	cmp	r3, #2
 8002900:	d901      	bls.n	8002906 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8002902:	2303      	movs	r3, #3
 8002904:	e11c      	b.n	8002b40 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002906:	4b66      	ldr	r3, [pc, #408]	; (8002aa0 <HAL_RCC_OscConfig+0x778>)
 8002908:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800290c:	f003 0302 	and.w	r3, r3, #2
 8002910:	2b00      	cmp	r3, #0
 8002912:	d0ef      	beq.n	80028f4 <HAL_RCC_OscConfig+0x5cc>
 8002914:	e01b      	b.n	800294e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002916:	4b62      	ldr	r3, [pc, #392]	; (8002aa0 <HAL_RCC_OscConfig+0x778>)
 8002918:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800291c:	4a60      	ldr	r2, [pc, #384]	; (8002aa0 <HAL_RCC_OscConfig+0x778>)
 800291e:	f023 0301 	bic.w	r3, r3, #1
 8002922:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002926:	f7fe fab5 	bl	8000e94 <HAL_GetTick>
 800292a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800292c:	e008      	b.n	8002940 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800292e:	f7fe fab1 	bl	8000e94 <HAL_GetTick>
 8002932:	4602      	mov	r2, r0
 8002934:	693b      	ldr	r3, [r7, #16]
 8002936:	1ad3      	subs	r3, r2, r3
 8002938:	2b02      	cmp	r3, #2
 800293a:	d901      	bls.n	8002940 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 800293c:	2303      	movs	r3, #3
 800293e:	e0ff      	b.n	8002b40 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002940:	4b57      	ldr	r3, [pc, #348]	; (8002aa0 <HAL_RCC_OscConfig+0x778>)
 8002942:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002946:	f003 0302 	and.w	r3, r3, #2
 800294a:	2b00      	cmp	r3, #0
 800294c:	d1ef      	bne.n	800292e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002952:	2b00      	cmp	r3, #0
 8002954:	f000 80f3 	beq.w	8002b3e <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800295c:	2b02      	cmp	r3, #2
 800295e:	f040 80c9 	bne.w	8002af4 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002962:	4b4f      	ldr	r3, [pc, #316]	; (8002aa0 <HAL_RCC_OscConfig+0x778>)
 8002964:	68db      	ldr	r3, [r3, #12]
 8002966:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002968:	697b      	ldr	r3, [r7, #20]
 800296a:	f003 0203 	and.w	r2, r3, #3
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002972:	429a      	cmp	r2, r3
 8002974:	d12c      	bne.n	80029d0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002976:	697b      	ldr	r3, [r7, #20]
 8002978:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002980:	3b01      	subs	r3, #1
 8002982:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002984:	429a      	cmp	r2, r3
 8002986:	d123      	bne.n	80029d0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002988:	697b      	ldr	r3, [r7, #20]
 800298a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002992:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002994:	429a      	cmp	r2, r3
 8002996:	d11b      	bne.n	80029d0 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002998:	697b      	ldr	r3, [r7, #20]
 800299a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029a2:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80029a4:	429a      	cmp	r2, r3
 80029a6:	d113      	bne.n	80029d0 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80029a8:	697b      	ldr	r3, [r7, #20]
 80029aa:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029b2:	085b      	lsrs	r3, r3, #1
 80029b4:	3b01      	subs	r3, #1
 80029b6:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80029b8:	429a      	cmp	r2, r3
 80029ba:	d109      	bne.n	80029d0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80029bc:	697b      	ldr	r3, [r7, #20]
 80029be:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029c6:	085b      	lsrs	r3, r3, #1
 80029c8:	3b01      	subs	r3, #1
 80029ca:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80029cc:	429a      	cmp	r2, r3
 80029ce:	d06b      	beq.n	8002aa8 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80029d0:	69bb      	ldr	r3, [r7, #24]
 80029d2:	2b0c      	cmp	r3, #12
 80029d4:	d062      	beq.n	8002a9c <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80029d6:	4b32      	ldr	r3, [pc, #200]	; (8002aa0 <HAL_RCC_OscConfig+0x778>)
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d001      	beq.n	80029e6 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 80029e2:	2301      	movs	r3, #1
 80029e4:	e0ac      	b.n	8002b40 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80029e6:	4b2e      	ldr	r3, [pc, #184]	; (8002aa0 <HAL_RCC_OscConfig+0x778>)
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	4a2d      	ldr	r2, [pc, #180]	; (8002aa0 <HAL_RCC_OscConfig+0x778>)
 80029ec:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80029f0:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80029f2:	f7fe fa4f 	bl	8000e94 <HAL_GetTick>
 80029f6:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80029f8:	e008      	b.n	8002a0c <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029fa:	f7fe fa4b 	bl	8000e94 <HAL_GetTick>
 80029fe:	4602      	mov	r2, r0
 8002a00:	693b      	ldr	r3, [r7, #16]
 8002a02:	1ad3      	subs	r3, r2, r3
 8002a04:	2b02      	cmp	r3, #2
 8002a06:	d901      	bls.n	8002a0c <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8002a08:	2303      	movs	r3, #3
 8002a0a:	e099      	b.n	8002b40 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002a0c:	4b24      	ldr	r3, [pc, #144]	; (8002aa0 <HAL_RCC_OscConfig+0x778>)
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d1f0      	bne.n	80029fa <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002a18:	4b21      	ldr	r3, [pc, #132]	; (8002aa0 <HAL_RCC_OscConfig+0x778>)
 8002a1a:	68da      	ldr	r2, [r3, #12]
 8002a1c:	4b21      	ldr	r3, [pc, #132]	; (8002aa4 <HAL_RCC_OscConfig+0x77c>)
 8002a1e:	4013      	ands	r3, r2
 8002a20:	687a      	ldr	r2, [r7, #4]
 8002a22:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002a24:	687a      	ldr	r2, [r7, #4]
 8002a26:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002a28:	3a01      	subs	r2, #1
 8002a2a:	0112      	lsls	r2, r2, #4
 8002a2c:	4311      	orrs	r1, r2
 8002a2e:	687a      	ldr	r2, [r7, #4]
 8002a30:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002a32:	0212      	lsls	r2, r2, #8
 8002a34:	4311      	orrs	r1, r2
 8002a36:	687a      	ldr	r2, [r7, #4]
 8002a38:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002a3a:	0852      	lsrs	r2, r2, #1
 8002a3c:	3a01      	subs	r2, #1
 8002a3e:	0552      	lsls	r2, r2, #21
 8002a40:	4311      	orrs	r1, r2
 8002a42:	687a      	ldr	r2, [r7, #4]
 8002a44:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002a46:	0852      	lsrs	r2, r2, #1
 8002a48:	3a01      	subs	r2, #1
 8002a4a:	0652      	lsls	r2, r2, #25
 8002a4c:	4311      	orrs	r1, r2
 8002a4e:	687a      	ldr	r2, [r7, #4]
 8002a50:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002a52:	06d2      	lsls	r2, r2, #27
 8002a54:	430a      	orrs	r2, r1
 8002a56:	4912      	ldr	r1, [pc, #72]	; (8002aa0 <HAL_RCC_OscConfig+0x778>)
 8002a58:	4313      	orrs	r3, r2
 8002a5a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002a5c:	4b10      	ldr	r3, [pc, #64]	; (8002aa0 <HAL_RCC_OscConfig+0x778>)
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	4a0f      	ldr	r2, [pc, #60]	; (8002aa0 <HAL_RCC_OscConfig+0x778>)
 8002a62:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002a66:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002a68:	4b0d      	ldr	r3, [pc, #52]	; (8002aa0 <HAL_RCC_OscConfig+0x778>)
 8002a6a:	68db      	ldr	r3, [r3, #12]
 8002a6c:	4a0c      	ldr	r2, [pc, #48]	; (8002aa0 <HAL_RCC_OscConfig+0x778>)
 8002a6e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002a72:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002a74:	f7fe fa0e 	bl	8000e94 <HAL_GetTick>
 8002a78:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a7a:	e008      	b.n	8002a8e <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a7c:	f7fe fa0a 	bl	8000e94 <HAL_GetTick>
 8002a80:	4602      	mov	r2, r0
 8002a82:	693b      	ldr	r3, [r7, #16]
 8002a84:	1ad3      	subs	r3, r2, r3
 8002a86:	2b02      	cmp	r3, #2
 8002a88:	d901      	bls.n	8002a8e <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8002a8a:	2303      	movs	r3, #3
 8002a8c:	e058      	b.n	8002b40 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a8e:	4b04      	ldr	r3, [pc, #16]	; (8002aa0 <HAL_RCC_OscConfig+0x778>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d0f0      	beq.n	8002a7c <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002a9a:	e050      	b.n	8002b3e <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002a9c:	2301      	movs	r3, #1
 8002a9e:	e04f      	b.n	8002b40 <HAL_RCC_OscConfig+0x818>
 8002aa0:	40021000 	.word	0x40021000
 8002aa4:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002aa8:	4b27      	ldr	r3, [pc, #156]	; (8002b48 <HAL_RCC_OscConfig+0x820>)
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d144      	bne.n	8002b3e <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002ab4:	4b24      	ldr	r3, [pc, #144]	; (8002b48 <HAL_RCC_OscConfig+0x820>)
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	4a23      	ldr	r2, [pc, #140]	; (8002b48 <HAL_RCC_OscConfig+0x820>)
 8002aba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002abe:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002ac0:	4b21      	ldr	r3, [pc, #132]	; (8002b48 <HAL_RCC_OscConfig+0x820>)
 8002ac2:	68db      	ldr	r3, [r3, #12]
 8002ac4:	4a20      	ldr	r2, [pc, #128]	; (8002b48 <HAL_RCC_OscConfig+0x820>)
 8002ac6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002aca:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002acc:	f7fe f9e2 	bl	8000e94 <HAL_GetTick>
 8002ad0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ad2:	e008      	b.n	8002ae6 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ad4:	f7fe f9de 	bl	8000e94 <HAL_GetTick>
 8002ad8:	4602      	mov	r2, r0
 8002ada:	693b      	ldr	r3, [r7, #16]
 8002adc:	1ad3      	subs	r3, r2, r3
 8002ade:	2b02      	cmp	r3, #2
 8002ae0:	d901      	bls.n	8002ae6 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8002ae2:	2303      	movs	r3, #3
 8002ae4:	e02c      	b.n	8002b40 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ae6:	4b18      	ldr	r3, [pc, #96]	; (8002b48 <HAL_RCC_OscConfig+0x820>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d0f0      	beq.n	8002ad4 <HAL_RCC_OscConfig+0x7ac>
 8002af2:	e024      	b.n	8002b3e <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002af4:	69bb      	ldr	r3, [r7, #24]
 8002af6:	2b0c      	cmp	r3, #12
 8002af8:	d01f      	beq.n	8002b3a <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002afa:	4b13      	ldr	r3, [pc, #76]	; (8002b48 <HAL_RCC_OscConfig+0x820>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	4a12      	ldr	r2, [pc, #72]	; (8002b48 <HAL_RCC_OscConfig+0x820>)
 8002b00:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002b04:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b06:	f7fe f9c5 	bl	8000e94 <HAL_GetTick>
 8002b0a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b0c:	e008      	b.n	8002b20 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b0e:	f7fe f9c1 	bl	8000e94 <HAL_GetTick>
 8002b12:	4602      	mov	r2, r0
 8002b14:	693b      	ldr	r3, [r7, #16]
 8002b16:	1ad3      	subs	r3, r2, r3
 8002b18:	2b02      	cmp	r3, #2
 8002b1a:	d901      	bls.n	8002b20 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8002b1c:	2303      	movs	r3, #3
 8002b1e:	e00f      	b.n	8002b40 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b20:	4b09      	ldr	r3, [pc, #36]	; (8002b48 <HAL_RCC_OscConfig+0x820>)
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d1f0      	bne.n	8002b0e <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8002b2c:	4b06      	ldr	r3, [pc, #24]	; (8002b48 <HAL_RCC_OscConfig+0x820>)
 8002b2e:	68da      	ldr	r2, [r3, #12]
 8002b30:	4905      	ldr	r1, [pc, #20]	; (8002b48 <HAL_RCC_OscConfig+0x820>)
 8002b32:	4b06      	ldr	r3, [pc, #24]	; (8002b4c <HAL_RCC_OscConfig+0x824>)
 8002b34:	4013      	ands	r3, r2
 8002b36:	60cb      	str	r3, [r1, #12]
 8002b38:	e001      	b.n	8002b3e <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002b3a:	2301      	movs	r3, #1
 8002b3c:	e000      	b.n	8002b40 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8002b3e:	2300      	movs	r3, #0
}
 8002b40:	4618      	mov	r0, r3
 8002b42:	3720      	adds	r7, #32
 8002b44:	46bd      	mov	sp, r7
 8002b46:	bd80      	pop	{r7, pc}
 8002b48:	40021000 	.word	0x40021000
 8002b4c:	feeefffc 	.word	0xfeeefffc

08002b50 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b084      	sub	sp, #16
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
 8002b58:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d101      	bne.n	8002b64 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b60:	2301      	movs	r3, #1
 8002b62:	e0e7      	b.n	8002d34 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002b64:	4b75      	ldr	r3, [pc, #468]	; (8002d3c <HAL_RCC_ClockConfig+0x1ec>)
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f003 0307 	and.w	r3, r3, #7
 8002b6c:	683a      	ldr	r2, [r7, #0]
 8002b6e:	429a      	cmp	r2, r3
 8002b70:	d910      	bls.n	8002b94 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b72:	4b72      	ldr	r3, [pc, #456]	; (8002d3c <HAL_RCC_ClockConfig+0x1ec>)
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f023 0207 	bic.w	r2, r3, #7
 8002b7a:	4970      	ldr	r1, [pc, #448]	; (8002d3c <HAL_RCC_ClockConfig+0x1ec>)
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	4313      	orrs	r3, r2
 8002b80:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b82:	4b6e      	ldr	r3, [pc, #440]	; (8002d3c <HAL_RCC_ClockConfig+0x1ec>)
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f003 0307 	and.w	r3, r3, #7
 8002b8a:	683a      	ldr	r2, [r7, #0]
 8002b8c:	429a      	cmp	r2, r3
 8002b8e:	d001      	beq.n	8002b94 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002b90:	2301      	movs	r3, #1
 8002b92:	e0cf      	b.n	8002d34 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f003 0302 	and.w	r3, r3, #2
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d010      	beq.n	8002bc2 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	689a      	ldr	r2, [r3, #8]
 8002ba4:	4b66      	ldr	r3, [pc, #408]	; (8002d40 <HAL_RCC_ClockConfig+0x1f0>)
 8002ba6:	689b      	ldr	r3, [r3, #8]
 8002ba8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002bac:	429a      	cmp	r2, r3
 8002bae:	d908      	bls.n	8002bc2 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002bb0:	4b63      	ldr	r3, [pc, #396]	; (8002d40 <HAL_RCC_ClockConfig+0x1f0>)
 8002bb2:	689b      	ldr	r3, [r3, #8]
 8002bb4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	689b      	ldr	r3, [r3, #8]
 8002bbc:	4960      	ldr	r1, [pc, #384]	; (8002d40 <HAL_RCC_ClockConfig+0x1f0>)
 8002bbe:	4313      	orrs	r3, r2
 8002bc0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f003 0301 	and.w	r3, r3, #1
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d04c      	beq.n	8002c68 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	685b      	ldr	r3, [r3, #4]
 8002bd2:	2b03      	cmp	r3, #3
 8002bd4:	d107      	bne.n	8002be6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002bd6:	4b5a      	ldr	r3, [pc, #360]	; (8002d40 <HAL_RCC_ClockConfig+0x1f0>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d121      	bne.n	8002c26 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002be2:	2301      	movs	r3, #1
 8002be4:	e0a6      	b.n	8002d34 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	685b      	ldr	r3, [r3, #4]
 8002bea:	2b02      	cmp	r3, #2
 8002bec:	d107      	bne.n	8002bfe <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002bee:	4b54      	ldr	r3, [pc, #336]	; (8002d40 <HAL_RCC_ClockConfig+0x1f0>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d115      	bne.n	8002c26 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002bfa:	2301      	movs	r3, #1
 8002bfc:	e09a      	b.n	8002d34 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	685b      	ldr	r3, [r3, #4]
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d107      	bne.n	8002c16 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002c06:	4b4e      	ldr	r3, [pc, #312]	; (8002d40 <HAL_RCC_ClockConfig+0x1f0>)
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f003 0302 	and.w	r3, r3, #2
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d109      	bne.n	8002c26 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002c12:	2301      	movs	r3, #1
 8002c14:	e08e      	b.n	8002d34 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002c16:	4b4a      	ldr	r3, [pc, #296]	; (8002d40 <HAL_RCC_ClockConfig+0x1f0>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d101      	bne.n	8002c26 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002c22:	2301      	movs	r3, #1
 8002c24:	e086      	b.n	8002d34 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002c26:	4b46      	ldr	r3, [pc, #280]	; (8002d40 <HAL_RCC_ClockConfig+0x1f0>)
 8002c28:	689b      	ldr	r3, [r3, #8]
 8002c2a:	f023 0203 	bic.w	r2, r3, #3
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	685b      	ldr	r3, [r3, #4]
 8002c32:	4943      	ldr	r1, [pc, #268]	; (8002d40 <HAL_RCC_ClockConfig+0x1f0>)
 8002c34:	4313      	orrs	r3, r2
 8002c36:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c38:	f7fe f92c 	bl	8000e94 <HAL_GetTick>
 8002c3c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c3e:	e00a      	b.n	8002c56 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c40:	f7fe f928 	bl	8000e94 <HAL_GetTick>
 8002c44:	4602      	mov	r2, r0
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	1ad3      	subs	r3, r2, r3
 8002c4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c4e:	4293      	cmp	r3, r2
 8002c50:	d901      	bls.n	8002c56 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002c52:	2303      	movs	r3, #3
 8002c54:	e06e      	b.n	8002d34 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c56:	4b3a      	ldr	r3, [pc, #232]	; (8002d40 <HAL_RCC_ClockConfig+0x1f0>)
 8002c58:	689b      	ldr	r3, [r3, #8]
 8002c5a:	f003 020c 	and.w	r2, r3, #12
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	685b      	ldr	r3, [r3, #4]
 8002c62:	009b      	lsls	r3, r3, #2
 8002c64:	429a      	cmp	r2, r3
 8002c66:	d1eb      	bne.n	8002c40 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f003 0302 	and.w	r3, r3, #2
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d010      	beq.n	8002c96 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	689a      	ldr	r2, [r3, #8]
 8002c78:	4b31      	ldr	r3, [pc, #196]	; (8002d40 <HAL_RCC_ClockConfig+0x1f0>)
 8002c7a:	689b      	ldr	r3, [r3, #8]
 8002c7c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002c80:	429a      	cmp	r2, r3
 8002c82:	d208      	bcs.n	8002c96 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c84:	4b2e      	ldr	r3, [pc, #184]	; (8002d40 <HAL_RCC_ClockConfig+0x1f0>)
 8002c86:	689b      	ldr	r3, [r3, #8]
 8002c88:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	689b      	ldr	r3, [r3, #8]
 8002c90:	492b      	ldr	r1, [pc, #172]	; (8002d40 <HAL_RCC_ClockConfig+0x1f0>)
 8002c92:	4313      	orrs	r3, r2
 8002c94:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002c96:	4b29      	ldr	r3, [pc, #164]	; (8002d3c <HAL_RCC_ClockConfig+0x1ec>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f003 0307 	and.w	r3, r3, #7
 8002c9e:	683a      	ldr	r2, [r7, #0]
 8002ca0:	429a      	cmp	r2, r3
 8002ca2:	d210      	bcs.n	8002cc6 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ca4:	4b25      	ldr	r3, [pc, #148]	; (8002d3c <HAL_RCC_ClockConfig+0x1ec>)
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f023 0207 	bic.w	r2, r3, #7
 8002cac:	4923      	ldr	r1, [pc, #140]	; (8002d3c <HAL_RCC_ClockConfig+0x1ec>)
 8002cae:	683b      	ldr	r3, [r7, #0]
 8002cb0:	4313      	orrs	r3, r2
 8002cb2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cb4:	4b21      	ldr	r3, [pc, #132]	; (8002d3c <HAL_RCC_ClockConfig+0x1ec>)
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f003 0307 	and.w	r3, r3, #7
 8002cbc:	683a      	ldr	r2, [r7, #0]
 8002cbe:	429a      	cmp	r2, r3
 8002cc0:	d001      	beq.n	8002cc6 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002cc2:	2301      	movs	r3, #1
 8002cc4:	e036      	b.n	8002d34 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f003 0304 	and.w	r3, r3, #4
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d008      	beq.n	8002ce4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002cd2:	4b1b      	ldr	r3, [pc, #108]	; (8002d40 <HAL_RCC_ClockConfig+0x1f0>)
 8002cd4:	689b      	ldr	r3, [r3, #8]
 8002cd6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	68db      	ldr	r3, [r3, #12]
 8002cde:	4918      	ldr	r1, [pc, #96]	; (8002d40 <HAL_RCC_ClockConfig+0x1f0>)
 8002ce0:	4313      	orrs	r3, r2
 8002ce2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f003 0308 	and.w	r3, r3, #8
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d009      	beq.n	8002d04 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002cf0:	4b13      	ldr	r3, [pc, #76]	; (8002d40 <HAL_RCC_ClockConfig+0x1f0>)
 8002cf2:	689b      	ldr	r3, [r3, #8]
 8002cf4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	691b      	ldr	r3, [r3, #16]
 8002cfc:	00db      	lsls	r3, r3, #3
 8002cfe:	4910      	ldr	r1, [pc, #64]	; (8002d40 <HAL_RCC_ClockConfig+0x1f0>)
 8002d00:	4313      	orrs	r3, r2
 8002d02:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002d04:	f000 f824 	bl	8002d50 <HAL_RCC_GetSysClockFreq>
 8002d08:	4602      	mov	r2, r0
 8002d0a:	4b0d      	ldr	r3, [pc, #52]	; (8002d40 <HAL_RCC_ClockConfig+0x1f0>)
 8002d0c:	689b      	ldr	r3, [r3, #8]
 8002d0e:	091b      	lsrs	r3, r3, #4
 8002d10:	f003 030f 	and.w	r3, r3, #15
 8002d14:	490b      	ldr	r1, [pc, #44]	; (8002d44 <HAL_RCC_ClockConfig+0x1f4>)
 8002d16:	5ccb      	ldrb	r3, [r1, r3]
 8002d18:	f003 031f 	and.w	r3, r3, #31
 8002d1c:	fa22 f303 	lsr.w	r3, r2, r3
 8002d20:	4a09      	ldr	r2, [pc, #36]	; (8002d48 <HAL_RCC_ClockConfig+0x1f8>)
 8002d22:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002d24:	4b09      	ldr	r3, [pc, #36]	; (8002d4c <HAL_RCC_ClockConfig+0x1fc>)
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	4618      	mov	r0, r3
 8002d2a:	f7fd ff7f 	bl	8000c2c <HAL_InitTick>
 8002d2e:	4603      	mov	r3, r0
 8002d30:	72fb      	strb	r3, [r7, #11]

  return status;
 8002d32:	7afb      	ldrb	r3, [r7, #11]
}
 8002d34:	4618      	mov	r0, r3
 8002d36:	3710      	adds	r7, #16
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	bd80      	pop	{r7, pc}
 8002d3c:	40022000 	.word	0x40022000
 8002d40:	40021000 	.word	0x40021000
 8002d44:	08007ba8 	.word	0x08007ba8
 8002d48:	20000010 	.word	0x20000010
 8002d4c:	20000014 	.word	0x20000014

08002d50 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d50:	b480      	push	{r7}
 8002d52:	b089      	sub	sp, #36	; 0x24
 8002d54:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002d56:	2300      	movs	r3, #0
 8002d58:	61fb      	str	r3, [r7, #28]
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002d5e:	4b3e      	ldr	r3, [pc, #248]	; (8002e58 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d60:	689b      	ldr	r3, [r3, #8]
 8002d62:	f003 030c 	and.w	r3, r3, #12
 8002d66:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002d68:	4b3b      	ldr	r3, [pc, #236]	; (8002e58 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d6a:	68db      	ldr	r3, [r3, #12]
 8002d6c:	f003 0303 	and.w	r3, r3, #3
 8002d70:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002d72:	693b      	ldr	r3, [r7, #16]
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d005      	beq.n	8002d84 <HAL_RCC_GetSysClockFreq+0x34>
 8002d78:	693b      	ldr	r3, [r7, #16]
 8002d7a:	2b0c      	cmp	r3, #12
 8002d7c:	d121      	bne.n	8002dc2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	2b01      	cmp	r3, #1
 8002d82:	d11e      	bne.n	8002dc2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002d84:	4b34      	ldr	r3, [pc, #208]	; (8002e58 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f003 0308 	and.w	r3, r3, #8
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d107      	bne.n	8002da0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002d90:	4b31      	ldr	r3, [pc, #196]	; (8002e58 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d92:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d96:	0a1b      	lsrs	r3, r3, #8
 8002d98:	f003 030f 	and.w	r3, r3, #15
 8002d9c:	61fb      	str	r3, [r7, #28]
 8002d9e:	e005      	b.n	8002dac <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002da0:	4b2d      	ldr	r3, [pc, #180]	; (8002e58 <HAL_RCC_GetSysClockFreq+0x108>)
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	091b      	lsrs	r3, r3, #4
 8002da6:	f003 030f 	and.w	r3, r3, #15
 8002daa:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002dac:	4a2b      	ldr	r2, [pc, #172]	; (8002e5c <HAL_RCC_GetSysClockFreq+0x10c>)
 8002dae:	69fb      	ldr	r3, [r7, #28]
 8002db0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002db4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002db6:	693b      	ldr	r3, [r7, #16]
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d10d      	bne.n	8002dd8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002dbc:	69fb      	ldr	r3, [r7, #28]
 8002dbe:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002dc0:	e00a      	b.n	8002dd8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002dc2:	693b      	ldr	r3, [r7, #16]
 8002dc4:	2b04      	cmp	r3, #4
 8002dc6:	d102      	bne.n	8002dce <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002dc8:	4b25      	ldr	r3, [pc, #148]	; (8002e60 <HAL_RCC_GetSysClockFreq+0x110>)
 8002dca:	61bb      	str	r3, [r7, #24]
 8002dcc:	e004      	b.n	8002dd8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002dce:	693b      	ldr	r3, [r7, #16]
 8002dd0:	2b08      	cmp	r3, #8
 8002dd2:	d101      	bne.n	8002dd8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002dd4:	4b22      	ldr	r3, [pc, #136]	; (8002e60 <HAL_RCC_GetSysClockFreq+0x110>)
 8002dd6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002dd8:	693b      	ldr	r3, [r7, #16]
 8002dda:	2b0c      	cmp	r3, #12
 8002ddc:	d134      	bne.n	8002e48 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002dde:	4b1e      	ldr	r3, [pc, #120]	; (8002e58 <HAL_RCC_GetSysClockFreq+0x108>)
 8002de0:	68db      	ldr	r3, [r3, #12]
 8002de2:	f003 0303 	and.w	r3, r3, #3
 8002de6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002de8:	68bb      	ldr	r3, [r7, #8]
 8002dea:	2b02      	cmp	r3, #2
 8002dec:	d003      	beq.n	8002df6 <HAL_RCC_GetSysClockFreq+0xa6>
 8002dee:	68bb      	ldr	r3, [r7, #8]
 8002df0:	2b03      	cmp	r3, #3
 8002df2:	d003      	beq.n	8002dfc <HAL_RCC_GetSysClockFreq+0xac>
 8002df4:	e005      	b.n	8002e02 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002df6:	4b1a      	ldr	r3, [pc, #104]	; (8002e60 <HAL_RCC_GetSysClockFreq+0x110>)
 8002df8:	617b      	str	r3, [r7, #20]
      break;
 8002dfa:	e005      	b.n	8002e08 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002dfc:	4b18      	ldr	r3, [pc, #96]	; (8002e60 <HAL_RCC_GetSysClockFreq+0x110>)
 8002dfe:	617b      	str	r3, [r7, #20]
      break;
 8002e00:	e002      	b.n	8002e08 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002e02:	69fb      	ldr	r3, [r7, #28]
 8002e04:	617b      	str	r3, [r7, #20]
      break;
 8002e06:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002e08:	4b13      	ldr	r3, [pc, #76]	; (8002e58 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e0a:	68db      	ldr	r3, [r3, #12]
 8002e0c:	091b      	lsrs	r3, r3, #4
 8002e0e:	f003 0307 	and.w	r3, r3, #7
 8002e12:	3301      	adds	r3, #1
 8002e14:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002e16:	4b10      	ldr	r3, [pc, #64]	; (8002e58 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e18:	68db      	ldr	r3, [r3, #12]
 8002e1a:	0a1b      	lsrs	r3, r3, #8
 8002e1c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002e20:	697a      	ldr	r2, [r7, #20]
 8002e22:	fb03 f202 	mul.w	r2, r3, r2
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e2c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002e2e:	4b0a      	ldr	r3, [pc, #40]	; (8002e58 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e30:	68db      	ldr	r3, [r3, #12]
 8002e32:	0e5b      	lsrs	r3, r3, #25
 8002e34:	f003 0303 	and.w	r3, r3, #3
 8002e38:	3301      	adds	r3, #1
 8002e3a:	005b      	lsls	r3, r3, #1
 8002e3c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002e3e:	697a      	ldr	r2, [r7, #20]
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e46:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002e48:	69bb      	ldr	r3, [r7, #24]
}
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	3724      	adds	r7, #36	; 0x24
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e54:	4770      	bx	lr
 8002e56:	bf00      	nop
 8002e58:	40021000 	.word	0x40021000
 8002e5c:	08007bc0 	.word	0x08007bc0
 8002e60:	00f42400 	.word	0x00f42400

08002e64 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e64:	b480      	push	{r7}
 8002e66:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002e68:	4b03      	ldr	r3, [pc, #12]	; (8002e78 <HAL_RCC_GetHCLKFreq+0x14>)
 8002e6a:	681b      	ldr	r3, [r3, #0]
}
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e74:	4770      	bx	lr
 8002e76:	bf00      	nop
 8002e78:	20000010 	.word	0x20000010

08002e7c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002e80:	f7ff fff0 	bl	8002e64 <HAL_RCC_GetHCLKFreq>
 8002e84:	4602      	mov	r2, r0
 8002e86:	4b06      	ldr	r3, [pc, #24]	; (8002ea0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002e88:	689b      	ldr	r3, [r3, #8]
 8002e8a:	0a1b      	lsrs	r3, r3, #8
 8002e8c:	f003 0307 	and.w	r3, r3, #7
 8002e90:	4904      	ldr	r1, [pc, #16]	; (8002ea4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002e92:	5ccb      	ldrb	r3, [r1, r3]
 8002e94:	f003 031f 	and.w	r3, r3, #31
 8002e98:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	bd80      	pop	{r7, pc}
 8002ea0:	40021000 	.word	0x40021000
 8002ea4:	08007bb8 	.word	0x08007bb8

08002ea8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002eac:	f7ff ffda 	bl	8002e64 <HAL_RCC_GetHCLKFreq>
 8002eb0:	4602      	mov	r2, r0
 8002eb2:	4b06      	ldr	r3, [pc, #24]	; (8002ecc <HAL_RCC_GetPCLK2Freq+0x24>)
 8002eb4:	689b      	ldr	r3, [r3, #8]
 8002eb6:	0adb      	lsrs	r3, r3, #11
 8002eb8:	f003 0307 	and.w	r3, r3, #7
 8002ebc:	4904      	ldr	r1, [pc, #16]	; (8002ed0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002ebe:	5ccb      	ldrb	r3, [r1, r3]
 8002ec0:	f003 031f 	and.w	r3, r3, #31
 8002ec4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ec8:	4618      	mov	r0, r3
 8002eca:	bd80      	pop	{r7, pc}
 8002ecc:	40021000 	.word	0x40021000
 8002ed0:	08007bb8 	.word	0x08007bb8

08002ed4 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002ed4:	b480      	push	{r7}
 8002ed6:	b083      	sub	sp, #12
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
 8002edc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	220f      	movs	r2, #15
 8002ee2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8002ee4:	4b12      	ldr	r3, [pc, #72]	; (8002f30 <HAL_RCC_GetClockConfig+0x5c>)
 8002ee6:	689b      	ldr	r3, [r3, #8]
 8002ee8:	f003 0203 	and.w	r2, r3, #3
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8002ef0:	4b0f      	ldr	r3, [pc, #60]	; (8002f30 <HAL_RCC_GetClockConfig+0x5c>)
 8002ef2:	689b      	ldr	r3, [r3, #8]
 8002ef4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8002efc:	4b0c      	ldr	r3, [pc, #48]	; (8002f30 <HAL_RCC_GetClockConfig+0x5c>)
 8002efe:	689b      	ldr	r3, [r3, #8]
 8002f00:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8002f08:	4b09      	ldr	r3, [pc, #36]	; (8002f30 <HAL_RCC_GetClockConfig+0x5c>)
 8002f0a:	689b      	ldr	r3, [r3, #8]
 8002f0c:	08db      	lsrs	r3, r3, #3
 8002f0e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8002f16:	4b07      	ldr	r3, [pc, #28]	; (8002f34 <HAL_RCC_GetClockConfig+0x60>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f003 0207 	and.w	r2, r3, #7
 8002f1e:	683b      	ldr	r3, [r7, #0]
 8002f20:	601a      	str	r2, [r3, #0]
}
 8002f22:	bf00      	nop
 8002f24:	370c      	adds	r7, #12
 8002f26:	46bd      	mov	sp, r7
 8002f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2c:	4770      	bx	lr
 8002f2e:	bf00      	nop
 8002f30:	40021000 	.word	0x40021000
 8002f34:	40022000 	.word	0x40022000

08002f38 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b086      	sub	sp, #24
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002f40:	2300      	movs	r3, #0
 8002f42:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002f44:	4b2a      	ldr	r3, [pc, #168]	; (8002ff0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002f46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d003      	beq.n	8002f58 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002f50:	f7ff f986 	bl	8002260 <HAL_PWREx_GetVoltageRange>
 8002f54:	6178      	str	r0, [r7, #20]
 8002f56:	e014      	b.n	8002f82 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002f58:	4b25      	ldr	r3, [pc, #148]	; (8002ff0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002f5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f5c:	4a24      	ldr	r2, [pc, #144]	; (8002ff0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002f5e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f62:	6593      	str	r3, [r2, #88]	; 0x58
 8002f64:	4b22      	ldr	r3, [pc, #136]	; (8002ff0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002f66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f6c:	60fb      	str	r3, [r7, #12]
 8002f6e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002f70:	f7ff f976 	bl	8002260 <HAL_PWREx_GetVoltageRange>
 8002f74:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002f76:	4b1e      	ldr	r3, [pc, #120]	; (8002ff0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002f78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f7a:	4a1d      	ldr	r2, [pc, #116]	; (8002ff0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002f7c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f80:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002f82:	697b      	ldr	r3, [r7, #20]
 8002f84:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002f88:	d10b      	bne.n	8002fa2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	2b80      	cmp	r3, #128	; 0x80
 8002f8e:	d919      	bls.n	8002fc4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2ba0      	cmp	r3, #160	; 0xa0
 8002f94:	d902      	bls.n	8002f9c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002f96:	2302      	movs	r3, #2
 8002f98:	613b      	str	r3, [r7, #16]
 8002f9a:	e013      	b.n	8002fc4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002f9c:	2301      	movs	r3, #1
 8002f9e:	613b      	str	r3, [r7, #16]
 8002fa0:	e010      	b.n	8002fc4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	2b80      	cmp	r3, #128	; 0x80
 8002fa6:	d902      	bls.n	8002fae <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002fa8:	2303      	movs	r3, #3
 8002faa:	613b      	str	r3, [r7, #16]
 8002fac:	e00a      	b.n	8002fc4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	2b80      	cmp	r3, #128	; 0x80
 8002fb2:	d102      	bne.n	8002fba <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002fb4:	2302      	movs	r3, #2
 8002fb6:	613b      	str	r3, [r7, #16]
 8002fb8:	e004      	b.n	8002fc4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	2b70      	cmp	r3, #112	; 0x70
 8002fbe:	d101      	bne.n	8002fc4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002fc0:	2301      	movs	r3, #1
 8002fc2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002fc4:	4b0b      	ldr	r3, [pc, #44]	; (8002ff4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f023 0207 	bic.w	r2, r3, #7
 8002fcc:	4909      	ldr	r1, [pc, #36]	; (8002ff4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002fce:	693b      	ldr	r3, [r7, #16]
 8002fd0:	4313      	orrs	r3, r2
 8002fd2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002fd4:	4b07      	ldr	r3, [pc, #28]	; (8002ff4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f003 0307 	and.w	r3, r3, #7
 8002fdc:	693a      	ldr	r2, [r7, #16]
 8002fde:	429a      	cmp	r2, r3
 8002fe0:	d001      	beq.n	8002fe6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002fe2:	2301      	movs	r3, #1
 8002fe4:	e000      	b.n	8002fe8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002fe6:	2300      	movs	r3, #0
}
 8002fe8:	4618      	mov	r0, r3
 8002fea:	3718      	adds	r7, #24
 8002fec:	46bd      	mov	sp, r7
 8002fee:	bd80      	pop	{r7, pc}
 8002ff0:	40021000 	.word	0x40021000
 8002ff4:	40022000 	.word	0x40022000

08002ff8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b086      	sub	sp, #24
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003000:	2300      	movs	r3, #0
 8003002:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003004:	2300      	movs	r3, #0
 8003006:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003010:	2b00      	cmp	r3, #0
 8003012:	d031      	beq.n	8003078 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003018:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800301c:	d01a      	beq.n	8003054 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 800301e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003022:	d814      	bhi.n	800304e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003024:	2b00      	cmp	r3, #0
 8003026:	d009      	beq.n	800303c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003028:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800302c:	d10f      	bne.n	800304e <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 800302e:	4b5d      	ldr	r3, [pc, #372]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003030:	68db      	ldr	r3, [r3, #12]
 8003032:	4a5c      	ldr	r2, [pc, #368]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003034:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003038:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800303a:	e00c      	b.n	8003056 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	3304      	adds	r3, #4
 8003040:	2100      	movs	r1, #0
 8003042:	4618      	mov	r0, r3
 8003044:	f000 fa22 	bl	800348c <RCCEx_PLLSAI1_Config>
 8003048:	4603      	mov	r3, r0
 800304a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800304c:	e003      	b.n	8003056 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800304e:	2301      	movs	r3, #1
 8003050:	74fb      	strb	r3, [r7, #19]
      break;
 8003052:	e000      	b.n	8003056 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8003054:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003056:	7cfb      	ldrb	r3, [r7, #19]
 8003058:	2b00      	cmp	r3, #0
 800305a:	d10b      	bne.n	8003074 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800305c:	4b51      	ldr	r3, [pc, #324]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800305e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003062:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800306a:	494e      	ldr	r1, [pc, #312]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800306c:	4313      	orrs	r3, r2
 800306e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003072:	e001      	b.n	8003078 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003074:	7cfb      	ldrb	r3, [r7, #19]
 8003076:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003080:	2b00      	cmp	r3, #0
 8003082:	f000 809e 	beq.w	80031c2 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003086:	2300      	movs	r3, #0
 8003088:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800308a:	4b46      	ldr	r3, [pc, #280]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800308c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800308e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003092:	2b00      	cmp	r3, #0
 8003094:	d101      	bne.n	800309a <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8003096:	2301      	movs	r3, #1
 8003098:	e000      	b.n	800309c <HAL_RCCEx_PeriphCLKConfig+0xa4>
 800309a:	2300      	movs	r3, #0
 800309c:	2b00      	cmp	r3, #0
 800309e:	d00d      	beq.n	80030bc <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80030a0:	4b40      	ldr	r3, [pc, #256]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80030a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030a4:	4a3f      	ldr	r2, [pc, #252]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80030a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030aa:	6593      	str	r3, [r2, #88]	; 0x58
 80030ac:	4b3d      	ldr	r3, [pc, #244]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80030ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030b4:	60bb      	str	r3, [r7, #8]
 80030b6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80030b8:	2301      	movs	r3, #1
 80030ba:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80030bc:	4b3a      	ldr	r3, [pc, #232]	; (80031a8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	4a39      	ldr	r2, [pc, #228]	; (80031a8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80030c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030c6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80030c8:	f7fd fee4 	bl	8000e94 <HAL_GetTick>
 80030cc:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80030ce:	e009      	b.n	80030e4 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030d0:	f7fd fee0 	bl	8000e94 <HAL_GetTick>
 80030d4:	4602      	mov	r2, r0
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	1ad3      	subs	r3, r2, r3
 80030da:	2b02      	cmp	r3, #2
 80030dc:	d902      	bls.n	80030e4 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 80030de:	2303      	movs	r3, #3
 80030e0:	74fb      	strb	r3, [r7, #19]
        break;
 80030e2:	e005      	b.n	80030f0 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80030e4:	4b30      	ldr	r3, [pc, #192]	; (80031a8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d0ef      	beq.n	80030d0 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 80030f0:	7cfb      	ldrb	r3, [r7, #19]
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d15a      	bne.n	80031ac <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80030f6:	4b2b      	ldr	r3, [pc, #172]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80030f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030fc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003100:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003102:	697b      	ldr	r3, [r7, #20]
 8003104:	2b00      	cmp	r3, #0
 8003106:	d01e      	beq.n	8003146 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800310c:	697a      	ldr	r2, [r7, #20]
 800310e:	429a      	cmp	r2, r3
 8003110:	d019      	beq.n	8003146 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003112:	4b24      	ldr	r3, [pc, #144]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003114:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003118:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800311c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800311e:	4b21      	ldr	r3, [pc, #132]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003120:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003124:	4a1f      	ldr	r2, [pc, #124]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003126:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800312a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800312e:	4b1d      	ldr	r3, [pc, #116]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003130:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003134:	4a1b      	ldr	r2, [pc, #108]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003136:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800313a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800313e:	4a19      	ldr	r2, [pc, #100]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003140:	697b      	ldr	r3, [r7, #20]
 8003142:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003146:	697b      	ldr	r3, [r7, #20]
 8003148:	f003 0301 	and.w	r3, r3, #1
 800314c:	2b00      	cmp	r3, #0
 800314e:	d016      	beq.n	800317e <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003150:	f7fd fea0 	bl	8000e94 <HAL_GetTick>
 8003154:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003156:	e00b      	b.n	8003170 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003158:	f7fd fe9c 	bl	8000e94 <HAL_GetTick>
 800315c:	4602      	mov	r2, r0
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	1ad3      	subs	r3, r2, r3
 8003162:	f241 3288 	movw	r2, #5000	; 0x1388
 8003166:	4293      	cmp	r3, r2
 8003168:	d902      	bls.n	8003170 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 800316a:	2303      	movs	r3, #3
 800316c:	74fb      	strb	r3, [r7, #19]
            break;
 800316e:	e006      	b.n	800317e <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003170:	4b0c      	ldr	r3, [pc, #48]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003172:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003176:	f003 0302 	and.w	r3, r3, #2
 800317a:	2b00      	cmp	r3, #0
 800317c:	d0ec      	beq.n	8003158 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 800317e:	7cfb      	ldrb	r3, [r7, #19]
 8003180:	2b00      	cmp	r3, #0
 8003182:	d10b      	bne.n	800319c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003184:	4b07      	ldr	r3, [pc, #28]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003186:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800318a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003192:	4904      	ldr	r1, [pc, #16]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003194:	4313      	orrs	r3, r2
 8003196:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800319a:	e009      	b.n	80031b0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800319c:	7cfb      	ldrb	r3, [r7, #19]
 800319e:	74bb      	strb	r3, [r7, #18]
 80031a0:	e006      	b.n	80031b0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 80031a2:	bf00      	nop
 80031a4:	40021000 	.word	0x40021000
 80031a8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031ac:	7cfb      	ldrb	r3, [r7, #19]
 80031ae:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80031b0:	7c7b      	ldrb	r3, [r7, #17]
 80031b2:	2b01      	cmp	r3, #1
 80031b4:	d105      	bne.n	80031c2 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80031b6:	4b8d      	ldr	r3, [pc, #564]	; (80033ec <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80031b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031ba:	4a8c      	ldr	r2, [pc, #560]	; (80033ec <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80031bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80031c0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f003 0301 	and.w	r3, r3, #1
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d00a      	beq.n	80031e4 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80031ce:	4b87      	ldr	r3, [pc, #540]	; (80033ec <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80031d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031d4:	f023 0203 	bic.w	r2, r3, #3
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	6a1b      	ldr	r3, [r3, #32]
 80031dc:	4983      	ldr	r1, [pc, #524]	; (80033ec <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80031de:	4313      	orrs	r3, r2
 80031e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f003 0302 	and.w	r3, r3, #2
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d00a      	beq.n	8003206 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80031f0:	4b7e      	ldr	r3, [pc, #504]	; (80033ec <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80031f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031f6:	f023 020c 	bic.w	r2, r3, #12
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031fe:	497b      	ldr	r1, [pc, #492]	; (80033ec <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003200:	4313      	orrs	r3, r2
 8003202:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f003 0304 	and.w	r3, r3, #4
 800320e:	2b00      	cmp	r3, #0
 8003210:	d00a      	beq.n	8003228 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003212:	4b76      	ldr	r3, [pc, #472]	; (80033ec <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003214:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003218:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003220:	4972      	ldr	r1, [pc, #456]	; (80033ec <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003222:	4313      	orrs	r3, r2
 8003224:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f003 0320 	and.w	r3, r3, #32
 8003230:	2b00      	cmp	r3, #0
 8003232:	d00a      	beq.n	800324a <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003234:	4b6d      	ldr	r3, [pc, #436]	; (80033ec <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003236:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800323a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003242:	496a      	ldr	r1, [pc, #424]	; (80033ec <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003244:	4313      	orrs	r3, r2
 8003246:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003252:	2b00      	cmp	r3, #0
 8003254:	d00a      	beq.n	800326c <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003256:	4b65      	ldr	r3, [pc, #404]	; (80033ec <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003258:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800325c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003264:	4961      	ldr	r1, [pc, #388]	; (80033ec <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003266:	4313      	orrs	r3, r2
 8003268:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003274:	2b00      	cmp	r3, #0
 8003276:	d00a      	beq.n	800328e <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003278:	4b5c      	ldr	r3, [pc, #368]	; (80033ec <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800327a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800327e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003286:	4959      	ldr	r1, [pc, #356]	; (80033ec <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003288:	4313      	orrs	r3, r2
 800328a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003296:	2b00      	cmp	r3, #0
 8003298:	d00a      	beq.n	80032b0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800329a:	4b54      	ldr	r3, [pc, #336]	; (80033ec <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800329c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032a0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032a8:	4950      	ldr	r1, [pc, #320]	; (80033ec <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80032aa:	4313      	orrs	r3, r2
 80032ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d00a      	beq.n	80032d2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80032bc:	4b4b      	ldr	r3, [pc, #300]	; (80033ec <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80032be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032c2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032ca:	4948      	ldr	r1, [pc, #288]	; (80033ec <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80032cc:	4313      	orrs	r3, r2
 80032ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d00a      	beq.n	80032f4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80032de:	4b43      	ldr	r3, [pc, #268]	; (80033ec <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80032e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032e4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032ec:	493f      	ldr	r1, [pc, #252]	; (80033ec <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80032ee:	4313      	orrs	r3, r2
 80032f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d028      	beq.n	8003352 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003300:	4b3a      	ldr	r3, [pc, #232]	; (80033ec <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003302:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003306:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800330e:	4937      	ldr	r1, [pc, #220]	; (80033ec <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003310:	4313      	orrs	r3, r2
 8003312:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800331a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800331e:	d106      	bne.n	800332e <HAL_RCCEx_PeriphCLKConfig+0x336>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003320:	4b32      	ldr	r3, [pc, #200]	; (80033ec <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003322:	68db      	ldr	r3, [r3, #12]
 8003324:	4a31      	ldr	r2, [pc, #196]	; (80033ec <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003326:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800332a:	60d3      	str	r3, [r2, #12]
 800332c:	e011      	b.n	8003352 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003332:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003336:	d10c      	bne.n	8003352 <HAL_RCCEx_PeriphCLKConfig+0x35a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	3304      	adds	r3, #4
 800333c:	2101      	movs	r1, #1
 800333e:	4618      	mov	r0, r3
 8003340:	f000 f8a4 	bl	800348c <RCCEx_PLLSAI1_Config>
 8003344:	4603      	mov	r3, r0
 8003346:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003348:	7cfb      	ldrb	r3, [r7, #19]
 800334a:	2b00      	cmp	r3, #0
 800334c:	d001      	beq.n	8003352 <HAL_RCCEx_PeriphCLKConfig+0x35a>
        {
          /* set overall return value */
          status = ret;
 800334e:	7cfb      	ldrb	r3, [r7, #19]
 8003350:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800335a:	2b00      	cmp	r3, #0
 800335c:	d028      	beq.n	80033b0 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800335e:	4b23      	ldr	r3, [pc, #140]	; (80033ec <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003360:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003364:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800336c:	491f      	ldr	r1, [pc, #124]	; (80033ec <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800336e:	4313      	orrs	r3, r2
 8003370:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003378:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800337c:	d106      	bne.n	800338c <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800337e:	4b1b      	ldr	r3, [pc, #108]	; (80033ec <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003380:	68db      	ldr	r3, [r3, #12]
 8003382:	4a1a      	ldr	r2, [pc, #104]	; (80033ec <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003384:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003388:	60d3      	str	r3, [r2, #12]
 800338a:	e011      	b.n	80033b0 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003390:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003394:	d10c      	bne.n	80033b0 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	3304      	adds	r3, #4
 800339a:	2101      	movs	r1, #1
 800339c:	4618      	mov	r0, r3
 800339e:	f000 f875 	bl	800348c <RCCEx_PLLSAI1_Config>
 80033a2:	4603      	mov	r3, r0
 80033a4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80033a6:	7cfb      	ldrb	r3, [r7, #19]
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d001      	beq.n	80033b0 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 80033ac:	7cfb      	ldrb	r3, [r7, #19]
 80033ae:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d02b      	beq.n	8003414 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80033bc:	4b0b      	ldr	r3, [pc, #44]	; (80033ec <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80033be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033c2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80033ca:	4908      	ldr	r1, [pc, #32]	; (80033ec <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80033cc:	4313      	orrs	r3, r2
 80033ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80033d6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80033da:	d109      	bne.n	80033f0 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80033dc:	4b03      	ldr	r3, [pc, #12]	; (80033ec <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80033de:	68db      	ldr	r3, [r3, #12]
 80033e0:	4a02      	ldr	r2, [pc, #8]	; (80033ec <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80033e2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80033e6:	60d3      	str	r3, [r2, #12]
 80033e8:	e014      	b.n	8003414 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 80033ea:	bf00      	nop
 80033ec:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80033f4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80033f8:	d10c      	bne.n	8003414 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	3304      	adds	r3, #4
 80033fe:	2101      	movs	r1, #1
 8003400:	4618      	mov	r0, r3
 8003402:	f000 f843 	bl	800348c <RCCEx_PLLSAI1_Config>
 8003406:	4603      	mov	r3, r0
 8003408:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800340a:	7cfb      	ldrb	r3, [r7, #19]
 800340c:	2b00      	cmp	r3, #0
 800340e:	d001      	beq.n	8003414 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      {
        /* set overall return value */
        status = ret;
 8003410:	7cfb      	ldrb	r3, [r7, #19]
 8003412:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800341c:	2b00      	cmp	r3, #0
 800341e:	d01c      	beq.n	800345a <HAL_RCCEx_PeriphCLKConfig+0x462>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003420:	4b19      	ldr	r3, [pc, #100]	; (8003488 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003422:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003426:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800342e:	4916      	ldr	r1, [pc, #88]	; (8003488 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003430:	4313      	orrs	r3, r2
 8003432:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800343a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800343e:	d10c      	bne.n	800345a <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	3304      	adds	r3, #4
 8003444:	2102      	movs	r1, #2
 8003446:	4618      	mov	r0, r3
 8003448:	f000 f820 	bl	800348c <RCCEx_PLLSAI1_Config>
 800344c:	4603      	mov	r3, r0
 800344e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003450:	7cfb      	ldrb	r3, [r7, #19]
 8003452:	2b00      	cmp	r3, #0
 8003454:	d001      	beq.n	800345a <HAL_RCCEx_PeriphCLKConfig+0x462>
      {
        /* set overall return value */
        status = ret;
 8003456:	7cfb      	ldrb	r3, [r7, #19]
 8003458:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003462:	2b00      	cmp	r3, #0
 8003464:	d00a      	beq.n	800347c <HAL_RCCEx_PeriphCLKConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003466:	4b08      	ldr	r3, [pc, #32]	; (8003488 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003468:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800346c:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003474:	4904      	ldr	r1, [pc, #16]	; (8003488 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003476:	4313      	orrs	r3, r2
 8003478:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800347c:	7cbb      	ldrb	r3, [r7, #18]
}
 800347e:	4618      	mov	r0, r3
 8003480:	3718      	adds	r7, #24
 8003482:	46bd      	mov	sp, r7
 8003484:	bd80      	pop	{r7, pc}
 8003486:	bf00      	nop
 8003488:	40021000 	.word	0x40021000

0800348c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800348c:	b580      	push	{r7, lr}
 800348e:	b084      	sub	sp, #16
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
 8003494:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003496:	2300      	movs	r3, #0
 8003498:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800349a:	4b74      	ldr	r3, [pc, #464]	; (800366c <RCCEx_PLLSAI1_Config+0x1e0>)
 800349c:	68db      	ldr	r3, [r3, #12]
 800349e:	f003 0303 	and.w	r3, r3, #3
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d018      	beq.n	80034d8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80034a6:	4b71      	ldr	r3, [pc, #452]	; (800366c <RCCEx_PLLSAI1_Config+0x1e0>)
 80034a8:	68db      	ldr	r3, [r3, #12]
 80034aa:	f003 0203 	and.w	r2, r3, #3
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	429a      	cmp	r2, r3
 80034b4:	d10d      	bne.n	80034d2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
       ||
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d009      	beq.n	80034d2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80034be:	4b6b      	ldr	r3, [pc, #428]	; (800366c <RCCEx_PLLSAI1_Config+0x1e0>)
 80034c0:	68db      	ldr	r3, [r3, #12]
 80034c2:	091b      	lsrs	r3, r3, #4
 80034c4:	f003 0307 	and.w	r3, r3, #7
 80034c8:	1c5a      	adds	r2, r3, #1
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	685b      	ldr	r3, [r3, #4]
       ||
 80034ce:	429a      	cmp	r2, r3
 80034d0:	d047      	beq.n	8003562 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80034d2:	2301      	movs	r3, #1
 80034d4:	73fb      	strb	r3, [r7, #15]
 80034d6:	e044      	b.n	8003562 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	2b03      	cmp	r3, #3
 80034de:	d018      	beq.n	8003512 <RCCEx_PLLSAI1_Config+0x86>
 80034e0:	2b03      	cmp	r3, #3
 80034e2:	d825      	bhi.n	8003530 <RCCEx_PLLSAI1_Config+0xa4>
 80034e4:	2b01      	cmp	r3, #1
 80034e6:	d002      	beq.n	80034ee <RCCEx_PLLSAI1_Config+0x62>
 80034e8:	2b02      	cmp	r3, #2
 80034ea:	d009      	beq.n	8003500 <RCCEx_PLLSAI1_Config+0x74>
 80034ec:	e020      	b.n	8003530 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80034ee:	4b5f      	ldr	r3, [pc, #380]	; (800366c <RCCEx_PLLSAI1_Config+0x1e0>)
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f003 0302 	and.w	r3, r3, #2
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d11d      	bne.n	8003536 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80034fa:	2301      	movs	r3, #1
 80034fc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80034fe:	e01a      	b.n	8003536 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003500:	4b5a      	ldr	r3, [pc, #360]	; (800366c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003508:	2b00      	cmp	r3, #0
 800350a:	d116      	bne.n	800353a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800350c:	2301      	movs	r3, #1
 800350e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003510:	e013      	b.n	800353a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003512:	4b56      	ldr	r3, [pc, #344]	; (800366c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800351a:	2b00      	cmp	r3, #0
 800351c:	d10f      	bne.n	800353e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800351e:	4b53      	ldr	r3, [pc, #332]	; (800366c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003526:	2b00      	cmp	r3, #0
 8003528:	d109      	bne.n	800353e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800352a:	2301      	movs	r3, #1
 800352c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800352e:	e006      	b.n	800353e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003530:	2301      	movs	r3, #1
 8003532:	73fb      	strb	r3, [r7, #15]
      break;
 8003534:	e004      	b.n	8003540 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003536:	bf00      	nop
 8003538:	e002      	b.n	8003540 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800353a:	bf00      	nop
 800353c:	e000      	b.n	8003540 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800353e:	bf00      	nop
    }

    if(status == HAL_OK)
 8003540:	7bfb      	ldrb	r3, [r7, #15]
 8003542:	2b00      	cmp	r3, #0
 8003544:	d10d      	bne.n	8003562 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003546:	4b49      	ldr	r3, [pc, #292]	; (800366c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003548:	68db      	ldr	r3, [r3, #12]
 800354a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6819      	ldr	r1, [r3, #0]
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	685b      	ldr	r3, [r3, #4]
 8003556:	3b01      	subs	r3, #1
 8003558:	011b      	lsls	r3, r3, #4
 800355a:	430b      	orrs	r3, r1
 800355c:	4943      	ldr	r1, [pc, #268]	; (800366c <RCCEx_PLLSAI1_Config+0x1e0>)
 800355e:	4313      	orrs	r3, r2
 8003560:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003562:	7bfb      	ldrb	r3, [r7, #15]
 8003564:	2b00      	cmp	r3, #0
 8003566:	d17c      	bne.n	8003662 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003568:	4b40      	ldr	r3, [pc, #256]	; (800366c <RCCEx_PLLSAI1_Config+0x1e0>)
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	4a3f      	ldr	r2, [pc, #252]	; (800366c <RCCEx_PLLSAI1_Config+0x1e0>)
 800356e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003572:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003574:	f7fd fc8e 	bl	8000e94 <HAL_GetTick>
 8003578:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800357a:	e009      	b.n	8003590 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800357c:	f7fd fc8a 	bl	8000e94 <HAL_GetTick>
 8003580:	4602      	mov	r2, r0
 8003582:	68bb      	ldr	r3, [r7, #8]
 8003584:	1ad3      	subs	r3, r2, r3
 8003586:	2b02      	cmp	r3, #2
 8003588:	d902      	bls.n	8003590 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800358a:	2303      	movs	r3, #3
 800358c:	73fb      	strb	r3, [r7, #15]
        break;
 800358e:	e005      	b.n	800359c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003590:	4b36      	ldr	r3, [pc, #216]	; (800366c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003598:	2b00      	cmp	r3, #0
 800359a:	d1ef      	bne.n	800357c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800359c:	7bfb      	ldrb	r3, [r7, #15]
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d15f      	bne.n	8003662 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80035a2:	683b      	ldr	r3, [r7, #0]
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d110      	bne.n	80035ca <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80035a8:	4b30      	ldr	r3, [pc, #192]	; (800366c <RCCEx_PLLSAI1_Config+0x1e0>)
 80035aa:	691b      	ldr	r3, [r3, #16]
 80035ac:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 80035b0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80035b4:	687a      	ldr	r2, [r7, #4]
 80035b6:	6892      	ldr	r2, [r2, #8]
 80035b8:	0211      	lsls	r1, r2, #8
 80035ba:	687a      	ldr	r2, [r7, #4]
 80035bc:	68d2      	ldr	r2, [r2, #12]
 80035be:	06d2      	lsls	r2, r2, #27
 80035c0:	430a      	orrs	r2, r1
 80035c2:	492a      	ldr	r1, [pc, #168]	; (800366c <RCCEx_PLLSAI1_Config+0x1e0>)
 80035c4:	4313      	orrs	r3, r2
 80035c6:	610b      	str	r3, [r1, #16]
 80035c8:	e027      	b.n	800361a <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	2b01      	cmp	r3, #1
 80035ce:	d112      	bne.n	80035f6 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80035d0:	4b26      	ldr	r3, [pc, #152]	; (800366c <RCCEx_PLLSAI1_Config+0x1e0>)
 80035d2:	691b      	ldr	r3, [r3, #16]
 80035d4:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80035d8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80035dc:	687a      	ldr	r2, [r7, #4]
 80035de:	6892      	ldr	r2, [r2, #8]
 80035e0:	0211      	lsls	r1, r2, #8
 80035e2:	687a      	ldr	r2, [r7, #4]
 80035e4:	6912      	ldr	r2, [r2, #16]
 80035e6:	0852      	lsrs	r2, r2, #1
 80035e8:	3a01      	subs	r2, #1
 80035ea:	0552      	lsls	r2, r2, #21
 80035ec:	430a      	orrs	r2, r1
 80035ee:	491f      	ldr	r1, [pc, #124]	; (800366c <RCCEx_PLLSAI1_Config+0x1e0>)
 80035f0:	4313      	orrs	r3, r2
 80035f2:	610b      	str	r3, [r1, #16]
 80035f4:	e011      	b.n	800361a <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80035f6:	4b1d      	ldr	r3, [pc, #116]	; (800366c <RCCEx_PLLSAI1_Config+0x1e0>)
 80035f8:	691b      	ldr	r3, [r3, #16]
 80035fa:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80035fe:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003602:	687a      	ldr	r2, [r7, #4]
 8003604:	6892      	ldr	r2, [r2, #8]
 8003606:	0211      	lsls	r1, r2, #8
 8003608:	687a      	ldr	r2, [r7, #4]
 800360a:	6952      	ldr	r2, [r2, #20]
 800360c:	0852      	lsrs	r2, r2, #1
 800360e:	3a01      	subs	r2, #1
 8003610:	0652      	lsls	r2, r2, #25
 8003612:	430a      	orrs	r2, r1
 8003614:	4915      	ldr	r1, [pc, #84]	; (800366c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003616:	4313      	orrs	r3, r2
 8003618:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800361a:	4b14      	ldr	r3, [pc, #80]	; (800366c <RCCEx_PLLSAI1_Config+0x1e0>)
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	4a13      	ldr	r2, [pc, #76]	; (800366c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003620:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003624:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003626:	f7fd fc35 	bl	8000e94 <HAL_GetTick>
 800362a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800362c:	e009      	b.n	8003642 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800362e:	f7fd fc31 	bl	8000e94 <HAL_GetTick>
 8003632:	4602      	mov	r2, r0
 8003634:	68bb      	ldr	r3, [r7, #8]
 8003636:	1ad3      	subs	r3, r2, r3
 8003638:	2b02      	cmp	r3, #2
 800363a:	d902      	bls.n	8003642 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 800363c:	2303      	movs	r3, #3
 800363e:	73fb      	strb	r3, [r7, #15]
          break;
 8003640:	e005      	b.n	800364e <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003642:	4b0a      	ldr	r3, [pc, #40]	; (800366c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800364a:	2b00      	cmp	r3, #0
 800364c:	d0ef      	beq.n	800362e <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 800364e:	7bfb      	ldrb	r3, [r7, #15]
 8003650:	2b00      	cmp	r3, #0
 8003652:	d106      	bne.n	8003662 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003654:	4b05      	ldr	r3, [pc, #20]	; (800366c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003656:	691a      	ldr	r2, [r3, #16]
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	699b      	ldr	r3, [r3, #24]
 800365c:	4903      	ldr	r1, [pc, #12]	; (800366c <RCCEx_PLLSAI1_Config+0x1e0>)
 800365e:	4313      	orrs	r3, r2
 8003660:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003662:	7bfb      	ldrb	r3, [r7, #15]
}
 8003664:	4618      	mov	r0, r3
 8003666:	3710      	adds	r7, #16
 8003668:	46bd      	mov	sp, r7
 800366a:	bd80      	pop	{r7, pc}
 800366c:	40021000 	.word	0x40021000

08003670 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003670:	b580      	push	{r7, lr}
 8003672:	b082      	sub	sp, #8
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	2b00      	cmp	r3, #0
 800367c:	d101      	bne.n	8003682 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800367e:	2301      	movs	r3, #1
 8003680:	e049      	b.n	8003716 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003688:	b2db      	uxtb	r3, r3
 800368a:	2b00      	cmp	r3, #0
 800368c:	d106      	bne.n	800369c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	2200      	movs	r2, #0
 8003692:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003696:	6878      	ldr	r0, [r7, #4]
 8003698:	f000 f841 	bl	800371e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2202      	movs	r2, #2
 80036a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681a      	ldr	r2, [r3, #0]
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	3304      	adds	r3, #4
 80036ac:	4619      	mov	r1, r3
 80036ae:	4610      	mov	r0, r2
 80036b0:	f000 f9dc 	bl	8003a6c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2201      	movs	r2, #1
 80036b8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2201      	movs	r2, #1
 80036c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2201      	movs	r2, #1
 80036c8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2201      	movs	r2, #1
 80036d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2201      	movs	r2, #1
 80036d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2201      	movs	r2, #1
 80036e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2201      	movs	r2, #1
 80036e8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2201      	movs	r2, #1
 80036f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2201      	movs	r2, #1
 80036f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2201      	movs	r2, #1
 8003700:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2201      	movs	r2, #1
 8003708:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2201      	movs	r2, #1
 8003710:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003714:	2300      	movs	r3, #0
}
 8003716:	4618      	mov	r0, r3
 8003718:	3708      	adds	r7, #8
 800371a:	46bd      	mov	sp, r7
 800371c:	bd80      	pop	{r7, pc}

0800371e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800371e:	b480      	push	{r7}
 8003720:	b083      	sub	sp, #12
 8003722:	af00      	add	r7, sp, #0
 8003724:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003726:	bf00      	nop
 8003728:	370c      	adds	r7, #12
 800372a:	46bd      	mov	sp, r7
 800372c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003730:	4770      	bx	lr
	...

08003734 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003734:	b480      	push	{r7}
 8003736:	b085      	sub	sp, #20
 8003738:	af00      	add	r7, sp, #0
 800373a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003742:	b2db      	uxtb	r3, r3
 8003744:	2b01      	cmp	r3, #1
 8003746:	d001      	beq.n	800374c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003748:	2301      	movs	r3, #1
 800374a:	e03b      	b.n	80037c4 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2202      	movs	r2, #2
 8003750:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	68da      	ldr	r2, [r3, #12]
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f042 0201 	orr.w	r2, r2, #1
 8003762:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	4a19      	ldr	r2, [pc, #100]	; (80037d0 <HAL_TIM_Base_Start_IT+0x9c>)
 800376a:	4293      	cmp	r3, r2
 800376c:	d009      	beq.n	8003782 <HAL_TIM_Base_Start_IT+0x4e>
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003776:	d004      	beq.n	8003782 <HAL_TIM_Base_Start_IT+0x4e>
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	4a15      	ldr	r2, [pc, #84]	; (80037d4 <HAL_TIM_Base_Start_IT+0xa0>)
 800377e:	4293      	cmp	r3, r2
 8003780:	d115      	bne.n	80037ae <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	689a      	ldr	r2, [r3, #8]
 8003788:	4b13      	ldr	r3, [pc, #76]	; (80037d8 <HAL_TIM_Base_Start_IT+0xa4>)
 800378a:	4013      	ands	r3, r2
 800378c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	2b06      	cmp	r3, #6
 8003792:	d015      	beq.n	80037c0 <HAL_TIM_Base_Start_IT+0x8c>
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800379a:	d011      	beq.n	80037c0 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	681a      	ldr	r2, [r3, #0]
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f042 0201 	orr.w	r2, r2, #1
 80037aa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80037ac:	e008      	b.n	80037c0 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	681a      	ldr	r2, [r3, #0]
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f042 0201 	orr.w	r2, r2, #1
 80037bc:	601a      	str	r2, [r3, #0]
 80037be:	e000      	b.n	80037c2 <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80037c0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80037c2:	2300      	movs	r3, #0
}
 80037c4:	4618      	mov	r0, r3
 80037c6:	3714      	adds	r7, #20
 80037c8:	46bd      	mov	sp, r7
 80037ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ce:	4770      	bx	lr
 80037d0:	40012c00 	.word	0x40012c00
 80037d4:	40014000 	.word	0x40014000
 80037d8:	00010007 	.word	0x00010007

080037dc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	b082      	sub	sp, #8
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	691b      	ldr	r3, [r3, #16]
 80037ea:	f003 0302 	and.w	r3, r3, #2
 80037ee:	2b02      	cmp	r3, #2
 80037f0:	d122      	bne.n	8003838 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	68db      	ldr	r3, [r3, #12]
 80037f8:	f003 0302 	and.w	r3, r3, #2
 80037fc:	2b02      	cmp	r3, #2
 80037fe:	d11b      	bne.n	8003838 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f06f 0202 	mvn.w	r2, #2
 8003808:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	2201      	movs	r2, #1
 800380e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	699b      	ldr	r3, [r3, #24]
 8003816:	f003 0303 	and.w	r3, r3, #3
 800381a:	2b00      	cmp	r3, #0
 800381c:	d003      	beq.n	8003826 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800381e:	6878      	ldr	r0, [r7, #4]
 8003820:	f000 f905 	bl	8003a2e <HAL_TIM_IC_CaptureCallback>
 8003824:	e005      	b.n	8003832 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003826:	6878      	ldr	r0, [r7, #4]
 8003828:	f000 f8f7 	bl	8003a1a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800382c:	6878      	ldr	r0, [r7, #4]
 800382e:	f000 f908 	bl	8003a42 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	2200      	movs	r2, #0
 8003836:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	691b      	ldr	r3, [r3, #16]
 800383e:	f003 0304 	and.w	r3, r3, #4
 8003842:	2b04      	cmp	r3, #4
 8003844:	d122      	bne.n	800388c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	68db      	ldr	r3, [r3, #12]
 800384c:	f003 0304 	and.w	r3, r3, #4
 8003850:	2b04      	cmp	r3, #4
 8003852:	d11b      	bne.n	800388c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f06f 0204 	mvn.w	r2, #4
 800385c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	2202      	movs	r2, #2
 8003862:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	699b      	ldr	r3, [r3, #24]
 800386a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800386e:	2b00      	cmp	r3, #0
 8003870:	d003      	beq.n	800387a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003872:	6878      	ldr	r0, [r7, #4]
 8003874:	f000 f8db 	bl	8003a2e <HAL_TIM_IC_CaptureCallback>
 8003878:	e005      	b.n	8003886 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800387a:	6878      	ldr	r0, [r7, #4]
 800387c:	f000 f8cd 	bl	8003a1a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003880:	6878      	ldr	r0, [r7, #4]
 8003882:	f000 f8de 	bl	8003a42 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	2200      	movs	r2, #0
 800388a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	691b      	ldr	r3, [r3, #16]
 8003892:	f003 0308 	and.w	r3, r3, #8
 8003896:	2b08      	cmp	r3, #8
 8003898:	d122      	bne.n	80038e0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	68db      	ldr	r3, [r3, #12]
 80038a0:	f003 0308 	and.w	r3, r3, #8
 80038a4:	2b08      	cmp	r3, #8
 80038a6:	d11b      	bne.n	80038e0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f06f 0208 	mvn.w	r2, #8
 80038b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	2204      	movs	r2, #4
 80038b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	69db      	ldr	r3, [r3, #28]
 80038be:	f003 0303 	and.w	r3, r3, #3
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d003      	beq.n	80038ce <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80038c6:	6878      	ldr	r0, [r7, #4]
 80038c8:	f000 f8b1 	bl	8003a2e <HAL_TIM_IC_CaptureCallback>
 80038cc:	e005      	b.n	80038da <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80038ce:	6878      	ldr	r0, [r7, #4]
 80038d0:	f000 f8a3 	bl	8003a1a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038d4:	6878      	ldr	r0, [r7, #4]
 80038d6:	f000 f8b4 	bl	8003a42 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	2200      	movs	r2, #0
 80038de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	691b      	ldr	r3, [r3, #16]
 80038e6:	f003 0310 	and.w	r3, r3, #16
 80038ea:	2b10      	cmp	r3, #16
 80038ec:	d122      	bne.n	8003934 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	68db      	ldr	r3, [r3, #12]
 80038f4:	f003 0310 	and.w	r3, r3, #16
 80038f8:	2b10      	cmp	r3, #16
 80038fa:	d11b      	bne.n	8003934 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f06f 0210 	mvn.w	r2, #16
 8003904:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	2208      	movs	r2, #8
 800390a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	69db      	ldr	r3, [r3, #28]
 8003912:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003916:	2b00      	cmp	r3, #0
 8003918:	d003      	beq.n	8003922 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800391a:	6878      	ldr	r0, [r7, #4]
 800391c:	f000 f887 	bl	8003a2e <HAL_TIM_IC_CaptureCallback>
 8003920:	e005      	b.n	800392e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003922:	6878      	ldr	r0, [r7, #4]
 8003924:	f000 f879 	bl	8003a1a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003928:	6878      	ldr	r0, [r7, #4]
 800392a:	f000 f88a 	bl	8003a42 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	2200      	movs	r2, #0
 8003932:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	691b      	ldr	r3, [r3, #16]
 800393a:	f003 0301 	and.w	r3, r3, #1
 800393e:	2b01      	cmp	r3, #1
 8003940:	d10e      	bne.n	8003960 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	68db      	ldr	r3, [r3, #12]
 8003948:	f003 0301 	and.w	r3, r3, #1
 800394c:	2b01      	cmp	r3, #1
 800394e:	d107      	bne.n	8003960 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f06f 0201 	mvn.w	r2, #1
 8003958:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800395a:	6878      	ldr	r0, [r7, #4]
 800395c:	f7fc ff9e 	bl	800089c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	691b      	ldr	r3, [r3, #16]
 8003966:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800396a:	2b80      	cmp	r3, #128	; 0x80
 800396c:	d10e      	bne.n	800398c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	68db      	ldr	r3, [r3, #12]
 8003974:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003978:	2b80      	cmp	r3, #128	; 0x80
 800397a:	d107      	bne.n	800398c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003984:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003986:	6878      	ldr	r0, [r7, #4]
 8003988:	f000 f8de 	bl	8003b48 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	691b      	ldr	r3, [r3, #16]
 8003992:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003996:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800399a:	d10e      	bne.n	80039ba <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	68db      	ldr	r3, [r3, #12]
 80039a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039a6:	2b80      	cmp	r3, #128	; 0x80
 80039a8:	d107      	bne.n	80039ba <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80039b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80039b4:	6878      	ldr	r0, [r7, #4]
 80039b6:	f000 f8d1 	bl	8003b5c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	691b      	ldr	r3, [r3, #16]
 80039c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039c4:	2b40      	cmp	r3, #64	; 0x40
 80039c6:	d10e      	bne.n	80039e6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	68db      	ldr	r3, [r3, #12]
 80039ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039d2:	2b40      	cmp	r3, #64	; 0x40
 80039d4:	d107      	bne.n	80039e6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80039de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80039e0:	6878      	ldr	r0, [r7, #4]
 80039e2:	f000 f838 	bl	8003a56 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	691b      	ldr	r3, [r3, #16]
 80039ec:	f003 0320 	and.w	r3, r3, #32
 80039f0:	2b20      	cmp	r3, #32
 80039f2:	d10e      	bne.n	8003a12 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	68db      	ldr	r3, [r3, #12]
 80039fa:	f003 0320 	and.w	r3, r3, #32
 80039fe:	2b20      	cmp	r3, #32
 8003a00:	d107      	bne.n	8003a12 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f06f 0220 	mvn.w	r2, #32
 8003a0a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003a0c:	6878      	ldr	r0, [r7, #4]
 8003a0e:	f000 f891 	bl	8003b34 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003a12:	bf00      	nop
 8003a14:	3708      	adds	r7, #8
 8003a16:	46bd      	mov	sp, r7
 8003a18:	bd80      	pop	{r7, pc}

08003a1a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003a1a:	b480      	push	{r7}
 8003a1c:	b083      	sub	sp, #12
 8003a1e:	af00      	add	r7, sp, #0
 8003a20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003a22:	bf00      	nop
 8003a24:	370c      	adds	r7, #12
 8003a26:	46bd      	mov	sp, r7
 8003a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2c:	4770      	bx	lr

08003a2e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003a2e:	b480      	push	{r7}
 8003a30:	b083      	sub	sp, #12
 8003a32:	af00      	add	r7, sp, #0
 8003a34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003a36:	bf00      	nop
 8003a38:	370c      	adds	r7, #12
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a40:	4770      	bx	lr

08003a42 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003a42:	b480      	push	{r7}
 8003a44:	b083      	sub	sp, #12
 8003a46:	af00      	add	r7, sp, #0
 8003a48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003a4a:	bf00      	nop
 8003a4c:	370c      	adds	r7, #12
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a54:	4770      	bx	lr

08003a56 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003a56:	b480      	push	{r7}
 8003a58:	b083      	sub	sp, #12
 8003a5a:	af00      	add	r7, sp, #0
 8003a5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003a5e:	bf00      	nop
 8003a60:	370c      	adds	r7, #12
 8003a62:	46bd      	mov	sp, r7
 8003a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a68:	4770      	bx	lr
	...

08003a6c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003a6c:	b480      	push	{r7}
 8003a6e:	b085      	sub	sp, #20
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]
 8003a74:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	4a2a      	ldr	r2, [pc, #168]	; (8003b28 <TIM_Base_SetConfig+0xbc>)
 8003a80:	4293      	cmp	r3, r2
 8003a82:	d003      	beq.n	8003a8c <TIM_Base_SetConfig+0x20>
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a8a:	d108      	bne.n	8003a9e <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a92:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003a94:	683b      	ldr	r3, [r7, #0]
 8003a96:	685b      	ldr	r3, [r3, #4]
 8003a98:	68fa      	ldr	r2, [r7, #12]
 8003a9a:	4313      	orrs	r3, r2
 8003a9c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	4a21      	ldr	r2, [pc, #132]	; (8003b28 <TIM_Base_SetConfig+0xbc>)
 8003aa2:	4293      	cmp	r3, r2
 8003aa4:	d00b      	beq.n	8003abe <TIM_Base_SetConfig+0x52>
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003aac:	d007      	beq.n	8003abe <TIM_Base_SetConfig+0x52>
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	4a1e      	ldr	r2, [pc, #120]	; (8003b2c <TIM_Base_SetConfig+0xc0>)
 8003ab2:	4293      	cmp	r3, r2
 8003ab4:	d003      	beq.n	8003abe <TIM_Base_SetConfig+0x52>
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	4a1d      	ldr	r2, [pc, #116]	; (8003b30 <TIM_Base_SetConfig+0xc4>)
 8003aba:	4293      	cmp	r3, r2
 8003abc:	d108      	bne.n	8003ad0 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ac4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003ac6:	683b      	ldr	r3, [r7, #0]
 8003ac8:	68db      	ldr	r3, [r3, #12]
 8003aca:	68fa      	ldr	r2, [r7, #12]
 8003acc:	4313      	orrs	r3, r2
 8003ace:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003ad6:	683b      	ldr	r3, [r7, #0]
 8003ad8:	695b      	ldr	r3, [r3, #20]
 8003ada:	4313      	orrs	r3, r2
 8003adc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	68fa      	ldr	r2, [r7, #12]
 8003ae2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003ae4:	683b      	ldr	r3, [r7, #0]
 8003ae6:	689a      	ldr	r2, [r3, #8]
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003aec:	683b      	ldr	r3, [r7, #0]
 8003aee:	681a      	ldr	r2, [r3, #0]
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	4a0c      	ldr	r2, [pc, #48]	; (8003b28 <TIM_Base_SetConfig+0xbc>)
 8003af8:	4293      	cmp	r3, r2
 8003afa:	d007      	beq.n	8003b0c <TIM_Base_SetConfig+0xa0>
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	4a0b      	ldr	r2, [pc, #44]	; (8003b2c <TIM_Base_SetConfig+0xc0>)
 8003b00:	4293      	cmp	r3, r2
 8003b02:	d003      	beq.n	8003b0c <TIM_Base_SetConfig+0xa0>
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	4a0a      	ldr	r2, [pc, #40]	; (8003b30 <TIM_Base_SetConfig+0xc4>)
 8003b08:	4293      	cmp	r3, r2
 8003b0a:	d103      	bne.n	8003b14 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003b0c:	683b      	ldr	r3, [r7, #0]
 8003b0e:	691a      	ldr	r2, [r3, #16]
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	2201      	movs	r2, #1
 8003b18:	615a      	str	r2, [r3, #20]
}
 8003b1a:	bf00      	nop
 8003b1c:	3714      	adds	r7, #20
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b24:	4770      	bx	lr
 8003b26:	bf00      	nop
 8003b28:	40012c00 	.word	0x40012c00
 8003b2c:	40014000 	.word	0x40014000
 8003b30:	40014400 	.word	0x40014400

08003b34 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003b34:	b480      	push	{r7}
 8003b36:	b083      	sub	sp, #12
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003b3c:	bf00      	nop
 8003b3e:	370c      	adds	r7, #12
 8003b40:	46bd      	mov	sp, r7
 8003b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b46:	4770      	bx	lr

08003b48 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003b48:	b480      	push	{r7}
 8003b4a:	b083      	sub	sp, #12
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003b50:	bf00      	nop
 8003b52:	370c      	adds	r7, #12
 8003b54:	46bd      	mov	sp, r7
 8003b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5a:	4770      	bx	lr

08003b5c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003b5c:	b480      	push	{r7}
 8003b5e:	b083      	sub	sp, #12
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003b64:	bf00      	nop
 8003b66:	370c      	adds	r7, #12
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6e:	4770      	bx	lr

08003b70 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003b70:	b580      	push	{r7, lr}
 8003b72:	b082      	sub	sp, #8
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d101      	bne.n	8003b82 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003b7e:	2301      	movs	r3, #1
 8003b80:	e040      	b.n	8003c04 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d106      	bne.n	8003b98 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003b92:	6878      	ldr	r0, [r7, #4]
 8003b94:	f7fc ff84 	bl	8000aa0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2224      	movs	r2, #36	; 0x24
 8003b9c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	681a      	ldr	r2, [r3, #0]
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f022 0201 	bic.w	r2, r2, #1
 8003bac:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003bae:	6878      	ldr	r0, [r7, #4]
 8003bb0:	f000 fb9c 	bl	80042ec <UART_SetConfig>
 8003bb4:	4603      	mov	r3, r0
 8003bb6:	2b01      	cmp	r3, #1
 8003bb8:	d101      	bne.n	8003bbe <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003bba:	2301      	movs	r3, #1
 8003bbc:	e022      	b.n	8003c04 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d002      	beq.n	8003bcc <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003bc6:	6878      	ldr	r0, [r7, #4]
 8003bc8:	f000 fdea 	bl	80047a0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	685a      	ldr	r2, [r3, #4]
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003bda:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	689a      	ldr	r2, [r3, #8]
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003bea:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	681a      	ldr	r2, [r3, #0]
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f042 0201 	orr.w	r2, r2, #1
 8003bfa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003bfc:	6878      	ldr	r0, [r7, #4]
 8003bfe:	f000 fe71 	bl	80048e4 <UART_CheckIdleState>
 8003c02:	4603      	mov	r3, r0
}
 8003c04:	4618      	mov	r0, r3
 8003c06:	3708      	adds	r7, #8
 8003c08:	46bd      	mov	sp, r7
 8003c0a:	bd80      	pop	{r7, pc}

08003c0c <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8003c0c:	b480      	push	{r7}
 8003c0e:	b08b      	sub	sp, #44	; 0x2c
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	60f8      	str	r0, [r7, #12]
 8003c14:	60b9      	str	r1, [r7, #8]
 8003c16:	4613      	mov	r3, r2
 8003c18:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003c1e:	2b20      	cmp	r3, #32
 8003c20:	d156      	bne.n	8003cd0 <HAL_UART_Transmit_IT+0xc4>
  {
    if ((pData == NULL) || (Size == 0U))
 8003c22:	68bb      	ldr	r3, [r7, #8]
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d002      	beq.n	8003c2e <HAL_UART_Transmit_IT+0x22>
 8003c28:	88fb      	ldrh	r3, [r7, #6]
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d101      	bne.n	8003c32 <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 8003c2e:	2301      	movs	r3, #1
 8003c30:	e04f      	b.n	8003cd2 <HAL_UART_Transmit_IT+0xc6>
    }

    __HAL_LOCK(huart);
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003c38:	2b01      	cmp	r3, #1
 8003c3a:	d101      	bne.n	8003c40 <HAL_UART_Transmit_IT+0x34>
 8003c3c:	2302      	movs	r3, #2
 8003c3e:	e048      	b.n	8003cd2 <HAL_UART_Transmit_IT+0xc6>
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	2201      	movs	r2, #1
 8003c44:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	68ba      	ldr	r2, [r7, #8]
 8003c4c:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	88fa      	ldrh	r2, [r7, #6]
 8003c52:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	88fa      	ldrh	r2, [r7, #6]
 8003c5a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	2200      	movs	r2, #0
 8003c62:	669a      	str	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	2200      	movs	r2, #0
 8003c68:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	2221      	movs	r2, #33	; 0x21
 8003c70:	679a      	str	r2, [r3, #120]	; 0x78
      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
    }
#else
    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	689b      	ldr	r3, [r3, #8]
 8003c76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c7a:	d107      	bne.n	8003c8c <HAL_UART_Transmit_IT+0x80>
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	691b      	ldr	r3, [r3, #16]
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d103      	bne.n	8003c8c <HAL_UART_Transmit_IT+0x80>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	4a16      	ldr	r2, [pc, #88]	; (8003ce0 <HAL_UART_Transmit_IT+0xd4>)
 8003c88:	669a      	str	r2, [r3, #104]	; 0x68
 8003c8a:	e002      	b.n	8003c92 <HAL_UART_Transmit_IT+0x86>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	4a15      	ldr	r2, [pc, #84]	; (8003ce4 <HAL_UART_Transmit_IT+0xd8>)
 8003c90:	669a      	str	r2, [r3, #104]	; 0x68
    }

    __HAL_UNLOCK(huart);
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	2200      	movs	r2, #0
 8003c96:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ca0:	697b      	ldr	r3, [r7, #20]
 8003ca2:	e853 3f00 	ldrex	r3, [r3]
 8003ca6:	613b      	str	r3, [r7, #16]
   return(result);
 8003ca8:	693b      	ldr	r3, [r7, #16]
 8003caa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003cae:	627b      	str	r3, [r7, #36]	; 0x24
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	461a      	mov	r2, r3
 8003cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cb8:	623b      	str	r3, [r7, #32]
 8003cba:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cbc:	69f9      	ldr	r1, [r7, #28]
 8003cbe:	6a3a      	ldr	r2, [r7, #32]
 8003cc0:	e841 2300 	strex	r3, r2, [r1]
 8003cc4:	61bb      	str	r3, [r7, #24]
   return(result);
 8003cc6:	69bb      	ldr	r3, [r7, #24]
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d1e6      	bne.n	8003c9a <HAL_UART_Transmit_IT+0x8e>
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 8003ccc:	2300      	movs	r3, #0
 8003cce:	e000      	b.n	8003cd2 <HAL_UART_Transmit_IT+0xc6>
  }
  else
  {
    return HAL_BUSY;
 8003cd0:	2302      	movs	r3, #2
  }
}
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	372c      	adds	r7, #44	; 0x2c
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cdc:	4770      	bx	lr
 8003cde:	bf00      	nop
 8003ce0:	08004ca9 	.word	0x08004ca9
 8003ce4:	08004bf1 	.word	0x08004bf1

08003ce8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	b0ba      	sub	sp, #232	; 0xe8
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	69db      	ldr	r3, [r3, #28]
 8003cf6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	689b      	ldr	r3, [r3, #8]
 8003d0a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003d0e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8003d12:	f640 030f 	movw	r3, #2063	; 0x80f
 8003d16:	4013      	ands	r3, r2
 8003d18:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8003d1c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d115      	bne.n	8003d50 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003d24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d28:	f003 0320 	and.w	r3, r3, #32
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d00f      	beq.n	8003d50 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003d30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003d34:	f003 0320 	and.w	r3, r3, #32
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d009      	beq.n	8003d50 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	f000 82a6 	beq.w	8004292 <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003d4a:	6878      	ldr	r0, [r7, #4]
 8003d4c:	4798      	blx	r3
      }
      return;
 8003d4e:	e2a0      	b.n	8004292 <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8003d50:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	f000 8117 	beq.w	8003f88 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003d5a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003d5e:	f003 0301 	and.w	r3, r3, #1
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d106      	bne.n	8003d74 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003d66:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8003d6a:	4b85      	ldr	r3, [pc, #532]	; (8003f80 <HAL_UART_IRQHandler+0x298>)
 8003d6c:	4013      	ands	r3, r2
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	f000 810a 	beq.w	8003f88 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003d74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d78:	f003 0301 	and.w	r3, r3, #1
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d011      	beq.n	8003da4 <HAL_UART_IRQHandler+0xbc>
 8003d80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003d84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d00b      	beq.n	8003da4 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	2201      	movs	r2, #1
 8003d92:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003d9a:	f043 0201 	orr.w	r2, r3, #1
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003da4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003da8:	f003 0302 	and.w	r3, r3, #2
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d011      	beq.n	8003dd4 <HAL_UART_IRQHandler+0xec>
 8003db0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003db4:	f003 0301 	and.w	r3, r3, #1
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d00b      	beq.n	8003dd4 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	2202      	movs	r2, #2
 8003dc2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003dca:	f043 0204 	orr.w	r2, r3, #4
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003dd4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003dd8:	f003 0304 	and.w	r3, r3, #4
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d011      	beq.n	8003e04 <HAL_UART_IRQHandler+0x11c>
 8003de0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003de4:	f003 0301 	and.w	r3, r3, #1
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d00b      	beq.n	8003e04 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	2204      	movs	r2, #4
 8003df2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003dfa:	f043 0202 	orr.w	r2, r3, #2
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003e04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e08:	f003 0308 	and.w	r3, r3, #8
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d017      	beq.n	8003e40 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003e10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003e14:	f003 0320 	and.w	r3, r3, #32
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d105      	bne.n	8003e28 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003e1c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003e20:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d00b      	beq.n	8003e40 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	2208      	movs	r2, #8
 8003e2e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003e36:	f043 0208 	orr.w	r2, r3, #8
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003e40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e44:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d012      	beq.n	8003e72 <HAL_UART_IRQHandler+0x18a>
 8003e4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003e50:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d00c      	beq.n	8003e72 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003e60:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003e68:	f043 0220 	orr.w	r2, r3, #32
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	f000 820c 	beq.w	8004296 <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003e7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e82:	f003 0320 	and.w	r3, r3, #32
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d00d      	beq.n	8003ea6 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003e8a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003e8e:	f003 0320 	and.w	r3, r3, #32
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d007      	beq.n	8003ea6 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d003      	beq.n	8003ea6 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003ea2:	6878      	ldr	r0, [r7, #4]
 8003ea4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003eac:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	689b      	ldr	r3, [r3, #8]
 8003eb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003eba:	2b40      	cmp	r3, #64	; 0x40
 8003ebc:	d005      	beq.n	8003eca <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003ebe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003ec2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d04f      	beq.n	8003f6a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003eca:	6878      	ldr	r0, [r7, #4]
 8003ecc:	f000 fe17 	bl	8004afe <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	689b      	ldr	r3, [r3, #8]
 8003ed6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003eda:	2b40      	cmp	r3, #64	; 0x40
 8003edc:	d141      	bne.n	8003f62 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	3308      	adds	r3, #8
 8003ee4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ee8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003eec:	e853 3f00 	ldrex	r3, [r3]
 8003ef0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003ef4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003ef8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003efc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	3308      	adds	r3, #8
 8003f06:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003f0a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003f0e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f12:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003f16:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003f1a:	e841 2300 	strex	r3, r2, [r1]
 8003f1e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003f22:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d1d9      	bne.n	8003ede <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d013      	beq.n	8003f5a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f36:	4a13      	ldr	r2, [pc, #76]	; (8003f84 <HAL_UART_IRQHandler+0x29c>)
 8003f38:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f3e:	4618      	mov	r0, r3
 8003f40:	f7fd f8d4 	bl	80010ec <HAL_DMA_Abort_IT>
 8003f44:	4603      	mov	r3, r0
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d017      	beq.n	8003f7a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f50:	687a      	ldr	r2, [r7, #4]
 8003f52:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8003f54:	4610      	mov	r0, r2
 8003f56:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f58:	e00f      	b.n	8003f7a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003f5a:	6878      	ldr	r0, [r7, #4]
 8003f5c:	f000 f9b0 	bl	80042c0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f60:	e00b      	b.n	8003f7a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003f62:	6878      	ldr	r0, [r7, #4]
 8003f64:	f000 f9ac 	bl	80042c0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f68:	e007      	b.n	8003f7a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003f6a:	6878      	ldr	r0, [r7, #4]
 8003f6c:	f000 f9a8 	bl	80042c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2200      	movs	r2, #0
 8003f74:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8003f78:	e18d      	b.n	8004296 <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f7a:	bf00      	nop
    return;
 8003f7c:	e18b      	b.n	8004296 <HAL_UART_IRQHandler+0x5ae>
 8003f7e:	bf00      	nop
 8003f80:	04000120 	.word	0x04000120
 8003f84:	08004bc5 	.word	0x08004bc5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f8c:	2b01      	cmp	r3, #1
 8003f8e:	f040 8146 	bne.w	800421e <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003f92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f96:	f003 0310 	and.w	r3, r3, #16
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	f000 813f 	beq.w	800421e <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003fa0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003fa4:	f003 0310 	and.w	r3, r3, #16
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	f000 8138 	beq.w	800421e <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	2210      	movs	r2, #16
 8003fb4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	689b      	ldr	r3, [r3, #8]
 8003fbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fc0:	2b40      	cmp	r3, #64	; 0x40
 8003fc2:	f040 80b4 	bne.w	800412e <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	685b      	ldr	r3, [r3, #4]
 8003fce:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003fd2:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	f000 815f 	beq.w	800429a <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003fe2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003fe6:	429a      	cmp	r2, r3
 8003fe8:	f080 8157 	bcs.w	800429a <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003ff2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f003 0320 	and.w	r3, r3, #32
 8004002:	2b00      	cmp	r3, #0
 8004004:	f040 8085 	bne.w	8004112 <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004010:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004014:	e853 3f00 	ldrex	r3, [r3]
 8004018:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800401c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004020:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004024:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	461a      	mov	r2, r3
 800402e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004032:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004036:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800403a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800403e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004042:	e841 2300 	strex	r3, r2, [r1]
 8004046:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800404a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800404e:	2b00      	cmp	r3, #0
 8004050:	d1da      	bne.n	8004008 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	3308      	adds	r3, #8
 8004058:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800405a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800405c:	e853 3f00 	ldrex	r3, [r3]
 8004060:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004062:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004064:	f023 0301 	bic.w	r3, r3, #1
 8004068:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	3308      	adds	r3, #8
 8004072:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004076:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800407a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800407c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800407e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004082:	e841 2300 	strex	r3, r2, [r1]
 8004086:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004088:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800408a:	2b00      	cmp	r3, #0
 800408c:	d1e1      	bne.n	8004052 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	3308      	adds	r3, #8
 8004094:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004096:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004098:	e853 3f00 	ldrex	r3, [r3]
 800409c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800409e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80040a0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80040a4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	3308      	adds	r3, #8
 80040ae:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80040b2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80040b4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040b6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80040b8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80040ba:	e841 2300 	strex	r3, r2, [r1]
 80040be:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80040c0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d1e3      	bne.n	800408e <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	2220      	movs	r2, #32
 80040ca:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2200      	movs	r2, #0
 80040d0:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80040da:	e853 3f00 	ldrex	r3, [r3]
 80040de:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80040e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80040e2:	f023 0310 	bic.w	r3, r3, #16
 80040e6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	461a      	mov	r2, r3
 80040f0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80040f4:	65bb      	str	r3, [r7, #88]	; 0x58
 80040f6:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040f8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80040fa:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80040fc:	e841 2300 	strex	r3, r2, [r1]
 8004100:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004102:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004104:	2b00      	cmp	r3, #0
 8004106:	d1e4      	bne.n	80040d2 <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800410c:	4618      	mov	r0, r3
 800410e:	f7fc ffaf 	bl	8001070 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800411e:	b29b      	uxth	r3, r3
 8004120:	1ad3      	subs	r3, r2, r3
 8004122:	b29b      	uxth	r3, r3
 8004124:	4619      	mov	r1, r3
 8004126:	6878      	ldr	r0, [r7, #4]
 8004128:	f000 f8d4 	bl	80042d4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800412c:	e0b5      	b.n	800429a <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800413a:	b29b      	uxth	r3, r3
 800413c:	1ad3      	subs	r3, r2, r3
 800413e:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004148:	b29b      	uxth	r3, r3
 800414a:	2b00      	cmp	r3, #0
 800414c:	f000 80a7 	beq.w	800429e <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 8004150:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004154:	2b00      	cmp	r3, #0
 8004156:	f000 80a2 	beq.w	800429e <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004160:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004162:	e853 3f00 	ldrex	r3, [r3]
 8004166:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004168:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800416a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800416e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	461a      	mov	r2, r3
 8004178:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800417c:	647b      	str	r3, [r7, #68]	; 0x44
 800417e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004180:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004182:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004184:	e841 2300 	strex	r3, r2, [r1]
 8004188:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800418a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800418c:	2b00      	cmp	r3, #0
 800418e:	d1e4      	bne.n	800415a <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	3308      	adds	r3, #8
 8004196:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800419a:	e853 3f00 	ldrex	r3, [r3]
 800419e:	623b      	str	r3, [r7, #32]
   return(result);
 80041a0:	6a3b      	ldr	r3, [r7, #32]
 80041a2:	f023 0301 	bic.w	r3, r3, #1
 80041a6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	3308      	adds	r3, #8
 80041b0:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80041b4:	633a      	str	r2, [r7, #48]	; 0x30
 80041b6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041b8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80041ba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80041bc:	e841 2300 	strex	r3, r2, [r1]
 80041c0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80041c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d1e3      	bne.n	8004190 <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2220      	movs	r2, #32
 80041cc:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	2200      	movs	r2, #0
 80041d2:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2200      	movs	r2, #0
 80041d8:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041e0:	693b      	ldr	r3, [r7, #16]
 80041e2:	e853 3f00 	ldrex	r3, [r3]
 80041e6:	60fb      	str	r3, [r7, #12]
   return(result);
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	f023 0310 	bic.w	r3, r3, #16
 80041ee:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	461a      	mov	r2, r3
 80041f8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80041fc:	61fb      	str	r3, [r7, #28]
 80041fe:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004200:	69b9      	ldr	r1, [r7, #24]
 8004202:	69fa      	ldr	r2, [r7, #28]
 8004204:	e841 2300 	strex	r3, r2, [r1]
 8004208:	617b      	str	r3, [r7, #20]
   return(result);
 800420a:	697b      	ldr	r3, [r7, #20]
 800420c:	2b00      	cmp	r3, #0
 800420e:	d1e4      	bne.n	80041da <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004210:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004214:	4619      	mov	r1, r3
 8004216:	6878      	ldr	r0, [r7, #4]
 8004218:	f000 f85c 	bl	80042d4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800421c:	e03f      	b.n	800429e <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800421e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004222:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004226:	2b00      	cmp	r3, #0
 8004228:	d00e      	beq.n	8004248 <HAL_UART_IRQHandler+0x560>
 800422a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800422e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004232:	2b00      	cmp	r3, #0
 8004234:	d008      	beq.n	8004248 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800423e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004240:	6878      	ldr	r0, [r7, #4]
 8004242:	f000 fdbb 	bl	8004dbc <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004246:	e02d      	b.n	80042a4 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004248:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800424c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004250:	2b00      	cmp	r3, #0
 8004252:	d00e      	beq.n	8004272 <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004254:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004258:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800425c:	2b00      	cmp	r3, #0
 800425e:	d008      	beq.n	8004272 <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004264:	2b00      	cmp	r3, #0
 8004266:	d01c      	beq.n	80042a2 <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800426c:	6878      	ldr	r0, [r7, #4]
 800426e:	4798      	blx	r3
    }
    return;
 8004270:	e017      	b.n	80042a2 <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004272:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004276:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800427a:	2b00      	cmp	r3, #0
 800427c:	d012      	beq.n	80042a4 <HAL_UART_IRQHandler+0x5bc>
 800427e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004282:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004286:	2b00      	cmp	r3, #0
 8004288:	d00c      	beq.n	80042a4 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 800428a:	6878      	ldr	r0, [r7, #4]
 800428c:	f000 fd6c 	bl	8004d68 <UART_EndTransmit_IT>
    return;
 8004290:	e008      	b.n	80042a4 <HAL_UART_IRQHandler+0x5bc>
      return;
 8004292:	bf00      	nop
 8004294:	e006      	b.n	80042a4 <HAL_UART_IRQHandler+0x5bc>
    return;
 8004296:	bf00      	nop
 8004298:	e004      	b.n	80042a4 <HAL_UART_IRQHandler+0x5bc>
      return;
 800429a:	bf00      	nop
 800429c:	e002      	b.n	80042a4 <HAL_UART_IRQHandler+0x5bc>
      return;
 800429e:	bf00      	nop
 80042a0:	e000      	b.n	80042a4 <HAL_UART_IRQHandler+0x5bc>
    return;
 80042a2:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 80042a4:	37e8      	adds	r7, #232	; 0xe8
 80042a6:	46bd      	mov	sp, r7
 80042a8:	bd80      	pop	{r7, pc}
 80042aa:	bf00      	nop

080042ac <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80042ac:	b480      	push	{r7}
 80042ae:	b083      	sub	sp, #12
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80042b4:	bf00      	nop
 80042b6:	370c      	adds	r7, #12
 80042b8:	46bd      	mov	sp, r7
 80042ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042be:	4770      	bx	lr

080042c0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80042c0:	b480      	push	{r7}
 80042c2:	b083      	sub	sp, #12
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80042c8:	bf00      	nop
 80042ca:	370c      	adds	r7, #12
 80042cc:	46bd      	mov	sp, r7
 80042ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d2:	4770      	bx	lr

080042d4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80042d4:	b480      	push	{r7}
 80042d6:	b083      	sub	sp, #12
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]
 80042dc:	460b      	mov	r3, r1
 80042de:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80042e0:	bf00      	nop
 80042e2:	370c      	adds	r7, #12
 80042e4:	46bd      	mov	sp, r7
 80042e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ea:	4770      	bx	lr

080042ec <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80042ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80042f0:	b08a      	sub	sp, #40	; 0x28
 80042f2:	af00      	add	r7, sp, #0
 80042f4:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80042f6:	2300      	movs	r3, #0
 80042f8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	689a      	ldr	r2, [r3, #8]
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	691b      	ldr	r3, [r3, #16]
 8004304:	431a      	orrs	r2, r3
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	695b      	ldr	r3, [r3, #20]
 800430a:	431a      	orrs	r2, r3
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	69db      	ldr	r3, [r3, #28]
 8004310:	4313      	orrs	r3, r2
 8004312:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	681a      	ldr	r2, [r3, #0]
 800431a:	4b9e      	ldr	r3, [pc, #632]	; (8004594 <UART_SetConfig+0x2a8>)
 800431c:	4013      	ands	r3, r2
 800431e:	68fa      	ldr	r2, [r7, #12]
 8004320:	6812      	ldr	r2, [r2, #0]
 8004322:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004324:	430b      	orrs	r3, r1
 8004326:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	685b      	ldr	r3, [r3, #4]
 800432e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	68da      	ldr	r2, [r3, #12]
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	430a      	orrs	r2, r1
 800433c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	699b      	ldr	r3, [r3, #24]
 8004342:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	4a93      	ldr	r2, [pc, #588]	; (8004598 <UART_SetConfig+0x2ac>)
 800434a:	4293      	cmp	r3, r2
 800434c:	d004      	beq.n	8004358 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	6a1b      	ldr	r3, [r3, #32]
 8004352:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004354:	4313      	orrs	r3, r2
 8004356:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	689b      	ldr	r3, [r3, #8]
 800435e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004368:	430a      	orrs	r2, r1
 800436a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	4a8a      	ldr	r2, [pc, #552]	; (800459c <UART_SetConfig+0x2b0>)
 8004372:	4293      	cmp	r3, r2
 8004374:	d126      	bne.n	80043c4 <UART_SetConfig+0xd8>
 8004376:	4b8a      	ldr	r3, [pc, #552]	; (80045a0 <UART_SetConfig+0x2b4>)
 8004378:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800437c:	f003 0303 	and.w	r3, r3, #3
 8004380:	2b03      	cmp	r3, #3
 8004382:	d81b      	bhi.n	80043bc <UART_SetConfig+0xd0>
 8004384:	a201      	add	r2, pc, #4	; (adr r2, 800438c <UART_SetConfig+0xa0>)
 8004386:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800438a:	bf00      	nop
 800438c:	0800439d 	.word	0x0800439d
 8004390:	080043ad 	.word	0x080043ad
 8004394:	080043a5 	.word	0x080043a5
 8004398:	080043b5 	.word	0x080043b5
 800439c:	2301      	movs	r3, #1
 800439e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80043a2:	e0ab      	b.n	80044fc <UART_SetConfig+0x210>
 80043a4:	2302      	movs	r3, #2
 80043a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80043aa:	e0a7      	b.n	80044fc <UART_SetConfig+0x210>
 80043ac:	2304      	movs	r3, #4
 80043ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80043b2:	e0a3      	b.n	80044fc <UART_SetConfig+0x210>
 80043b4:	2308      	movs	r3, #8
 80043b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80043ba:	e09f      	b.n	80044fc <UART_SetConfig+0x210>
 80043bc:	2310      	movs	r3, #16
 80043be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80043c2:	e09b      	b.n	80044fc <UART_SetConfig+0x210>
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	4a76      	ldr	r2, [pc, #472]	; (80045a4 <UART_SetConfig+0x2b8>)
 80043ca:	4293      	cmp	r3, r2
 80043cc:	d138      	bne.n	8004440 <UART_SetConfig+0x154>
 80043ce:	4b74      	ldr	r3, [pc, #464]	; (80045a0 <UART_SetConfig+0x2b4>)
 80043d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043d4:	f003 030c 	and.w	r3, r3, #12
 80043d8:	2b0c      	cmp	r3, #12
 80043da:	d82d      	bhi.n	8004438 <UART_SetConfig+0x14c>
 80043dc:	a201      	add	r2, pc, #4	; (adr r2, 80043e4 <UART_SetConfig+0xf8>)
 80043de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043e2:	bf00      	nop
 80043e4:	08004419 	.word	0x08004419
 80043e8:	08004439 	.word	0x08004439
 80043ec:	08004439 	.word	0x08004439
 80043f0:	08004439 	.word	0x08004439
 80043f4:	08004429 	.word	0x08004429
 80043f8:	08004439 	.word	0x08004439
 80043fc:	08004439 	.word	0x08004439
 8004400:	08004439 	.word	0x08004439
 8004404:	08004421 	.word	0x08004421
 8004408:	08004439 	.word	0x08004439
 800440c:	08004439 	.word	0x08004439
 8004410:	08004439 	.word	0x08004439
 8004414:	08004431 	.word	0x08004431
 8004418:	2300      	movs	r3, #0
 800441a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800441e:	e06d      	b.n	80044fc <UART_SetConfig+0x210>
 8004420:	2302      	movs	r3, #2
 8004422:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004426:	e069      	b.n	80044fc <UART_SetConfig+0x210>
 8004428:	2304      	movs	r3, #4
 800442a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800442e:	e065      	b.n	80044fc <UART_SetConfig+0x210>
 8004430:	2308      	movs	r3, #8
 8004432:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004436:	e061      	b.n	80044fc <UART_SetConfig+0x210>
 8004438:	2310      	movs	r3, #16
 800443a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800443e:	e05d      	b.n	80044fc <UART_SetConfig+0x210>
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	4a58      	ldr	r2, [pc, #352]	; (80045a8 <UART_SetConfig+0x2bc>)
 8004446:	4293      	cmp	r3, r2
 8004448:	d125      	bne.n	8004496 <UART_SetConfig+0x1aa>
 800444a:	4b55      	ldr	r3, [pc, #340]	; (80045a0 <UART_SetConfig+0x2b4>)
 800444c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004450:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004454:	2b30      	cmp	r3, #48	; 0x30
 8004456:	d016      	beq.n	8004486 <UART_SetConfig+0x19a>
 8004458:	2b30      	cmp	r3, #48	; 0x30
 800445a:	d818      	bhi.n	800448e <UART_SetConfig+0x1a2>
 800445c:	2b20      	cmp	r3, #32
 800445e:	d00a      	beq.n	8004476 <UART_SetConfig+0x18a>
 8004460:	2b20      	cmp	r3, #32
 8004462:	d814      	bhi.n	800448e <UART_SetConfig+0x1a2>
 8004464:	2b00      	cmp	r3, #0
 8004466:	d002      	beq.n	800446e <UART_SetConfig+0x182>
 8004468:	2b10      	cmp	r3, #16
 800446a:	d008      	beq.n	800447e <UART_SetConfig+0x192>
 800446c:	e00f      	b.n	800448e <UART_SetConfig+0x1a2>
 800446e:	2300      	movs	r3, #0
 8004470:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004474:	e042      	b.n	80044fc <UART_SetConfig+0x210>
 8004476:	2302      	movs	r3, #2
 8004478:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800447c:	e03e      	b.n	80044fc <UART_SetConfig+0x210>
 800447e:	2304      	movs	r3, #4
 8004480:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004484:	e03a      	b.n	80044fc <UART_SetConfig+0x210>
 8004486:	2308      	movs	r3, #8
 8004488:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800448c:	e036      	b.n	80044fc <UART_SetConfig+0x210>
 800448e:	2310      	movs	r3, #16
 8004490:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004494:	e032      	b.n	80044fc <UART_SetConfig+0x210>
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	4a3f      	ldr	r2, [pc, #252]	; (8004598 <UART_SetConfig+0x2ac>)
 800449c:	4293      	cmp	r3, r2
 800449e:	d12a      	bne.n	80044f6 <UART_SetConfig+0x20a>
 80044a0:	4b3f      	ldr	r3, [pc, #252]	; (80045a0 <UART_SetConfig+0x2b4>)
 80044a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044a6:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80044aa:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80044ae:	d01a      	beq.n	80044e6 <UART_SetConfig+0x1fa>
 80044b0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80044b4:	d81b      	bhi.n	80044ee <UART_SetConfig+0x202>
 80044b6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80044ba:	d00c      	beq.n	80044d6 <UART_SetConfig+0x1ea>
 80044bc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80044c0:	d815      	bhi.n	80044ee <UART_SetConfig+0x202>
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d003      	beq.n	80044ce <UART_SetConfig+0x1e2>
 80044c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80044ca:	d008      	beq.n	80044de <UART_SetConfig+0x1f2>
 80044cc:	e00f      	b.n	80044ee <UART_SetConfig+0x202>
 80044ce:	2300      	movs	r3, #0
 80044d0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80044d4:	e012      	b.n	80044fc <UART_SetConfig+0x210>
 80044d6:	2302      	movs	r3, #2
 80044d8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80044dc:	e00e      	b.n	80044fc <UART_SetConfig+0x210>
 80044de:	2304      	movs	r3, #4
 80044e0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80044e4:	e00a      	b.n	80044fc <UART_SetConfig+0x210>
 80044e6:	2308      	movs	r3, #8
 80044e8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80044ec:	e006      	b.n	80044fc <UART_SetConfig+0x210>
 80044ee:	2310      	movs	r3, #16
 80044f0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80044f4:	e002      	b.n	80044fc <UART_SetConfig+0x210>
 80044f6:	2310      	movs	r3, #16
 80044f8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	4a25      	ldr	r2, [pc, #148]	; (8004598 <UART_SetConfig+0x2ac>)
 8004502:	4293      	cmp	r3, r2
 8004504:	f040 808a 	bne.w	800461c <UART_SetConfig+0x330>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004508:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800450c:	2b08      	cmp	r3, #8
 800450e:	d824      	bhi.n	800455a <UART_SetConfig+0x26e>
 8004510:	a201      	add	r2, pc, #4	; (adr r2, 8004518 <UART_SetConfig+0x22c>)
 8004512:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004516:	bf00      	nop
 8004518:	0800453d 	.word	0x0800453d
 800451c:	0800455b 	.word	0x0800455b
 8004520:	08004545 	.word	0x08004545
 8004524:	0800455b 	.word	0x0800455b
 8004528:	0800454b 	.word	0x0800454b
 800452c:	0800455b 	.word	0x0800455b
 8004530:	0800455b 	.word	0x0800455b
 8004534:	0800455b 	.word	0x0800455b
 8004538:	08004553 	.word	0x08004553
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800453c:	f7fe fc9e 	bl	8002e7c <HAL_RCC_GetPCLK1Freq>
 8004540:	61f8      	str	r0, [r7, #28]
        break;
 8004542:	e010      	b.n	8004566 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004544:	4b19      	ldr	r3, [pc, #100]	; (80045ac <UART_SetConfig+0x2c0>)
 8004546:	61fb      	str	r3, [r7, #28]
        break;
 8004548:	e00d      	b.n	8004566 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800454a:	f7fe fc01 	bl	8002d50 <HAL_RCC_GetSysClockFreq>
 800454e:	61f8      	str	r0, [r7, #28]
        break;
 8004550:	e009      	b.n	8004566 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004552:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004556:	61fb      	str	r3, [r7, #28]
        break;
 8004558:	e005      	b.n	8004566 <UART_SetConfig+0x27a>
      default:
        pclk = 0U;
 800455a:	2300      	movs	r3, #0
 800455c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800455e:	2301      	movs	r3, #1
 8004560:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004564:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004566:	69fb      	ldr	r3, [r7, #28]
 8004568:	2b00      	cmp	r3, #0
 800456a:	f000 8109 	beq.w	8004780 <UART_SetConfig+0x494>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	685a      	ldr	r2, [r3, #4]
 8004572:	4613      	mov	r3, r2
 8004574:	005b      	lsls	r3, r3, #1
 8004576:	4413      	add	r3, r2
 8004578:	69fa      	ldr	r2, [r7, #28]
 800457a:	429a      	cmp	r2, r3
 800457c:	d305      	bcc.n	800458a <UART_SetConfig+0x29e>
          (pclk > (4096U * huart->Init.BaudRate)))
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	685b      	ldr	r3, [r3, #4]
 8004582:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004584:	69fa      	ldr	r2, [r7, #28]
 8004586:	429a      	cmp	r2, r3
 8004588:	d912      	bls.n	80045b0 <UART_SetConfig+0x2c4>
      {
        ret = HAL_ERROR;
 800458a:	2301      	movs	r3, #1
 800458c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004590:	e0f6      	b.n	8004780 <UART_SetConfig+0x494>
 8004592:	bf00      	nop
 8004594:	efff69f3 	.word	0xefff69f3
 8004598:	40008000 	.word	0x40008000
 800459c:	40013800 	.word	0x40013800
 80045a0:	40021000 	.word	0x40021000
 80045a4:	40004400 	.word	0x40004400
 80045a8:	40004800 	.word	0x40004800
 80045ac:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80045b0:	69fb      	ldr	r3, [r7, #28]
 80045b2:	2200      	movs	r2, #0
 80045b4:	461c      	mov	r4, r3
 80045b6:	4615      	mov	r5, r2
 80045b8:	f04f 0200 	mov.w	r2, #0
 80045bc:	f04f 0300 	mov.w	r3, #0
 80045c0:	022b      	lsls	r3, r5, #8
 80045c2:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80045c6:	0222      	lsls	r2, r4, #8
 80045c8:	68f9      	ldr	r1, [r7, #12]
 80045ca:	6849      	ldr	r1, [r1, #4]
 80045cc:	0849      	lsrs	r1, r1, #1
 80045ce:	2000      	movs	r0, #0
 80045d0:	4688      	mov	r8, r1
 80045d2:	4681      	mov	r9, r0
 80045d4:	eb12 0a08 	adds.w	sl, r2, r8
 80045d8:	eb43 0b09 	adc.w	fp, r3, r9
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	685b      	ldr	r3, [r3, #4]
 80045e0:	2200      	movs	r2, #0
 80045e2:	603b      	str	r3, [r7, #0]
 80045e4:	607a      	str	r2, [r7, #4]
 80045e6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80045ea:	4650      	mov	r0, sl
 80045ec:	4659      	mov	r1, fp
 80045ee:	f7fb fdef 	bl	80001d0 <__aeabi_uldivmod>
 80045f2:	4602      	mov	r2, r0
 80045f4:	460b      	mov	r3, r1
 80045f6:	4613      	mov	r3, r2
 80045f8:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80045fa:	69bb      	ldr	r3, [r7, #24]
 80045fc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004600:	d308      	bcc.n	8004614 <UART_SetConfig+0x328>
 8004602:	69bb      	ldr	r3, [r7, #24]
 8004604:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004608:	d204      	bcs.n	8004614 <UART_SetConfig+0x328>
        {
          huart->Instance->BRR = usartdiv;
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	69ba      	ldr	r2, [r7, #24]
 8004610:	60da      	str	r2, [r3, #12]
 8004612:	e0b5      	b.n	8004780 <UART_SetConfig+0x494>
        }
        else
        {
          ret = HAL_ERROR;
 8004614:	2301      	movs	r3, #1
 8004616:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800461a:	e0b1      	b.n	8004780 <UART_SetConfig+0x494>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	69db      	ldr	r3, [r3, #28]
 8004620:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004624:	d15d      	bne.n	80046e2 <UART_SetConfig+0x3f6>
  {
    switch (clocksource)
 8004626:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800462a:	2b08      	cmp	r3, #8
 800462c:	d827      	bhi.n	800467e <UART_SetConfig+0x392>
 800462e:	a201      	add	r2, pc, #4	; (adr r2, 8004634 <UART_SetConfig+0x348>)
 8004630:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004634:	08004659 	.word	0x08004659
 8004638:	08004661 	.word	0x08004661
 800463c:	08004669 	.word	0x08004669
 8004640:	0800467f 	.word	0x0800467f
 8004644:	0800466f 	.word	0x0800466f
 8004648:	0800467f 	.word	0x0800467f
 800464c:	0800467f 	.word	0x0800467f
 8004650:	0800467f 	.word	0x0800467f
 8004654:	08004677 	.word	0x08004677
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004658:	f7fe fc10 	bl	8002e7c <HAL_RCC_GetPCLK1Freq>
 800465c:	61f8      	str	r0, [r7, #28]
        break;
 800465e:	e014      	b.n	800468a <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004660:	f7fe fc22 	bl	8002ea8 <HAL_RCC_GetPCLK2Freq>
 8004664:	61f8      	str	r0, [r7, #28]
        break;
 8004666:	e010      	b.n	800468a <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004668:	4b4c      	ldr	r3, [pc, #304]	; (800479c <UART_SetConfig+0x4b0>)
 800466a:	61fb      	str	r3, [r7, #28]
        break;
 800466c:	e00d      	b.n	800468a <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800466e:	f7fe fb6f 	bl	8002d50 <HAL_RCC_GetSysClockFreq>
 8004672:	61f8      	str	r0, [r7, #28]
        break;
 8004674:	e009      	b.n	800468a <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004676:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800467a:	61fb      	str	r3, [r7, #28]
        break;
 800467c:	e005      	b.n	800468a <UART_SetConfig+0x39e>
      default:
        pclk = 0U;
 800467e:	2300      	movs	r3, #0
 8004680:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004682:	2301      	movs	r3, #1
 8004684:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004688:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800468a:	69fb      	ldr	r3, [r7, #28]
 800468c:	2b00      	cmp	r3, #0
 800468e:	d077      	beq.n	8004780 <UART_SetConfig+0x494>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004690:	69fb      	ldr	r3, [r7, #28]
 8004692:	005a      	lsls	r2, r3, #1
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	685b      	ldr	r3, [r3, #4]
 8004698:	085b      	lsrs	r3, r3, #1
 800469a:	441a      	add	r2, r3
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	685b      	ldr	r3, [r3, #4]
 80046a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80046a4:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80046a6:	69bb      	ldr	r3, [r7, #24]
 80046a8:	2b0f      	cmp	r3, #15
 80046aa:	d916      	bls.n	80046da <UART_SetConfig+0x3ee>
 80046ac:	69bb      	ldr	r3, [r7, #24]
 80046ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80046b2:	d212      	bcs.n	80046da <UART_SetConfig+0x3ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80046b4:	69bb      	ldr	r3, [r7, #24]
 80046b6:	b29b      	uxth	r3, r3
 80046b8:	f023 030f 	bic.w	r3, r3, #15
 80046bc:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80046be:	69bb      	ldr	r3, [r7, #24]
 80046c0:	085b      	lsrs	r3, r3, #1
 80046c2:	b29b      	uxth	r3, r3
 80046c4:	f003 0307 	and.w	r3, r3, #7
 80046c8:	b29a      	uxth	r2, r3
 80046ca:	8afb      	ldrh	r3, [r7, #22]
 80046cc:	4313      	orrs	r3, r2
 80046ce:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	8afa      	ldrh	r2, [r7, #22]
 80046d6:	60da      	str	r2, [r3, #12]
 80046d8:	e052      	b.n	8004780 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 80046da:	2301      	movs	r3, #1
 80046dc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80046e0:	e04e      	b.n	8004780 <UART_SetConfig+0x494>
      }
    }
  }
  else
  {
    switch (clocksource)
 80046e2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80046e6:	2b08      	cmp	r3, #8
 80046e8:	d827      	bhi.n	800473a <UART_SetConfig+0x44e>
 80046ea:	a201      	add	r2, pc, #4	; (adr r2, 80046f0 <UART_SetConfig+0x404>)
 80046ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046f0:	08004715 	.word	0x08004715
 80046f4:	0800471d 	.word	0x0800471d
 80046f8:	08004725 	.word	0x08004725
 80046fc:	0800473b 	.word	0x0800473b
 8004700:	0800472b 	.word	0x0800472b
 8004704:	0800473b 	.word	0x0800473b
 8004708:	0800473b 	.word	0x0800473b
 800470c:	0800473b 	.word	0x0800473b
 8004710:	08004733 	.word	0x08004733
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004714:	f7fe fbb2 	bl	8002e7c <HAL_RCC_GetPCLK1Freq>
 8004718:	61f8      	str	r0, [r7, #28]
        break;
 800471a:	e014      	b.n	8004746 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800471c:	f7fe fbc4 	bl	8002ea8 <HAL_RCC_GetPCLK2Freq>
 8004720:	61f8      	str	r0, [r7, #28]
        break;
 8004722:	e010      	b.n	8004746 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004724:	4b1d      	ldr	r3, [pc, #116]	; (800479c <UART_SetConfig+0x4b0>)
 8004726:	61fb      	str	r3, [r7, #28]
        break;
 8004728:	e00d      	b.n	8004746 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800472a:	f7fe fb11 	bl	8002d50 <HAL_RCC_GetSysClockFreq>
 800472e:	61f8      	str	r0, [r7, #28]
        break;
 8004730:	e009      	b.n	8004746 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004732:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004736:	61fb      	str	r3, [r7, #28]
        break;
 8004738:	e005      	b.n	8004746 <UART_SetConfig+0x45a>
      default:
        pclk = 0U;
 800473a:	2300      	movs	r3, #0
 800473c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800473e:	2301      	movs	r3, #1
 8004740:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004744:	bf00      	nop
    }

    if (pclk != 0U)
 8004746:	69fb      	ldr	r3, [r7, #28]
 8004748:	2b00      	cmp	r3, #0
 800474a:	d019      	beq.n	8004780 <UART_SetConfig+0x494>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	685b      	ldr	r3, [r3, #4]
 8004750:	085a      	lsrs	r2, r3, #1
 8004752:	69fb      	ldr	r3, [r7, #28]
 8004754:	441a      	add	r2, r3
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	685b      	ldr	r3, [r3, #4]
 800475a:	fbb2 f3f3 	udiv	r3, r2, r3
 800475e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004760:	69bb      	ldr	r3, [r7, #24]
 8004762:	2b0f      	cmp	r3, #15
 8004764:	d909      	bls.n	800477a <UART_SetConfig+0x48e>
 8004766:	69bb      	ldr	r3, [r7, #24]
 8004768:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800476c:	d205      	bcs.n	800477a <UART_SetConfig+0x48e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800476e:	69bb      	ldr	r3, [r7, #24]
 8004770:	b29a      	uxth	r2, r3
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	60da      	str	r2, [r3, #12]
 8004778:	e002      	b.n	8004780 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 800477a:	2301      	movs	r3, #1
 800477c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	2200      	movs	r2, #0
 8004784:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	2200      	movs	r2, #0
 800478a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800478c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8004790:	4618      	mov	r0, r3
 8004792:	3728      	adds	r7, #40	; 0x28
 8004794:	46bd      	mov	sp, r7
 8004796:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800479a:	bf00      	nop
 800479c:	00f42400 	.word	0x00f42400

080047a0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80047a0:	b480      	push	{r7}
 80047a2:	b083      	sub	sp, #12
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047ac:	f003 0301 	and.w	r3, r3, #1
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d00a      	beq.n	80047ca <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	685b      	ldr	r3, [r3, #4]
 80047ba:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	430a      	orrs	r2, r1
 80047c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047ce:	f003 0302 	and.w	r3, r3, #2
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d00a      	beq.n	80047ec <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	685b      	ldr	r3, [r3, #4]
 80047dc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	430a      	orrs	r2, r1
 80047ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047f0:	f003 0304 	and.w	r3, r3, #4
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d00a      	beq.n	800480e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	685b      	ldr	r3, [r3, #4]
 80047fe:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	430a      	orrs	r2, r1
 800480c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004812:	f003 0308 	and.w	r3, r3, #8
 8004816:	2b00      	cmp	r3, #0
 8004818:	d00a      	beq.n	8004830 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	685b      	ldr	r3, [r3, #4]
 8004820:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	430a      	orrs	r2, r1
 800482e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004834:	f003 0310 	and.w	r3, r3, #16
 8004838:	2b00      	cmp	r3, #0
 800483a:	d00a      	beq.n	8004852 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	689b      	ldr	r3, [r3, #8]
 8004842:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	430a      	orrs	r2, r1
 8004850:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004856:	f003 0320 	and.w	r3, r3, #32
 800485a:	2b00      	cmp	r3, #0
 800485c:	d00a      	beq.n	8004874 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	689b      	ldr	r3, [r3, #8]
 8004864:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	430a      	orrs	r2, r1
 8004872:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004878:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800487c:	2b00      	cmp	r3, #0
 800487e:	d01a      	beq.n	80048b6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	685b      	ldr	r3, [r3, #4]
 8004886:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	430a      	orrs	r2, r1
 8004894:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800489a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800489e:	d10a      	bne.n	80048b6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	685b      	ldr	r3, [r3, #4]
 80048a6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	430a      	orrs	r2, r1
 80048b4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d00a      	beq.n	80048d8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	685b      	ldr	r3, [r3, #4]
 80048c8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	430a      	orrs	r2, r1
 80048d6:	605a      	str	r2, [r3, #4]
  }
}
 80048d8:	bf00      	nop
 80048da:	370c      	adds	r7, #12
 80048dc:	46bd      	mov	sp, r7
 80048de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e2:	4770      	bx	lr

080048e4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80048e4:	b580      	push	{r7, lr}
 80048e6:	b086      	sub	sp, #24
 80048e8:	af02      	add	r7, sp, #8
 80048ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	2200      	movs	r2, #0
 80048f0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80048f4:	f7fc face 	bl	8000e94 <HAL_GetTick>
 80048f8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f003 0308 	and.w	r3, r3, #8
 8004904:	2b08      	cmp	r3, #8
 8004906:	d10e      	bne.n	8004926 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004908:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800490c:	9300      	str	r3, [sp, #0]
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	2200      	movs	r2, #0
 8004912:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004916:	6878      	ldr	r0, [r7, #4]
 8004918:	f000 f82d 	bl	8004976 <UART_WaitOnFlagUntilTimeout>
 800491c:	4603      	mov	r3, r0
 800491e:	2b00      	cmp	r3, #0
 8004920:	d001      	beq.n	8004926 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004922:	2303      	movs	r3, #3
 8004924:	e023      	b.n	800496e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f003 0304 	and.w	r3, r3, #4
 8004930:	2b04      	cmp	r3, #4
 8004932:	d10e      	bne.n	8004952 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004934:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004938:	9300      	str	r3, [sp, #0]
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	2200      	movs	r2, #0
 800493e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004942:	6878      	ldr	r0, [r7, #4]
 8004944:	f000 f817 	bl	8004976 <UART_WaitOnFlagUntilTimeout>
 8004948:	4603      	mov	r3, r0
 800494a:	2b00      	cmp	r3, #0
 800494c:	d001      	beq.n	8004952 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800494e:	2303      	movs	r3, #3
 8004950:	e00d      	b.n	800496e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	2220      	movs	r2, #32
 8004956:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	2220      	movs	r2, #32
 800495c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	2200      	movs	r2, #0
 8004962:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2200      	movs	r2, #0
 8004968:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800496c:	2300      	movs	r3, #0
}
 800496e:	4618      	mov	r0, r3
 8004970:	3710      	adds	r7, #16
 8004972:	46bd      	mov	sp, r7
 8004974:	bd80      	pop	{r7, pc}

08004976 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004976:	b580      	push	{r7, lr}
 8004978:	b09c      	sub	sp, #112	; 0x70
 800497a:	af00      	add	r7, sp, #0
 800497c:	60f8      	str	r0, [r7, #12]
 800497e:	60b9      	str	r1, [r7, #8]
 8004980:	603b      	str	r3, [r7, #0]
 8004982:	4613      	mov	r3, r2
 8004984:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004986:	e0a5      	b.n	8004ad4 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004988:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800498a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800498e:	f000 80a1 	beq.w	8004ad4 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004992:	f7fc fa7f 	bl	8000e94 <HAL_GetTick>
 8004996:	4602      	mov	r2, r0
 8004998:	683b      	ldr	r3, [r7, #0]
 800499a:	1ad3      	subs	r3, r2, r3
 800499c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800499e:	429a      	cmp	r2, r3
 80049a0:	d302      	bcc.n	80049a8 <UART_WaitOnFlagUntilTimeout+0x32>
 80049a2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d13e      	bne.n	8004a26 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80049b0:	e853 3f00 	ldrex	r3, [r3]
 80049b4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80049b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80049b8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80049bc:	667b      	str	r3, [r7, #100]	; 0x64
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	461a      	mov	r2, r3
 80049c4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80049c6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80049c8:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049ca:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80049cc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80049ce:	e841 2300 	strex	r3, r2, [r1]
 80049d2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80049d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d1e6      	bne.n	80049a8 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	3308      	adds	r3, #8
 80049e0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80049e4:	e853 3f00 	ldrex	r3, [r3]
 80049e8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80049ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049ec:	f023 0301 	bic.w	r3, r3, #1
 80049f0:	663b      	str	r3, [r7, #96]	; 0x60
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	3308      	adds	r3, #8
 80049f8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80049fa:	64ba      	str	r2, [r7, #72]	; 0x48
 80049fc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049fe:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004a00:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004a02:	e841 2300 	strex	r3, r2, [r1]
 8004a06:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004a08:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d1e5      	bne.n	80049da <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	2220      	movs	r2, #32
 8004a12:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	2220      	movs	r2, #32
 8004a18:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8004a22:	2303      	movs	r3, #3
 8004a24:	e067      	b.n	8004af6 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f003 0304 	and.w	r3, r3, #4
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d04f      	beq.n	8004ad4 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	69db      	ldr	r3, [r3, #28]
 8004a3a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004a3e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004a42:	d147      	bne.n	8004ad4 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004a4c:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a56:	e853 3f00 	ldrex	r3, [r3]
 8004a5a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a5e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004a62:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	461a      	mov	r2, r3
 8004a6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a6c:	637b      	str	r3, [r7, #52]	; 0x34
 8004a6e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a70:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004a72:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004a74:	e841 2300 	strex	r3, r2, [r1]
 8004a78:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004a7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d1e6      	bne.n	8004a4e <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	3308      	adds	r3, #8
 8004a86:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a88:	697b      	ldr	r3, [r7, #20]
 8004a8a:	e853 3f00 	ldrex	r3, [r3]
 8004a8e:	613b      	str	r3, [r7, #16]
   return(result);
 8004a90:	693b      	ldr	r3, [r7, #16]
 8004a92:	f023 0301 	bic.w	r3, r3, #1
 8004a96:	66bb      	str	r3, [r7, #104]	; 0x68
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	3308      	adds	r3, #8
 8004a9e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004aa0:	623a      	str	r2, [r7, #32]
 8004aa2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004aa4:	69f9      	ldr	r1, [r7, #28]
 8004aa6:	6a3a      	ldr	r2, [r7, #32]
 8004aa8:	e841 2300 	strex	r3, r2, [r1]
 8004aac:	61bb      	str	r3, [r7, #24]
   return(result);
 8004aae:	69bb      	ldr	r3, [r7, #24]
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d1e5      	bne.n	8004a80 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	2220      	movs	r2, #32
 8004ab8:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	2220      	movs	r2, #32
 8004abe:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	2220      	movs	r2, #32
 8004ac4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	2200      	movs	r2, #0
 8004acc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004ad0:	2303      	movs	r3, #3
 8004ad2:	e010      	b.n	8004af6 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	69da      	ldr	r2, [r3, #28]
 8004ada:	68bb      	ldr	r3, [r7, #8]
 8004adc:	4013      	ands	r3, r2
 8004ade:	68ba      	ldr	r2, [r7, #8]
 8004ae0:	429a      	cmp	r2, r3
 8004ae2:	bf0c      	ite	eq
 8004ae4:	2301      	moveq	r3, #1
 8004ae6:	2300      	movne	r3, #0
 8004ae8:	b2db      	uxtb	r3, r3
 8004aea:	461a      	mov	r2, r3
 8004aec:	79fb      	ldrb	r3, [r7, #7]
 8004aee:	429a      	cmp	r2, r3
 8004af0:	f43f af4a 	beq.w	8004988 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004af4:	2300      	movs	r3, #0
}
 8004af6:	4618      	mov	r0, r3
 8004af8:	3770      	adds	r7, #112	; 0x70
 8004afa:	46bd      	mov	sp, r7
 8004afc:	bd80      	pop	{r7, pc}

08004afe <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004afe:	b480      	push	{r7}
 8004b00:	b095      	sub	sp, #84	; 0x54
 8004b02:	af00      	add	r7, sp, #0
 8004b04:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b0e:	e853 3f00 	ldrex	r3, [r3]
 8004b12:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004b14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b16:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004b1a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	461a      	mov	r2, r3
 8004b22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b24:	643b      	str	r3, [r7, #64]	; 0x40
 8004b26:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b28:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004b2a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004b2c:	e841 2300 	strex	r3, r2, [r1]
 8004b30:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004b32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d1e6      	bne.n	8004b06 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	3308      	adds	r3, #8
 8004b3e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b40:	6a3b      	ldr	r3, [r7, #32]
 8004b42:	e853 3f00 	ldrex	r3, [r3]
 8004b46:	61fb      	str	r3, [r7, #28]
   return(result);
 8004b48:	69fb      	ldr	r3, [r7, #28]
 8004b4a:	f023 0301 	bic.w	r3, r3, #1
 8004b4e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	3308      	adds	r3, #8
 8004b56:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004b58:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004b5a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b5c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004b5e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004b60:	e841 2300 	strex	r3, r2, [r1]
 8004b64:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d1e5      	bne.n	8004b38 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b70:	2b01      	cmp	r3, #1
 8004b72:	d118      	bne.n	8004ba6 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	e853 3f00 	ldrex	r3, [r3]
 8004b80:	60bb      	str	r3, [r7, #8]
   return(result);
 8004b82:	68bb      	ldr	r3, [r7, #8]
 8004b84:	f023 0310 	bic.w	r3, r3, #16
 8004b88:	647b      	str	r3, [r7, #68]	; 0x44
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	461a      	mov	r2, r3
 8004b90:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004b92:	61bb      	str	r3, [r7, #24]
 8004b94:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b96:	6979      	ldr	r1, [r7, #20]
 8004b98:	69ba      	ldr	r2, [r7, #24]
 8004b9a:	e841 2300 	strex	r3, r2, [r1]
 8004b9e:	613b      	str	r3, [r7, #16]
   return(result);
 8004ba0:	693b      	ldr	r3, [r7, #16]
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d1e6      	bne.n	8004b74 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	2220      	movs	r2, #32
 8004baa:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	2200      	movs	r2, #0
 8004bb0:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	2200      	movs	r2, #0
 8004bb6:	665a      	str	r2, [r3, #100]	; 0x64
}
 8004bb8:	bf00      	nop
 8004bba:	3754      	adds	r7, #84	; 0x54
 8004bbc:	46bd      	mov	sp, r7
 8004bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc2:	4770      	bx	lr

08004bc4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004bc4:	b580      	push	{r7, lr}
 8004bc6:	b084      	sub	sp, #16
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bd0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	2200      	movs	r2, #0
 8004bd6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	2200      	movs	r2, #0
 8004bde:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004be2:	68f8      	ldr	r0, [r7, #12]
 8004be4:	f7ff fb6c 	bl	80042c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004be8:	bf00      	nop
 8004bea:	3710      	adds	r7, #16
 8004bec:	46bd      	mov	sp, r7
 8004bee:	bd80      	pop	{r7, pc}

08004bf0 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004bf0:	b480      	push	{r7}
 8004bf2:	b08f      	sub	sp, #60	; 0x3c
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004bfc:	2b21      	cmp	r3, #33	; 0x21
 8004bfe:	d14d      	bne.n	8004c9c <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004c06:	b29b      	uxth	r3, r3
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d132      	bne.n	8004c72 <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c12:	6a3b      	ldr	r3, [r7, #32]
 8004c14:	e853 3f00 	ldrex	r3, [r3]
 8004c18:	61fb      	str	r3, [r7, #28]
   return(result);
 8004c1a:	69fb      	ldr	r3, [r7, #28]
 8004c1c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004c20:	637b      	str	r3, [r7, #52]	; 0x34
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	461a      	mov	r2, r3
 8004c28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c2a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004c2c:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c2e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004c30:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004c32:	e841 2300 	strex	r3, r2, [r1]
 8004c36:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d1e6      	bne.n	8004c0c <UART_TxISR_8BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	e853 3f00 	ldrex	r3, [r3]
 8004c4a:	60bb      	str	r3, [r7, #8]
   return(result);
 8004c4c:	68bb      	ldr	r3, [r7, #8]
 8004c4e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004c52:	633b      	str	r3, [r7, #48]	; 0x30
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	461a      	mov	r2, r3
 8004c5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c5c:	61bb      	str	r3, [r7, #24]
 8004c5e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c60:	6979      	ldr	r1, [r7, #20]
 8004c62:	69ba      	ldr	r2, [r7, #24]
 8004c64:	e841 2300 	strex	r3, r2, [r1]
 8004c68:	613b      	str	r3, [r7, #16]
   return(result);
 8004c6a:	693b      	ldr	r3, [r7, #16]
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d1e6      	bne.n	8004c3e <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8004c70:	e014      	b.n	8004c9c <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c76:	781a      	ldrb	r2, [r3, #0]
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	b292      	uxth	r2, r2
 8004c7e:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c84:	1c5a      	adds	r2, r3, #1
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004c90:	b29b      	uxth	r3, r3
 8004c92:	3b01      	subs	r3, #1
 8004c94:	b29a      	uxth	r2, r3
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8004c9c:	bf00      	nop
 8004c9e:	373c      	adds	r7, #60	; 0x3c
 8004ca0:	46bd      	mov	sp, r7
 8004ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca6:	4770      	bx	lr

08004ca8 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004ca8:	b480      	push	{r7}
 8004caa:	b091      	sub	sp, #68	; 0x44
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004cb4:	2b21      	cmp	r3, #33	; 0x21
 8004cb6:	d151      	bne.n	8004d5c <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004cbe:	b29b      	uxth	r3, r3
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d132      	bne.n	8004d2a <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ccc:	e853 3f00 	ldrex	r3, [r3]
 8004cd0:	623b      	str	r3, [r7, #32]
   return(result);
 8004cd2:	6a3b      	ldr	r3, [r7, #32]
 8004cd4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004cd8:	63bb      	str	r3, [r7, #56]	; 0x38
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	461a      	mov	r2, r3
 8004ce0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ce2:	633b      	str	r3, [r7, #48]	; 0x30
 8004ce4:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ce6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004ce8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004cea:	e841 2300 	strex	r3, r2, [r1]
 8004cee:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004cf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d1e6      	bne.n	8004cc4 <UART_TxISR_16BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cfc:	693b      	ldr	r3, [r7, #16]
 8004cfe:	e853 3f00 	ldrex	r3, [r3]
 8004d02:	60fb      	str	r3, [r7, #12]
   return(result);
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004d0a:	637b      	str	r3, [r7, #52]	; 0x34
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	461a      	mov	r2, r3
 8004d12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d14:	61fb      	str	r3, [r7, #28]
 8004d16:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d18:	69b9      	ldr	r1, [r7, #24]
 8004d1a:	69fa      	ldr	r2, [r7, #28]
 8004d1c:	e841 2300 	strex	r3, r2, [r1]
 8004d20:	617b      	str	r3, [r7, #20]
   return(result);
 8004d22:	697b      	ldr	r3, [r7, #20]
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d1e6      	bne.n	8004cf6 <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8004d28:	e018      	b.n	8004d5c <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d2e:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8004d30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d32:	881a      	ldrh	r2, [r3, #0]
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004d3c:	b292      	uxth	r2, r2
 8004d3e:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d44:	1c9a      	adds	r2, r3, #2
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004d50:	b29b      	uxth	r3, r3
 8004d52:	3b01      	subs	r3, #1
 8004d54:	b29a      	uxth	r2, r3
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8004d5c:	bf00      	nop
 8004d5e:	3744      	adds	r7, #68	; 0x44
 8004d60:	46bd      	mov	sp, r7
 8004d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d66:	4770      	bx	lr

08004d68 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004d68:	b580      	push	{r7, lr}
 8004d6a:	b088      	sub	sp, #32
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	e853 3f00 	ldrex	r3, [r3]
 8004d7c:	60bb      	str	r3, [r7, #8]
   return(result);
 8004d7e:	68bb      	ldr	r3, [r7, #8]
 8004d80:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004d84:	61fb      	str	r3, [r7, #28]
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	461a      	mov	r2, r3
 8004d8c:	69fb      	ldr	r3, [r7, #28]
 8004d8e:	61bb      	str	r3, [r7, #24]
 8004d90:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d92:	6979      	ldr	r1, [r7, #20]
 8004d94:	69ba      	ldr	r2, [r7, #24]
 8004d96:	e841 2300 	strex	r3, r2, [r1]
 8004d9a:	613b      	str	r3, [r7, #16]
   return(result);
 8004d9c:	693b      	ldr	r3, [r7, #16]
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d1e6      	bne.n	8004d70 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	2220      	movs	r2, #32
 8004da6:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2200      	movs	r2, #0
 8004dac:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004dae:	6878      	ldr	r0, [r7, #4]
 8004db0:	f7ff fa7c 	bl	80042ac <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004db4:	bf00      	nop
 8004db6:	3720      	adds	r7, #32
 8004db8:	46bd      	mov	sp, r7
 8004dba:	bd80      	pop	{r7, pc}

08004dbc <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004dbc:	b480      	push	{r7}
 8004dbe:	b083      	sub	sp, #12
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004dc4:	bf00      	nop
 8004dc6:	370c      	adds	r7, #12
 8004dc8:	46bd      	mov	sp, r7
 8004dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dce:	4770      	bx	lr

08004dd0 <__NVIC_SetPriority>:
{
 8004dd0:	b480      	push	{r7}
 8004dd2:	b083      	sub	sp, #12
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	4603      	mov	r3, r0
 8004dd8:	6039      	str	r1, [r7, #0]
 8004dda:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004ddc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	db0a      	blt.n	8004dfa <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004de4:	683b      	ldr	r3, [r7, #0]
 8004de6:	b2da      	uxtb	r2, r3
 8004de8:	490c      	ldr	r1, [pc, #48]	; (8004e1c <__NVIC_SetPriority+0x4c>)
 8004dea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004dee:	0112      	lsls	r2, r2, #4
 8004df0:	b2d2      	uxtb	r2, r2
 8004df2:	440b      	add	r3, r1
 8004df4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004df8:	e00a      	b.n	8004e10 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004dfa:	683b      	ldr	r3, [r7, #0]
 8004dfc:	b2da      	uxtb	r2, r3
 8004dfe:	4908      	ldr	r1, [pc, #32]	; (8004e20 <__NVIC_SetPriority+0x50>)
 8004e00:	79fb      	ldrb	r3, [r7, #7]
 8004e02:	f003 030f 	and.w	r3, r3, #15
 8004e06:	3b04      	subs	r3, #4
 8004e08:	0112      	lsls	r2, r2, #4
 8004e0a:	b2d2      	uxtb	r2, r2
 8004e0c:	440b      	add	r3, r1
 8004e0e:	761a      	strb	r2, [r3, #24]
}
 8004e10:	bf00      	nop
 8004e12:	370c      	adds	r7, #12
 8004e14:	46bd      	mov	sp, r7
 8004e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e1a:	4770      	bx	lr
 8004e1c:	e000e100 	.word	0xe000e100
 8004e20:	e000ed00 	.word	0xe000ed00

08004e24 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8004e24:	b580      	push	{r7, lr}
 8004e26:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8004e28:	4b05      	ldr	r3, [pc, #20]	; (8004e40 <SysTick_Handler+0x1c>)
 8004e2a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8004e2c:	f001 fd28 	bl	8006880 <xTaskGetSchedulerState>
 8004e30:	4603      	mov	r3, r0
 8004e32:	2b01      	cmp	r3, #1
 8004e34:	d001      	beq.n	8004e3a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8004e36:	f002 fb0f 	bl	8007458 <xPortSysTickHandler>
  }
}
 8004e3a:	bf00      	nop
 8004e3c:	bd80      	pop	{r7, pc}
 8004e3e:	bf00      	nop
 8004e40:	e000e010 	.word	0xe000e010

08004e44 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8004e44:	b580      	push	{r7, lr}
 8004e46:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8004e48:	2100      	movs	r1, #0
 8004e4a:	f06f 0004 	mvn.w	r0, #4
 8004e4e:	f7ff ffbf 	bl	8004dd0 <__NVIC_SetPriority>
#endif
}
 8004e52:	bf00      	nop
 8004e54:	bd80      	pop	{r7, pc}
	...

08004e58 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004e58:	b480      	push	{r7}
 8004e5a:	b083      	sub	sp, #12
 8004e5c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004e5e:	f3ef 8305 	mrs	r3, IPSR
 8004e62:	603b      	str	r3, [r7, #0]
  return(result);
 8004e64:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d003      	beq.n	8004e72 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8004e6a:	f06f 0305 	mvn.w	r3, #5
 8004e6e:	607b      	str	r3, [r7, #4]
 8004e70:	e00c      	b.n	8004e8c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8004e72:	4b0a      	ldr	r3, [pc, #40]	; (8004e9c <osKernelInitialize+0x44>)
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d105      	bne.n	8004e86 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8004e7a:	4b08      	ldr	r3, [pc, #32]	; (8004e9c <osKernelInitialize+0x44>)
 8004e7c:	2201      	movs	r2, #1
 8004e7e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004e80:	2300      	movs	r3, #0
 8004e82:	607b      	str	r3, [r7, #4]
 8004e84:	e002      	b.n	8004e8c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8004e86:	f04f 33ff 	mov.w	r3, #4294967295
 8004e8a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004e8c:	687b      	ldr	r3, [r7, #4]
}
 8004e8e:	4618      	mov	r0, r3
 8004e90:	370c      	adds	r7, #12
 8004e92:	46bd      	mov	sp, r7
 8004e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e98:	4770      	bx	lr
 8004e9a:	bf00      	nop
 8004e9c:	200002a4 	.word	0x200002a4

08004ea0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004ea0:	b580      	push	{r7, lr}
 8004ea2:	b082      	sub	sp, #8
 8004ea4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004ea6:	f3ef 8305 	mrs	r3, IPSR
 8004eaa:	603b      	str	r3, [r7, #0]
  return(result);
 8004eac:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d003      	beq.n	8004eba <osKernelStart+0x1a>
    stat = osErrorISR;
 8004eb2:	f06f 0305 	mvn.w	r3, #5
 8004eb6:	607b      	str	r3, [r7, #4]
 8004eb8:	e010      	b.n	8004edc <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8004eba:	4b0b      	ldr	r3, [pc, #44]	; (8004ee8 <osKernelStart+0x48>)
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	2b01      	cmp	r3, #1
 8004ec0:	d109      	bne.n	8004ed6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8004ec2:	f7ff ffbf 	bl	8004e44 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8004ec6:	4b08      	ldr	r3, [pc, #32]	; (8004ee8 <osKernelStart+0x48>)
 8004ec8:	2202      	movs	r2, #2
 8004eca:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8004ecc:	f001 f87c 	bl	8005fc8 <vTaskStartScheduler>
      stat = osOK;
 8004ed0:	2300      	movs	r3, #0
 8004ed2:	607b      	str	r3, [r7, #4]
 8004ed4:	e002      	b.n	8004edc <osKernelStart+0x3c>
    } else {
      stat = osError;
 8004ed6:	f04f 33ff 	mov.w	r3, #4294967295
 8004eda:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004edc:	687b      	ldr	r3, [r7, #4]
}
 8004ede:	4618      	mov	r0, r3
 8004ee0:	3708      	adds	r7, #8
 8004ee2:	46bd      	mov	sp, r7
 8004ee4:	bd80      	pop	{r7, pc}
 8004ee6:	bf00      	nop
 8004ee8:	200002a4 	.word	0x200002a4

08004eec <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004eec:	b580      	push	{r7, lr}
 8004eee:	b08e      	sub	sp, #56	; 0x38
 8004ef0:	af04      	add	r7, sp, #16
 8004ef2:	60f8      	str	r0, [r7, #12]
 8004ef4:	60b9      	str	r1, [r7, #8]
 8004ef6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004ef8:	2300      	movs	r3, #0
 8004efa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004efc:	f3ef 8305 	mrs	r3, IPSR
 8004f00:	617b      	str	r3, [r7, #20]
  return(result);
 8004f02:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d17e      	bne.n	8005006 <osThreadNew+0x11a>
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d07b      	beq.n	8005006 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8004f0e:	2380      	movs	r3, #128	; 0x80
 8004f10:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8004f12:	2318      	movs	r3, #24
 8004f14:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8004f16:	2300      	movs	r3, #0
 8004f18:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8004f1a:	f04f 33ff 	mov.w	r3, #4294967295
 8004f1e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d045      	beq.n	8004fb2 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d002      	beq.n	8004f34 <osThreadNew+0x48>
        name = attr->name;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	699b      	ldr	r3, [r3, #24]
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d002      	beq.n	8004f42 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	699b      	ldr	r3, [r3, #24]
 8004f40:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004f42:	69fb      	ldr	r3, [r7, #28]
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d008      	beq.n	8004f5a <osThreadNew+0x6e>
 8004f48:	69fb      	ldr	r3, [r7, #28]
 8004f4a:	2b38      	cmp	r3, #56	; 0x38
 8004f4c:	d805      	bhi.n	8004f5a <osThreadNew+0x6e>
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	685b      	ldr	r3, [r3, #4]
 8004f52:	f003 0301 	and.w	r3, r3, #1
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d001      	beq.n	8004f5e <osThreadNew+0x72>
        return (NULL);
 8004f5a:	2300      	movs	r3, #0
 8004f5c:	e054      	b.n	8005008 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	695b      	ldr	r3, [r3, #20]
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d003      	beq.n	8004f6e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	695b      	ldr	r3, [r3, #20]
 8004f6a:	089b      	lsrs	r3, r3, #2
 8004f6c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	689b      	ldr	r3, [r3, #8]
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d00e      	beq.n	8004f94 <osThreadNew+0xa8>
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	68db      	ldr	r3, [r3, #12]
 8004f7a:	2bbb      	cmp	r3, #187	; 0xbb
 8004f7c:	d90a      	bls.n	8004f94 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d006      	beq.n	8004f94 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	695b      	ldr	r3, [r3, #20]
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d002      	beq.n	8004f94 <osThreadNew+0xa8>
        mem = 1;
 8004f8e:	2301      	movs	r3, #1
 8004f90:	61bb      	str	r3, [r7, #24]
 8004f92:	e010      	b.n	8004fb6 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	689b      	ldr	r3, [r3, #8]
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d10c      	bne.n	8004fb6 <osThreadNew+0xca>
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	68db      	ldr	r3, [r3, #12]
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d108      	bne.n	8004fb6 <osThreadNew+0xca>
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	691b      	ldr	r3, [r3, #16]
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d104      	bne.n	8004fb6 <osThreadNew+0xca>
          mem = 0;
 8004fac:	2300      	movs	r3, #0
 8004fae:	61bb      	str	r3, [r7, #24]
 8004fb0:	e001      	b.n	8004fb6 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8004fb2:	2300      	movs	r3, #0
 8004fb4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8004fb6:	69bb      	ldr	r3, [r7, #24]
 8004fb8:	2b01      	cmp	r3, #1
 8004fba:	d110      	bne.n	8004fde <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8004fc0:	687a      	ldr	r2, [r7, #4]
 8004fc2:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004fc4:	9202      	str	r2, [sp, #8]
 8004fc6:	9301      	str	r3, [sp, #4]
 8004fc8:	69fb      	ldr	r3, [r7, #28]
 8004fca:	9300      	str	r3, [sp, #0]
 8004fcc:	68bb      	ldr	r3, [r7, #8]
 8004fce:	6a3a      	ldr	r2, [r7, #32]
 8004fd0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004fd2:	68f8      	ldr	r0, [r7, #12]
 8004fd4:	f000 fe0c 	bl	8005bf0 <xTaskCreateStatic>
 8004fd8:	4603      	mov	r3, r0
 8004fda:	613b      	str	r3, [r7, #16]
 8004fdc:	e013      	b.n	8005006 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8004fde:	69bb      	ldr	r3, [r7, #24]
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d110      	bne.n	8005006 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004fe4:	6a3b      	ldr	r3, [r7, #32]
 8004fe6:	b29a      	uxth	r2, r3
 8004fe8:	f107 0310 	add.w	r3, r7, #16
 8004fec:	9301      	str	r3, [sp, #4]
 8004fee:	69fb      	ldr	r3, [r7, #28]
 8004ff0:	9300      	str	r3, [sp, #0]
 8004ff2:	68bb      	ldr	r3, [r7, #8]
 8004ff4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004ff6:	68f8      	ldr	r0, [r7, #12]
 8004ff8:	f000 fe57 	bl	8005caa <xTaskCreate>
 8004ffc:	4603      	mov	r3, r0
 8004ffe:	2b01      	cmp	r3, #1
 8005000:	d001      	beq.n	8005006 <osThreadNew+0x11a>
            hTask = NULL;
 8005002:	2300      	movs	r3, #0
 8005004:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8005006:	693b      	ldr	r3, [r7, #16]
}
 8005008:	4618      	mov	r0, r3
 800500a:	3728      	adds	r7, #40	; 0x28
 800500c:	46bd      	mov	sp, r7
 800500e:	bd80      	pop	{r7, pc}

08005010 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8005010:	b580      	push	{r7, lr}
 8005012:	b084      	sub	sp, #16
 8005014:	af00      	add	r7, sp, #0
 8005016:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005018:	f3ef 8305 	mrs	r3, IPSR
 800501c:	60bb      	str	r3, [r7, #8]
  return(result);
 800501e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005020:	2b00      	cmp	r3, #0
 8005022:	d003      	beq.n	800502c <osDelay+0x1c>
    stat = osErrorISR;
 8005024:	f06f 0305 	mvn.w	r3, #5
 8005028:	60fb      	str	r3, [r7, #12]
 800502a:	e007      	b.n	800503c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800502c:	2300      	movs	r3, #0
 800502e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	2b00      	cmp	r3, #0
 8005034:	d002      	beq.n	800503c <osDelay+0x2c>
      vTaskDelay(ticks);
 8005036:	6878      	ldr	r0, [r7, #4]
 8005038:	f000 ff92 	bl	8005f60 <vTaskDelay>
    }
  }

  return (stat);
 800503c:	68fb      	ldr	r3, [r7, #12]
}
 800503e:	4618      	mov	r0, r3
 8005040:	3710      	adds	r7, #16
 8005042:	46bd      	mov	sp, r7
 8005044:	bd80      	pop	{r7, pc}
	...

08005048 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005048:	b480      	push	{r7}
 800504a:	b085      	sub	sp, #20
 800504c:	af00      	add	r7, sp, #0
 800504e:	60f8      	str	r0, [r7, #12]
 8005050:	60b9      	str	r1, [r7, #8]
 8005052:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	4a07      	ldr	r2, [pc, #28]	; (8005074 <vApplicationGetIdleTaskMemory+0x2c>)
 8005058:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800505a:	68bb      	ldr	r3, [r7, #8]
 800505c:	4a06      	ldr	r2, [pc, #24]	; (8005078 <vApplicationGetIdleTaskMemory+0x30>)
 800505e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	2280      	movs	r2, #128	; 0x80
 8005064:	601a      	str	r2, [r3, #0]
}
 8005066:	bf00      	nop
 8005068:	3714      	adds	r7, #20
 800506a:	46bd      	mov	sp, r7
 800506c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005070:	4770      	bx	lr
 8005072:	bf00      	nop
 8005074:	200002a8 	.word	0x200002a8
 8005078:	20000364 	.word	0x20000364

0800507c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800507c:	b480      	push	{r7}
 800507e:	b085      	sub	sp, #20
 8005080:	af00      	add	r7, sp, #0
 8005082:	60f8      	str	r0, [r7, #12]
 8005084:	60b9      	str	r1, [r7, #8]
 8005086:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	4a07      	ldr	r2, [pc, #28]	; (80050a8 <vApplicationGetTimerTaskMemory+0x2c>)
 800508c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800508e:	68bb      	ldr	r3, [r7, #8]
 8005090:	4a06      	ldr	r2, [pc, #24]	; (80050ac <vApplicationGetTimerTaskMemory+0x30>)
 8005092:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	f44f 7280 	mov.w	r2, #256	; 0x100
 800509a:	601a      	str	r2, [r3, #0]
}
 800509c:	bf00      	nop
 800509e:	3714      	adds	r7, #20
 80050a0:	46bd      	mov	sp, r7
 80050a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a6:	4770      	bx	lr
 80050a8:	20000564 	.word	0x20000564
 80050ac:	20000620 	.word	0x20000620

080050b0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80050b0:	b480      	push	{r7}
 80050b2:	b083      	sub	sp, #12
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	f103 0208 	add.w	r2, r3, #8
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	f04f 32ff 	mov.w	r2, #4294967295
 80050c8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	f103 0208 	add.w	r2, r3, #8
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	f103 0208 	add.w	r2, r3, #8
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	2200      	movs	r2, #0
 80050e2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80050e4:	bf00      	nop
 80050e6:	370c      	adds	r7, #12
 80050e8:	46bd      	mov	sp, r7
 80050ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ee:	4770      	bx	lr

080050f0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80050f0:	b480      	push	{r7}
 80050f2:	b083      	sub	sp, #12
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2200      	movs	r2, #0
 80050fc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80050fe:	bf00      	nop
 8005100:	370c      	adds	r7, #12
 8005102:	46bd      	mov	sp, r7
 8005104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005108:	4770      	bx	lr

0800510a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800510a:	b480      	push	{r7}
 800510c:	b085      	sub	sp, #20
 800510e:	af00      	add	r7, sp, #0
 8005110:	6078      	str	r0, [r7, #4]
 8005112:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	685b      	ldr	r3, [r3, #4]
 8005118:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800511a:	683b      	ldr	r3, [r7, #0]
 800511c:	68fa      	ldr	r2, [r7, #12]
 800511e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	689a      	ldr	r2, [r3, #8]
 8005124:	683b      	ldr	r3, [r7, #0]
 8005126:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	689b      	ldr	r3, [r3, #8]
 800512c:	683a      	ldr	r2, [r7, #0]
 800512e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	683a      	ldr	r2, [r7, #0]
 8005134:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005136:	683b      	ldr	r3, [r7, #0]
 8005138:	687a      	ldr	r2, [r7, #4]
 800513a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	1c5a      	adds	r2, r3, #1
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	601a      	str	r2, [r3, #0]
}
 8005146:	bf00      	nop
 8005148:	3714      	adds	r7, #20
 800514a:	46bd      	mov	sp, r7
 800514c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005150:	4770      	bx	lr

08005152 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005152:	b480      	push	{r7}
 8005154:	b085      	sub	sp, #20
 8005156:	af00      	add	r7, sp, #0
 8005158:	6078      	str	r0, [r7, #4]
 800515a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800515c:	683b      	ldr	r3, [r7, #0]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005162:	68bb      	ldr	r3, [r7, #8]
 8005164:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005168:	d103      	bne.n	8005172 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	691b      	ldr	r3, [r3, #16]
 800516e:	60fb      	str	r3, [r7, #12]
 8005170:	e00c      	b.n	800518c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	3308      	adds	r3, #8
 8005176:	60fb      	str	r3, [r7, #12]
 8005178:	e002      	b.n	8005180 <vListInsert+0x2e>
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	685b      	ldr	r3, [r3, #4]
 800517e:	60fb      	str	r3, [r7, #12]
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	685b      	ldr	r3, [r3, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	68ba      	ldr	r2, [r7, #8]
 8005188:	429a      	cmp	r2, r3
 800518a:	d2f6      	bcs.n	800517a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	685a      	ldr	r2, [r3, #4]
 8005190:	683b      	ldr	r3, [r7, #0]
 8005192:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005194:	683b      	ldr	r3, [r7, #0]
 8005196:	685b      	ldr	r3, [r3, #4]
 8005198:	683a      	ldr	r2, [r7, #0]
 800519a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800519c:	683b      	ldr	r3, [r7, #0]
 800519e:	68fa      	ldr	r2, [r7, #12]
 80051a0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	683a      	ldr	r2, [r7, #0]
 80051a6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80051a8:	683b      	ldr	r3, [r7, #0]
 80051aa:	687a      	ldr	r2, [r7, #4]
 80051ac:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	1c5a      	adds	r2, r3, #1
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	601a      	str	r2, [r3, #0]
}
 80051b8:	bf00      	nop
 80051ba:	3714      	adds	r7, #20
 80051bc:	46bd      	mov	sp, r7
 80051be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c2:	4770      	bx	lr

080051c4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80051c4:	b480      	push	{r7}
 80051c6:	b085      	sub	sp, #20
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	691b      	ldr	r3, [r3, #16]
 80051d0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	685b      	ldr	r3, [r3, #4]
 80051d6:	687a      	ldr	r2, [r7, #4]
 80051d8:	6892      	ldr	r2, [r2, #8]
 80051da:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	689b      	ldr	r3, [r3, #8]
 80051e0:	687a      	ldr	r2, [r7, #4]
 80051e2:	6852      	ldr	r2, [r2, #4]
 80051e4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	685b      	ldr	r3, [r3, #4]
 80051ea:	687a      	ldr	r2, [r7, #4]
 80051ec:	429a      	cmp	r2, r3
 80051ee:	d103      	bne.n	80051f8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	689a      	ldr	r2, [r3, #8]
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	2200      	movs	r2, #0
 80051fc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	1e5a      	subs	r2, r3, #1
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	681b      	ldr	r3, [r3, #0]
}
 800520c:	4618      	mov	r0, r3
 800520e:	3714      	adds	r7, #20
 8005210:	46bd      	mov	sp, r7
 8005212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005216:	4770      	bx	lr

08005218 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005218:	b580      	push	{r7, lr}
 800521a:	b084      	sub	sp, #16
 800521c:	af00      	add	r7, sp, #0
 800521e:	6078      	str	r0, [r7, #4]
 8005220:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	2b00      	cmp	r3, #0
 800522a:	d10a      	bne.n	8005242 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800522c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005230:	f383 8811 	msr	BASEPRI, r3
 8005234:	f3bf 8f6f 	isb	sy
 8005238:	f3bf 8f4f 	dsb	sy
 800523c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800523e:	bf00      	nop
 8005240:	e7fe      	b.n	8005240 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005242:	f002 f877 	bl	8007334 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	681a      	ldr	r2, [r3, #0]
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800524e:	68f9      	ldr	r1, [r7, #12]
 8005250:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005252:	fb01 f303 	mul.w	r3, r1, r3
 8005256:	441a      	add	r2, r3
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	2200      	movs	r2, #0
 8005260:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	681a      	ldr	r2, [r3, #0]
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	681a      	ldr	r2, [r3, #0]
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005272:	3b01      	subs	r3, #1
 8005274:	68f9      	ldr	r1, [r7, #12]
 8005276:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005278:	fb01 f303 	mul.w	r3, r1, r3
 800527c:	441a      	add	r2, r3
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	22ff      	movs	r2, #255	; 0xff
 8005286:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	22ff      	movs	r2, #255	; 0xff
 800528e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8005292:	683b      	ldr	r3, [r7, #0]
 8005294:	2b00      	cmp	r3, #0
 8005296:	d114      	bne.n	80052c2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	691b      	ldr	r3, [r3, #16]
 800529c:	2b00      	cmp	r3, #0
 800529e:	d01a      	beq.n	80052d6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	3310      	adds	r3, #16
 80052a4:	4618      	mov	r0, r3
 80052a6:	f001 f929 	bl	80064fc <xTaskRemoveFromEventList>
 80052aa:	4603      	mov	r3, r0
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d012      	beq.n	80052d6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80052b0:	4b0c      	ldr	r3, [pc, #48]	; (80052e4 <xQueueGenericReset+0xcc>)
 80052b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80052b6:	601a      	str	r2, [r3, #0]
 80052b8:	f3bf 8f4f 	dsb	sy
 80052bc:	f3bf 8f6f 	isb	sy
 80052c0:	e009      	b.n	80052d6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	3310      	adds	r3, #16
 80052c6:	4618      	mov	r0, r3
 80052c8:	f7ff fef2 	bl	80050b0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	3324      	adds	r3, #36	; 0x24
 80052d0:	4618      	mov	r0, r3
 80052d2:	f7ff feed 	bl	80050b0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80052d6:	f002 f85d 	bl	8007394 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80052da:	2301      	movs	r3, #1
}
 80052dc:	4618      	mov	r0, r3
 80052de:	3710      	adds	r7, #16
 80052e0:	46bd      	mov	sp, r7
 80052e2:	bd80      	pop	{r7, pc}
 80052e4:	e000ed04 	.word	0xe000ed04

080052e8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80052e8:	b580      	push	{r7, lr}
 80052ea:	b08e      	sub	sp, #56	; 0x38
 80052ec:	af02      	add	r7, sp, #8
 80052ee:	60f8      	str	r0, [r7, #12]
 80052f0:	60b9      	str	r1, [r7, #8]
 80052f2:	607a      	str	r2, [r7, #4]
 80052f4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d10a      	bne.n	8005312 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80052fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005300:	f383 8811 	msr	BASEPRI, r3
 8005304:	f3bf 8f6f 	isb	sy
 8005308:	f3bf 8f4f 	dsb	sy
 800530c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800530e:	bf00      	nop
 8005310:	e7fe      	b.n	8005310 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005312:	683b      	ldr	r3, [r7, #0]
 8005314:	2b00      	cmp	r3, #0
 8005316:	d10a      	bne.n	800532e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8005318:	f04f 0350 	mov.w	r3, #80	; 0x50
 800531c:	f383 8811 	msr	BASEPRI, r3
 8005320:	f3bf 8f6f 	isb	sy
 8005324:	f3bf 8f4f 	dsb	sy
 8005328:	627b      	str	r3, [r7, #36]	; 0x24
}
 800532a:	bf00      	nop
 800532c:	e7fe      	b.n	800532c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	2b00      	cmp	r3, #0
 8005332:	d002      	beq.n	800533a <xQueueGenericCreateStatic+0x52>
 8005334:	68bb      	ldr	r3, [r7, #8]
 8005336:	2b00      	cmp	r3, #0
 8005338:	d001      	beq.n	800533e <xQueueGenericCreateStatic+0x56>
 800533a:	2301      	movs	r3, #1
 800533c:	e000      	b.n	8005340 <xQueueGenericCreateStatic+0x58>
 800533e:	2300      	movs	r3, #0
 8005340:	2b00      	cmp	r3, #0
 8005342:	d10a      	bne.n	800535a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8005344:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005348:	f383 8811 	msr	BASEPRI, r3
 800534c:	f3bf 8f6f 	isb	sy
 8005350:	f3bf 8f4f 	dsb	sy
 8005354:	623b      	str	r3, [r7, #32]
}
 8005356:	bf00      	nop
 8005358:	e7fe      	b.n	8005358 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	2b00      	cmp	r3, #0
 800535e:	d102      	bne.n	8005366 <xQueueGenericCreateStatic+0x7e>
 8005360:	68bb      	ldr	r3, [r7, #8]
 8005362:	2b00      	cmp	r3, #0
 8005364:	d101      	bne.n	800536a <xQueueGenericCreateStatic+0x82>
 8005366:	2301      	movs	r3, #1
 8005368:	e000      	b.n	800536c <xQueueGenericCreateStatic+0x84>
 800536a:	2300      	movs	r3, #0
 800536c:	2b00      	cmp	r3, #0
 800536e:	d10a      	bne.n	8005386 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8005370:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005374:	f383 8811 	msr	BASEPRI, r3
 8005378:	f3bf 8f6f 	isb	sy
 800537c:	f3bf 8f4f 	dsb	sy
 8005380:	61fb      	str	r3, [r7, #28]
}
 8005382:	bf00      	nop
 8005384:	e7fe      	b.n	8005384 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005386:	2350      	movs	r3, #80	; 0x50
 8005388:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800538a:	697b      	ldr	r3, [r7, #20]
 800538c:	2b50      	cmp	r3, #80	; 0x50
 800538e:	d00a      	beq.n	80053a6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8005390:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005394:	f383 8811 	msr	BASEPRI, r3
 8005398:	f3bf 8f6f 	isb	sy
 800539c:	f3bf 8f4f 	dsb	sy
 80053a0:	61bb      	str	r3, [r7, #24]
}
 80053a2:	bf00      	nop
 80053a4:	e7fe      	b.n	80053a4 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80053a6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80053a8:	683b      	ldr	r3, [r7, #0]
 80053aa:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80053ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d00d      	beq.n	80053ce <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80053b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053b4:	2201      	movs	r2, #1
 80053b6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80053ba:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80053be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053c0:	9300      	str	r3, [sp, #0]
 80053c2:	4613      	mov	r3, r2
 80053c4:	687a      	ldr	r2, [r7, #4]
 80053c6:	68b9      	ldr	r1, [r7, #8]
 80053c8:	68f8      	ldr	r0, [r7, #12]
 80053ca:	f000 f805 	bl	80053d8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80053ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80053d0:	4618      	mov	r0, r3
 80053d2:	3730      	adds	r7, #48	; 0x30
 80053d4:	46bd      	mov	sp, r7
 80053d6:	bd80      	pop	{r7, pc}

080053d8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80053d8:	b580      	push	{r7, lr}
 80053da:	b084      	sub	sp, #16
 80053dc:	af00      	add	r7, sp, #0
 80053de:	60f8      	str	r0, [r7, #12]
 80053e0:	60b9      	str	r1, [r7, #8]
 80053e2:	607a      	str	r2, [r7, #4]
 80053e4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80053e6:	68bb      	ldr	r3, [r7, #8]
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d103      	bne.n	80053f4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80053ec:	69bb      	ldr	r3, [r7, #24]
 80053ee:	69ba      	ldr	r2, [r7, #24]
 80053f0:	601a      	str	r2, [r3, #0]
 80053f2:	e002      	b.n	80053fa <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80053f4:	69bb      	ldr	r3, [r7, #24]
 80053f6:	687a      	ldr	r2, [r7, #4]
 80053f8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80053fa:	69bb      	ldr	r3, [r7, #24]
 80053fc:	68fa      	ldr	r2, [r7, #12]
 80053fe:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005400:	69bb      	ldr	r3, [r7, #24]
 8005402:	68ba      	ldr	r2, [r7, #8]
 8005404:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005406:	2101      	movs	r1, #1
 8005408:	69b8      	ldr	r0, [r7, #24]
 800540a:	f7ff ff05 	bl	8005218 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800540e:	69bb      	ldr	r3, [r7, #24]
 8005410:	78fa      	ldrb	r2, [r7, #3]
 8005412:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005416:	bf00      	nop
 8005418:	3710      	adds	r7, #16
 800541a:	46bd      	mov	sp, r7
 800541c:	bd80      	pop	{r7, pc}
	...

08005420 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005420:	b580      	push	{r7, lr}
 8005422:	b08e      	sub	sp, #56	; 0x38
 8005424:	af00      	add	r7, sp, #0
 8005426:	60f8      	str	r0, [r7, #12]
 8005428:	60b9      	str	r1, [r7, #8]
 800542a:	607a      	str	r2, [r7, #4]
 800542c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800542e:	2300      	movs	r3, #0
 8005430:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005436:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005438:	2b00      	cmp	r3, #0
 800543a:	d10a      	bne.n	8005452 <xQueueGenericSend+0x32>
	__asm volatile
 800543c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005440:	f383 8811 	msr	BASEPRI, r3
 8005444:	f3bf 8f6f 	isb	sy
 8005448:	f3bf 8f4f 	dsb	sy
 800544c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800544e:	bf00      	nop
 8005450:	e7fe      	b.n	8005450 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005452:	68bb      	ldr	r3, [r7, #8]
 8005454:	2b00      	cmp	r3, #0
 8005456:	d103      	bne.n	8005460 <xQueueGenericSend+0x40>
 8005458:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800545a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800545c:	2b00      	cmp	r3, #0
 800545e:	d101      	bne.n	8005464 <xQueueGenericSend+0x44>
 8005460:	2301      	movs	r3, #1
 8005462:	e000      	b.n	8005466 <xQueueGenericSend+0x46>
 8005464:	2300      	movs	r3, #0
 8005466:	2b00      	cmp	r3, #0
 8005468:	d10a      	bne.n	8005480 <xQueueGenericSend+0x60>
	__asm volatile
 800546a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800546e:	f383 8811 	msr	BASEPRI, r3
 8005472:	f3bf 8f6f 	isb	sy
 8005476:	f3bf 8f4f 	dsb	sy
 800547a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800547c:	bf00      	nop
 800547e:	e7fe      	b.n	800547e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005480:	683b      	ldr	r3, [r7, #0]
 8005482:	2b02      	cmp	r3, #2
 8005484:	d103      	bne.n	800548e <xQueueGenericSend+0x6e>
 8005486:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005488:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800548a:	2b01      	cmp	r3, #1
 800548c:	d101      	bne.n	8005492 <xQueueGenericSend+0x72>
 800548e:	2301      	movs	r3, #1
 8005490:	e000      	b.n	8005494 <xQueueGenericSend+0x74>
 8005492:	2300      	movs	r3, #0
 8005494:	2b00      	cmp	r3, #0
 8005496:	d10a      	bne.n	80054ae <xQueueGenericSend+0x8e>
	__asm volatile
 8005498:	f04f 0350 	mov.w	r3, #80	; 0x50
 800549c:	f383 8811 	msr	BASEPRI, r3
 80054a0:	f3bf 8f6f 	isb	sy
 80054a4:	f3bf 8f4f 	dsb	sy
 80054a8:	623b      	str	r3, [r7, #32]
}
 80054aa:	bf00      	nop
 80054ac:	e7fe      	b.n	80054ac <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80054ae:	f001 f9e7 	bl	8006880 <xTaskGetSchedulerState>
 80054b2:	4603      	mov	r3, r0
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d102      	bne.n	80054be <xQueueGenericSend+0x9e>
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d101      	bne.n	80054c2 <xQueueGenericSend+0xa2>
 80054be:	2301      	movs	r3, #1
 80054c0:	e000      	b.n	80054c4 <xQueueGenericSend+0xa4>
 80054c2:	2300      	movs	r3, #0
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d10a      	bne.n	80054de <xQueueGenericSend+0xbe>
	__asm volatile
 80054c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054cc:	f383 8811 	msr	BASEPRI, r3
 80054d0:	f3bf 8f6f 	isb	sy
 80054d4:	f3bf 8f4f 	dsb	sy
 80054d8:	61fb      	str	r3, [r7, #28]
}
 80054da:	bf00      	nop
 80054dc:	e7fe      	b.n	80054dc <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80054de:	f001 ff29 	bl	8007334 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80054e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80054e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054ea:	429a      	cmp	r2, r3
 80054ec:	d302      	bcc.n	80054f4 <xQueueGenericSend+0xd4>
 80054ee:	683b      	ldr	r3, [r7, #0]
 80054f0:	2b02      	cmp	r3, #2
 80054f2:	d129      	bne.n	8005548 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80054f4:	683a      	ldr	r2, [r7, #0]
 80054f6:	68b9      	ldr	r1, [r7, #8]
 80054f8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80054fa:	f000 fa0b 	bl	8005914 <prvCopyDataToQueue>
 80054fe:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005500:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005502:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005504:	2b00      	cmp	r3, #0
 8005506:	d010      	beq.n	800552a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005508:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800550a:	3324      	adds	r3, #36	; 0x24
 800550c:	4618      	mov	r0, r3
 800550e:	f000 fff5 	bl	80064fc <xTaskRemoveFromEventList>
 8005512:	4603      	mov	r3, r0
 8005514:	2b00      	cmp	r3, #0
 8005516:	d013      	beq.n	8005540 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005518:	4b3f      	ldr	r3, [pc, #252]	; (8005618 <xQueueGenericSend+0x1f8>)
 800551a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800551e:	601a      	str	r2, [r3, #0]
 8005520:	f3bf 8f4f 	dsb	sy
 8005524:	f3bf 8f6f 	isb	sy
 8005528:	e00a      	b.n	8005540 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800552a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800552c:	2b00      	cmp	r3, #0
 800552e:	d007      	beq.n	8005540 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005530:	4b39      	ldr	r3, [pc, #228]	; (8005618 <xQueueGenericSend+0x1f8>)
 8005532:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005536:	601a      	str	r2, [r3, #0]
 8005538:	f3bf 8f4f 	dsb	sy
 800553c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005540:	f001 ff28 	bl	8007394 <vPortExitCritical>
				return pdPASS;
 8005544:	2301      	movs	r3, #1
 8005546:	e063      	b.n	8005610 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2b00      	cmp	r3, #0
 800554c:	d103      	bne.n	8005556 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800554e:	f001 ff21 	bl	8007394 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005552:	2300      	movs	r3, #0
 8005554:	e05c      	b.n	8005610 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005556:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005558:	2b00      	cmp	r3, #0
 800555a:	d106      	bne.n	800556a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800555c:	f107 0314 	add.w	r3, r7, #20
 8005560:	4618      	mov	r0, r3
 8005562:	f001 f82f 	bl	80065c4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005566:	2301      	movs	r3, #1
 8005568:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800556a:	f001 ff13 	bl	8007394 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800556e:	f000 fd9b 	bl	80060a8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005572:	f001 fedf 	bl	8007334 <vPortEnterCritical>
 8005576:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005578:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800557c:	b25b      	sxtb	r3, r3
 800557e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005582:	d103      	bne.n	800558c <xQueueGenericSend+0x16c>
 8005584:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005586:	2200      	movs	r2, #0
 8005588:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800558c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800558e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005592:	b25b      	sxtb	r3, r3
 8005594:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005598:	d103      	bne.n	80055a2 <xQueueGenericSend+0x182>
 800559a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800559c:	2200      	movs	r2, #0
 800559e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80055a2:	f001 fef7 	bl	8007394 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80055a6:	1d3a      	adds	r2, r7, #4
 80055a8:	f107 0314 	add.w	r3, r7, #20
 80055ac:	4611      	mov	r1, r2
 80055ae:	4618      	mov	r0, r3
 80055b0:	f001 f81e 	bl	80065f0 <xTaskCheckForTimeOut>
 80055b4:	4603      	mov	r3, r0
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d124      	bne.n	8005604 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80055ba:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80055bc:	f000 faa2 	bl	8005b04 <prvIsQueueFull>
 80055c0:	4603      	mov	r3, r0
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d018      	beq.n	80055f8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80055c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055c8:	3310      	adds	r3, #16
 80055ca:	687a      	ldr	r2, [r7, #4]
 80055cc:	4611      	mov	r1, r2
 80055ce:	4618      	mov	r0, r3
 80055d0:	f000 ff44 	bl	800645c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80055d4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80055d6:	f000 fa2d 	bl	8005a34 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80055da:	f000 fd73 	bl	80060c4 <xTaskResumeAll>
 80055de:	4603      	mov	r3, r0
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	f47f af7c 	bne.w	80054de <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80055e6:	4b0c      	ldr	r3, [pc, #48]	; (8005618 <xQueueGenericSend+0x1f8>)
 80055e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80055ec:	601a      	str	r2, [r3, #0]
 80055ee:	f3bf 8f4f 	dsb	sy
 80055f2:	f3bf 8f6f 	isb	sy
 80055f6:	e772      	b.n	80054de <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80055f8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80055fa:	f000 fa1b 	bl	8005a34 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80055fe:	f000 fd61 	bl	80060c4 <xTaskResumeAll>
 8005602:	e76c      	b.n	80054de <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005604:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005606:	f000 fa15 	bl	8005a34 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800560a:	f000 fd5b 	bl	80060c4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800560e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005610:	4618      	mov	r0, r3
 8005612:	3738      	adds	r7, #56	; 0x38
 8005614:	46bd      	mov	sp, r7
 8005616:	bd80      	pop	{r7, pc}
 8005618:	e000ed04 	.word	0xe000ed04

0800561c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800561c:	b580      	push	{r7, lr}
 800561e:	b090      	sub	sp, #64	; 0x40
 8005620:	af00      	add	r7, sp, #0
 8005622:	60f8      	str	r0, [r7, #12]
 8005624:	60b9      	str	r1, [r7, #8]
 8005626:	607a      	str	r2, [r7, #4]
 8005628:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800562e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005630:	2b00      	cmp	r3, #0
 8005632:	d10a      	bne.n	800564a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8005634:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005638:	f383 8811 	msr	BASEPRI, r3
 800563c:	f3bf 8f6f 	isb	sy
 8005640:	f3bf 8f4f 	dsb	sy
 8005644:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005646:	bf00      	nop
 8005648:	e7fe      	b.n	8005648 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800564a:	68bb      	ldr	r3, [r7, #8]
 800564c:	2b00      	cmp	r3, #0
 800564e:	d103      	bne.n	8005658 <xQueueGenericSendFromISR+0x3c>
 8005650:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005652:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005654:	2b00      	cmp	r3, #0
 8005656:	d101      	bne.n	800565c <xQueueGenericSendFromISR+0x40>
 8005658:	2301      	movs	r3, #1
 800565a:	e000      	b.n	800565e <xQueueGenericSendFromISR+0x42>
 800565c:	2300      	movs	r3, #0
 800565e:	2b00      	cmp	r3, #0
 8005660:	d10a      	bne.n	8005678 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8005662:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005666:	f383 8811 	msr	BASEPRI, r3
 800566a:	f3bf 8f6f 	isb	sy
 800566e:	f3bf 8f4f 	dsb	sy
 8005672:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005674:	bf00      	nop
 8005676:	e7fe      	b.n	8005676 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005678:	683b      	ldr	r3, [r7, #0]
 800567a:	2b02      	cmp	r3, #2
 800567c:	d103      	bne.n	8005686 <xQueueGenericSendFromISR+0x6a>
 800567e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005680:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005682:	2b01      	cmp	r3, #1
 8005684:	d101      	bne.n	800568a <xQueueGenericSendFromISR+0x6e>
 8005686:	2301      	movs	r3, #1
 8005688:	e000      	b.n	800568c <xQueueGenericSendFromISR+0x70>
 800568a:	2300      	movs	r3, #0
 800568c:	2b00      	cmp	r3, #0
 800568e:	d10a      	bne.n	80056a6 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8005690:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005694:	f383 8811 	msr	BASEPRI, r3
 8005698:	f3bf 8f6f 	isb	sy
 800569c:	f3bf 8f4f 	dsb	sy
 80056a0:	623b      	str	r3, [r7, #32]
}
 80056a2:	bf00      	nop
 80056a4:	e7fe      	b.n	80056a4 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80056a6:	f001 ff27 	bl	80074f8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80056aa:	f3ef 8211 	mrs	r2, BASEPRI
 80056ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056b2:	f383 8811 	msr	BASEPRI, r3
 80056b6:	f3bf 8f6f 	isb	sy
 80056ba:	f3bf 8f4f 	dsb	sy
 80056be:	61fa      	str	r2, [r7, #28]
 80056c0:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80056c2:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80056c4:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80056c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80056ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056ce:	429a      	cmp	r2, r3
 80056d0:	d302      	bcc.n	80056d8 <xQueueGenericSendFromISR+0xbc>
 80056d2:	683b      	ldr	r3, [r7, #0]
 80056d4:	2b02      	cmp	r3, #2
 80056d6:	d12f      	bne.n	8005738 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80056d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056da:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80056de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80056e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056e6:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80056e8:	683a      	ldr	r2, [r7, #0]
 80056ea:	68b9      	ldr	r1, [r7, #8]
 80056ec:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80056ee:	f000 f911 	bl	8005914 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80056f2:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80056f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056fa:	d112      	bne.n	8005722 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80056fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005700:	2b00      	cmp	r3, #0
 8005702:	d016      	beq.n	8005732 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005704:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005706:	3324      	adds	r3, #36	; 0x24
 8005708:	4618      	mov	r0, r3
 800570a:	f000 fef7 	bl	80064fc <xTaskRemoveFromEventList>
 800570e:	4603      	mov	r3, r0
 8005710:	2b00      	cmp	r3, #0
 8005712:	d00e      	beq.n	8005732 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	2b00      	cmp	r3, #0
 8005718:	d00b      	beq.n	8005732 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	2201      	movs	r2, #1
 800571e:	601a      	str	r2, [r3, #0]
 8005720:	e007      	b.n	8005732 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005722:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005726:	3301      	adds	r3, #1
 8005728:	b2db      	uxtb	r3, r3
 800572a:	b25a      	sxtb	r2, r3
 800572c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800572e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005732:	2301      	movs	r3, #1
 8005734:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8005736:	e001      	b.n	800573c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005738:	2300      	movs	r3, #0
 800573a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800573c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800573e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005740:	697b      	ldr	r3, [r7, #20]
 8005742:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005746:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005748:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800574a:	4618      	mov	r0, r3
 800574c:	3740      	adds	r7, #64	; 0x40
 800574e:	46bd      	mov	sp, r7
 8005750:	bd80      	pop	{r7, pc}
	...

08005754 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005754:	b580      	push	{r7, lr}
 8005756:	b08c      	sub	sp, #48	; 0x30
 8005758:	af00      	add	r7, sp, #0
 800575a:	60f8      	str	r0, [r7, #12]
 800575c:	60b9      	str	r1, [r7, #8]
 800575e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005760:	2300      	movs	r3, #0
 8005762:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005768:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800576a:	2b00      	cmp	r3, #0
 800576c:	d10a      	bne.n	8005784 <xQueueReceive+0x30>
	__asm volatile
 800576e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005772:	f383 8811 	msr	BASEPRI, r3
 8005776:	f3bf 8f6f 	isb	sy
 800577a:	f3bf 8f4f 	dsb	sy
 800577e:	623b      	str	r3, [r7, #32]
}
 8005780:	bf00      	nop
 8005782:	e7fe      	b.n	8005782 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005784:	68bb      	ldr	r3, [r7, #8]
 8005786:	2b00      	cmp	r3, #0
 8005788:	d103      	bne.n	8005792 <xQueueReceive+0x3e>
 800578a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800578c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800578e:	2b00      	cmp	r3, #0
 8005790:	d101      	bne.n	8005796 <xQueueReceive+0x42>
 8005792:	2301      	movs	r3, #1
 8005794:	e000      	b.n	8005798 <xQueueReceive+0x44>
 8005796:	2300      	movs	r3, #0
 8005798:	2b00      	cmp	r3, #0
 800579a:	d10a      	bne.n	80057b2 <xQueueReceive+0x5e>
	__asm volatile
 800579c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057a0:	f383 8811 	msr	BASEPRI, r3
 80057a4:	f3bf 8f6f 	isb	sy
 80057a8:	f3bf 8f4f 	dsb	sy
 80057ac:	61fb      	str	r3, [r7, #28]
}
 80057ae:	bf00      	nop
 80057b0:	e7fe      	b.n	80057b0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80057b2:	f001 f865 	bl	8006880 <xTaskGetSchedulerState>
 80057b6:	4603      	mov	r3, r0
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d102      	bne.n	80057c2 <xQueueReceive+0x6e>
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d101      	bne.n	80057c6 <xQueueReceive+0x72>
 80057c2:	2301      	movs	r3, #1
 80057c4:	e000      	b.n	80057c8 <xQueueReceive+0x74>
 80057c6:	2300      	movs	r3, #0
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d10a      	bne.n	80057e2 <xQueueReceive+0x8e>
	__asm volatile
 80057cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057d0:	f383 8811 	msr	BASEPRI, r3
 80057d4:	f3bf 8f6f 	isb	sy
 80057d8:	f3bf 8f4f 	dsb	sy
 80057dc:	61bb      	str	r3, [r7, #24]
}
 80057de:	bf00      	nop
 80057e0:	e7fe      	b.n	80057e0 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80057e2:	f001 fda7 	bl	8007334 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80057e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057ea:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80057ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d01f      	beq.n	8005832 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80057f2:	68b9      	ldr	r1, [r7, #8]
 80057f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80057f6:	f000 f8f7 	bl	80059e8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80057fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057fc:	1e5a      	subs	r2, r3, #1
 80057fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005800:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005802:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005804:	691b      	ldr	r3, [r3, #16]
 8005806:	2b00      	cmp	r3, #0
 8005808:	d00f      	beq.n	800582a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800580a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800580c:	3310      	adds	r3, #16
 800580e:	4618      	mov	r0, r3
 8005810:	f000 fe74 	bl	80064fc <xTaskRemoveFromEventList>
 8005814:	4603      	mov	r3, r0
 8005816:	2b00      	cmp	r3, #0
 8005818:	d007      	beq.n	800582a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800581a:	4b3d      	ldr	r3, [pc, #244]	; (8005910 <xQueueReceive+0x1bc>)
 800581c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005820:	601a      	str	r2, [r3, #0]
 8005822:	f3bf 8f4f 	dsb	sy
 8005826:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800582a:	f001 fdb3 	bl	8007394 <vPortExitCritical>
				return pdPASS;
 800582e:	2301      	movs	r3, #1
 8005830:	e069      	b.n	8005906 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	2b00      	cmp	r3, #0
 8005836:	d103      	bne.n	8005840 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005838:	f001 fdac 	bl	8007394 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800583c:	2300      	movs	r3, #0
 800583e:	e062      	b.n	8005906 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005840:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005842:	2b00      	cmp	r3, #0
 8005844:	d106      	bne.n	8005854 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005846:	f107 0310 	add.w	r3, r7, #16
 800584a:	4618      	mov	r0, r3
 800584c:	f000 feba 	bl	80065c4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005850:	2301      	movs	r3, #1
 8005852:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005854:	f001 fd9e 	bl	8007394 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005858:	f000 fc26 	bl	80060a8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800585c:	f001 fd6a 	bl	8007334 <vPortEnterCritical>
 8005860:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005862:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005866:	b25b      	sxtb	r3, r3
 8005868:	f1b3 3fff 	cmp.w	r3, #4294967295
 800586c:	d103      	bne.n	8005876 <xQueueReceive+0x122>
 800586e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005870:	2200      	movs	r2, #0
 8005872:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005876:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005878:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800587c:	b25b      	sxtb	r3, r3
 800587e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005882:	d103      	bne.n	800588c <xQueueReceive+0x138>
 8005884:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005886:	2200      	movs	r2, #0
 8005888:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800588c:	f001 fd82 	bl	8007394 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005890:	1d3a      	adds	r2, r7, #4
 8005892:	f107 0310 	add.w	r3, r7, #16
 8005896:	4611      	mov	r1, r2
 8005898:	4618      	mov	r0, r3
 800589a:	f000 fea9 	bl	80065f0 <xTaskCheckForTimeOut>
 800589e:	4603      	mov	r3, r0
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d123      	bne.n	80058ec <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80058a4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80058a6:	f000 f917 	bl	8005ad8 <prvIsQueueEmpty>
 80058aa:	4603      	mov	r3, r0
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d017      	beq.n	80058e0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80058b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058b2:	3324      	adds	r3, #36	; 0x24
 80058b4:	687a      	ldr	r2, [r7, #4]
 80058b6:	4611      	mov	r1, r2
 80058b8:	4618      	mov	r0, r3
 80058ba:	f000 fdcf 	bl	800645c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80058be:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80058c0:	f000 f8b8 	bl	8005a34 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80058c4:	f000 fbfe 	bl	80060c4 <xTaskResumeAll>
 80058c8:	4603      	mov	r3, r0
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d189      	bne.n	80057e2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80058ce:	4b10      	ldr	r3, [pc, #64]	; (8005910 <xQueueReceive+0x1bc>)
 80058d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80058d4:	601a      	str	r2, [r3, #0]
 80058d6:	f3bf 8f4f 	dsb	sy
 80058da:	f3bf 8f6f 	isb	sy
 80058de:	e780      	b.n	80057e2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80058e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80058e2:	f000 f8a7 	bl	8005a34 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80058e6:	f000 fbed 	bl	80060c4 <xTaskResumeAll>
 80058ea:	e77a      	b.n	80057e2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80058ec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80058ee:	f000 f8a1 	bl	8005a34 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80058f2:	f000 fbe7 	bl	80060c4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80058f6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80058f8:	f000 f8ee 	bl	8005ad8 <prvIsQueueEmpty>
 80058fc:	4603      	mov	r3, r0
 80058fe:	2b00      	cmp	r3, #0
 8005900:	f43f af6f 	beq.w	80057e2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005904:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005906:	4618      	mov	r0, r3
 8005908:	3730      	adds	r7, #48	; 0x30
 800590a:	46bd      	mov	sp, r7
 800590c:	bd80      	pop	{r7, pc}
 800590e:	bf00      	nop
 8005910:	e000ed04 	.word	0xe000ed04

08005914 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005914:	b580      	push	{r7, lr}
 8005916:	b086      	sub	sp, #24
 8005918:	af00      	add	r7, sp, #0
 800591a:	60f8      	str	r0, [r7, #12]
 800591c:	60b9      	str	r1, [r7, #8]
 800591e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005920:	2300      	movs	r3, #0
 8005922:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005928:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800592e:	2b00      	cmp	r3, #0
 8005930:	d10d      	bne.n	800594e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	2b00      	cmp	r3, #0
 8005938:	d14d      	bne.n	80059d6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	689b      	ldr	r3, [r3, #8]
 800593e:	4618      	mov	r0, r3
 8005940:	f000 ffbc 	bl	80068bc <xTaskPriorityDisinherit>
 8005944:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	2200      	movs	r2, #0
 800594a:	609a      	str	r2, [r3, #8]
 800594c:	e043      	b.n	80059d6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	2b00      	cmp	r3, #0
 8005952:	d119      	bne.n	8005988 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	6858      	ldr	r0, [r3, #4]
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800595c:	461a      	mov	r2, r3
 800595e:	68b9      	ldr	r1, [r7, #8]
 8005960:	f002 f81a 	bl	8007998 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	685a      	ldr	r2, [r3, #4]
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800596c:	441a      	add	r2, r3
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	685a      	ldr	r2, [r3, #4]
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	689b      	ldr	r3, [r3, #8]
 800597a:	429a      	cmp	r2, r3
 800597c:	d32b      	bcc.n	80059d6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	681a      	ldr	r2, [r3, #0]
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	605a      	str	r2, [r3, #4]
 8005986:	e026      	b.n	80059d6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	68d8      	ldr	r0, [r3, #12]
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005990:	461a      	mov	r2, r3
 8005992:	68b9      	ldr	r1, [r7, #8]
 8005994:	f002 f800 	bl	8007998 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	68da      	ldr	r2, [r3, #12]
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059a0:	425b      	negs	r3, r3
 80059a2:	441a      	add	r2, r3
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	68da      	ldr	r2, [r3, #12]
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	429a      	cmp	r2, r3
 80059b2:	d207      	bcs.n	80059c4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	689a      	ldr	r2, [r3, #8]
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059bc:	425b      	negs	r3, r3
 80059be:	441a      	add	r2, r3
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	2b02      	cmp	r3, #2
 80059c8:	d105      	bne.n	80059d6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80059ca:	693b      	ldr	r3, [r7, #16]
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d002      	beq.n	80059d6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80059d0:	693b      	ldr	r3, [r7, #16]
 80059d2:	3b01      	subs	r3, #1
 80059d4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80059d6:	693b      	ldr	r3, [r7, #16]
 80059d8:	1c5a      	adds	r2, r3, #1
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80059de:	697b      	ldr	r3, [r7, #20]
}
 80059e0:	4618      	mov	r0, r3
 80059e2:	3718      	adds	r7, #24
 80059e4:	46bd      	mov	sp, r7
 80059e6:	bd80      	pop	{r7, pc}

080059e8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80059e8:	b580      	push	{r7, lr}
 80059ea:	b082      	sub	sp, #8
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	6078      	str	r0, [r7, #4]
 80059f0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d018      	beq.n	8005a2c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	68da      	ldr	r2, [r3, #12]
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a02:	441a      	add	r2, r3
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	68da      	ldr	r2, [r3, #12]
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	689b      	ldr	r3, [r3, #8]
 8005a10:	429a      	cmp	r2, r3
 8005a12:	d303      	bcc.n	8005a1c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681a      	ldr	r2, [r3, #0]
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	68d9      	ldr	r1, [r3, #12]
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a24:	461a      	mov	r2, r3
 8005a26:	6838      	ldr	r0, [r7, #0]
 8005a28:	f001 ffb6 	bl	8007998 <memcpy>
	}
}
 8005a2c:	bf00      	nop
 8005a2e:	3708      	adds	r7, #8
 8005a30:	46bd      	mov	sp, r7
 8005a32:	bd80      	pop	{r7, pc}

08005a34 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005a34:	b580      	push	{r7, lr}
 8005a36:	b084      	sub	sp, #16
 8005a38:	af00      	add	r7, sp, #0
 8005a3a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005a3c:	f001 fc7a 	bl	8007334 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005a46:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005a48:	e011      	b.n	8005a6e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d012      	beq.n	8005a78 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	3324      	adds	r3, #36	; 0x24
 8005a56:	4618      	mov	r0, r3
 8005a58:	f000 fd50 	bl	80064fc <xTaskRemoveFromEventList>
 8005a5c:	4603      	mov	r3, r0
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d001      	beq.n	8005a66 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005a62:	f000 fe27 	bl	80066b4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005a66:	7bfb      	ldrb	r3, [r7, #15]
 8005a68:	3b01      	subs	r3, #1
 8005a6a:	b2db      	uxtb	r3, r3
 8005a6c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005a6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	dce9      	bgt.n	8005a4a <prvUnlockQueue+0x16>
 8005a76:	e000      	b.n	8005a7a <prvUnlockQueue+0x46>
					break;
 8005a78:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	22ff      	movs	r2, #255	; 0xff
 8005a7e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8005a82:	f001 fc87 	bl	8007394 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005a86:	f001 fc55 	bl	8007334 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005a90:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005a92:	e011      	b.n	8005ab8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	691b      	ldr	r3, [r3, #16]
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d012      	beq.n	8005ac2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	3310      	adds	r3, #16
 8005aa0:	4618      	mov	r0, r3
 8005aa2:	f000 fd2b 	bl	80064fc <xTaskRemoveFromEventList>
 8005aa6:	4603      	mov	r3, r0
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d001      	beq.n	8005ab0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005aac:	f000 fe02 	bl	80066b4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005ab0:	7bbb      	ldrb	r3, [r7, #14]
 8005ab2:	3b01      	subs	r3, #1
 8005ab4:	b2db      	uxtb	r3, r3
 8005ab6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005ab8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	dce9      	bgt.n	8005a94 <prvUnlockQueue+0x60>
 8005ac0:	e000      	b.n	8005ac4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005ac2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	22ff      	movs	r2, #255	; 0xff
 8005ac8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005acc:	f001 fc62 	bl	8007394 <vPortExitCritical>
}
 8005ad0:	bf00      	nop
 8005ad2:	3710      	adds	r7, #16
 8005ad4:	46bd      	mov	sp, r7
 8005ad6:	bd80      	pop	{r7, pc}

08005ad8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005ad8:	b580      	push	{r7, lr}
 8005ada:	b084      	sub	sp, #16
 8005adc:	af00      	add	r7, sp, #0
 8005ade:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005ae0:	f001 fc28 	bl	8007334 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d102      	bne.n	8005af2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005aec:	2301      	movs	r3, #1
 8005aee:	60fb      	str	r3, [r7, #12]
 8005af0:	e001      	b.n	8005af6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005af2:	2300      	movs	r3, #0
 8005af4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005af6:	f001 fc4d 	bl	8007394 <vPortExitCritical>

	return xReturn;
 8005afa:	68fb      	ldr	r3, [r7, #12]
}
 8005afc:	4618      	mov	r0, r3
 8005afe:	3710      	adds	r7, #16
 8005b00:	46bd      	mov	sp, r7
 8005b02:	bd80      	pop	{r7, pc}

08005b04 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005b04:	b580      	push	{r7, lr}
 8005b06:	b084      	sub	sp, #16
 8005b08:	af00      	add	r7, sp, #0
 8005b0a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005b0c:	f001 fc12 	bl	8007334 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b18:	429a      	cmp	r2, r3
 8005b1a:	d102      	bne.n	8005b22 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005b1c:	2301      	movs	r3, #1
 8005b1e:	60fb      	str	r3, [r7, #12]
 8005b20:	e001      	b.n	8005b26 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005b22:	2300      	movs	r3, #0
 8005b24:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005b26:	f001 fc35 	bl	8007394 <vPortExitCritical>

	return xReturn;
 8005b2a:	68fb      	ldr	r3, [r7, #12]
}
 8005b2c:	4618      	mov	r0, r3
 8005b2e:	3710      	adds	r7, #16
 8005b30:	46bd      	mov	sp, r7
 8005b32:	bd80      	pop	{r7, pc}

08005b34 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005b34:	b480      	push	{r7}
 8005b36:	b085      	sub	sp, #20
 8005b38:	af00      	add	r7, sp, #0
 8005b3a:	6078      	str	r0, [r7, #4]
 8005b3c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005b3e:	2300      	movs	r3, #0
 8005b40:	60fb      	str	r3, [r7, #12]
 8005b42:	e014      	b.n	8005b6e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005b44:	4a0f      	ldr	r2, [pc, #60]	; (8005b84 <vQueueAddToRegistry+0x50>)
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d10b      	bne.n	8005b68 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005b50:	490c      	ldr	r1, [pc, #48]	; (8005b84 <vQueueAddToRegistry+0x50>)
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	683a      	ldr	r2, [r7, #0]
 8005b56:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005b5a:	4a0a      	ldr	r2, [pc, #40]	; (8005b84 <vQueueAddToRegistry+0x50>)
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	00db      	lsls	r3, r3, #3
 8005b60:	4413      	add	r3, r2
 8005b62:	687a      	ldr	r2, [r7, #4]
 8005b64:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005b66:	e006      	b.n	8005b76 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	3301      	adds	r3, #1
 8005b6c:	60fb      	str	r3, [r7, #12]
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	2b07      	cmp	r3, #7
 8005b72:	d9e7      	bls.n	8005b44 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005b74:	bf00      	nop
 8005b76:	bf00      	nop
 8005b78:	3714      	adds	r7, #20
 8005b7a:	46bd      	mov	sp, r7
 8005b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b80:	4770      	bx	lr
 8005b82:	bf00      	nop
 8005b84:	20000a20 	.word	0x20000a20

08005b88 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005b88:	b580      	push	{r7, lr}
 8005b8a:	b086      	sub	sp, #24
 8005b8c:	af00      	add	r7, sp, #0
 8005b8e:	60f8      	str	r0, [r7, #12]
 8005b90:	60b9      	str	r1, [r7, #8]
 8005b92:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005b98:	f001 fbcc 	bl	8007334 <vPortEnterCritical>
 8005b9c:	697b      	ldr	r3, [r7, #20]
 8005b9e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005ba2:	b25b      	sxtb	r3, r3
 8005ba4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ba8:	d103      	bne.n	8005bb2 <vQueueWaitForMessageRestricted+0x2a>
 8005baa:	697b      	ldr	r3, [r7, #20]
 8005bac:	2200      	movs	r2, #0
 8005bae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005bb2:	697b      	ldr	r3, [r7, #20]
 8005bb4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005bb8:	b25b      	sxtb	r3, r3
 8005bba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bbe:	d103      	bne.n	8005bc8 <vQueueWaitForMessageRestricted+0x40>
 8005bc0:	697b      	ldr	r3, [r7, #20]
 8005bc2:	2200      	movs	r2, #0
 8005bc4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005bc8:	f001 fbe4 	bl	8007394 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005bcc:	697b      	ldr	r3, [r7, #20]
 8005bce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d106      	bne.n	8005be2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005bd4:	697b      	ldr	r3, [r7, #20]
 8005bd6:	3324      	adds	r3, #36	; 0x24
 8005bd8:	687a      	ldr	r2, [r7, #4]
 8005bda:	68b9      	ldr	r1, [r7, #8]
 8005bdc:	4618      	mov	r0, r3
 8005bde:	f000 fc61 	bl	80064a4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005be2:	6978      	ldr	r0, [r7, #20]
 8005be4:	f7ff ff26 	bl	8005a34 <prvUnlockQueue>
	}
 8005be8:	bf00      	nop
 8005bea:	3718      	adds	r7, #24
 8005bec:	46bd      	mov	sp, r7
 8005bee:	bd80      	pop	{r7, pc}

08005bf0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005bf0:	b580      	push	{r7, lr}
 8005bf2:	b08e      	sub	sp, #56	; 0x38
 8005bf4:	af04      	add	r7, sp, #16
 8005bf6:	60f8      	str	r0, [r7, #12]
 8005bf8:	60b9      	str	r1, [r7, #8]
 8005bfa:	607a      	str	r2, [r7, #4]
 8005bfc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005bfe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d10a      	bne.n	8005c1a <xTaskCreateStatic+0x2a>
	__asm volatile
 8005c04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c08:	f383 8811 	msr	BASEPRI, r3
 8005c0c:	f3bf 8f6f 	isb	sy
 8005c10:	f3bf 8f4f 	dsb	sy
 8005c14:	623b      	str	r3, [r7, #32]
}
 8005c16:	bf00      	nop
 8005c18:	e7fe      	b.n	8005c18 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005c1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d10a      	bne.n	8005c36 <xTaskCreateStatic+0x46>
	__asm volatile
 8005c20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c24:	f383 8811 	msr	BASEPRI, r3
 8005c28:	f3bf 8f6f 	isb	sy
 8005c2c:	f3bf 8f4f 	dsb	sy
 8005c30:	61fb      	str	r3, [r7, #28]
}
 8005c32:	bf00      	nop
 8005c34:	e7fe      	b.n	8005c34 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005c36:	23bc      	movs	r3, #188	; 0xbc
 8005c38:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005c3a:	693b      	ldr	r3, [r7, #16]
 8005c3c:	2bbc      	cmp	r3, #188	; 0xbc
 8005c3e:	d00a      	beq.n	8005c56 <xTaskCreateStatic+0x66>
	__asm volatile
 8005c40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c44:	f383 8811 	msr	BASEPRI, r3
 8005c48:	f3bf 8f6f 	isb	sy
 8005c4c:	f3bf 8f4f 	dsb	sy
 8005c50:	61bb      	str	r3, [r7, #24]
}
 8005c52:	bf00      	nop
 8005c54:	e7fe      	b.n	8005c54 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005c56:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005c58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d01e      	beq.n	8005c9c <xTaskCreateStatic+0xac>
 8005c5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d01b      	beq.n	8005c9c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005c64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c66:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005c68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c6a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005c6c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c70:	2202      	movs	r2, #2
 8005c72:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005c76:	2300      	movs	r3, #0
 8005c78:	9303      	str	r3, [sp, #12]
 8005c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c7c:	9302      	str	r3, [sp, #8]
 8005c7e:	f107 0314 	add.w	r3, r7, #20
 8005c82:	9301      	str	r3, [sp, #4]
 8005c84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c86:	9300      	str	r3, [sp, #0]
 8005c88:	683b      	ldr	r3, [r7, #0]
 8005c8a:	687a      	ldr	r2, [r7, #4]
 8005c8c:	68b9      	ldr	r1, [r7, #8]
 8005c8e:	68f8      	ldr	r0, [r7, #12]
 8005c90:	f000 f850 	bl	8005d34 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005c94:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005c96:	f000 f8f3 	bl	8005e80 <prvAddNewTaskToReadyList>
 8005c9a:	e001      	b.n	8005ca0 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8005c9c:	2300      	movs	r3, #0
 8005c9e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005ca0:	697b      	ldr	r3, [r7, #20]
	}
 8005ca2:	4618      	mov	r0, r3
 8005ca4:	3728      	adds	r7, #40	; 0x28
 8005ca6:	46bd      	mov	sp, r7
 8005ca8:	bd80      	pop	{r7, pc}

08005caa <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005caa:	b580      	push	{r7, lr}
 8005cac:	b08c      	sub	sp, #48	; 0x30
 8005cae:	af04      	add	r7, sp, #16
 8005cb0:	60f8      	str	r0, [r7, #12]
 8005cb2:	60b9      	str	r1, [r7, #8]
 8005cb4:	603b      	str	r3, [r7, #0]
 8005cb6:	4613      	mov	r3, r2
 8005cb8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005cba:	88fb      	ldrh	r3, [r7, #6]
 8005cbc:	009b      	lsls	r3, r3, #2
 8005cbe:	4618      	mov	r0, r3
 8005cc0:	f001 fc5a 	bl	8007578 <pvPortMalloc>
 8005cc4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005cc6:	697b      	ldr	r3, [r7, #20]
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d00e      	beq.n	8005cea <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005ccc:	20bc      	movs	r0, #188	; 0xbc
 8005cce:	f001 fc53 	bl	8007578 <pvPortMalloc>
 8005cd2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005cd4:	69fb      	ldr	r3, [r7, #28]
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d003      	beq.n	8005ce2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005cda:	69fb      	ldr	r3, [r7, #28]
 8005cdc:	697a      	ldr	r2, [r7, #20]
 8005cde:	631a      	str	r2, [r3, #48]	; 0x30
 8005ce0:	e005      	b.n	8005cee <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005ce2:	6978      	ldr	r0, [r7, #20]
 8005ce4:	f001 fd14 	bl	8007710 <vPortFree>
 8005ce8:	e001      	b.n	8005cee <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005cea:	2300      	movs	r3, #0
 8005cec:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005cee:	69fb      	ldr	r3, [r7, #28]
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d017      	beq.n	8005d24 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005cf4:	69fb      	ldr	r3, [r7, #28]
 8005cf6:	2200      	movs	r2, #0
 8005cf8:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005cfc:	88fa      	ldrh	r2, [r7, #6]
 8005cfe:	2300      	movs	r3, #0
 8005d00:	9303      	str	r3, [sp, #12]
 8005d02:	69fb      	ldr	r3, [r7, #28]
 8005d04:	9302      	str	r3, [sp, #8]
 8005d06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d08:	9301      	str	r3, [sp, #4]
 8005d0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d0c:	9300      	str	r3, [sp, #0]
 8005d0e:	683b      	ldr	r3, [r7, #0]
 8005d10:	68b9      	ldr	r1, [r7, #8]
 8005d12:	68f8      	ldr	r0, [r7, #12]
 8005d14:	f000 f80e 	bl	8005d34 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005d18:	69f8      	ldr	r0, [r7, #28]
 8005d1a:	f000 f8b1 	bl	8005e80 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005d1e:	2301      	movs	r3, #1
 8005d20:	61bb      	str	r3, [r7, #24]
 8005d22:	e002      	b.n	8005d2a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005d24:	f04f 33ff 	mov.w	r3, #4294967295
 8005d28:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005d2a:	69bb      	ldr	r3, [r7, #24]
	}
 8005d2c:	4618      	mov	r0, r3
 8005d2e:	3720      	adds	r7, #32
 8005d30:	46bd      	mov	sp, r7
 8005d32:	bd80      	pop	{r7, pc}

08005d34 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005d34:	b580      	push	{r7, lr}
 8005d36:	b088      	sub	sp, #32
 8005d38:	af00      	add	r7, sp, #0
 8005d3a:	60f8      	str	r0, [r7, #12]
 8005d3c:	60b9      	str	r1, [r7, #8]
 8005d3e:	607a      	str	r2, [r7, #4]
 8005d40:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005d42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d44:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	009b      	lsls	r3, r3, #2
 8005d4a:	461a      	mov	r2, r3
 8005d4c:	21a5      	movs	r1, #165	; 0xa5
 8005d4e:	f001 fe31 	bl	80079b4 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005d52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d54:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005d5c:	3b01      	subs	r3, #1
 8005d5e:	009b      	lsls	r3, r3, #2
 8005d60:	4413      	add	r3, r2
 8005d62:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005d64:	69bb      	ldr	r3, [r7, #24]
 8005d66:	f023 0307 	bic.w	r3, r3, #7
 8005d6a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005d6c:	69bb      	ldr	r3, [r7, #24]
 8005d6e:	f003 0307 	and.w	r3, r3, #7
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d00a      	beq.n	8005d8c <prvInitialiseNewTask+0x58>
	__asm volatile
 8005d76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d7a:	f383 8811 	msr	BASEPRI, r3
 8005d7e:	f3bf 8f6f 	isb	sy
 8005d82:	f3bf 8f4f 	dsb	sy
 8005d86:	617b      	str	r3, [r7, #20]
}
 8005d88:	bf00      	nop
 8005d8a:	e7fe      	b.n	8005d8a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005d8c:	68bb      	ldr	r3, [r7, #8]
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d01f      	beq.n	8005dd2 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005d92:	2300      	movs	r3, #0
 8005d94:	61fb      	str	r3, [r7, #28]
 8005d96:	e012      	b.n	8005dbe <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005d98:	68ba      	ldr	r2, [r7, #8]
 8005d9a:	69fb      	ldr	r3, [r7, #28]
 8005d9c:	4413      	add	r3, r2
 8005d9e:	7819      	ldrb	r1, [r3, #0]
 8005da0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005da2:	69fb      	ldr	r3, [r7, #28]
 8005da4:	4413      	add	r3, r2
 8005da6:	3334      	adds	r3, #52	; 0x34
 8005da8:	460a      	mov	r2, r1
 8005daa:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005dac:	68ba      	ldr	r2, [r7, #8]
 8005dae:	69fb      	ldr	r3, [r7, #28]
 8005db0:	4413      	add	r3, r2
 8005db2:	781b      	ldrb	r3, [r3, #0]
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d006      	beq.n	8005dc6 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005db8:	69fb      	ldr	r3, [r7, #28]
 8005dba:	3301      	adds	r3, #1
 8005dbc:	61fb      	str	r3, [r7, #28]
 8005dbe:	69fb      	ldr	r3, [r7, #28]
 8005dc0:	2b0f      	cmp	r3, #15
 8005dc2:	d9e9      	bls.n	8005d98 <prvInitialiseNewTask+0x64>
 8005dc4:	e000      	b.n	8005dc8 <prvInitialiseNewTask+0x94>
			{
				break;
 8005dc6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005dc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dca:	2200      	movs	r2, #0
 8005dcc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005dd0:	e003      	b.n	8005dda <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005dd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dd4:	2200      	movs	r2, #0
 8005dd6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005dda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ddc:	2b37      	cmp	r3, #55	; 0x37
 8005dde:	d901      	bls.n	8005de4 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005de0:	2337      	movs	r3, #55	; 0x37
 8005de2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005de4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005de6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005de8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005dea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005dee:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005df0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005df2:	2200      	movs	r2, #0
 8005df4:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005df6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005df8:	3304      	adds	r3, #4
 8005dfa:	4618      	mov	r0, r3
 8005dfc:	f7ff f978 	bl	80050f0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005e00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e02:	3318      	adds	r3, #24
 8005e04:	4618      	mov	r0, r3
 8005e06:	f7ff f973 	bl	80050f0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005e0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e0c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005e0e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005e10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e12:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005e16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e18:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005e1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e1c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005e1e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005e20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e22:	2200      	movs	r2, #0
 8005e24:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005e28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e2a:	2200      	movs	r2, #0
 8005e2c:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8005e30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e32:	3354      	adds	r3, #84	; 0x54
 8005e34:	2260      	movs	r2, #96	; 0x60
 8005e36:	2100      	movs	r1, #0
 8005e38:	4618      	mov	r0, r3
 8005e3a:	f001 fdbb 	bl	80079b4 <memset>
 8005e3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e40:	4a0c      	ldr	r2, [pc, #48]	; (8005e74 <prvInitialiseNewTask+0x140>)
 8005e42:	659a      	str	r2, [r3, #88]	; 0x58
 8005e44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e46:	4a0c      	ldr	r2, [pc, #48]	; (8005e78 <prvInitialiseNewTask+0x144>)
 8005e48:	65da      	str	r2, [r3, #92]	; 0x5c
 8005e4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e4c:	4a0b      	ldr	r2, [pc, #44]	; (8005e7c <prvInitialiseNewTask+0x148>)
 8005e4e:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005e50:	683a      	ldr	r2, [r7, #0]
 8005e52:	68f9      	ldr	r1, [r7, #12]
 8005e54:	69b8      	ldr	r0, [r7, #24]
 8005e56:	f001 f941 	bl	80070dc <pxPortInitialiseStack>
 8005e5a:	4602      	mov	r2, r0
 8005e5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e5e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005e60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d002      	beq.n	8005e6c <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005e66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e68:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005e6a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005e6c:	bf00      	nop
 8005e6e:	3720      	adds	r7, #32
 8005e70:	46bd      	mov	sp, r7
 8005e72:	bd80      	pop	{r7, pc}
 8005e74:	08007c10 	.word	0x08007c10
 8005e78:	08007c30 	.word	0x08007c30
 8005e7c:	08007bf0 	.word	0x08007bf0

08005e80 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005e80:	b580      	push	{r7, lr}
 8005e82:	b082      	sub	sp, #8
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005e88:	f001 fa54 	bl	8007334 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005e8c:	4b2d      	ldr	r3, [pc, #180]	; (8005f44 <prvAddNewTaskToReadyList+0xc4>)
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	3301      	adds	r3, #1
 8005e92:	4a2c      	ldr	r2, [pc, #176]	; (8005f44 <prvAddNewTaskToReadyList+0xc4>)
 8005e94:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005e96:	4b2c      	ldr	r3, [pc, #176]	; (8005f48 <prvAddNewTaskToReadyList+0xc8>)
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d109      	bne.n	8005eb2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005e9e:	4a2a      	ldr	r2, [pc, #168]	; (8005f48 <prvAddNewTaskToReadyList+0xc8>)
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005ea4:	4b27      	ldr	r3, [pc, #156]	; (8005f44 <prvAddNewTaskToReadyList+0xc4>)
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	2b01      	cmp	r3, #1
 8005eaa:	d110      	bne.n	8005ece <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005eac:	f000 fc26 	bl	80066fc <prvInitialiseTaskLists>
 8005eb0:	e00d      	b.n	8005ece <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005eb2:	4b26      	ldr	r3, [pc, #152]	; (8005f4c <prvAddNewTaskToReadyList+0xcc>)
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d109      	bne.n	8005ece <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005eba:	4b23      	ldr	r3, [pc, #140]	; (8005f48 <prvAddNewTaskToReadyList+0xc8>)
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ec4:	429a      	cmp	r2, r3
 8005ec6:	d802      	bhi.n	8005ece <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005ec8:	4a1f      	ldr	r2, [pc, #124]	; (8005f48 <prvAddNewTaskToReadyList+0xc8>)
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005ece:	4b20      	ldr	r3, [pc, #128]	; (8005f50 <prvAddNewTaskToReadyList+0xd0>)
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	3301      	adds	r3, #1
 8005ed4:	4a1e      	ldr	r2, [pc, #120]	; (8005f50 <prvAddNewTaskToReadyList+0xd0>)
 8005ed6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005ed8:	4b1d      	ldr	r3, [pc, #116]	; (8005f50 <prvAddNewTaskToReadyList+0xd0>)
 8005eda:	681a      	ldr	r2, [r3, #0]
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ee4:	4b1b      	ldr	r3, [pc, #108]	; (8005f54 <prvAddNewTaskToReadyList+0xd4>)
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	429a      	cmp	r2, r3
 8005eea:	d903      	bls.n	8005ef4 <prvAddNewTaskToReadyList+0x74>
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ef0:	4a18      	ldr	r2, [pc, #96]	; (8005f54 <prvAddNewTaskToReadyList+0xd4>)
 8005ef2:	6013      	str	r3, [r2, #0]
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ef8:	4613      	mov	r3, r2
 8005efa:	009b      	lsls	r3, r3, #2
 8005efc:	4413      	add	r3, r2
 8005efe:	009b      	lsls	r3, r3, #2
 8005f00:	4a15      	ldr	r2, [pc, #84]	; (8005f58 <prvAddNewTaskToReadyList+0xd8>)
 8005f02:	441a      	add	r2, r3
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	3304      	adds	r3, #4
 8005f08:	4619      	mov	r1, r3
 8005f0a:	4610      	mov	r0, r2
 8005f0c:	f7ff f8fd 	bl	800510a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005f10:	f001 fa40 	bl	8007394 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005f14:	4b0d      	ldr	r3, [pc, #52]	; (8005f4c <prvAddNewTaskToReadyList+0xcc>)
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d00e      	beq.n	8005f3a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005f1c:	4b0a      	ldr	r3, [pc, #40]	; (8005f48 <prvAddNewTaskToReadyList+0xc8>)
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f26:	429a      	cmp	r2, r3
 8005f28:	d207      	bcs.n	8005f3a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005f2a:	4b0c      	ldr	r3, [pc, #48]	; (8005f5c <prvAddNewTaskToReadyList+0xdc>)
 8005f2c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f30:	601a      	str	r2, [r3, #0]
 8005f32:	f3bf 8f4f 	dsb	sy
 8005f36:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005f3a:	bf00      	nop
 8005f3c:	3708      	adds	r7, #8
 8005f3e:	46bd      	mov	sp, r7
 8005f40:	bd80      	pop	{r7, pc}
 8005f42:	bf00      	nop
 8005f44:	20000f34 	.word	0x20000f34
 8005f48:	20000a60 	.word	0x20000a60
 8005f4c:	20000f40 	.word	0x20000f40
 8005f50:	20000f50 	.word	0x20000f50
 8005f54:	20000f3c 	.word	0x20000f3c
 8005f58:	20000a64 	.word	0x20000a64
 8005f5c:	e000ed04 	.word	0xe000ed04

08005f60 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005f60:	b580      	push	{r7, lr}
 8005f62:	b084      	sub	sp, #16
 8005f64:	af00      	add	r7, sp, #0
 8005f66:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005f68:	2300      	movs	r3, #0
 8005f6a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d017      	beq.n	8005fa2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005f72:	4b13      	ldr	r3, [pc, #76]	; (8005fc0 <vTaskDelay+0x60>)
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d00a      	beq.n	8005f90 <vTaskDelay+0x30>
	__asm volatile
 8005f7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f7e:	f383 8811 	msr	BASEPRI, r3
 8005f82:	f3bf 8f6f 	isb	sy
 8005f86:	f3bf 8f4f 	dsb	sy
 8005f8a:	60bb      	str	r3, [r7, #8]
}
 8005f8c:	bf00      	nop
 8005f8e:	e7fe      	b.n	8005f8e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005f90:	f000 f88a 	bl	80060a8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005f94:	2100      	movs	r1, #0
 8005f96:	6878      	ldr	r0, [r7, #4]
 8005f98:	f000 fcfe 	bl	8006998 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005f9c:	f000 f892 	bl	80060c4 <xTaskResumeAll>
 8005fa0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d107      	bne.n	8005fb8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8005fa8:	4b06      	ldr	r3, [pc, #24]	; (8005fc4 <vTaskDelay+0x64>)
 8005faa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005fae:	601a      	str	r2, [r3, #0]
 8005fb0:	f3bf 8f4f 	dsb	sy
 8005fb4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005fb8:	bf00      	nop
 8005fba:	3710      	adds	r7, #16
 8005fbc:	46bd      	mov	sp, r7
 8005fbe:	bd80      	pop	{r7, pc}
 8005fc0:	20000f5c 	.word	0x20000f5c
 8005fc4:	e000ed04 	.word	0xe000ed04

08005fc8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005fc8:	b580      	push	{r7, lr}
 8005fca:	b08a      	sub	sp, #40	; 0x28
 8005fcc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005fce:	2300      	movs	r3, #0
 8005fd0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005fd2:	2300      	movs	r3, #0
 8005fd4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005fd6:	463a      	mov	r2, r7
 8005fd8:	1d39      	adds	r1, r7, #4
 8005fda:	f107 0308 	add.w	r3, r7, #8
 8005fde:	4618      	mov	r0, r3
 8005fe0:	f7ff f832 	bl	8005048 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005fe4:	6839      	ldr	r1, [r7, #0]
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	68ba      	ldr	r2, [r7, #8]
 8005fea:	9202      	str	r2, [sp, #8]
 8005fec:	9301      	str	r3, [sp, #4]
 8005fee:	2300      	movs	r3, #0
 8005ff0:	9300      	str	r3, [sp, #0]
 8005ff2:	2300      	movs	r3, #0
 8005ff4:	460a      	mov	r2, r1
 8005ff6:	4924      	ldr	r1, [pc, #144]	; (8006088 <vTaskStartScheduler+0xc0>)
 8005ff8:	4824      	ldr	r0, [pc, #144]	; (800608c <vTaskStartScheduler+0xc4>)
 8005ffa:	f7ff fdf9 	bl	8005bf0 <xTaskCreateStatic>
 8005ffe:	4603      	mov	r3, r0
 8006000:	4a23      	ldr	r2, [pc, #140]	; (8006090 <vTaskStartScheduler+0xc8>)
 8006002:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006004:	4b22      	ldr	r3, [pc, #136]	; (8006090 <vTaskStartScheduler+0xc8>)
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	2b00      	cmp	r3, #0
 800600a:	d002      	beq.n	8006012 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800600c:	2301      	movs	r3, #1
 800600e:	617b      	str	r3, [r7, #20]
 8006010:	e001      	b.n	8006016 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006012:	2300      	movs	r3, #0
 8006014:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006016:	697b      	ldr	r3, [r7, #20]
 8006018:	2b01      	cmp	r3, #1
 800601a:	d102      	bne.n	8006022 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800601c:	f000 fd10 	bl	8006a40 <xTimerCreateTimerTask>
 8006020:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006022:	697b      	ldr	r3, [r7, #20]
 8006024:	2b01      	cmp	r3, #1
 8006026:	d11b      	bne.n	8006060 <vTaskStartScheduler+0x98>
	__asm volatile
 8006028:	f04f 0350 	mov.w	r3, #80	; 0x50
 800602c:	f383 8811 	msr	BASEPRI, r3
 8006030:	f3bf 8f6f 	isb	sy
 8006034:	f3bf 8f4f 	dsb	sy
 8006038:	613b      	str	r3, [r7, #16]
}
 800603a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800603c:	4b15      	ldr	r3, [pc, #84]	; (8006094 <vTaskStartScheduler+0xcc>)
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	3354      	adds	r3, #84	; 0x54
 8006042:	4a15      	ldr	r2, [pc, #84]	; (8006098 <vTaskStartScheduler+0xd0>)
 8006044:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006046:	4b15      	ldr	r3, [pc, #84]	; (800609c <vTaskStartScheduler+0xd4>)
 8006048:	f04f 32ff 	mov.w	r2, #4294967295
 800604c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800604e:	4b14      	ldr	r3, [pc, #80]	; (80060a0 <vTaskStartScheduler+0xd8>)
 8006050:	2201      	movs	r2, #1
 8006052:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006054:	4b13      	ldr	r3, [pc, #76]	; (80060a4 <vTaskStartScheduler+0xdc>)
 8006056:	2200      	movs	r2, #0
 8006058:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800605a:	f001 f8c9 	bl	80071f0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800605e:	e00e      	b.n	800607e <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006060:	697b      	ldr	r3, [r7, #20]
 8006062:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006066:	d10a      	bne.n	800607e <vTaskStartScheduler+0xb6>
	__asm volatile
 8006068:	f04f 0350 	mov.w	r3, #80	; 0x50
 800606c:	f383 8811 	msr	BASEPRI, r3
 8006070:	f3bf 8f6f 	isb	sy
 8006074:	f3bf 8f4f 	dsb	sy
 8006078:	60fb      	str	r3, [r7, #12]
}
 800607a:	bf00      	nop
 800607c:	e7fe      	b.n	800607c <vTaskStartScheduler+0xb4>
}
 800607e:	bf00      	nop
 8006080:	3718      	adds	r7, #24
 8006082:	46bd      	mov	sp, r7
 8006084:	bd80      	pop	{r7, pc}
 8006086:	bf00      	nop
 8006088:	08007b6c 	.word	0x08007b6c
 800608c:	080066cd 	.word	0x080066cd
 8006090:	20000f58 	.word	0x20000f58
 8006094:	20000a60 	.word	0x20000a60
 8006098:	20000020 	.word	0x20000020
 800609c:	20000f54 	.word	0x20000f54
 80060a0:	20000f40 	.word	0x20000f40
 80060a4:	20000f38 	.word	0x20000f38

080060a8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80060a8:	b480      	push	{r7}
 80060aa:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80060ac:	4b04      	ldr	r3, [pc, #16]	; (80060c0 <vTaskSuspendAll+0x18>)
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	3301      	adds	r3, #1
 80060b2:	4a03      	ldr	r2, [pc, #12]	; (80060c0 <vTaskSuspendAll+0x18>)
 80060b4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80060b6:	bf00      	nop
 80060b8:	46bd      	mov	sp, r7
 80060ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060be:	4770      	bx	lr
 80060c0:	20000f5c 	.word	0x20000f5c

080060c4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80060c4:	b580      	push	{r7, lr}
 80060c6:	b084      	sub	sp, #16
 80060c8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80060ca:	2300      	movs	r3, #0
 80060cc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80060ce:	2300      	movs	r3, #0
 80060d0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80060d2:	4b42      	ldr	r3, [pc, #264]	; (80061dc <xTaskResumeAll+0x118>)
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d10a      	bne.n	80060f0 <xTaskResumeAll+0x2c>
	__asm volatile
 80060da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060de:	f383 8811 	msr	BASEPRI, r3
 80060e2:	f3bf 8f6f 	isb	sy
 80060e6:	f3bf 8f4f 	dsb	sy
 80060ea:	603b      	str	r3, [r7, #0]
}
 80060ec:	bf00      	nop
 80060ee:	e7fe      	b.n	80060ee <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80060f0:	f001 f920 	bl	8007334 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80060f4:	4b39      	ldr	r3, [pc, #228]	; (80061dc <xTaskResumeAll+0x118>)
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	3b01      	subs	r3, #1
 80060fa:	4a38      	ldr	r2, [pc, #224]	; (80061dc <xTaskResumeAll+0x118>)
 80060fc:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80060fe:	4b37      	ldr	r3, [pc, #220]	; (80061dc <xTaskResumeAll+0x118>)
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	2b00      	cmp	r3, #0
 8006104:	d162      	bne.n	80061cc <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006106:	4b36      	ldr	r3, [pc, #216]	; (80061e0 <xTaskResumeAll+0x11c>)
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	2b00      	cmp	r3, #0
 800610c:	d05e      	beq.n	80061cc <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800610e:	e02f      	b.n	8006170 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006110:	4b34      	ldr	r3, [pc, #208]	; (80061e4 <xTaskResumeAll+0x120>)
 8006112:	68db      	ldr	r3, [r3, #12]
 8006114:	68db      	ldr	r3, [r3, #12]
 8006116:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	3318      	adds	r3, #24
 800611c:	4618      	mov	r0, r3
 800611e:	f7ff f851 	bl	80051c4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	3304      	adds	r3, #4
 8006126:	4618      	mov	r0, r3
 8006128:	f7ff f84c 	bl	80051c4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006130:	4b2d      	ldr	r3, [pc, #180]	; (80061e8 <xTaskResumeAll+0x124>)
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	429a      	cmp	r2, r3
 8006136:	d903      	bls.n	8006140 <xTaskResumeAll+0x7c>
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800613c:	4a2a      	ldr	r2, [pc, #168]	; (80061e8 <xTaskResumeAll+0x124>)
 800613e:	6013      	str	r3, [r2, #0]
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006144:	4613      	mov	r3, r2
 8006146:	009b      	lsls	r3, r3, #2
 8006148:	4413      	add	r3, r2
 800614a:	009b      	lsls	r3, r3, #2
 800614c:	4a27      	ldr	r2, [pc, #156]	; (80061ec <xTaskResumeAll+0x128>)
 800614e:	441a      	add	r2, r3
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	3304      	adds	r3, #4
 8006154:	4619      	mov	r1, r3
 8006156:	4610      	mov	r0, r2
 8006158:	f7fe ffd7 	bl	800510a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006160:	4b23      	ldr	r3, [pc, #140]	; (80061f0 <xTaskResumeAll+0x12c>)
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006166:	429a      	cmp	r2, r3
 8006168:	d302      	bcc.n	8006170 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800616a:	4b22      	ldr	r3, [pc, #136]	; (80061f4 <xTaskResumeAll+0x130>)
 800616c:	2201      	movs	r2, #1
 800616e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006170:	4b1c      	ldr	r3, [pc, #112]	; (80061e4 <xTaskResumeAll+0x120>)
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	2b00      	cmp	r3, #0
 8006176:	d1cb      	bne.n	8006110 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	2b00      	cmp	r3, #0
 800617c:	d001      	beq.n	8006182 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800617e:	f000 fb5f 	bl	8006840 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006182:	4b1d      	ldr	r3, [pc, #116]	; (80061f8 <xTaskResumeAll+0x134>)
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	2b00      	cmp	r3, #0
 800618c:	d010      	beq.n	80061b0 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800618e:	f000 f847 	bl	8006220 <xTaskIncrementTick>
 8006192:	4603      	mov	r3, r0
 8006194:	2b00      	cmp	r3, #0
 8006196:	d002      	beq.n	800619e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8006198:	4b16      	ldr	r3, [pc, #88]	; (80061f4 <xTaskResumeAll+0x130>)
 800619a:	2201      	movs	r2, #1
 800619c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	3b01      	subs	r3, #1
 80061a2:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d1f1      	bne.n	800618e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80061aa:	4b13      	ldr	r3, [pc, #76]	; (80061f8 <xTaskResumeAll+0x134>)
 80061ac:	2200      	movs	r2, #0
 80061ae:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80061b0:	4b10      	ldr	r3, [pc, #64]	; (80061f4 <xTaskResumeAll+0x130>)
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d009      	beq.n	80061cc <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80061b8:	2301      	movs	r3, #1
 80061ba:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80061bc:	4b0f      	ldr	r3, [pc, #60]	; (80061fc <xTaskResumeAll+0x138>)
 80061be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80061c2:	601a      	str	r2, [r3, #0]
 80061c4:	f3bf 8f4f 	dsb	sy
 80061c8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80061cc:	f001 f8e2 	bl	8007394 <vPortExitCritical>

	return xAlreadyYielded;
 80061d0:	68bb      	ldr	r3, [r7, #8]
}
 80061d2:	4618      	mov	r0, r3
 80061d4:	3710      	adds	r7, #16
 80061d6:	46bd      	mov	sp, r7
 80061d8:	bd80      	pop	{r7, pc}
 80061da:	bf00      	nop
 80061dc:	20000f5c 	.word	0x20000f5c
 80061e0:	20000f34 	.word	0x20000f34
 80061e4:	20000ef4 	.word	0x20000ef4
 80061e8:	20000f3c 	.word	0x20000f3c
 80061ec:	20000a64 	.word	0x20000a64
 80061f0:	20000a60 	.word	0x20000a60
 80061f4:	20000f48 	.word	0x20000f48
 80061f8:	20000f44 	.word	0x20000f44
 80061fc:	e000ed04 	.word	0xe000ed04

08006200 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006200:	b480      	push	{r7}
 8006202:	b083      	sub	sp, #12
 8006204:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006206:	4b05      	ldr	r3, [pc, #20]	; (800621c <xTaskGetTickCount+0x1c>)
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800620c:	687b      	ldr	r3, [r7, #4]
}
 800620e:	4618      	mov	r0, r3
 8006210:	370c      	adds	r7, #12
 8006212:	46bd      	mov	sp, r7
 8006214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006218:	4770      	bx	lr
 800621a:	bf00      	nop
 800621c:	20000f38 	.word	0x20000f38

08006220 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006220:	b580      	push	{r7, lr}
 8006222:	b086      	sub	sp, #24
 8006224:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006226:	2300      	movs	r3, #0
 8006228:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800622a:	4b4f      	ldr	r3, [pc, #316]	; (8006368 <xTaskIncrementTick+0x148>)
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	2b00      	cmp	r3, #0
 8006230:	f040 808f 	bne.w	8006352 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006234:	4b4d      	ldr	r3, [pc, #308]	; (800636c <xTaskIncrementTick+0x14c>)
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	3301      	adds	r3, #1
 800623a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800623c:	4a4b      	ldr	r2, [pc, #300]	; (800636c <xTaskIncrementTick+0x14c>)
 800623e:	693b      	ldr	r3, [r7, #16]
 8006240:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006242:	693b      	ldr	r3, [r7, #16]
 8006244:	2b00      	cmp	r3, #0
 8006246:	d120      	bne.n	800628a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8006248:	4b49      	ldr	r3, [pc, #292]	; (8006370 <xTaskIncrementTick+0x150>)
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	2b00      	cmp	r3, #0
 8006250:	d00a      	beq.n	8006268 <xTaskIncrementTick+0x48>
	__asm volatile
 8006252:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006256:	f383 8811 	msr	BASEPRI, r3
 800625a:	f3bf 8f6f 	isb	sy
 800625e:	f3bf 8f4f 	dsb	sy
 8006262:	603b      	str	r3, [r7, #0]
}
 8006264:	bf00      	nop
 8006266:	e7fe      	b.n	8006266 <xTaskIncrementTick+0x46>
 8006268:	4b41      	ldr	r3, [pc, #260]	; (8006370 <xTaskIncrementTick+0x150>)
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	60fb      	str	r3, [r7, #12]
 800626e:	4b41      	ldr	r3, [pc, #260]	; (8006374 <xTaskIncrementTick+0x154>)
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	4a3f      	ldr	r2, [pc, #252]	; (8006370 <xTaskIncrementTick+0x150>)
 8006274:	6013      	str	r3, [r2, #0]
 8006276:	4a3f      	ldr	r2, [pc, #252]	; (8006374 <xTaskIncrementTick+0x154>)
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	6013      	str	r3, [r2, #0]
 800627c:	4b3e      	ldr	r3, [pc, #248]	; (8006378 <xTaskIncrementTick+0x158>)
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	3301      	adds	r3, #1
 8006282:	4a3d      	ldr	r2, [pc, #244]	; (8006378 <xTaskIncrementTick+0x158>)
 8006284:	6013      	str	r3, [r2, #0]
 8006286:	f000 fadb 	bl	8006840 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800628a:	4b3c      	ldr	r3, [pc, #240]	; (800637c <xTaskIncrementTick+0x15c>)
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	693a      	ldr	r2, [r7, #16]
 8006290:	429a      	cmp	r2, r3
 8006292:	d349      	bcc.n	8006328 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006294:	4b36      	ldr	r3, [pc, #216]	; (8006370 <xTaskIncrementTick+0x150>)
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	2b00      	cmp	r3, #0
 800629c:	d104      	bne.n	80062a8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800629e:	4b37      	ldr	r3, [pc, #220]	; (800637c <xTaskIncrementTick+0x15c>)
 80062a0:	f04f 32ff 	mov.w	r2, #4294967295
 80062a4:	601a      	str	r2, [r3, #0]
					break;
 80062a6:	e03f      	b.n	8006328 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80062a8:	4b31      	ldr	r3, [pc, #196]	; (8006370 <xTaskIncrementTick+0x150>)
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	68db      	ldr	r3, [r3, #12]
 80062ae:	68db      	ldr	r3, [r3, #12]
 80062b0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80062b2:	68bb      	ldr	r3, [r7, #8]
 80062b4:	685b      	ldr	r3, [r3, #4]
 80062b6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80062b8:	693a      	ldr	r2, [r7, #16]
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	429a      	cmp	r2, r3
 80062be:	d203      	bcs.n	80062c8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80062c0:	4a2e      	ldr	r2, [pc, #184]	; (800637c <xTaskIncrementTick+0x15c>)
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80062c6:	e02f      	b.n	8006328 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80062c8:	68bb      	ldr	r3, [r7, #8]
 80062ca:	3304      	adds	r3, #4
 80062cc:	4618      	mov	r0, r3
 80062ce:	f7fe ff79 	bl	80051c4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80062d2:	68bb      	ldr	r3, [r7, #8]
 80062d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d004      	beq.n	80062e4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80062da:	68bb      	ldr	r3, [r7, #8]
 80062dc:	3318      	adds	r3, #24
 80062de:	4618      	mov	r0, r3
 80062e0:	f7fe ff70 	bl	80051c4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80062e4:	68bb      	ldr	r3, [r7, #8]
 80062e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062e8:	4b25      	ldr	r3, [pc, #148]	; (8006380 <xTaskIncrementTick+0x160>)
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	429a      	cmp	r2, r3
 80062ee:	d903      	bls.n	80062f8 <xTaskIncrementTick+0xd8>
 80062f0:	68bb      	ldr	r3, [r7, #8]
 80062f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062f4:	4a22      	ldr	r2, [pc, #136]	; (8006380 <xTaskIncrementTick+0x160>)
 80062f6:	6013      	str	r3, [r2, #0]
 80062f8:	68bb      	ldr	r3, [r7, #8]
 80062fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062fc:	4613      	mov	r3, r2
 80062fe:	009b      	lsls	r3, r3, #2
 8006300:	4413      	add	r3, r2
 8006302:	009b      	lsls	r3, r3, #2
 8006304:	4a1f      	ldr	r2, [pc, #124]	; (8006384 <xTaskIncrementTick+0x164>)
 8006306:	441a      	add	r2, r3
 8006308:	68bb      	ldr	r3, [r7, #8]
 800630a:	3304      	adds	r3, #4
 800630c:	4619      	mov	r1, r3
 800630e:	4610      	mov	r0, r2
 8006310:	f7fe fefb 	bl	800510a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006314:	68bb      	ldr	r3, [r7, #8]
 8006316:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006318:	4b1b      	ldr	r3, [pc, #108]	; (8006388 <xTaskIncrementTick+0x168>)
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800631e:	429a      	cmp	r2, r3
 8006320:	d3b8      	bcc.n	8006294 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8006322:	2301      	movs	r3, #1
 8006324:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006326:	e7b5      	b.n	8006294 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006328:	4b17      	ldr	r3, [pc, #92]	; (8006388 <xTaskIncrementTick+0x168>)
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800632e:	4915      	ldr	r1, [pc, #84]	; (8006384 <xTaskIncrementTick+0x164>)
 8006330:	4613      	mov	r3, r2
 8006332:	009b      	lsls	r3, r3, #2
 8006334:	4413      	add	r3, r2
 8006336:	009b      	lsls	r3, r3, #2
 8006338:	440b      	add	r3, r1
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	2b01      	cmp	r3, #1
 800633e:	d901      	bls.n	8006344 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8006340:	2301      	movs	r3, #1
 8006342:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006344:	4b11      	ldr	r3, [pc, #68]	; (800638c <xTaskIncrementTick+0x16c>)
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	2b00      	cmp	r3, #0
 800634a:	d007      	beq.n	800635c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800634c:	2301      	movs	r3, #1
 800634e:	617b      	str	r3, [r7, #20]
 8006350:	e004      	b.n	800635c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8006352:	4b0f      	ldr	r3, [pc, #60]	; (8006390 <xTaskIncrementTick+0x170>)
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	3301      	adds	r3, #1
 8006358:	4a0d      	ldr	r2, [pc, #52]	; (8006390 <xTaskIncrementTick+0x170>)
 800635a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800635c:	697b      	ldr	r3, [r7, #20]
}
 800635e:	4618      	mov	r0, r3
 8006360:	3718      	adds	r7, #24
 8006362:	46bd      	mov	sp, r7
 8006364:	bd80      	pop	{r7, pc}
 8006366:	bf00      	nop
 8006368:	20000f5c 	.word	0x20000f5c
 800636c:	20000f38 	.word	0x20000f38
 8006370:	20000eec 	.word	0x20000eec
 8006374:	20000ef0 	.word	0x20000ef0
 8006378:	20000f4c 	.word	0x20000f4c
 800637c:	20000f54 	.word	0x20000f54
 8006380:	20000f3c 	.word	0x20000f3c
 8006384:	20000a64 	.word	0x20000a64
 8006388:	20000a60 	.word	0x20000a60
 800638c:	20000f48 	.word	0x20000f48
 8006390:	20000f44 	.word	0x20000f44

08006394 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006394:	b480      	push	{r7}
 8006396:	b085      	sub	sp, #20
 8006398:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800639a:	4b2a      	ldr	r3, [pc, #168]	; (8006444 <vTaskSwitchContext+0xb0>)
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d003      	beq.n	80063aa <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80063a2:	4b29      	ldr	r3, [pc, #164]	; (8006448 <vTaskSwitchContext+0xb4>)
 80063a4:	2201      	movs	r2, #1
 80063a6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80063a8:	e046      	b.n	8006438 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 80063aa:	4b27      	ldr	r3, [pc, #156]	; (8006448 <vTaskSwitchContext+0xb4>)
 80063ac:	2200      	movs	r2, #0
 80063ae:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80063b0:	4b26      	ldr	r3, [pc, #152]	; (800644c <vTaskSwitchContext+0xb8>)
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	60fb      	str	r3, [r7, #12]
 80063b6:	e010      	b.n	80063da <vTaskSwitchContext+0x46>
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d10a      	bne.n	80063d4 <vTaskSwitchContext+0x40>
	__asm volatile
 80063be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063c2:	f383 8811 	msr	BASEPRI, r3
 80063c6:	f3bf 8f6f 	isb	sy
 80063ca:	f3bf 8f4f 	dsb	sy
 80063ce:	607b      	str	r3, [r7, #4]
}
 80063d0:	bf00      	nop
 80063d2:	e7fe      	b.n	80063d2 <vTaskSwitchContext+0x3e>
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	3b01      	subs	r3, #1
 80063d8:	60fb      	str	r3, [r7, #12]
 80063da:	491d      	ldr	r1, [pc, #116]	; (8006450 <vTaskSwitchContext+0xbc>)
 80063dc:	68fa      	ldr	r2, [r7, #12]
 80063de:	4613      	mov	r3, r2
 80063e0:	009b      	lsls	r3, r3, #2
 80063e2:	4413      	add	r3, r2
 80063e4:	009b      	lsls	r3, r3, #2
 80063e6:	440b      	add	r3, r1
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d0e4      	beq.n	80063b8 <vTaskSwitchContext+0x24>
 80063ee:	68fa      	ldr	r2, [r7, #12]
 80063f0:	4613      	mov	r3, r2
 80063f2:	009b      	lsls	r3, r3, #2
 80063f4:	4413      	add	r3, r2
 80063f6:	009b      	lsls	r3, r3, #2
 80063f8:	4a15      	ldr	r2, [pc, #84]	; (8006450 <vTaskSwitchContext+0xbc>)
 80063fa:	4413      	add	r3, r2
 80063fc:	60bb      	str	r3, [r7, #8]
 80063fe:	68bb      	ldr	r3, [r7, #8]
 8006400:	685b      	ldr	r3, [r3, #4]
 8006402:	685a      	ldr	r2, [r3, #4]
 8006404:	68bb      	ldr	r3, [r7, #8]
 8006406:	605a      	str	r2, [r3, #4]
 8006408:	68bb      	ldr	r3, [r7, #8]
 800640a:	685a      	ldr	r2, [r3, #4]
 800640c:	68bb      	ldr	r3, [r7, #8]
 800640e:	3308      	adds	r3, #8
 8006410:	429a      	cmp	r2, r3
 8006412:	d104      	bne.n	800641e <vTaskSwitchContext+0x8a>
 8006414:	68bb      	ldr	r3, [r7, #8]
 8006416:	685b      	ldr	r3, [r3, #4]
 8006418:	685a      	ldr	r2, [r3, #4]
 800641a:	68bb      	ldr	r3, [r7, #8]
 800641c:	605a      	str	r2, [r3, #4]
 800641e:	68bb      	ldr	r3, [r7, #8]
 8006420:	685b      	ldr	r3, [r3, #4]
 8006422:	68db      	ldr	r3, [r3, #12]
 8006424:	4a0b      	ldr	r2, [pc, #44]	; (8006454 <vTaskSwitchContext+0xc0>)
 8006426:	6013      	str	r3, [r2, #0]
 8006428:	4a08      	ldr	r2, [pc, #32]	; (800644c <vTaskSwitchContext+0xb8>)
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800642e:	4b09      	ldr	r3, [pc, #36]	; (8006454 <vTaskSwitchContext+0xc0>)
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	3354      	adds	r3, #84	; 0x54
 8006434:	4a08      	ldr	r2, [pc, #32]	; (8006458 <vTaskSwitchContext+0xc4>)
 8006436:	6013      	str	r3, [r2, #0]
}
 8006438:	bf00      	nop
 800643a:	3714      	adds	r7, #20
 800643c:	46bd      	mov	sp, r7
 800643e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006442:	4770      	bx	lr
 8006444:	20000f5c 	.word	0x20000f5c
 8006448:	20000f48 	.word	0x20000f48
 800644c:	20000f3c 	.word	0x20000f3c
 8006450:	20000a64 	.word	0x20000a64
 8006454:	20000a60 	.word	0x20000a60
 8006458:	20000020 	.word	0x20000020

0800645c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800645c:	b580      	push	{r7, lr}
 800645e:	b084      	sub	sp, #16
 8006460:	af00      	add	r7, sp, #0
 8006462:	6078      	str	r0, [r7, #4]
 8006464:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	2b00      	cmp	r3, #0
 800646a:	d10a      	bne.n	8006482 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800646c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006470:	f383 8811 	msr	BASEPRI, r3
 8006474:	f3bf 8f6f 	isb	sy
 8006478:	f3bf 8f4f 	dsb	sy
 800647c:	60fb      	str	r3, [r7, #12]
}
 800647e:	bf00      	nop
 8006480:	e7fe      	b.n	8006480 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006482:	4b07      	ldr	r3, [pc, #28]	; (80064a0 <vTaskPlaceOnEventList+0x44>)
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	3318      	adds	r3, #24
 8006488:	4619      	mov	r1, r3
 800648a:	6878      	ldr	r0, [r7, #4]
 800648c:	f7fe fe61 	bl	8005152 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006490:	2101      	movs	r1, #1
 8006492:	6838      	ldr	r0, [r7, #0]
 8006494:	f000 fa80 	bl	8006998 <prvAddCurrentTaskToDelayedList>
}
 8006498:	bf00      	nop
 800649a:	3710      	adds	r7, #16
 800649c:	46bd      	mov	sp, r7
 800649e:	bd80      	pop	{r7, pc}
 80064a0:	20000a60 	.word	0x20000a60

080064a4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80064a4:	b580      	push	{r7, lr}
 80064a6:	b086      	sub	sp, #24
 80064a8:	af00      	add	r7, sp, #0
 80064aa:	60f8      	str	r0, [r7, #12]
 80064ac:	60b9      	str	r1, [r7, #8]
 80064ae:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d10a      	bne.n	80064cc <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80064b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064ba:	f383 8811 	msr	BASEPRI, r3
 80064be:	f3bf 8f6f 	isb	sy
 80064c2:	f3bf 8f4f 	dsb	sy
 80064c6:	617b      	str	r3, [r7, #20]
}
 80064c8:	bf00      	nop
 80064ca:	e7fe      	b.n	80064ca <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80064cc:	4b0a      	ldr	r3, [pc, #40]	; (80064f8 <vTaskPlaceOnEventListRestricted+0x54>)
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	3318      	adds	r3, #24
 80064d2:	4619      	mov	r1, r3
 80064d4:	68f8      	ldr	r0, [r7, #12]
 80064d6:	f7fe fe18 	bl	800510a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d002      	beq.n	80064e6 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80064e0:	f04f 33ff 	mov.w	r3, #4294967295
 80064e4:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80064e6:	6879      	ldr	r1, [r7, #4]
 80064e8:	68b8      	ldr	r0, [r7, #8]
 80064ea:	f000 fa55 	bl	8006998 <prvAddCurrentTaskToDelayedList>
	}
 80064ee:	bf00      	nop
 80064f0:	3718      	adds	r7, #24
 80064f2:	46bd      	mov	sp, r7
 80064f4:	bd80      	pop	{r7, pc}
 80064f6:	bf00      	nop
 80064f8:	20000a60 	.word	0x20000a60

080064fc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80064fc:	b580      	push	{r7, lr}
 80064fe:	b086      	sub	sp, #24
 8006500:	af00      	add	r7, sp, #0
 8006502:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	68db      	ldr	r3, [r3, #12]
 8006508:	68db      	ldr	r3, [r3, #12]
 800650a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800650c:	693b      	ldr	r3, [r7, #16]
 800650e:	2b00      	cmp	r3, #0
 8006510:	d10a      	bne.n	8006528 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8006512:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006516:	f383 8811 	msr	BASEPRI, r3
 800651a:	f3bf 8f6f 	isb	sy
 800651e:	f3bf 8f4f 	dsb	sy
 8006522:	60fb      	str	r3, [r7, #12]
}
 8006524:	bf00      	nop
 8006526:	e7fe      	b.n	8006526 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006528:	693b      	ldr	r3, [r7, #16]
 800652a:	3318      	adds	r3, #24
 800652c:	4618      	mov	r0, r3
 800652e:	f7fe fe49 	bl	80051c4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006532:	4b1e      	ldr	r3, [pc, #120]	; (80065ac <xTaskRemoveFromEventList+0xb0>)
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	2b00      	cmp	r3, #0
 8006538:	d11d      	bne.n	8006576 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800653a:	693b      	ldr	r3, [r7, #16]
 800653c:	3304      	adds	r3, #4
 800653e:	4618      	mov	r0, r3
 8006540:	f7fe fe40 	bl	80051c4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006544:	693b      	ldr	r3, [r7, #16]
 8006546:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006548:	4b19      	ldr	r3, [pc, #100]	; (80065b0 <xTaskRemoveFromEventList+0xb4>)
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	429a      	cmp	r2, r3
 800654e:	d903      	bls.n	8006558 <xTaskRemoveFromEventList+0x5c>
 8006550:	693b      	ldr	r3, [r7, #16]
 8006552:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006554:	4a16      	ldr	r2, [pc, #88]	; (80065b0 <xTaskRemoveFromEventList+0xb4>)
 8006556:	6013      	str	r3, [r2, #0]
 8006558:	693b      	ldr	r3, [r7, #16]
 800655a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800655c:	4613      	mov	r3, r2
 800655e:	009b      	lsls	r3, r3, #2
 8006560:	4413      	add	r3, r2
 8006562:	009b      	lsls	r3, r3, #2
 8006564:	4a13      	ldr	r2, [pc, #76]	; (80065b4 <xTaskRemoveFromEventList+0xb8>)
 8006566:	441a      	add	r2, r3
 8006568:	693b      	ldr	r3, [r7, #16]
 800656a:	3304      	adds	r3, #4
 800656c:	4619      	mov	r1, r3
 800656e:	4610      	mov	r0, r2
 8006570:	f7fe fdcb 	bl	800510a <vListInsertEnd>
 8006574:	e005      	b.n	8006582 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006576:	693b      	ldr	r3, [r7, #16]
 8006578:	3318      	adds	r3, #24
 800657a:	4619      	mov	r1, r3
 800657c:	480e      	ldr	r0, [pc, #56]	; (80065b8 <xTaskRemoveFromEventList+0xbc>)
 800657e:	f7fe fdc4 	bl	800510a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006582:	693b      	ldr	r3, [r7, #16]
 8006584:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006586:	4b0d      	ldr	r3, [pc, #52]	; (80065bc <xTaskRemoveFromEventList+0xc0>)
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800658c:	429a      	cmp	r2, r3
 800658e:	d905      	bls.n	800659c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006590:	2301      	movs	r3, #1
 8006592:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006594:	4b0a      	ldr	r3, [pc, #40]	; (80065c0 <xTaskRemoveFromEventList+0xc4>)
 8006596:	2201      	movs	r2, #1
 8006598:	601a      	str	r2, [r3, #0]
 800659a:	e001      	b.n	80065a0 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800659c:	2300      	movs	r3, #0
 800659e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80065a0:	697b      	ldr	r3, [r7, #20]
}
 80065a2:	4618      	mov	r0, r3
 80065a4:	3718      	adds	r7, #24
 80065a6:	46bd      	mov	sp, r7
 80065a8:	bd80      	pop	{r7, pc}
 80065aa:	bf00      	nop
 80065ac:	20000f5c 	.word	0x20000f5c
 80065b0:	20000f3c 	.word	0x20000f3c
 80065b4:	20000a64 	.word	0x20000a64
 80065b8:	20000ef4 	.word	0x20000ef4
 80065bc:	20000a60 	.word	0x20000a60
 80065c0:	20000f48 	.word	0x20000f48

080065c4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80065c4:	b480      	push	{r7}
 80065c6:	b083      	sub	sp, #12
 80065c8:	af00      	add	r7, sp, #0
 80065ca:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80065cc:	4b06      	ldr	r3, [pc, #24]	; (80065e8 <vTaskInternalSetTimeOutState+0x24>)
 80065ce:	681a      	ldr	r2, [r3, #0]
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80065d4:	4b05      	ldr	r3, [pc, #20]	; (80065ec <vTaskInternalSetTimeOutState+0x28>)
 80065d6:	681a      	ldr	r2, [r3, #0]
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	605a      	str	r2, [r3, #4]
}
 80065dc:	bf00      	nop
 80065de:	370c      	adds	r7, #12
 80065e0:	46bd      	mov	sp, r7
 80065e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e6:	4770      	bx	lr
 80065e8:	20000f4c 	.word	0x20000f4c
 80065ec:	20000f38 	.word	0x20000f38

080065f0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80065f0:	b580      	push	{r7, lr}
 80065f2:	b088      	sub	sp, #32
 80065f4:	af00      	add	r7, sp, #0
 80065f6:	6078      	str	r0, [r7, #4]
 80065f8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d10a      	bne.n	8006616 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8006600:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006604:	f383 8811 	msr	BASEPRI, r3
 8006608:	f3bf 8f6f 	isb	sy
 800660c:	f3bf 8f4f 	dsb	sy
 8006610:	613b      	str	r3, [r7, #16]
}
 8006612:	bf00      	nop
 8006614:	e7fe      	b.n	8006614 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006616:	683b      	ldr	r3, [r7, #0]
 8006618:	2b00      	cmp	r3, #0
 800661a:	d10a      	bne.n	8006632 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800661c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006620:	f383 8811 	msr	BASEPRI, r3
 8006624:	f3bf 8f6f 	isb	sy
 8006628:	f3bf 8f4f 	dsb	sy
 800662c:	60fb      	str	r3, [r7, #12]
}
 800662e:	bf00      	nop
 8006630:	e7fe      	b.n	8006630 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8006632:	f000 fe7f 	bl	8007334 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006636:	4b1d      	ldr	r3, [pc, #116]	; (80066ac <xTaskCheckForTimeOut+0xbc>)
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	685b      	ldr	r3, [r3, #4]
 8006640:	69ba      	ldr	r2, [r7, #24]
 8006642:	1ad3      	subs	r3, r2, r3
 8006644:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006646:	683b      	ldr	r3, [r7, #0]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800664e:	d102      	bne.n	8006656 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006650:	2300      	movs	r3, #0
 8006652:	61fb      	str	r3, [r7, #28]
 8006654:	e023      	b.n	800669e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681a      	ldr	r2, [r3, #0]
 800665a:	4b15      	ldr	r3, [pc, #84]	; (80066b0 <xTaskCheckForTimeOut+0xc0>)
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	429a      	cmp	r2, r3
 8006660:	d007      	beq.n	8006672 <xTaskCheckForTimeOut+0x82>
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	685b      	ldr	r3, [r3, #4]
 8006666:	69ba      	ldr	r2, [r7, #24]
 8006668:	429a      	cmp	r2, r3
 800666a:	d302      	bcc.n	8006672 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800666c:	2301      	movs	r3, #1
 800666e:	61fb      	str	r3, [r7, #28]
 8006670:	e015      	b.n	800669e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006672:	683b      	ldr	r3, [r7, #0]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	697a      	ldr	r2, [r7, #20]
 8006678:	429a      	cmp	r2, r3
 800667a:	d20b      	bcs.n	8006694 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800667c:	683b      	ldr	r3, [r7, #0]
 800667e:	681a      	ldr	r2, [r3, #0]
 8006680:	697b      	ldr	r3, [r7, #20]
 8006682:	1ad2      	subs	r2, r2, r3
 8006684:	683b      	ldr	r3, [r7, #0]
 8006686:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006688:	6878      	ldr	r0, [r7, #4]
 800668a:	f7ff ff9b 	bl	80065c4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800668e:	2300      	movs	r3, #0
 8006690:	61fb      	str	r3, [r7, #28]
 8006692:	e004      	b.n	800669e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8006694:	683b      	ldr	r3, [r7, #0]
 8006696:	2200      	movs	r2, #0
 8006698:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800669a:	2301      	movs	r3, #1
 800669c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800669e:	f000 fe79 	bl	8007394 <vPortExitCritical>

	return xReturn;
 80066a2:	69fb      	ldr	r3, [r7, #28]
}
 80066a4:	4618      	mov	r0, r3
 80066a6:	3720      	adds	r7, #32
 80066a8:	46bd      	mov	sp, r7
 80066aa:	bd80      	pop	{r7, pc}
 80066ac:	20000f38 	.word	0x20000f38
 80066b0:	20000f4c 	.word	0x20000f4c

080066b4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80066b4:	b480      	push	{r7}
 80066b6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80066b8:	4b03      	ldr	r3, [pc, #12]	; (80066c8 <vTaskMissedYield+0x14>)
 80066ba:	2201      	movs	r2, #1
 80066bc:	601a      	str	r2, [r3, #0]
}
 80066be:	bf00      	nop
 80066c0:	46bd      	mov	sp, r7
 80066c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c6:	4770      	bx	lr
 80066c8:	20000f48 	.word	0x20000f48

080066cc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80066cc:	b580      	push	{r7, lr}
 80066ce:	b082      	sub	sp, #8
 80066d0:	af00      	add	r7, sp, #0
 80066d2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80066d4:	f000 f852 	bl	800677c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80066d8:	4b06      	ldr	r3, [pc, #24]	; (80066f4 <prvIdleTask+0x28>)
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	2b01      	cmp	r3, #1
 80066de:	d9f9      	bls.n	80066d4 <prvIdleTask+0x8>
			{
				taskYIELD();
 80066e0:	4b05      	ldr	r3, [pc, #20]	; (80066f8 <prvIdleTask+0x2c>)
 80066e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80066e6:	601a      	str	r2, [r3, #0]
 80066e8:	f3bf 8f4f 	dsb	sy
 80066ec:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80066f0:	e7f0      	b.n	80066d4 <prvIdleTask+0x8>
 80066f2:	bf00      	nop
 80066f4:	20000a64 	.word	0x20000a64
 80066f8:	e000ed04 	.word	0xe000ed04

080066fc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80066fc:	b580      	push	{r7, lr}
 80066fe:	b082      	sub	sp, #8
 8006700:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006702:	2300      	movs	r3, #0
 8006704:	607b      	str	r3, [r7, #4]
 8006706:	e00c      	b.n	8006722 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006708:	687a      	ldr	r2, [r7, #4]
 800670a:	4613      	mov	r3, r2
 800670c:	009b      	lsls	r3, r3, #2
 800670e:	4413      	add	r3, r2
 8006710:	009b      	lsls	r3, r3, #2
 8006712:	4a12      	ldr	r2, [pc, #72]	; (800675c <prvInitialiseTaskLists+0x60>)
 8006714:	4413      	add	r3, r2
 8006716:	4618      	mov	r0, r3
 8006718:	f7fe fcca 	bl	80050b0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	3301      	adds	r3, #1
 8006720:	607b      	str	r3, [r7, #4]
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	2b37      	cmp	r3, #55	; 0x37
 8006726:	d9ef      	bls.n	8006708 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006728:	480d      	ldr	r0, [pc, #52]	; (8006760 <prvInitialiseTaskLists+0x64>)
 800672a:	f7fe fcc1 	bl	80050b0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800672e:	480d      	ldr	r0, [pc, #52]	; (8006764 <prvInitialiseTaskLists+0x68>)
 8006730:	f7fe fcbe 	bl	80050b0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006734:	480c      	ldr	r0, [pc, #48]	; (8006768 <prvInitialiseTaskLists+0x6c>)
 8006736:	f7fe fcbb 	bl	80050b0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800673a:	480c      	ldr	r0, [pc, #48]	; (800676c <prvInitialiseTaskLists+0x70>)
 800673c:	f7fe fcb8 	bl	80050b0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006740:	480b      	ldr	r0, [pc, #44]	; (8006770 <prvInitialiseTaskLists+0x74>)
 8006742:	f7fe fcb5 	bl	80050b0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006746:	4b0b      	ldr	r3, [pc, #44]	; (8006774 <prvInitialiseTaskLists+0x78>)
 8006748:	4a05      	ldr	r2, [pc, #20]	; (8006760 <prvInitialiseTaskLists+0x64>)
 800674a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800674c:	4b0a      	ldr	r3, [pc, #40]	; (8006778 <prvInitialiseTaskLists+0x7c>)
 800674e:	4a05      	ldr	r2, [pc, #20]	; (8006764 <prvInitialiseTaskLists+0x68>)
 8006750:	601a      	str	r2, [r3, #0]
}
 8006752:	bf00      	nop
 8006754:	3708      	adds	r7, #8
 8006756:	46bd      	mov	sp, r7
 8006758:	bd80      	pop	{r7, pc}
 800675a:	bf00      	nop
 800675c:	20000a64 	.word	0x20000a64
 8006760:	20000ec4 	.word	0x20000ec4
 8006764:	20000ed8 	.word	0x20000ed8
 8006768:	20000ef4 	.word	0x20000ef4
 800676c:	20000f08 	.word	0x20000f08
 8006770:	20000f20 	.word	0x20000f20
 8006774:	20000eec 	.word	0x20000eec
 8006778:	20000ef0 	.word	0x20000ef0

0800677c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800677c:	b580      	push	{r7, lr}
 800677e:	b082      	sub	sp, #8
 8006780:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006782:	e019      	b.n	80067b8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006784:	f000 fdd6 	bl	8007334 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006788:	4b10      	ldr	r3, [pc, #64]	; (80067cc <prvCheckTasksWaitingTermination+0x50>)
 800678a:	68db      	ldr	r3, [r3, #12]
 800678c:	68db      	ldr	r3, [r3, #12]
 800678e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	3304      	adds	r3, #4
 8006794:	4618      	mov	r0, r3
 8006796:	f7fe fd15 	bl	80051c4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800679a:	4b0d      	ldr	r3, [pc, #52]	; (80067d0 <prvCheckTasksWaitingTermination+0x54>)
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	3b01      	subs	r3, #1
 80067a0:	4a0b      	ldr	r2, [pc, #44]	; (80067d0 <prvCheckTasksWaitingTermination+0x54>)
 80067a2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80067a4:	4b0b      	ldr	r3, [pc, #44]	; (80067d4 <prvCheckTasksWaitingTermination+0x58>)
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	3b01      	subs	r3, #1
 80067aa:	4a0a      	ldr	r2, [pc, #40]	; (80067d4 <prvCheckTasksWaitingTermination+0x58>)
 80067ac:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80067ae:	f000 fdf1 	bl	8007394 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80067b2:	6878      	ldr	r0, [r7, #4]
 80067b4:	f000 f810 	bl	80067d8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80067b8:	4b06      	ldr	r3, [pc, #24]	; (80067d4 <prvCheckTasksWaitingTermination+0x58>)
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d1e1      	bne.n	8006784 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80067c0:	bf00      	nop
 80067c2:	bf00      	nop
 80067c4:	3708      	adds	r7, #8
 80067c6:	46bd      	mov	sp, r7
 80067c8:	bd80      	pop	{r7, pc}
 80067ca:	bf00      	nop
 80067cc:	20000f08 	.word	0x20000f08
 80067d0:	20000f34 	.word	0x20000f34
 80067d4:	20000f1c 	.word	0x20000f1c

080067d8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80067d8:	b580      	push	{r7, lr}
 80067da:	b084      	sub	sp, #16
 80067dc:	af00      	add	r7, sp, #0
 80067de:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	3354      	adds	r3, #84	; 0x54
 80067e4:	4618      	mov	r0, r3
 80067e6:	f001 f8fb 	bl	80079e0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d108      	bne.n	8006806 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067f8:	4618      	mov	r0, r3
 80067fa:	f000 ff89 	bl	8007710 <vPortFree>
				vPortFree( pxTCB );
 80067fe:	6878      	ldr	r0, [r7, #4]
 8006800:	f000 ff86 	bl	8007710 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006804:	e018      	b.n	8006838 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800680c:	2b01      	cmp	r3, #1
 800680e:	d103      	bne.n	8006818 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8006810:	6878      	ldr	r0, [r7, #4]
 8006812:	f000 ff7d 	bl	8007710 <vPortFree>
	}
 8006816:	e00f      	b.n	8006838 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800681e:	2b02      	cmp	r3, #2
 8006820:	d00a      	beq.n	8006838 <prvDeleteTCB+0x60>
	__asm volatile
 8006822:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006826:	f383 8811 	msr	BASEPRI, r3
 800682a:	f3bf 8f6f 	isb	sy
 800682e:	f3bf 8f4f 	dsb	sy
 8006832:	60fb      	str	r3, [r7, #12]
}
 8006834:	bf00      	nop
 8006836:	e7fe      	b.n	8006836 <prvDeleteTCB+0x5e>
	}
 8006838:	bf00      	nop
 800683a:	3710      	adds	r7, #16
 800683c:	46bd      	mov	sp, r7
 800683e:	bd80      	pop	{r7, pc}

08006840 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006840:	b480      	push	{r7}
 8006842:	b083      	sub	sp, #12
 8006844:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006846:	4b0c      	ldr	r3, [pc, #48]	; (8006878 <prvResetNextTaskUnblockTime+0x38>)
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	2b00      	cmp	r3, #0
 800684e:	d104      	bne.n	800685a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006850:	4b0a      	ldr	r3, [pc, #40]	; (800687c <prvResetNextTaskUnblockTime+0x3c>)
 8006852:	f04f 32ff 	mov.w	r2, #4294967295
 8006856:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006858:	e008      	b.n	800686c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800685a:	4b07      	ldr	r3, [pc, #28]	; (8006878 <prvResetNextTaskUnblockTime+0x38>)
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	68db      	ldr	r3, [r3, #12]
 8006860:	68db      	ldr	r3, [r3, #12]
 8006862:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	685b      	ldr	r3, [r3, #4]
 8006868:	4a04      	ldr	r2, [pc, #16]	; (800687c <prvResetNextTaskUnblockTime+0x3c>)
 800686a:	6013      	str	r3, [r2, #0]
}
 800686c:	bf00      	nop
 800686e:	370c      	adds	r7, #12
 8006870:	46bd      	mov	sp, r7
 8006872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006876:	4770      	bx	lr
 8006878:	20000eec 	.word	0x20000eec
 800687c:	20000f54 	.word	0x20000f54

08006880 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006880:	b480      	push	{r7}
 8006882:	b083      	sub	sp, #12
 8006884:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006886:	4b0b      	ldr	r3, [pc, #44]	; (80068b4 <xTaskGetSchedulerState+0x34>)
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	2b00      	cmp	r3, #0
 800688c:	d102      	bne.n	8006894 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800688e:	2301      	movs	r3, #1
 8006890:	607b      	str	r3, [r7, #4]
 8006892:	e008      	b.n	80068a6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006894:	4b08      	ldr	r3, [pc, #32]	; (80068b8 <xTaskGetSchedulerState+0x38>)
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	2b00      	cmp	r3, #0
 800689a:	d102      	bne.n	80068a2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800689c:	2302      	movs	r3, #2
 800689e:	607b      	str	r3, [r7, #4]
 80068a0:	e001      	b.n	80068a6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80068a2:	2300      	movs	r3, #0
 80068a4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80068a6:	687b      	ldr	r3, [r7, #4]
	}
 80068a8:	4618      	mov	r0, r3
 80068aa:	370c      	adds	r7, #12
 80068ac:	46bd      	mov	sp, r7
 80068ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b2:	4770      	bx	lr
 80068b4:	20000f40 	.word	0x20000f40
 80068b8:	20000f5c 	.word	0x20000f5c

080068bc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80068bc:	b580      	push	{r7, lr}
 80068be:	b086      	sub	sp, #24
 80068c0:	af00      	add	r7, sp, #0
 80068c2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80068c8:	2300      	movs	r3, #0
 80068ca:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d056      	beq.n	8006980 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80068d2:	4b2e      	ldr	r3, [pc, #184]	; (800698c <xTaskPriorityDisinherit+0xd0>)
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	693a      	ldr	r2, [r7, #16]
 80068d8:	429a      	cmp	r2, r3
 80068da:	d00a      	beq.n	80068f2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80068dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068e0:	f383 8811 	msr	BASEPRI, r3
 80068e4:	f3bf 8f6f 	isb	sy
 80068e8:	f3bf 8f4f 	dsb	sy
 80068ec:	60fb      	str	r3, [r7, #12]
}
 80068ee:	bf00      	nop
 80068f0:	e7fe      	b.n	80068f0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80068f2:	693b      	ldr	r3, [r7, #16]
 80068f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d10a      	bne.n	8006910 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80068fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068fe:	f383 8811 	msr	BASEPRI, r3
 8006902:	f3bf 8f6f 	isb	sy
 8006906:	f3bf 8f4f 	dsb	sy
 800690a:	60bb      	str	r3, [r7, #8]
}
 800690c:	bf00      	nop
 800690e:	e7fe      	b.n	800690e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8006910:	693b      	ldr	r3, [r7, #16]
 8006912:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006914:	1e5a      	subs	r2, r3, #1
 8006916:	693b      	ldr	r3, [r7, #16]
 8006918:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800691a:	693b      	ldr	r3, [r7, #16]
 800691c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800691e:	693b      	ldr	r3, [r7, #16]
 8006920:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006922:	429a      	cmp	r2, r3
 8006924:	d02c      	beq.n	8006980 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006926:	693b      	ldr	r3, [r7, #16]
 8006928:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800692a:	2b00      	cmp	r3, #0
 800692c:	d128      	bne.n	8006980 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800692e:	693b      	ldr	r3, [r7, #16]
 8006930:	3304      	adds	r3, #4
 8006932:	4618      	mov	r0, r3
 8006934:	f7fe fc46 	bl	80051c4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006938:	693b      	ldr	r3, [r7, #16]
 800693a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800693c:	693b      	ldr	r3, [r7, #16]
 800693e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006940:	693b      	ldr	r3, [r7, #16]
 8006942:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006944:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006948:	693b      	ldr	r3, [r7, #16]
 800694a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800694c:	693b      	ldr	r3, [r7, #16]
 800694e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006950:	4b0f      	ldr	r3, [pc, #60]	; (8006990 <xTaskPriorityDisinherit+0xd4>)
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	429a      	cmp	r2, r3
 8006956:	d903      	bls.n	8006960 <xTaskPriorityDisinherit+0xa4>
 8006958:	693b      	ldr	r3, [r7, #16]
 800695a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800695c:	4a0c      	ldr	r2, [pc, #48]	; (8006990 <xTaskPriorityDisinherit+0xd4>)
 800695e:	6013      	str	r3, [r2, #0]
 8006960:	693b      	ldr	r3, [r7, #16]
 8006962:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006964:	4613      	mov	r3, r2
 8006966:	009b      	lsls	r3, r3, #2
 8006968:	4413      	add	r3, r2
 800696a:	009b      	lsls	r3, r3, #2
 800696c:	4a09      	ldr	r2, [pc, #36]	; (8006994 <xTaskPriorityDisinherit+0xd8>)
 800696e:	441a      	add	r2, r3
 8006970:	693b      	ldr	r3, [r7, #16]
 8006972:	3304      	adds	r3, #4
 8006974:	4619      	mov	r1, r3
 8006976:	4610      	mov	r0, r2
 8006978:	f7fe fbc7 	bl	800510a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800697c:	2301      	movs	r3, #1
 800697e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006980:	697b      	ldr	r3, [r7, #20]
	}
 8006982:	4618      	mov	r0, r3
 8006984:	3718      	adds	r7, #24
 8006986:	46bd      	mov	sp, r7
 8006988:	bd80      	pop	{r7, pc}
 800698a:	bf00      	nop
 800698c:	20000a60 	.word	0x20000a60
 8006990:	20000f3c 	.word	0x20000f3c
 8006994:	20000a64 	.word	0x20000a64

08006998 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006998:	b580      	push	{r7, lr}
 800699a:	b084      	sub	sp, #16
 800699c:	af00      	add	r7, sp, #0
 800699e:	6078      	str	r0, [r7, #4]
 80069a0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80069a2:	4b21      	ldr	r3, [pc, #132]	; (8006a28 <prvAddCurrentTaskToDelayedList+0x90>)
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80069a8:	4b20      	ldr	r3, [pc, #128]	; (8006a2c <prvAddCurrentTaskToDelayedList+0x94>)
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	3304      	adds	r3, #4
 80069ae:	4618      	mov	r0, r3
 80069b0:	f7fe fc08 	bl	80051c4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069ba:	d10a      	bne.n	80069d2 <prvAddCurrentTaskToDelayedList+0x3a>
 80069bc:	683b      	ldr	r3, [r7, #0]
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d007      	beq.n	80069d2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80069c2:	4b1a      	ldr	r3, [pc, #104]	; (8006a2c <prvAddCurrentTaskToDelayedList+0x94>)
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	3304      	adds	r3, #4
 80069c8:	4619      	mov	r1, r3
 80069ca:	4819      	ldr	r0, [pc, #100]	; (8006a30 <prvAddCurrentTaskToDelayedList+0x98>)
 80069cc:	f7fe fb9d 	bl	800510a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80069d0:	e026      	b.n	8006a20 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80069d2:	68fa      	ldr	r2, [r7, #12]
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	4413      	add	r3, r2
 80069d8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80069da:	4b14      	ldr	r3, [pc, #80]	; (8006a2c <prvAddCurrentTaskToDelayedList+0x94>)
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	68ba      	ldr	r2, [r7, #8]
 80069e0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80069e2:	68ba      	ldr	r2, [r7, #8]
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	429a      	cmp	r2, r3
 80069e8:	d209      	bcs.n	80069fe <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80069ea:	4b12      	ldr	r3, [pc, #72]	; (8006a34 <prvAddCurrentTaskToDelayedList+0x9c>)
 80069ec:	681a      	ldr	r2, [r3, #0]
 80069ee:	4b0f      	ldr	r3, [pc, #60]	; (8006a2c <prvAddCurrentTaskToDelayedList+0x94>)
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	3304      	adds	r3, #4
 80069f4:	4619      	mov	r1, r3
 80069f6:	4610      	mov	r0, r2
 80069f8:	f7fe fbab 	bl	8005152 <vListInsert>
}
 80069fc:	e010      	b.n	8006a20 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80069fe:	4b0e      	ldr	r3, [pc, #56]	; (8006a38 <prvAddCurrentTaskToDelayedList+0xa0>)
 8006a00:	681a      	ldr	r2, [r3, #0]
 8006a02:	4b0a      	ldr	r3, [pc, #40]	; (8006a2c <prvAddCurrentTaskToDelayedList+0x94>)
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	3304      	adds	r3, #4
 8006a08:	4619      	mov	r1, r3
 8006a0a:	4610      	mov	r0, r2
 8006a0c:	f7fe fba1 	bl	8005152 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006a10:	4b0a      	ldr	r3, [pc, #40]	; (8006a3c <prvAddCurrentTaskToDelayedList+0xa4>)
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	68ba      	ldr	r2, [r7, #8]
 8006a16:	429a      	cmp	r2, r3
 8006a18:	d202      	bcs.n	8006a20 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8006a1a:	4a08      	ldr	r2, [pc, #32]	; (8006a3c <prvAddCurrentTaskToDelayedList+0xa4>)
 8006a1c:	68bb      	ldr	r3, [r7, #8]
 8006a1e:	6013      	str	r3, [r2, #0]
}
 8006a20:	bf00      	nop
 8006a22:	3710      	adds	r7, #16
 8006a24:	46bd      	mov	sp, r7
 8006a26:	bd80      	pop	{r7, pc}
 8006a28:	20000f38 	.word	0x20000f38
 8006a2c:	20000a60 	.word	0x20000a60
 8006a30:	20000f20 	.word	0x20000f20
 8006a34:	20000ef0 	.word	0x20000ef0
 8006a38:	20000eec 	.word	0x20000eec
 8006a3c:	20000f54 	.word	0x20000f54

08006a40 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006a40:	b580      	push	{r7, lr}
 8006a42:	b08a      	sub	sp, #40	; 0x28
 8006a44:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8006a46:	2300      	movs	r3, #0
 8006a48:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006a4a:	f000 fb07 	bl	800705c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8006a4e:	4b1c      	ldr	r3, [pc, #112]	; (8006ac0 <xTimerCreateTimerTask+0x80>)
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d021      	beq.n	8006a9a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006a56:	2300      	movs	r3, #0
 8006a58:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006a5a:	2300      	movs	r3, #0
 8006a5c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006a5e:	1d3a      	adds	r2, r7, #4
 8006a60:	f107 0108 	add.w	r1, r7, #8
 8006a64:	f107 030c 	add.w	r3, r7, #12
 8006a68:	4618      	mov	r0, r3
 8006a6a:	f7fe fb07 	bl	800507c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006a6e:	6879      	ldr	r1, [r7, #4]
 8006a70:	68bb      	ldr	r3, [r7, #8]
 8006a72:	68fa      	ldr	r2, [r7, #12]
 8006a74:	9202      	str	r2, [sp, #8]
 8006a76:	9301      	str	r3, [sp, #4]
 8006a78:	2302      	movs	r3, #2
 8006a7a:	9300      	str	r3, [sp, #0]
 8006a7c:	2300      	movs	r3, #0
 8006a7e:	460a      	mov	r2, r1
 8006a80:	4910      	ldr	r1, [pc, #64]	; (8006ac4 <xTimerCreateTimerTask+0x84>)
 8006a82:	4811      	ldr	r0, [pc, #68]	; (8006ac8 <xTimerCreateTimerTask+0x88>)
 8006a84:	f7ff f8b4 	bl	8005bf0 <xTaskCreateStatic>
 8006a88:	4603      	mov	r3, r0
 8006a8a:	4a10      	ldr	r2, [pc, #64]	; (8006acc <xTimerCreateTimerTask+0x8c>)
 8006a8c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8006a8e:	4b0f      	ldr	r3, [pc, #60]	; (8006acc <xTimerCreateTimerTask+0x8c>)
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d001      	beq.n	8006a9a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8006a96:	2301      	movs	r3, #1
 8006a98:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006a9a:	697b      	ldr	r3, [r7, #20]
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d10a      	bne.n	8006ab6 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8006aa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006aa4:	f383 8811 	msr	BASEPRI, r3
 8006aa8:	f3bf 8f6f 	isb	sy
 8006aac:	f3bf 8f4f 	dsb	sy
 8006ab0:	613b      	str	r3, [r7, #16]
}
 8006ab2:	bf00      	nop
 8006ab4:	e7fe      	b.n	8006ab4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8006ab6:	697b      	ldr	r3, [r7, #20]
}
 8006ab8:	4618      	mov	r0, r3
 8006aba:	3718      	adds	r7, #24
 8006abc:	46bd      	mov	sp, r7
 8006abe:	bd80      	pop	{r7, pc}
 8006ac0:	20000f90 	.word	0x20000f90
 8006ac4:	08007b74 	.word	0x08007b74
 8006ac8:	08006c05 	.word	0x08006c05
 8006acc:	20000f94 	.word	0x20000f94

08006ad0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006ad0:	b580      	push	{r7, lr}
 8006ad2:	b08a      	sub	sp, #40	; 0x28
 8006ad4:	af00      	add	r7, sp, #0
 8006ad6:	60f8      	str	r0, [r7, #12]
 8006ad8:	60b9      	str	r1, [r7, #8]
 8006ada:	607a      	str	r2, [r7, #4]
 8006adc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8006ade:	2300      	movs	r3, #0
 8006ae0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d10a      	bne.n	8006afe <xTimerGenericCommand+0x2e>
	__asm volatile
 8006ae8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006aec:	f383 8811 	msr	BASEPRI, r3
 8006af0:	f3bf 8f6f 	isb	sy
 8006af4:	f3bf 8f4f 	dsb	sy
 8006af8:	623b      	str	r3, [r7, #32]
}
 8006afa:	bf00      	nop
 8006afc:	e7fe      	b.n	8006afc <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006afe:	4b1a      	ldr	r3, [pc, #104]	; (8006b68 <xTimerGenericCommand+0x98>)
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d02a      	beq.n	8006b5c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006b06:	68bb      	ldr	r3, [r7, #8]
 8006b08:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006b12:	68bb      	ldr	r3, [r7, #8]
 8006b14:	2b05      	cmp	r3, #5
 8006b16:	dc18      	bgt.n	8006b4a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006b18:	f7ff feb2 	bl	8006880 <xTaskGetSchedulerState>
 8006b1c:	4603      	mov	r3, r0
 8006b1e:	2b02      	cmp	r3, #2
 8006b20:	d109      	bne.n	8006b36 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006b22:	4b11      	ldr	r3, [pc, #68]	; (8006b68 <xTimerGenericCommand+0x98>)
 8006b24:	6818      	ldr	r0, [r3, #0]
 8006b26:	f107 0110 	add.w	r1, r7, #16
 8006b2a:	2300      	movs	r3, #0
 8006b2c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006b2e:	f7fe fc77 	bl	8005420 <xQueueGenericSend>
 8006b32:	6278      	str	r0, [r7, #36]	; 0x24
 8006b34:	e012      	b.n	8006b5c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006b36:	4b0c      	ldr	r3, [pc, #48]	; (8006b68 <xTimerGenericCommand+0x98>)
 8006b38:	6818      	ldr	r0, [r3, #0]
 8006b3a:	f107 0110 	add.w	r1, r7, #16
 8006b3e:	2300      	movs	r3, #0
 8006b40:	2200      	movs	r2, #0
 8006b42:	f7fe fc6d 	bl	8005420 <xQueueGenericSend>
 8006b46:	6278      	str	r0, [r7, #36]	; 0x24
 8006b48:	e008      	b.n	8006b5c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006b4a:	4b07      	ldr	r3, [pc, #28]	; (8006b68 <xTimerGenericCommand+0x98>)
 8006b4c:	6818      	ldr	r0, [r3, #0]
 8006b4e:	f107 0110 	add.w	r1, r7, #16
 8006b52:	2300      	movs	r3, #0
 8006b54:	683a      	ldr	r2, [r7, #0]
 8006b56:	f7fe fd61 	bl	800561c <xQueueGenericSendFromISR>
 8006b5a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006b5e:	4618      	mov	r0, r3
 8006b60:	3728      	adds	r7, #40	; 0x28
 8006b62:	46bd      	mov	sp, r7
 8006b64:	bd80      	pop	{r7, pc}
 8006b66:	bf00      	nop
 8006b68:	20000f90 	.word	0x20000f90

08006b6c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006b6c:	b580      	push	{r7, lr}
 8006b6e:	b088      	sub	sp, #32
 8006b70:	af02      	add	r7, sp, #8
 8006b72:	6078      	str	r0, [r7, #4]
 8006b74:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006b76:	4b22      	ldr	r3, [pc, #136]	; (8006c00 <prvProcessExpiredTimer+0x94>)
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	68db      	ldr	r3, [r3, #12]
 8006b7c:	68db      	ldr	r3, [r3, #12]
 8006b7e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006b80:	697b      	ldr	r3, [r7, #20]
 8006b82:	3304      	adds	r3, #4
 8006b84:	4618      	mov	r0, r3
 8006b86:	f7fe fb1d 	bl	80051c4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006b8a:	697b      	ldr	r3, [r7, #20]
 8006b8c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006b90:	f003 0304 	and.w	r3, r3, #4
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d022      	beq.n	8006bde <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006b98:	697b      	ldr	r3, [r7, #20]
 8006b9a:	699a      	ldr	r2, [r3, #24]
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	18d1      	adds	r1, r2, r3
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	683a      	ldr	r2, [r7, #0]
 8006ba4:	6978      	ldr	r0, [r7, #20]
 8006ba6:	f000 f8d1 	bl	8006d4c <prvInsertTimerInActiveList>
 8006baa:	4603      	mov	r3, r0
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d01f      	beq.n	8006bf0 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006bb0:	2300      	movs	r3, #0
 8006bb2:	9300      	str	r3, [sp, #0]
 8006bb4:	2300      	movs	r3, #0
 8006bb6:	687a      	ldr	r2, [r7, #4]
 8006bb8:	2100      	movs	r1, #0
 8006bba:	6978      	ldr	r0, [r7, #20]
 8006bbc:	f7ff ff88 	bl	8006ad0 <xTimerGenericCommand>
 8006bc0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8006bc2:	693b      	ldr	r3, [r7, #16]
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d113      	bne.n	8006bf0 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8006bc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bcc:	f383 8811 	msr	BASEPRI, r3
 8006bd0:	f3bf 8f6f 	isb	sy
 8006bd4:	f3bf 8f4f 	dsb	sy
 8006bd8:	60fb      	str	r3, [r7, #12]
}
 8006bda:	bf00      	nop
 8006bdc:	e7fe      	b.n	8006bdc <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006bde:	697b      	ldr	r3, [r7, #20]
 8006be0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006be4:	f023 0301 	bic.w	r3, r3, #1
 8006be8:	b2da      	uxtb	r2, r3
 8006bea:	697b      	ldr	r3, [r7, #20]
 8006bec:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006bf0:	697b      	ldr	r3, [r7, #20]
 8006bf2:	6a1b      	ldr	r3, [r3, #32]
 8006bf4:	6978      	ldr	r0, [r7, #20]
 8006bf6:	4798      	blx	r3
}
 8006bf8:	bf00      	nop
 8006bfa:	3718      	adds	r7, #24
 8006bfc:	46bd      	mov	sp, r7
 8006bfe:	bd80      	pop	{r7, pc}
 8006c00:	20000f88 	.word	0x20000f88

08006c04 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8006c04:	b580      	push	{r7, lr}
 8006c06:	b084      	sub	sp, #16
 8006c08:	af00      	add	r7, sp, #0
 8006c0a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006c0c:	f107 0308 	add.w	r3, r7, #8
 8006c10:	4618      	mov	r0, r3
 8006c12:	f000 f857 	bl	8006cc4 <prvGetNextExpireTime>
 8006c16:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006c18:	68bb      	ldr	r3, [r7, #8]
 8006c1a:	4619      	mov	r1, r3
 8006c1c:	68f8      	ldr	r0, [r7, #12]
 8006c1e:	f000 f803 	bl	8006c28 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006c22:	f000 f8d5 	bl	8006dd0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006c26:	e7f1      	b.n	8006c0c <prvTimerTask+0x8>

08006c28 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006c28:	b580      	push	{r7, lr}
 8006c2a:	b084      	sub	sp, #16
 8006c2c:	af00      	add	r7, sp, #0
 8006c2e:	6078      	str	r0, [r7, #4]
 8006c30:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006c32:	f7ff fa39 	bl	80060a8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006c36:	f107 0308 	add.w	r3, r7, #8
 8006c3a:	4618      	mov	r0, r3
 8006c3c:	f000 f866 	bl	8006d0c <prvSampleTimeNow>
 8006c40:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006c42:	68bb      	ldr	r3, [r7, #8]
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d130      	bne.n	8006caa <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006c48:	683b      	ldr	r3, [r7, #0]
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d10a      	bne.n	8006c64 <prvProcessTimerOrBlockTask+0x3c>
 8006c4e:	687a      	ldr	r2, [r7, #4]
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	429a      	cmp	r2, r3
 8006c54:	d806      	bhi.n	8006c64 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006c56:	f7ff fa35 	bl	80060c4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006c5a:	68f9      	ldr	r1, [r7, #12]
 8006c5c:	6878      	ldr	r0, [r7, #4]
 8006c5e:	f7ff ff85 	bl	8006b6c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8006c62:	e024      	b.n	8006cae <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006c64:	683b      	ldr	r3, [r7, #0]
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d008      	beq.n	8006c7c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006c6a:	4b13      	ldr	r3, [pc, #76]	; (8006cb8 <prvProcessTimerOrBlockTask+0x90>)
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d101      	bne.n	8006c78 <prvProcessTimerOrBlockTask+0x50>
 8006c74:	2301      	movs	r3, #1
 8006c76:	e000      	b.n	8006c7a <prvProcessTimerOrBlockTask+0x52>
 8006c78:	2300      	movs	r3, #0
 8006c7a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006c7c:	4b0f      	ldr	r3, [pc, #60]	; (8006cbc <prvProcessTimerOrBlockTask+0x94>)
 8006c7e:	6818      	ldr	r0, [r3, #0]
 8006c80:	687a      	ldr	r2, [r7, #4]
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	1ad3      	subs	r3, r2, r3
 8006c86:	683a      	ldr	r2, [r7, #0]
 8006c88:	4619      	mov	r1, r3
 8006c8a:	f7fe ff7d 	bl	8005b88 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006c8e:	f7ff fa19 	bl	80060c4 <xTaskResumeAll>
 8006c92:	4603      	mov	r3, r0
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d10a      	bne.n	8006cae <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006c98:	4b09      	ldr	r3, [pc, #36]	; (8006cc0 <prvProcessTimerOrBlockTask+0x98>)
 8006c9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006c9e:	601a      	str	r2, [r3, #0]
 8006ca0:	f3bf 8f4f 	dsb	sy
 8006ca4:	f3bf 8f6f 	isb	sy
}
 8006ca8:	e001      	b.n	8006cae <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006caa:	f7ff fa0b 	bl	80060c4 <xTaskResumeAll>
}
 8006cae:	bf00      	nop
 8006cb0:	3710      	adds	r7, #16
 8006cb2:	46bd      	mov	sp, r7
 8006cb4:	bd80      	pop	{r7, pc}
 8006cb6:	bf00      	nop
 8006cb8:	20000f8c 	.word	0x20000f8c
 8006cbc:	20000f90 	.word	0x20000f90
 8006cc0:	e000ed04 	.word	0xe000ed04

08006cc4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006cc4:	b480      	push	{r7}
 8006cc6:	b085      	sub	sp, #20
 8006cc8:	af00      	add	r7, sp, #0
 8006cca:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006ccc:	4b0e      	ldr	r3, [pc, #56]	; (8006d08 <prvGetNextExpireTime+0x44>)
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d101      	bne.n	8006cda <prvGetNextExpireTime+0x16>
 8006cd6:	2201      	movs	r2, #1
 8006cd8:	e000      	b.n	8006cdc <prvGetNextExpireTime+0x18>
 8006cda:	2200      	movs	r2, #0
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d105      	bne.n	8006cf4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006ce8:	4b07      	ldr	r3, [pc, #28]	; (8006d08 <prvGetNextExpireTime+0x44>)
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	68db      	ldr	r3, [r3, #12]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	60fb      	str	r3, [r7, #12]
 8006cf2:	e001      	b.n	8006cf8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006cf4:	2300      	movs	r3, #0
 8006cf6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006cf8:	68fb      	ldr	r3, [r7, #12]
}
 8006cfa:	4618      	mov	r0, r3
 8006cfc:	3714      	adds	r7, #20
 8006cfe:	46bd      	mov	sp, r7
 8006d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d04:	4770      	bx	lr
 8006d06:	bf00      	nop
 8006d08:	20000f88 	.word	0x20000f88

08006d0c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006d0c:	b580      	push	{r7, lr}
 8006d0e:	b084      	sub	sp, #16
 8006d10:	af00      	add	r7, sp, #0
 8006d12:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006d14:	f7ff fa74 	bl	8006200 <xTaskGetTickCount>
 8006d18:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006d1a:	4b0b      	ldr	r3, [pc, #44]	; (8006d48 <prvSampleTimeNow+0x3c>)
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	68fa      	ldr	r2, [r7, #12]
 8006d20:	429a      	cmp	r2, r3
 8006d22:	d205      	bcs.n	8006d30 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006d24:	f000 f936 	bl	8006f94 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	2201      	movs	r2, #1
 8006d2c:	601a      	str	r2, [r3, #0]
 8006d2e:	e002      	b.n	8006d36 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	2200      	movs	r2, #0
 8006d34:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006d36:	4a04      	ldr	r2, [pc, #16]	; (8006d48 <prvSampleTimeNow+0x3c>)
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006d3c:	68fb      	ldr	r3, [r7, #12]
}
 8006d3e:	4618      	mov	r0, r3
 8006d40:	3710      	adds	r7, #16
 8006d42:	46bd      	mov	sp, r7
 8006d44:	bd80      	pop	{r7, pc}
 8006d46:	bf00      	nop
 8006d48:	20000f98 	.word	0x20000f98

08006d4c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006d4c:	b580      	push	{r7, lr}
 8006d4e:	b086      	sub	sp, #24
 8006d50:	af00      	add	r7, sp, #0
 8006d52:	60f8      	str	r0, [r7, #12]
 8006d54:	60b9      	str	r1, [r7, #8]
 8006d56:	607a      	str	r2, [r7, #4]
 8006d58:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006d5a:	2300      	movs	r3, #0
 8006d5c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	68ba      	ldr	r2, [r7, #8]
 8006d62:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	68fa      	ldr	r2, [r7, #12]
 8006d68:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006d6a:	68ba      	ldr	r2, [r7, #8]
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	429a      	cmp	r2, r3
 8006d70:	d812      	bhi.n	8006d98 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006d72:	687a      	ldr	r2, [r7, #4]
 8006d74:	683b      	ldr	r3, [r7, #0]
 8006d76:	1ad2      	subs	r2, r2, r3
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	699b      	ldr	r3, [r3, #24]
 8006d7c:	429a      	cmp	r2, r3
 8006d7e:	d302      	bcc.n	8006d86 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006d80:	2301      	movs	r3, #1
 8006d82:	617b      	str	r3, [r7, #20]
 8006d84:	e01b      	b.n	8006dbe <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006d86:	4b10      	ldr	r3, [pc, #64]	; (8006dc8 <prvInsertTimerInActiveList+0x7c>)
 8006d88:	681a      	ldr	r2, [r3, #0]
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	3304      	adds	r3, #4
 8006d8e:	4619      	mov	r1, r3
 8006d90:	4610      	mov	r0, r2
 8006d92:	f7fe f9de 	bl	8005152 <vListInsert>
 8006d96:	e012      	b.n	8006dbe <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006d98:	687a      	ldr	r2, [r7, #4]
 8006d9a:	683b      	ldr	r3, [r7, #0]
 8006d9c:	429a      	cmp	r2, r3
 8006d9e:	d206      	bcs.n	8006dae <prvInsertTimerInActiveList+0x62>
 8006da0:	68ba      	ldr	r2, [r7, #8]
 8006da2:	683b      	ldr	r3, [r7, #0]
 8006da4:	429a      	cmp	r2, r3
 8006da6:	d302      	bcc.n	8006dae <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006da8:	2301      	movs	r3, #1
 8006daa:	617b      	str	r3, [r7, #20]
 8006dac:	e007      	b.n	8006dbe <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006dae:	4b07      	ldr	r3, [pc, #28]	; (8006dcc <prvInsertTimerInActiveList+0x80>)
 8006db0:	681a      	ldr	r2, [r3, #0]
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	3304      	adds	r3, #4
 8006db6:	4619      	mov	r1, r3
 8006db8:	4610      	mov	r0, r2
 8006dba:	f7fe f9ca 	bl	8005152 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8006dbe:	697b      	ldr	r3, [r7, #20]
}
 8006dc0:	4618      	mov	r0, r3
 8006dc2:	3718      	adds	r7, #24
 8006dc4:	46bd      	mov	sp, r7
 8006dc6:	bd80      	pop	{r7, pc}
 8006dc8:	20000f8c 	.word	0x20000f8c
 8006dcc:	20000f88 	.word	0x20000f88

08006dd0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006dd0:	b580      	push	{r7, lr}
 8006dd2:	b08e      	sub	sp, #56	; 0x38
 8006dd4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006dd6:	e0ca      	b.n	8006f6e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	da18      	bge.n	8006e10 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8006dde:	1d3b      	adds	r3, r7, #4
 8006de0:	3304      	adds	r3, #4
 8006de2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006de4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d10a      	bne.n	8006e00 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8006dea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dee:	f383 8811 	msr	BASEPRI, r3
 8006df2:	f3bf 8f6f 	isb	sy
 8006df6:	f3bf 8f4f 	dsb	sy
 8006dfa:	61fb      	str	r3, [r7, #28]
}
 8006dfc:	bf00      	nop
 8006dfe:	e7fe      	b.n	8006dfe <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006e00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006e06:	6850      	ldr	r0, [r2, #4]
 8006e08:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006e0a:	6892      	ldr	r2, [r2, #8]
 8006e0c:	4611      	mov	r1, r2
 8006e0e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	f2c0 80aa 	blt.w	8006f6c <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006e1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e1e:	695b      	ldr	r3, [r3, #20]
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d004      	beq.n	8006e2e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006e24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e26:	3304      	adds	r3, #4
 8006e28:	4618      	mov	r0, r3
 8006e2a:	f7fe f9cb 	bl	80051c4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006e2e:	463b      	mov	r3, r7
 8006e30:	4618      	mov	r0, r3
 8006e32:	f7ff ff6b 	bl	8006d0c <prvSampleTimeNow>
 8006e36:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	2b09      	cmp	r3, #9
 8006e3c:	f200 8097 	bhi.w	8006f6e <prvProcessReceivedCommands+0x19e>
 8006e40:	a201      	add	r2, pc, #4	; (adr r2, 8006e48 <prvProcessReceivedCommands+0x78>)
 8006e42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e46:	bf00      	nop
 8006e48:	08006e71 	.word	0x08006e71
 8006e4c:	08006e71 	.word	0x08006e71
 8006e50:	08006e71 	.word	0x08006e71
 8006e54:	08006ee5 	.word	0x08006ee5
 8006e58:	08006ef9 	.word	0x08006ef9
 8006e5c:	08006f43 	.word	0x08006f43
 8006e60:	08006e71 	.word	0x08006e71
 8006e64:	08006e71 	.word	0x08006e71
 8006e68:	08006ee5 	.word	0x08006ee5
 8006e6c:	08006ef9 	.word	0x08006ef9
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006e70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e72:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006e76:	f043 0301 	orr.w	r3, r3, #1
 8006e7a:	b2da      	uxtb	r2, r3
 8006e7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e7e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006e82:	68ba      	ldr	r2, [r7, #8]
 8006e84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e86:	699b      	ldr	r3, [r3, #24]
 8006e88:	18d1      	adds	r1, r2, r3
 8006e8a:	68bb      	ldr	r3, [r7, #8]
 8006e8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006e8e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006e90:	f7ff ff5c 	bl	8006d4c <prvInsertTimerInActiveList>
 8006e94:	4603      	mov	r3, r0
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d069      	beq.n	8006f6e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006e9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e9c:	6a1b      	ldr	r3, [r3, #32]
 8006e9e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006ea0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006ea2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ea4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006ea8:	f003 0304 	and.w	r3, r3, #4
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d05e      	beq.n	8006f6e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006eb0:	68ba      	ldr	r2, [r7, #8]
 8006eb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006eb4:	699b      	ldr	r3, [r3, #24]
 8006eb6:	441a      	add	r2, r3
 8006eb8:	2300      	movs	r3, #0
 8006eba:	9300      	str	r3, [sp, #0]
 8006ebc:	2300      	movs	r3, #0
 8006ebe:	2100      	movs	r1, #0
 8006ec0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006ec2:	f7ff fe05 	bl	8006ad0 <xTimerGenericCommand>
 8006ec6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006ec8:	6a3b      	ldr	r3, [r7, #32]
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d14f      	bne.n	8006f6e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8006ece:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ed2:	f383 8811 	msr	BASEPRI, r3
 8006ed6:	f3bf 8f6f 	isb	sy
 8006eda:	f3bf 8f4f 	dsb	sy
 8006ede:	61bb      	str	r3, [r7, #24]
}
 8006ee0:	bf00      	nop
 8006ee2:	e7fe      	b.n	8006ee2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006ee4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ee6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006eea:	f023 0301 	bic.w	r3, r3, #1
 8006eee:	b2da      	uxtb	r2, r3
 8006ef0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ef2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8006ef6:	e03a      	b.n	8006f6e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006ef8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006efa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006efe:	f043 0301 	orr.w	r3, r3, #1
 8006f02:	b2da      	uxtb	r2, r3
 8006f04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f06:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006f0a:	68ba      	ldr	r2, [r7, #8]
 8006f0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f0e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006f10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f12:	699b      	ldr	r3, [r3, #24]
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d10a      	bne.n	8006f2e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8006f18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f1c:	f383 8811 	msr	BASEPRI, r3
 8006f20:	f3bf 8f6f 	isb	sy
 8006f24:	f3bf 8f4f 	dsb	sy
 8006f28:	617b      	str	r3, [r7, #20]
}
 8006f2a:	bf00      	nop
 8006f2c:	e7fe      	b.n	8006f2c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006f2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f30:	699a      	ldr	r2, [r3, #24]
 8006f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f34:	18d1      	adds	r1, r2, r3
 8006f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006f3a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006f3c:	f7ff ff06 	bl	8006d4c <prvInsertTimerInActiveList>
					break;
 8006f40:	e015      	b.n	8006f6e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8006f42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f44:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006f48:	f003 0302 	and.w	r3, r3, #2
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d103      	bne.n	8006f58 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8006f50:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006f52:	f000 fbdd 	bl	8007710 <vPortFree>
 8006f56:	e00a      	b.n	8006f6e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006f58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f5a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006f5e:	f023 0301 	bic.w	r3, r3, #1
 8006f62:	b2da      	uxtb	r2, r3
 8006f64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f66:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8006f6a:	e000      	b.n	8006f6e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8006f6c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006f6e:	4b08      	ldr	r3, [pc, #32]	; (8006f90 <prvProcessReceivedCommands+0x1c0>)
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	1d39      	adds	r1, r7, #4
 8006f74:	2200      	movs	r2, #0
 8006f76:	4618      	mov	r0, r3
 8006f78:	f7fe fbec 	bl	8005754 <xQueueReceive>
 8006f7c:	4603      	mov	r3, r0
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	f47f af2a 	bne.w	8006dd8 <prvProcessReceivedCommands+0x8>
	}
}
 8006f84:	bf00      	nop
 8006f86:	bf00      	nop
 8006f88:	3730      	adds	r7, #48	; 0x30
 8006f8a:	46bd      	mov	sp, r7
 8006f8c:	bd80      	pop	{r7, pc}
 8006f8e:	bf00      	nop
 8006f90:	20000f90 	.word	0x20000f90

08006f94 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006f94:	b580      	push	{r7, lr}
 8006f96:	b088      	sub	sp, #32
 8006f98:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006f9a:	e048      	b.n	800702e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006f9c:	4b2d      	ldr	r3, [pc, #180]	; (8007054 <prvSwitchTimerLists+0xc0>)
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	68db      	ldr	r3, [r3, #12]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006fa6:	4b2b      	ldr	r3, [pc, #172]	; (8007054 <prvSwitchTimerLists+0xc0>)
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	68db      	ldr	r3, [r3, #12]
 8006fac:	68db      	ldr	r3, [r3, #12]
 8006fae:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	3304      	adds	r3, #4
 8006fb4:	4618      	mov	r0, r3
 8006fb6:	f7fe f905 	bl	80051c4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	6a1b      	ldr	r3, [r3, #32]
 8006fbe:	68f8      	ldr	r0, [r7, #12]
 8006fc0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006fc8:	f003 0304 	and.w	r3, r3, #4
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d02e      	beq.n	800702e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	699b      	ldr	r3, [r3, #24]
 8006fd4:	693a      	ldr	r2, [r7, #16]
 8006fd6:	4413      	add	r3, r2
 8006fd8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006fda:	68ba      	ldr	r2, [r7, #8]
 8006fdc:	693b      	ldr	r3, [r7, #16]
 8006fde:	429a      	cmp	r2, r3
 8006fe0:	d90e      	bls.n	8007000 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	68ba      	ldr	r2, [r7, #8]
 8006fe6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	68fa      	ldr	r2, [r7, #12]
 8006fec:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006fee:	4b19      	ldr	r3, [pc, #100]	; (8007054 <prvSwitchTimerLists+0xc0>)
 8006ff0:	681a      	ldr	r2, [r3, #0]
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	3304      	adds	r3, #4
 8006ff6:	4619      	mov	r1, r3
 8006ff8:	4610      	mov	r0, r2
 8006ffa:	f7fe f8aa 	bl	8005152 <vListInsert>
 8006ffe:	e016      	b.n	800702e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007000:	2300      	movs	r3, #0
 8007002:	9300      	str	r3, [sp, #0]
 8007004:	2300      	movs	r3, #0
 8007006:	693a      	ldr	r2, [r7, #16]
 8007008:	2100      	movs	r1, #0
 800700a:	68f8      	ldr	r0, [r7, #12]
 800700c:	f7ff fd60 	bl	8006ad0 <xTimerGenericCommand>
 8007010:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	2b00      	cmp	r3, #0
 8007016:	d10a      	bne.n	800702e <prvSwitchTimerLists+0x9a>
	__asm volatile
 8007018:	f04f 0350 	mov.w	r3, #80	; 0x50
 800701c:	f383 8811 	msr	BASEPRI, r3
 8007020:	f3bf 8f6f 	isb	sy
 8007024:	f3bf 8f4f 	dsb	sy
 8007028:	603b      	str	r3, [r7, #0]
}
 800702a:	bf00      	nop
 800702c:	e7fe      	b.n	800702c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800702e:	4b09      	ldr	r3, [pc, #36]	; (8007054 <prvSwitchTimerLists+0xc0>)
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	2b00      	cmp	r3, #0
 8007036:	d1b1      	bne.n	8006f9c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007038:	4b06      	ldr	r3, [pc, #24]	; (8007054 <prvSwitchTimerLists+0xc0>)
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800703e:	4b06      	ldr	r3, [pc, #24]	; (8007058 <prvSwitchTimerLists+0xc4>)
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	4a04      	ldr	r2, [pc, #16]	; (8007054 <prvSwitchTimerLists+0xc0>)
 8007044:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007046:	4a04      	ldr	r2, [pc, #16]	; (8007058 <prvSwitchTimerLists+0xc4>)
 8007048:	697b      	ldr	r3, [r7, #20]
 800704a:	6013      	str	r3, [r2, #0]
}
 800704c:	bf00      	nop
 800704e:	3718      	adds	r7, #24
 8007050:	46bd      	mov	sp, r7
 8007052:	bd80      	pop	{r7, pc}
 8007054:	20000f88 	.word	0x20000f88
 8007058:	20000f8c 	.word	0x20000f8c

0800705c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800705c:	b580      	push	{r7, lr}
 800705e:	b082      	sub	sp, #8
 8007060:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007062:	f000 f967 	bl	8007334 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007066:	4b15      	ldr	r3, [pc, #84]	; (80070bc <prvCheckForValidListAndQueue+0x60>)
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	2b00      	cmp	r3, #0
 800706c:	d120      	bne.n	80070b0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800706e:	4814      	ldr	r0, [pc, #80]	; (80070c0 <prvCheckForValidListAndQueue+0x64>)
 8007070:	f7fe f81e 	bl	80050b0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007074:	4813      	ldr	r0, [pc, #76]	; (80070c4 <prvCheckForValidListAndQueue+0x68>)
 8007076:	f7fe f81b 	bl	80050b0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800707a:	4b13      	ldr	r3, [pc, #76]	; (80070c8 <prvCheckForValidListAndQueue+0x6c>)
 800707c:	4a10      	ldr	r2, [pc, #64]	; (80070c0 <prvCheckForValidListAndQueue+0x64>)
 800707e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007080:	4b12      	ldr	r3, [pc, #72]	; (80070cc <prvCheckForValidListAndQueue+0x70>)
 8007082:	4a10      	ldr	r2, [pc, #64]	; (80070c4 <prvCheckForValidListAndQueue+0x68>)
 8007084:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007086:	2300      	movs	r3, #0
 8007088:	9300      	str	r3, [sp, #0]
 800708a:	4b11      	ldr	r3, [pc, #68]	; (80070d0 <prvCheckForValidListAndQueue+0x74>)
 800708c:	4a11      	ldr	r2, [pc, #68]	; (80070d4 <prvCheckForValidListAndQueue+0x78>)
 800708e:	2110      	movs	r1, #16
 8007090:	200a      	movs	r0, #10
 8007092:	f7fe f929 	bl	80052e8 <xQueueGenericCreateStatic>
 8007096:	4603      	mov	r3, r0
 8007098:	4a08      	ldr	r2, [pc, #32]	; (80070bc <prvCheckForValidListAndQueue+0x60>)
 800709a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800709c:	4b07      	ldr	r3, [pc, #28]	; (80070bc <prvCheckForValidListAndQueue+0x60>)
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d005      	beq.n	80070b0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80070a4:	4b05      	ldr	r3, [pc, #20]	; (80070bc <prvCheckForValidListAndQueue+0x60>)
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	490b      	ldr	r1, [pc, #44]	; (80070d8 <prvCheckForValidListAndQueue+0x7c>)
 80070aa:	4618      	mov	r0, r3
 80070ac:	f7fe fd42 	bl	8005b34 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80070b0:	f000 f970 	bl	8007394 <vPortExitCritical>
}
 80070b4:	bf00      	nop
 80070b6:	46bd      	mov	sp, r7
 80070b8:	bd80      	pop	{r7, pc}
 80070ba:	bf00      	nop
 80070bc:	20000f90 	.word	0x20000f90
 80070c0:	20000f60 	.word	0x20000f60
 80070c4:	20000f74 	.word	0x20000f74
 80070c8:	20000f88 	.word	0x20000f88
 80070cc:	20000f8c 	.word	0x20000f8c
 80070d0:	2000103c 	.word	0x2000103c
 80070d4:	20000f9c 	.word	0x20000f9c
 80070d8:	08007b7c 	.word	0x08007b7c

080070dc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80070dc:	b480      	push	{r7}
 80070de:	b085      	sub	sp, #20
 80070e0:	af00      	add	r7, sp, #0
 80070e2:	60f8      	str	r0, [r7, #12]
 80070e4:	60b9      	str	r1, [r7, #8]
 80070e6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	3b04      	subs	r3, #4
 80070ec:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80070f4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	3b04      	subs	r3, #4
 80070fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80070fc:	68bb      	ldr	r3, [r7, #8]
 80070fe:	f023 0201 	bic.w	r2, r3, #1
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	3b04      	subs	r3, #4
 800710a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800710c:	4a0c      	ldr	r2, [pc, #48]	; (8007140 <pxPortInitialiseStack+0x64>)
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	3b14      	subs	r3, #20
 8007116:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007118:	687a      	ldr	r2, [r7, #4]
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	3b04      	subs	r3, #4
 8007122:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	f06f 0202 	mvn.w	r2, #2
 800712a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	3b20      	subs	r3, #32
 8007130:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007132:	68fb      	ldr	r3, [r7, #12]
}
 8007134:	4618      	mov	r0, r3
 8007136:	3714      	adds	r7, #20
 8007138:	46bd      	mov	sp, r7
 800713a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800713e:	4770      	bx	lr
 8007140:	08007145 	.word	0x08007145

08007144 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007144:	b480      	push	{r7}
 8007146:	b085      	sub	sp, #20
 8007148:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800714a:	2300      	movs	r3, #0
 800714c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800714e:	4b12      	ldr	r3, [pc, #72]	; (8007198 <prvTaskExitError+0x54>)
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007156:	d00a      	beq.n	800716e <prvTaskExitError+0x2a>
	__asm volatile
 8007158:	f04f 0350 	mov.w	r3, #80	; 0x50
 800715c:	f383 8811 	msr	BASEPRI, r3
 8007160:	f3bf 8f6f 	isb	sy
 8007164:	f3bf 8f4f 	dsb	sy
 8007168:	60fb      	str	r3, [r7, #12]
}
 800716a:	bf00      	nop
 800716c:	e7fe      	b.n	800716c <prvTaskExitError+0x28>
	__asm volatile
 800716e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007172:	f383 8811 	msr	BASEPRI, r3
 8007176:	f3bf 8f6f 	isb	sy
 800717a:	f3bf 8f4f 	dsb	sy
 800717e:	60bb      	str	r3, [r7, #8]
}
 8007180:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007182:	bf00      	nop
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	2b00      	cmp	r3, #0
 8007188:	d0fc      	beq.n	8007184 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800718a:	bf00      	nop
 800718c:	bf00      	nop
 800718e:	3714      	adds	r7, #20
 8007190:	46bd      	mov	sp, r7
 8007192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007196:	4770      	bx	lr
 8007198:	2000001c 	.word	0x2000001c
 800719c:	00000000 	.word	0x00000000

080071a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80071a0:	4b07      	ldr	r3, [pc, #28]	; (80071c0 <pxCurrentTCBConst2>)
 80071a2:	6819      	ldr	r1, [r3, #0]
 80071a4:	6808      	ldr	r0, [r1, #0]
 80071a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071aa:	f380 8809 	msr	PSP, r0
 80071ae:	f3bf 8f6f 	isb	sy
 80071b2:	f04f 0000 	mov.w	r0, #0
 80071b6:	f380 8811 	msr	BASEPRI, r0
 80071ba:	4770      	bx	lr
 80071bc:	f3af 8000 	nop.w

080071c0 <pxCurrentTCBConst2>:
 80071c0:	20000a60 	.word	0x20000a60
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80071c4:	bf00      	nop
 80071c6:	bf00      	nop

080071c8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80071c8:	4808      	ldr	r0, [pc, #32]	; (80071ec <prvPortStartFirstTask+0x24>)
 80071ca:	6800      	ldr	r0, [r0, #0]
 80071cc:	6800      	ldr	r0, [r0, #0]
 80071ce:	f380 8808 	msr	MSP, r0
 80071d2:	f04f 0000 	mov.w	r0, #0
 80071d6:	f380 8814 	msr	CONTROL, r0
 80071da:	b662      	cpsie	i
 80071dc:	b661      	cpsie	f
 80071de:	f3bf 8f4f 	dsb	sy
 80071e2:	f3bf 8f6f 	isb	sy
 80071e6:	df00      	svc	0
 80071e8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80071ea:	bf00      	nop
 80071ec:	e000ed08 	.word	0xe000ed08

080071f0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80071f0:	b580      	push	{r7, lr}
 80071f2:	b086      	sub	sp, #24
 80071f4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80071f6:	4b46      	ldr	r3, [pc, #280]	; (8007310 <xPortStartScheduler+0x120>)
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	4a46      	ldr	r2, [pc, #280]	; (8007314 <xPortStartScheduler+0x124>)
 80071fc:	4293      	cmp	r3, r2
 80071fe:	d10a      	bne.n	8007216 <xPortStartScheduler+0x26>
	__asm volatile
 8007200:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007204:	f383 8811 	msr	BASEPRI, r3
 8007208:	f3bf 8f6f 	isb	sy
 800720c:	f3bf 8f4f 	dsb	sy
 8007210:	613b      	str	r3, [r7, #16]
}
 8007212:	bf00      	nop
 8007214:	e7fe      	b.n	8007214 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007216:	4b3e      	ldr	r3, [pc, #248]	; (8007310 <xPortStartScheduler+0x120>)
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	4a3f      	ldr	r2, [pc, #252]	; (8007318 <xPortStartScheduler+0x128>)
 800721c:	4293      	cmp	r3, r2
 800721e:	d10a      	bne.n	8007236 <xPortStartScheduler+0x46>
	__asm volatile
 8007220:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007224:	f383 8811 	msr	BASEPRI, r3
 8007228:	f3bf 8f6f 	isb	sy
 800722c:	f3bf 8f4f 	dsb	sy
 8007230:	60fb      	str	r3, [r7, #12]
}
 8007232:	bf00      	nop
 8007234:	e7fe      	b.n	8007234 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007236:	4b39      	ldr	r3, [pc, #228]	; (800731c <xPortStartScheduler+0x12c>)
 8007238:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800723a:	697b      	ldr	r3, [r7, #20]
 800723c:	781b      	ldrb	r3, [r3, #0]
 800723e:	b2db      	uxtb	r3, r3
 8007240:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007242:	697b      	ldr	r3, [r7, #20]
 8007244:	22ff      	movs	r2, #255	; 0xff
 8007246:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007248:	697b      	ldr	r3, [r7, #20]
 800724a:	781b      	ldrb	r3, [r3, #0]
 800724c:	b2db      	uxtb	r3, r3
 800724e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007250:	78fb      	ldrb	r3, [r7, #3]
 8007252:	b2db      	uxtb	r3, r3
 8007254:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007258:	b2da      	uxtb	r2, r3
 800725a:	4b31      	ldr	r3, [pc, #196]	; (8007320 <xPortStartScheduler+0x130>)
 800725c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800725e:	4b31      	ldr	r3, [pc, #196]	; (8007324 <xPortStartScheduler+0x134>)
 8007260:	2207      	movs	r2, #7
 8007262:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007264:	e009      	b.n	800727a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8007266:	4b2f      	ldr	r3, [pc, #188]	; (8007324 <xPortStartScheduler+0x134>)
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	3b01      	subs	r3, #1
 800726c:	4a2d      	ldr	r2, [pc, #180]	; (8007324 <xPortStartScheduler+0x134>)
 800726e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007270:	78fb      	ldrb	r3, [r7, #3]
 8007272:	b2db      	uxtb	r3, r3
 8007274:	005b      	lsls	r3, r3, #1
 8007276:	b2db      	uxtb	r3, r3
 8007278:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800727a:	78fb      	ldrb	r3, [r7, #3]
 800727c:	b2db      	uxtb	r3, r3
 800727e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007282:	2b80      	cmp	r3, #128	; 0x80
 8007284:	d0ef      	beq.n	8007266 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007286:	4b27      	ldr	r3, [pc, #156]	; (8007324 <xPortStartScheduler+0x134>)
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	f1c3 0307 	rsb	r3, r3, #7
 800728e:	2b04      	cmp	r3, #4
 8007290:	d00a      	beq.n	80072a8 <xPortStartScheduler+0xb8>
	__asm volatile
 8007292:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007296:	f383 8811 	msr	BASEPRI, r3
 800729a:	f3bf 8f6f 	isb	sy
 800729e:	f3bf 8f4f 	dsb	sy
 80072a2:	60bb      	str	r3, [r7, #8]
}
 80072a4:	bf00      	nop
 80072a6:	e7fe      	b.n	80072a6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80072a8:	4b1e      	ldr	r3, [pc, #120]	; (8007324 <xPortStartScheduler+0x134>)
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	021b      	lsls	r3, r3, #8
 80072ae:	4a1d      	ldr	r2, [pc, #116]	; (8007324 <xPortStartScheduler+0x134>)
 80072b0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80072b2:	4b1c      	ldr	r3, [pc, #112]	; (8007324 <xPortStartScheduler+0x134>)
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80072ba:	4a1a      	ldr	r2, [pc, #104]	; (8007324 <xPortStartScheduler+0x134>)
 80072bc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	b2da      	uxtb	r2, r3
 80072c2:	697b      	ldr	r3, [r7, #20]
 80072c4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80072c6:	4b18      	ldr	r3, [pc, #96]	; (8007328 <xPortStartScheduler+0x138>)
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	4a17      	ldr	r2, [pc, #92]	; (8007328 <xPortStartScheduler+0x138>)
 80072cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80072d0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80072d2:	4b15      	ldr	r3, [pc, #84]	; (8007328 <xPortStartScheduler+0x138>)
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	4a14      	ldr	r2, [pc, #80]	; (8007328 <xPortStartScheduler+0x138>)
 80072d8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80072dc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80072de:	f000 f8dd 	bl	800749c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80072e2:	4b12      	ldr	r3, [pc, #72]	; (800732c <xPortStartScheduler+0x13c>)
 80072e4:	2200      	movs	r2, #0
 80072e6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80072e8:	f000 f8fc 	bl	80074e4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80072ec:	4b10      	ldr	r3, [pc, #64]	; (8007330 <xPortStartScheduler+0x140>)
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	4a0f      	ldr	r2, [pc, #60]	; (8007330 <xPortStartScheduler+0x140>)
 80072f2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80072f6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80072f8:	f7ff ff66 	bl	80071c8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80072fc:	f7ff f84a 	bl	8006394 <vTaskSwitchContext>
	prvTaskExitError();
 8007300:	f7ff ff20 	bl	8007144 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007304:	2300      	movs	r3, #0
}
 8007306:	4618      	mov	r0, r3
 8007308:	3718      	adds	r7, #24
 800730a:	46bd      	mov	sp, r7
 800730c:	bd80      	pop	{r7, pc}
 800730e:	bf00      	nop
 8007310:	e000ed00 	.word	0xe000ed00
 8007314:	410fc271 	.word	0x410fc271
 8007318:	410fc270 	.word	0x410fc270
 800731c:	e000e400 	.word	0xe000e400
 8007320:	2000108c 	.word	0x2000108c
 8007324:	20001090 	.word	0x20001090
 8007328:	e000ed20 	.word	0xe000ed20
 800732c:	2000001c 	.word	0x2000001c
 8007330:	e000ef34 	.word	0xe000ef34

08007334 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007334:	b480      	push	{r7}
 8007336:	b083      	sub	sp, #12
 8007338:	af00      	add	r7, sp, #0
	__asm volatile
 800733a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800733e:	f383 8811 	msr	BASEPRI, r3
 8007342:	f3bf 8f6f 	isb	sy
 8007346:	f3bf 8f4f 	dsb	sy
 800734a:	607b      	str	r3, [r7, #4]
}
 800734c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800734e:	4b0f      	ldr	r3, [pc, #60]	; (800738c <vPortEnterCritical+0x58>)
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	3301      	adds	r3, #1
 8007354:	4a0d      	ldr	r2, [pc, #52]	; (800738c <vPortEnterCritical+0x58>)
 8007356:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007358:	4b0c      	ldr	r3, [pc, #48]	; (800738c <vPortEnterCritical+0x58>)
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	2b01      	cmp	r3, #1
 800735e:	d10f      	bne.n	8007380 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007360:	4b0b      	ldr	r3, [pc, #44]	; (8007390 <vPortEnterCritical+0x5c>)
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	b2db      	uxtb	r3, r3
 8007366:	2b00      	cmp	r3, #0
 8007368:	d00a      	beq.n	8007380 <vPortEnterCritical+0x4c>
	__asm volatile
 800736a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800736e:	f383 8811 	msr	BASEPRI, r3
 8007372:	f3bf 8f6f 	isb	sy
 8007376:	f3bf 8f4f 	dsb	sy
 800737a:	603b      	str	r3, [r7, #0]
}
 800737c:	bf00      	nop
 800737e:	e7fe      	b.n	800737e <vPortEnterCritical+0x4a>
	}
}
 8007380:	bf00      	nop
 8007382:	370c      	adds	r7, #12
 8007384:	46bd      	mov	sp, r7
 8007386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800738a:	4770      	bx	lr
 800738c:	2000001c 	.word	0x2000001c
 8007390:	e000ed04 	.word	0xe000ed04

08007394 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007394:	b480      	push	{r7}
 8007396:	b083      	sub	sp, #12
 8007398:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800739a:	4b12      	ldr	r3, [pc, #72]	; (80073e4 <vPortExitCritical+0x50>)
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d10a      	bne.n	80073b8 <vPortExitCritical+0x24>
	__asm volatile
 80073a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073a6:	f383 8811 	msr	BASEPRI, r3
 80073aa:	f3bf 8f6f 	isb	sy
 80073ae:	f3bf 8f4f 	dsb	sy
 80073b2:	607b      	str	r3, [r7, #4]
}
 80073b4:	bf00      	nop
 80073b6:	e7fe      	b.n	80073b6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80073b8:	4b0a      	ldr	r3, [pc, #40]	; (80073e4 <vPortExitCritical+0x50>)
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	3b01      	subs	r3, #1
 80073be:	4a09      	ldr	r2, [pc, #36]	; (80073e4 <vPortExitCritical+0x50>)
 80073c0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80073c2:	4b08      	ldr	r3, [pc, #32]	; (80073e4 <vPortExitCritical+0x50>)
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d105      	bne.n	80073d6 <vPortExitCritical+0x42>
 80073ca:	2300      	movs	r3, #0
 80073cc:	603b      	str	r3, [r7, #0]
	__asm volatile
 80073ce:	683b      	ldr	r3, [r7, #0]
 80073d0:	f383 8811 	msr	BASEPRI, r3
}
 80073d4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80073d6:	bf00      	nop
 80073d8:	370c      	adds	r7, #12
 80073da:	46bd      	mov	sp, r7
 80073dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e0:	4770      	bx	lr
 80073e2:	bf00      	nop
 80073e4:	2000001c 	.word	0x2000001c
	...

080073f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80073f0:	f3ef 8009 	mrs	r0, PSP
 80073f4:	f3bf 8f6f 	isb	sy
 80073f8:	4b15      	ldr	r3, [pc, #84]	; (8007450 <pxCurrentTCBConst>)
 80073fa:	681a      	ldr	r2, [r3, #0]
 80073fc:	f01e 0f10 	tst.w	lr, #16
 8007400:	bf08      	it	eq
 8007402:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007406:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800740a:	6010      	str	r0, [r2, #0]
 800740c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007410:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007414:	f380 8811 	msr	BASEPRI, r0
 8007418:	f3bf 8f4f 	dsb	sy
 800741c:	f3bf 8f6f 	isb	sy
 8007420:	f7fe ffb8 	bl	8006394 <vTaskSwitchContext>
 8007424:	f04f 0000 	mov.w	r0, #0
 8007428:	f380 8811 	msr	BASEPRI, r0
 800742c:	bc09      	pop	{r0, r3}
 800742e:	6819      	ldr	r1, [r3, #0]
 8007430:	6808      	ldr	r0, [r1, #0]
 8007432:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007436:	f01e 0f10 	tst.w	lr, #16
 800743a:	bf08      	it	eq
 800743c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007440:	f380 8809 	msr	PSP, r0
 8007444:	f3bf 8f6f 	isb	sy
 8007448:	4770      	bx	lr
 800744a:	bf00      	nop
 800744c:	f3af 8000 	nop.w

08007450 <pxCurrentTCBConst>:
 8007450:	20000a60 	.word	0x20000a60
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007454:	bf00      	nop
 8007456:	bf00      	nop

08007458 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007458:	b580      	push	{r7, lr}
 800745a:	b082      	sub	sp, #8
 800745c:	af00      	add	r7, sp, #0
	__asm volatile
 800745e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007462:	f383 8811 	msr	BASEPRI, r3
 8007466:	f3bf 8f6f 	isb	sy
 800746a:	f3bf 8f4f 	dsb	sy
 800746e:	607b      	str	r3, [r7, #4]
}
 8007470:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007472:	f7fe fed5 	bl	8006220 <xTaskIncrementTick>
 8007476:	4603      	mov	r3, r0
 8007478:	2b00      	cmp	r3, #0
 800747a:	d003      	beq.n	8007484 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800747c:	4b06      	ldr	r3, [pc, #24]	; (8007498 <xPortSysTickHandler+0x40>)
 800747e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007482:	601a      	str	r2, [r3, #0]
 8007484:	2300      	movs	r3, #0
 8007486:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007488:	683b      	ldr	r3, [r7, #0]
 800748a:	f383 8811 	msr	BASEPRI, r3
}
 800748e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007490:	bf00      	nop
 8007492:	3708      	adds	r7, #8
 8007494:	46bd      	mov	sp, r7
 8007496:	bd80      	pop	{r7, pc}
 8007498:	e000ed04 	.word	0xe000ed04

0800749c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800749c:	b480      	push	{r7}
 800749e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80074a0:	4b0b      	ldr	r3, [pc, #44]	; (80074d0 <vPortSetupTimerInterrupt+0x34>)
 80074a2:	2200      	movs	r2, #0
 80074a4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80074a6:	4b0b      	ldr	r3, [pc, #44]	; (80074d4 <vPortSetupTimerInterrupt+0x38>)
 80074a8:	2200      	movs	r2, #0
 80074aa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80074ac:	4b0a      	ldr	r3, [pc, #40]	; (80074d8 <vPortSetupTimerInterrupt+0x3c>)
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	4a0a      	ldr	r2, [pc, #40]	; (80074dc <vPortSetupTimerInterrupt+0x40>)
 80074b2:	fba2 2303 	umull	r2, r3, r2, r3
 80074b6:	099b      	lsrs	r3, r3, #6
 80074b8:	4a09      	ldr	r2, [pc, #36]	; (80074e0 <vPortSetupTimerInterrupt+0x44>)
 80074ba:	3b01      	subs	r3, #1
 80074bc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80074be:	4b04      	ldr	r3, [pc, #16]	; (80074d0 <vPortSetupTimerInterrupt+0x34>)
 80074c0:	2207      	movs	r2, #7
 80074c2:	601a      	str	r2, [r3, #0]
}
 80074c4:	bf00      	nop
 80074c6:	46bd      	mov	sp, r7
 80074c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074cc:	4770      	bx	lr
 80074ce:	bf00      	nop
 80074d0:	e000e010 	.word	0xe000e010
 80074d4:	e000e018 	.word	0xe000e018
 80074d8:	20000010 	.word	0x20000010
 80074dc:	10624dd3 	.word	0x10624dd3
 80074e0:	e000e014 	.word	0xe000e014

080074e4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80074e4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80074f4 <vPortEnableVFP+0x10>
 80074e8:	6801      	ldr	r1, [r0, #0]
 80074ea:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80074ee:	6001      	str	r1, [r0, #0]
 80074f0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80074f2:	bf00      	nop
 80074f4:	e000ed88 	.word	0xe000ed88

080074f8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80074f8:	b480      	push	{r7}
 80074fa:	b085      	sub	sp, #20
 80074fc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80074fe:	f3ef 8305 	mrs	r3, IPSR
 8007502:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	2b0f      	cmp	r3, #15
 8007508:	d914      	bls.n	8007534 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800750a:	4a17      	ldr	r2, [pc, #92]	; (8007568 <vPortValidateInterruptPriority+0x70>)
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	4413      	add	r3, r2
 8007510:	781b      	ldrb	r3, [r3, #0]
 8007512:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007514:	4b15      	ldr	r3, [pc, #84]	; (800756c <vPortValidateInterruptPriority+0x74>)
 8007516:	781b      	ldrb	r3, [r3, #0]
 8007518:	7afa      	ldrb	r2, [r7, #11]
 800751a:	429a      	cmp	r2, r3
 800751c:	d20a      	bcs.n	8007534 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800751e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007522:	f383 8811 	msr	BASEPRI, r3
 8007526:	f3bf 8f6f 	isb	sy
 800752a:	f3bf 8f4f 	dsb	sy
 800752e:	607b      	str	r3, [r7, #4]
}
 8007530:	bf00      	nop
 8007532:	e7fe      	b.n	8007532 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007534:	4b0e      	ldr	r3, [pc, #56]	; (8007570 <vPortValidateInterruptPriority+0x78>)
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800753c:	4b0d      	ldr	r3, [pc, #52]	; (8007574 <vPortValidateInterruptPriority+0x7c>)
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	429a      	cmp	r2, r3
 8007542:	d90a      	bls.n	800755a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8007544:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007548:	f383 8811 	msr	BASEPRI, r3
 800754c:	f3bf 8f6f 	isb	sy
 8007550:	f3bf 8f4f 	dsb	sy
 8007554:	603b      	str	r3, [r7, #0]
}
 8007556:	bf00      	nop
 8007558:	e7fe      	b.n	8007558 <vPortValidateInterruptPriority+0x60>
	}
 800755a:	bf00      	nop
 800755c:	3714      	adds	r7, #20
 800755e:	46bd      	mov	sp, r7
 8007560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007564:	4770      	bx	lr
 8007566:	bf00      	nop
 8007568:	e000e3f0 	.word	0xe000e3f0
 800756c:	2000108c 	.word	0x2000108c
 8007570:	e000ed0c 	.word	0xe000ed0c
 8007574:	20001090 	.word	0x20001090

08007578 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007578:	b580      	push	{r7, lr}
 800757a:	b08a      	sub	sp, #40	; 0x28
 800757c:	af00      	add	r7, sp, #0
 800757e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007580:	2300      	movs	r3, #0
 8007582:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007584:	f7fe fd90 	bl	80060a8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007588:	4b5b      	ldr	r3, [pc, #364]	; (80076f8 <pvPortMalloc+0x180>)
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	2b00      	cmp	r3, #0
 800758e:	d101      	bne.n	8007594 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007590:	f000 f920 	bl	80077d4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007594:	4b59      	ldr	r3, [pc, #356]	; (80076fc <pvPortMalloc+0x184>)
 8007596:	681a      	ldr	r2, [r3, #0]
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	4013      	ands	r3, r2
 800759c:	2b00      	cmp	r3, #0
 800759e:	f040 8093 	bne.w	80076c8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d01d      	beq.n	80075e4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80075a8:	2208      	movs	r2, #8
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	4413      	add	r3, r2
 80075ae:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	f003 0307 	and.w	r3, r3, #7
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d014      	beq.n	80075e4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	f023 0307 	bic.w	r3, r3, #7
 80075c0:	3308      	adds	r3, #8
 80075c2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	f003 0307 	and.w	r3, r3, #7
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d00a      	beq.n	80075e4 <pvPortMalloc+0x6c>
	__asm volatile
 80075ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075d2:	f383 8811 	msr	BASEPRI, r3
 80075d6:	f3bf 8f6f 	isb	sy
 80075da:	f3bf 8f4f 	dsb	sy
 80075de:	617b      	str	r3, [r7, #20]
}
 80075e0:	bf00      	nop
 80075e2:	e7fe      	b.n	80075e2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d06e      	beq.n	80076c8 <pvPortMalloc+0x150>
 80075ea:	4b45      	ldr	r3, [pc, #276]	; (8007700 <pvPortMalloc+0x188>)
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	687a      	ldr	r2, [r7, #4]
 80075f0:	429a      	cmp	r2, r3
 80075f2:	d869      	bhi.n	80076c8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80075f4:	4b43      	ldr	r3, [pc, #268]	; (8007704 <pvPortMalloc+0x18c>)
 80075f6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80075f8:	4b42      	ldr	r3, [pc, #264]	; (8007704 <pvPortMalloc+0x18c>)
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80075fe:	e004      	b.n	800760a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8007600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007602:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800760a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800760c:	685b      	ldr	r3, [r3, #4]
 800760e:	687a      	ldr	r2, [r7, #4]
 8007610:	429a      	cmp	r2, r3
 8007612:	d903      	bls.n	800761c <pvPortMalloc+0xa4>
 8007614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	2b00      	cmp	r3, #0
 800761a:	d1f1      	bne.n	8007600 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800761c:	4b36      	ldr	r3, [pc, #216]	; (80076f8 <pvPortMalloc+0x180>)
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007622:	429a      	cmp	r2, r3
 8007624:	d050      	beq.n	80076c8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007626:	6a3b      	ldr	r3, [r7, #32]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	2208      	movs	r2, #8
 800762c:	4413      	add	r3, r2
 800762e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007632:	681a      	ldr	r2, [r3, #0]
 8007634:	6a3b      	ldr	r3, [r7, #32]
 8007636:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800763a:	685a      	ldr	r2, [r3, #4]
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	1ad2      	subs	r2, r2, r3
 8007640:	2308      	movs	r3, #8
 8007642:	005b      	lsls	r3, r3, #1
 8007644:	429a      	cmp	r2, r3
 8007646:	d91f      	bls.n	8007688 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007648:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	4413      	add	r3, r2
 800764e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007650:	69bb      	ldr	r3, [r7, #24]
 8007652:	f003 0307 	and.w	r3, r3, #7
 8007656:	2b00      	cmp	r3, #0
 8007658:	d00a      	beq.n	8007670 <pvPortMalloc+0xf8>
	__asm volatile
 800765a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800765e:	f383 8811 	msr	BASEPRI, r3
 8007662:	f3bf 8f6f 	isb	sy
 8007666:	f3bf 8f4f 	dsb	sy
 800766a:	613b      	str	r3, [r7, #16]
}
 800766c:	bf00      	nop
 800766e:	e7fe      	b.n	800766e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007672:	685a      	ldr	r2, [r3, #4]
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	1ad2      	subs	r2, r2, r3
 8007678:	69bb      	ldr	r3, [r7, #24]
 800767a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800767c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800767e:	687a      	ldr	r2, [r7, #4]
 8007680:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007682:	69b8      	ldr	r0, [r7, #24]
 8007684:	f000 f908 	bl	8007898 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007688:	4b1d      	ldr	r3, [pc, #116]	; (8007700 <pvPortMalloc+0x188>)
 800768a:	681a      	ldr	r2, [r3, #0]
 800768c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800768e:	685b      	ldr	r3, [r3, #4]
 8007690:	1ad3      	subs	r3, r2, r3
 8007692:	4a1b      	ldr	r2, [pc, #108]	; (8007700 <pvPortMalloc+0x188>)
 8007694:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007696:	4b1a      	ldr	r3, [pc, #104]	; (8007700 <pvPortMalloc+0x188>)
 8007698:	681a      	ldr	r2, [r3, #0]
 800769a:	4b1b      	ldr	r3, [pc, #108]	; (8007708 <pvPortMalloc+0x190>)
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	429a      	cmp	r2, r3
 80076a0:	d203      	bcs.n	80076aa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80076a2:	4b17      	ldr	r3, [pc, #92]	; (8007700 <pvPortMalloc+0x188>)
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	4a18      	ldr	r2, [pc, #96]	; (8007708 <pvPortMalloc+0x190>)
 80076a8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80076aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076ac:	685a      	ldr	r2, [r3, #4]
 80076ae:	4b13      	ldr	r3, [pc, #76]	; (80076fc <pvPortMalloc+0x184>)
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	431a      	orrs	r2, r3
 80076b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076b6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80076b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076ba:	2200      	movs	r2, #0
 80076bc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80076be:	4b13      	ldr	r3, [pc, #76]	; (800770c <pvPortMalloc+0x194>)
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	3301      	adds	r3, #1
 80076c4:	4a11      	ldr	r2, [pc, #68]	; (800770c <pvPortMalloc+0x194>)
 80076c6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80076c8:	f7fe fcfc 	bl	80060c4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80076cc:	69fb      	ldr	r3, [r7, #28]
 80076ce:	f003 0307 	and.w	r3, r3, #7
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d00a      	beq.n	80076ec <pvPortMalloc+0x174>
	__asm volatile
 80076d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076da:	f383 8811 	msr	BASEPRI, r3
 80076de:	f3bf 8f6f 	isb	sy
 80076e2:	f3bf 8f4f 	dsb	sy
 80076e6:	60fb      	str	r3, [r7, #12]
}
 80076e8:	bf00      	nop
 80076ea:	e7fe      	b.n	80076ea <pvPortMalloc+0x172>
	return pvReturn;
 80076ec:	69fb      	ldr	r3, [r7, #28]
}
 80076ee:	4618      	mov	r0, r3
 80076f0:	3728      	adds	r7, #40	; 0x28
 80076f2:	46bd      	mov	sp, r7
 80076f4:	bd80      	pop	{r7, pc}
 80076f6:	bf00      	nop
 80076f8:	20001c54 	.word	0x20001c54
 80076fc:	20001c68 	.word	0x20001c68
 8007700:	20001c58 	.word	0x20001c58
 8007704:	20001c4c 	.word	0x20001c4c
 8007708:	20001c5c 	.word	0x20001c5c
 800770c:	20001c60 	.word	0x20001c60

08007710 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007710:	b580      	push	{r7, lr}
 8007712:	b086      	sub	sp, #24
 8007714:	af00      	add	r7, sp, #0
 8007716:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	2b00      	cmp	r3, #0
 8007720:	d04d      	beq.n	80077be <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007722:	2308      	movs	r3, #8
 8007724:	425b      	negs	r3, r3
 8007726:	697a      	ldr	r2, [r7, #20]
 8007728:	4413      	add	r3, r2
 800772a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800772c:	697b      	ldr	r3, [r7, #20]
 800772e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007730:	693b      	ldr	r3, [r7, #16]
 8007732:	685a      	ldr	r2, [r3, #4]
 8007734:	4b24      	ldr	r3, [pc, #144]	; (80077c8 <vPortFree+0xb8>)
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	4013      	ands	r3, r2
 800773a:	2b00      	cmp	r3, #0
 800773c:	d10a      	bne.n	8007754 <vPortFree+0x44>
	__asm volatile
 800773e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007742:	f383 8811 	msr	BASEPRI, r3
 8007746:	f3bf 8f6f 	isb	sy
 800774a:	f3bf 8f4f 	dsb	sy
 800774e:	60fb      	str	r3, [r7, #12]
}
 8007750:	bf00      	nop
 8007752:	e7fe      	b.n	8007752 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007754:	693b      	ldr	r3, [r7, #16]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	2b00      	cmp	r3, #0
 800775a:	d00a      	beq.n	8007772 <vPortFree+0x62>
	__asm volatile
 800775c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007760:	f383 8811 	msr	BASEPRI, r3
 8007764:	f3bf 8f6f 	isb	sy
 8007768:	f3bf 8f4f 	dsb	sy
 800776c:	60bb      	str	r3, [r7, #8]
}
 800776e:	bf00      	nop
 8007770:	e7fe      	b.n	8007770 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007772:	693b      	ldr	r3, [r7, #16]
 8007774:	685a      	ldr	r2, [r3, #4]
 8007776:	4b14      	ldr	r3, [pc, #80]	; (80077c8 <vPortFree+0xb8>)
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	4013      	ands	r3, r2
 800777c:	2b00      	cmp	r3, #0
 800777e:	d01e      	beq.n	80077be <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007780:	693b      	ldr	r3, [r7, #16]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	2b00      	cmp	r3, #0
 8007786:	d11a      	bne.n	80077be <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007788:	693b      	ldr	r3, [r7, #16]
 800778a:	685a      	ldr	r2, [r3, #4]
 800778c:	4b0e      	ldr	r3, [pc, #56]	; (80077c8 <vPortFree+0xb8>)
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	43db      	mvns	r3, r3
 8007792:	401a      	ands	r2, r3
 8007794:	693b      	ldr	r3, [r7, #16]
 8007796:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007798:	f7fe fc86 	bl	80060a8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800779c:	693b      	ldr	r3, [r7, #16]
 800779e:	685a      	ldr	r2, [r3, #4]
 80077a0:	4b0a      	ldr	r3, [pc, #40]	; (80077cc <vPortFree+0xbc>)
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	4413      	add	r3, r2
 80077a6:	4a09      	ldr	r2, [pc, #36]	; (80077cc <vPortFree+0xbc>)
 80077a8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80077aa:	6938      	ldr	r0, [r7, #16]
 80077ac:	f000 f874 	bl	8007898 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80077b0:	4b07      	ldr	r3, [pc, #28]	; (80077d0 <vPortFree+0xc0>)
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	3301      	adds	r3, #1
 80077b6:	4a06      	ldr	r2, [pc, #24]	; (80077d0 <vPortFree+0xc0>)
 80077b8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80077ba:	f7fe fc83 	bl	80060c4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80077be:	bf00      	nop
 80077c0:	3718      	adds	r7, #24
 80077c2:	46bd      	mov	sp, r7
 80077c4:	bd80      	pop	{r7, pc}
 80077c6:	bf00      	nop
 80077c8:	20001c68 	.word	0x20001c68
 80077cc:	20001c58 	.word	0x20001c58
 80077d0:	20001c64 	.word	0x20001c64

080077d4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80077d4:	b480      	push	{r7}
 80077d6:	b085      	sub	sp, #20
 80077d8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80077da:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80077de:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80077e0:	4b27      	ldr	r3, [pc, #156]	; (8007880 <prvHeapInit+0xac>)
 80077e2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	f003 0307 	and.w	r3, r3, #7
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d00c      	beq.n	8007808 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	3307      	adds	r3, #7
 80077f2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	f023 0307 	bic.w	r3, r3, #7
 80077fa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80077fc:	68ba      	ldr	r2, [r7, #8]
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	1ad3      	subs	r3, r2, r3
 8007802:	4a1f      	ldr	r2, [pc, #124]	; (8007880 <prvHeapInit+0xac>)
 8007804:	4413      	add	r3, r2
 8007806:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800780c:	4a1d      	ldr	r2, [pc, #116]	; (8007884 <prvHeapInit+0xb0>)
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007812:	4b1c      	ldr	r3, [pc, #112]	; (8007884 <prvHeapInit+0xb0>)
 8007814:	2200      	movs	r2, #0
 8007816:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	68ba      	ldr	r2, [r7, #8]
 800781c:	4413      	add	r3, r2
 800781e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007820:	2208      	movs	r2, #8
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	1a9b      	subs	r3, r3, r2
 8007826:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	f023 0307 	bic.w	r3, r3, #7
 800782e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	4a15      	ldr	r2, [pc, #84]	; (8007888 <prvHeapInit+0xb4>)
 8007834:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007836:	4b14      	ldr	r3, [pc, #80]	; (8007888 <prvHeapInit+0xb4>)
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	2200      	movs	r2, #0
 800783c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800783e:	4b12      	ldr	r3, [pc, #72]	; (8007888 <prvHeapInit+0xb4>)
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	2200      	movs	r2, #0
 8007844:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800784a:	683b      	ldr	r3, [r7, #0]
 800784c:	68fa      	ldr	r2, [r7, #12]
 800784e:	1ad2      	subs	r2, r2, r3
 8007850:	683b      	ldr	r3, [r7, #0]
 8007852:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007854:	4b0c      	ldr	r3, [pc, #48]	; (8007888 <prvHeapInit+0xb4>)
 8007856:	681a      	ldr	r2, [r3, #0]
 8007858:	683b      	ldr	r3, [r7, #0]
 800785a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800785c:	683b      	ldr	r3, [r7, #0]
 800785e:	685b      	ldr	r3, [r3, #4]
 8007860:	4a0a      	ldr	r2, [pc, #40]	; (800788c <prvHeapInit+0xb8>)
 8007862:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007864:	683b      	ldr	r3, [r7, #0]
 8007866:	685b      	ldr	r3, [r3, #4]
 8007868:	4a09      	ldr	r2, [pc, #36]	; (8007890 <prvHeapInit+0xbc>)
 800786a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800786c:	4b09      	ldr	r3, [pc, #36]	; (8007894 <prvHeapInit+0xc0>)
 800786e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007872:	601a      	str	r2, [r3, #0]
}
 8007874:	bf00      	nop
 8007876:	3714      	adds	r7, #20
 8007878:	46bd      	mov	sp, r7
 800787a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800787e:	4770      	bx	lr
 8007880:	20001094 	.word	0x20001094
 8007884:	20001c4c 	.word	0x20001c4c
 8007888:	20001c54 	.word	0x20001c54
 800788c:	20001c5c 	.word	0x20001c5c
 8007890:	20001c58 	.word	0x20001c58
 8007894:	20001c68 	.word	0x20001c68

08007898 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007898:	b480      	push	{r7}
 800789a:	b085      	sub	sp, #20
 800789c:	af00      	add	r7, sp, #0
 800789e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80078a0:	4b28      	ldr	r3, [pc, #160]	; (8007944 <prvInsertBlockIntoFreeList+0xac>)
 80078a2:	60fb      	str	r3, [r7, #12]
 80078a4:	e002      	b.n	80078ac <prvInsertBlockIntoFreeList+0x14>
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	60fb      	str	r3, [r7, #12]
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	687a      	ldr	r2, [r7, #4]
 80078b2:	429a      	cmp	r2, r3
 80078b4:	d8f7      	bhi.n	80078a6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	685b      	ldr	r3, [r3, #4]
 80078be:	68ba      	ldr	r2, [r7, #8]
 80078c0:	4413      	add	r3, r2
 80078c2:	687a      	ldr	r2, [r7, #4]
 80078c4:	429a      	cmp	r2, r3
 80078c6:	d108      	bne.n	80078da <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	685a      	ldr	r2, [r3, #4]
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	685b      	ldr	r3, [r3, #4]
 80078d0:	441a      	add	r2, r3
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	685b      	ldr	r3, [r3, #4]
 80078e2:	68ba      	ldr	r2, [r7, #8]
 80078e4:	441a      	add	r2, r3
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	429a      	cmp	r2, r3
 80078ec:	d118      	bne.n	8007920 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	681a      	ldr	r2, [r3, #0]
 80078f2:	4b15      	ldr	r3, [pc, #84]	; (8007948 <prvInsertBlockIntoFreeList+0xb0>)
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	429a      	cmp	r2, r3
 80078f8:	d00d      	beq.n	8007916 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	685a      	ldr	r2, [r3, #4]
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	685b      	ldr	r3, [r3, #4]
 8007904:	441a      	add	r2, r3
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	681a      	ldr	r2, [r3, #0]
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	601a      	str	r2, [r3, #0]
 8007914:	e008      	b.n	8007928 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007916:	4b0c      	ldr	r3, [pc, #48]	; (8007948 <prvInsertBlockIntoFreeList+0xb0>)
 8007918:	681a      	ldr	r2, [r3, #0]
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	601a      	str	r2, [r3, #0]
 800791e:	e003      	b.n	8007928 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	681a      	ldr	r2, [r3, #0]
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007928:	68fa      	ldr	r2, [r7, #12]
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	429a      	cmp	r2, r3
 800792e:	d002      	beq.n	8007936 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	687a      	ldr	r2, [r7, #4]
 8007934:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007936:	bf00      	nop
 8007938:	3714      	adds	r7, #20
 800793a:	46bd      	mov	sp, r7
 800793c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007940:	4770      	bx	lr
 8007942:	bf00      	nop
 8007944:	20001c4c 	.word	0x20001c4c
 8007948:	20001c54 	.word	0x20001c54

0800794c <__libc_init_array>:
 800794c:	b570      	push	{r4, r5, r6, lr}
 800794e:	4d0d      	ldr	r5, [pc, #52]	; (8007984 <__libc_init_array+0x38>)
 8007950:	4c0d      	ldr	r4, [pc, #52]	; (8007988 <__libc_init_array+0x3c>)
 8007952:	1b64      	subs	r4, r4, r5
 8007954:	10a4      	asrs	r4, r4, #2
 8007956:	2600      	movs	r6, #0
 8007958:	42a6      	cmp	r6, r4
 800795a:	d109      	bne.n	8007970 <__libc_init_array+0x24>
 800795c:	4d0b      	ldr	r5, [pc, #44]	; (800798c <__libc_init_array+0x40>)
 800795e:	4c0c      	ldr	r4, [pc, #48]	; (8007990 <__libc_init_array+0x44>)
 8007960:	f000 f8f2 	bl	8007b48 <_init>
 8007964:	1b64      	subs	r4, r4, r5
 8007966:	10a4      	asrs	r4, r4, #2
 8007968:	2600      	movs	r6, #0
 800796a:	42a6      	cmp	r6, r4
 800796c:	d105      	bne.n	800797a <__libc_init_array+0x2e>
 800796e:	bd70      	pop	{r4, r5, r6, pc}
 8007970:	f855 3b04 	ldr.w	r3, [r5], #4
 8007974:	4798      	blx	r3
 8007976:	3601      	adds	r6, #1
 8007978:	e7ee      	b.n	8007958 <__libc_init_array+0xc>
 800797a:	f855 3b04 	ldr.w	r3, [r5], #4
 800797e:	4798      	blx	r3
 8007980:	3601      	adds	r6, #1
 8007982:	e7f2      	b.n	800796a <__libc_init_array+0x1e>
 8007984:	08007c58 	.word	0x08007c58
 8007988:	08007c58 	.word	0x08007c58
 800798c:	08007c58 	.word	0x08007c58
 8007990:	08007c5c 	.word	0x08007c5c

08007994 <__retarget_lock_acquire_recursive>:
 8007994:	4770      	bx	lr

08007996 <__retarget_lock_release_recursive>:
 8007996:	4770      	bx	lr

08007998 <memcpy>:
 8007998:	440a      	add	r2, r1
 800799a:	4291      	cmp	r1, r2
 800799c:	f100 33ff 	add.w	r3, r0, #4294967295
 80079a0:	d100      	bne.n	80079a4 <memcpy+0xc>
 80079a2:	4770      	bx	lr
 80079a4:	b510      	push	{r4, lr}
 80079a6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80079aa:	f803 4f01 	strb.w	r4, [r3, #1]!
 80079ae:	4291      	cmp	r1, r2
 80079b0:	d1f9      	bne.n	80079a6 <memcpy+0xe>
 80079b2:	bd10      	pop	{r4, pc}

080079b4 <memset>:
 80079b4:	4402      	add	r2, r0
 80079b6:	4603      	mov	r3, r0
 80079b8:	4293      	cmp	r3, r2
 80079ba:	d100      	bne.n	80079be <memset+0xa>
 80079bc:	4770      	bx	lr
 80079be:	f803 1b01 	strb.w	r1, [r3], #1
 80079c2:	e7f9      	b.n	80079b8 <memset+0x4>

080079c4 <cleanup_glue>:
 80079c4:	b538      	push	{r3, r4, r5, lr}
 80079c6:	460c      	mov	r4, r1
 80079c8:	6809      	ldr	r1, [r1, #0]
 80079ca:	4605      	mov	r5, r0
 80079cc:	b109      	cbz	r1, 80079d2 <cleanup_glue+0xe>
 80079ce:	f7ff fff9 	bl	80079c4 <cleanup_glue>
 80079d2:	4621      	mov	r1, r4
 80079d4:	4628      	mov	r0, r5
 80079d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80079da:	f000 b869 	b.w	8007ab0 <_free_r>
	...

080079e0 <_reclaim_reent>:
 80079e0:	4b2c      	ldr	r3, [pc, #176]	; (8007a94 <_reclaim_reent+0xb4>)
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	4283      	cmp	r3, r0
 80079e6:	b570      	push	{r4, r5, r6, lr}
 80079e8:	4604      	mov	r4, r0
 80079ea:	d051      	beq.n	8007a90 <_reclaim_reent+0xb0>
 80079ec:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80079ee:	b143      	cbz	r3, 8007a02 <_reclaim_reent+0x22>
 80079f0:	68db      	ldr	r3, [r3, #12]
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d14a      	bne.n	8007a8c <_reclaim_reent+0xac>
 80079f6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80079f8:	6819      	ldr	r1, [r3, #0]
 80079fa:	b111      	cbz	r1, 8007a02 <_reclaim_reent+0x22>
 80079fc:	4620      	mov	r0, r4
 80079fe:	f000 f857 	bl	8007ab0 <_free_r>
 8007a02:	6961      	ldr	r1, [r4, #20]
 8007a04:	b111      	cbz	r1, 8007a0c <_reclaim_reent+0x2c>
 8007a06:	4620      	mov	r0, r4
 8007a08:	f000 f852 	bl	8007ab0 <_free_r>
 8007a0c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8007a0e:	b111      	cbz	r1, 8007a16 <_reclaim_reent+0x36>
 8007a10:	4620      	mov	r0, r4
 8007a12:	f000 f84d 	bl	8007ab0 <_free_r>
 8007a16:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8007a18:	b111      	cbz	r1, 8007a20 <_reclaim_reent+0x40>
 8007a1a:	4620      	mov	r0, r4
 8007a1c:	f000 f848 	bl	8007ab0 <_free_r>
 8007a20:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8007a22:	b111      	cbz	r1, 8007a2a <_reclaim_reent+0x4a>
 8007a24:	4620      	mov	r0, r4
 8007a26:	f000 f843 	bl	8007ab0 <_free_r>
 8007a2a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8007a2c:	b111      	cbz	r1, 8007a34 <_reclaim_reent+0x54>
 8007a2e:	4620      	mov	r0, r4
 8007a30:	f000 f83e 	bl	8007ab0 <_free_r>
 8007a34:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8007a36:	b111      	cbz	r1, 8007a3e <_reclaim_reent+0x5e>
 8007a38:	4620      	mov	r0, r4
 8007a3a:	f000 f839 	bl	8007ab0 <_free_r>
 8007a3e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8007a40:	b111      	cbz	r1, 8007a48 <_reclaim_reent+0x68>
 8007a42:	4620      	mov	r0, r4
 8007a44:	f000 f834 	bl	8007ab0 <_free_r>
 8007a48:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007a4a:	b111      	cbz	r1, 8007a52 <_reclaim_reent+0x72>
 8007a4c:	4620      	mov	r0, r4
 8007a4e:	f000 f82f 	bl	8007ab0 <_free_r>
 8007a52:	69a3      	ldr	r3, [r4, #24]
 8007a54:	b1e3      	cbz	r3, 8007a90 <_reclaim_reent+0xb0>
 8007a56:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8007a58:	4620      	mov	r0, r4
 8007a5a:	4798      	blx	r3
 8007a5c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8007a5e:	b1b9      	cbz	r1, 8007a90 <_reclaim_reent+0xb0>
 8007a60:	4620      	mov	r0, r4
 8007a62:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007a66:	f7ff bfad 	b.w	80079c4 <cleanup_glue>
 8007a6a:	5949      	ldr	r1, [r1, r5]
 8007a6c:	b941      	cbnz	r1, 8007a80 <_reclaim_reent+0xa0>
 8007a6e:	3504      	adds	r5, #4
 8007a70:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007a72:	2d80      	cmp	r5, #128	; 0x80
 8007a74:	68d9      	ldr	r1, [r3, #12]
 8007a76:	d1f8      	bne.n	8007a6a <_reclaim_reent+0x8a>
 8007a78:	4620      	mov	r0, r4
 8007a7a:	f000 f819 	bl	8007ab0 <_free_r>
 8007a7e:	e7ba      	b.n	80079f6 <_reclaim_reent+0x16>
 8007a80:	680e      	ldr	r6, [r1, #0]
 8007a82:	4620      	mov	r0, r4
 8007a84:	f000 f814 	bl	8007ab0 <_free_r>
 8007a88:	4631      	mov	r1, r6
 8007a8a:	e7ef      	b.n	8007a6c <_reclaim_reent+0x8c>
 8007a8c:	2500      	movs	r5, #0
 8007a8e:	e7ef      	b.n	8007a70 <_reclaim_reent+0x90>
 8007a90:	bd70      	pop	{r4, r5, r6, pc}
 8007a92:	bf00      	nop
 8007a94:	20000020 	.word	0x20000020

08007a98 <__malloc_lock>:
 8007a98:	4801      	ldr	r0, [pc, #4]	; (8007aa0 <__malloc_lock+0x8>)
 8007a9a:	f7ff bf7b 	b.w	8007994 <__retarget_lock_acquire_recursive>
 8007a9e:	bf00      	nop
 8007aa0:	20001c6c 	.word	0x20001c6c

08007aa4 <__malloc_unlock>:
 8007aa4:	4801      	ldr	r0, [pc, #4]	; (8007aac <__malloc_unlock+0x8>)
 8007aa6:	f7ff bf76 	b.w	8007996 <__retarget_lock_release_recursive>
 8007aaa:	bf00      	nop
 8007aac:	20001c6c 	.word	0x20001c6c

08007ab0 <_free_r>:
 8007ab0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007ab2:	2900      	cmp	r1, #0
 8007ab4:	d044      	beq.n	8007b40 <_free_r+0x90>
 8007ab6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007aba:	9001      	str	r0, [sp, #4]
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	f1a1 0404 	sub.w	r4, r1, #4
 8007ac2:	bfb8      	it	lt
 8007ac4:	18e4      	addlt	r4, r4, r3
 8007ac6:	f7ff ffe7 	bl	8007a98 <__malloc_lock>
 8007aca:	4a1e      	ldr	r2, [pc, #120]	; (8007b44 <_free_r+0x94>)
 8007acc:	9801      	ldr	r0, [sp, #4]
 8007ace:	6813      	ldr	r3, [r2, #0]
 8007ad0:	b933      	cbnz	r3, 8007ae0 <_free_r+0x30>
 8007ad2:	6063      	str	r3, [r4, #4]
 8007ad4:	6014      	str	r4, [r2, #0]
 8007ad6:	b003      	add	sp, #12
 8007ad8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007adc:	f7ff bfe2 	b.w	8007aa4 <__malloc_unlock>
 8007ae0:	42a3      	cmp	r3, r4
 8007ae2:	d908      	bls.n	8007af6 <_free_r+0x46>
 8007ae4:	6825      	ldr	r5, [r4, #0]
 8007ae6:	1961      	adds	r1, r4, r5
 8007ae8:	428b      	cmp	r3, r1
 8007aea:	bf01      	itttt	eq
 8007aec:	6819      	ldreq	r1, [r3, #0]
 8007aee:	685b      	ldreq	r3, [r3, #4]
 8007af0:	1949      	addeq	r1, r1, r5
 8007af2:	6021      	streq	r1, [r4, #0]
 8007af4:	e7ed      	b.n	8007ad2 <_free_r+0x22>
 8007af6:	461a      	mov	r2, r3
 8007af8:	685b      	ldr	r3, [r3, #4]
 8007afa:	b10b      	cbz	r3, 8007b00 <_free_r+0x50>
 8007afc:	42a3      	cmp	r3, r4
 8007afe:	d9fa      	bls.n	8007af6 <_free_r+0x46>
 8007b00:	6811      	ldr	r1, [r2, #0]
 8007b02:	1855      	adds	r5, r2, r1
 8007b04:	42a5      	cmp	r5, r4
 8007b06:	d10b      	bne.n	8007b20 <_free_r+0x70>
 8007b08:	6824      	ldr	r4, [r4, #0]
 8007b0a:	4421      	add	r1, r4
 8007b0c:	1854      	adds	r4, r2, r1
 8007b0e:	42a3      	cmp	r3, r4
 8007b10:	6011      	str	r1, [r2, #0]
 8007b12:	d1e0      	bne.n	8007ad6 <_free_r+0x26>
 8007b14:	681c      	ldr	r4, [r3, #0]
 8007b16:	685b      	ldr	r3, [r3, #4]
 8007b18:	6053      	str	r3, [r2, #4]
 8007b1a:	4421      	add	r1, r4
 8007b1c:	6011      	str	r1, [r2, #0]
 8007b1e:	e7da      	b.n	8007ad6 <_free_r+0x26>
 8007b20:	d902      	bls.n	8007b28 <_free_r+0x78>
 8007b22:	230c      	movs	r3, #12
 8007b24:	6003      	str	r3, [r0, #0]
 8007b26:	e7d6      	b.n	8007ad6 <_free_r+0x26>
 8007b28:	6825      	ldr	r5, [r4, #0]
 8007b2a:	1961      	adds	r1, r4, r5
 8007b2c:	428b      	cmp	r3, r1
 8007b2e:	bf04      	itt	eq
 8007b30:	6819      	ldreq	r1, [r3, #0]
 8007b32:	685b      	ldreq	r3, [r3, #4]
 8007b34:	6063      	str	r3, [r4, #4]
 8007b36:	bf04      	itt	eq
 8007b38:	1949      	addeq	r1, r1, r5
 8007b3a:	6021      	streq	r1, [r4, #0]
 8007b3c:	6054      	str	r4, [r2, #4]
 8007b3e:	e7ca      	b.n	8007ad6 <_free_r+0x26>
 8007b40:	b003      	add	sp, #12
 8007b42:	bd30      	pop	{r4, r5, pc}
 8007b44:	20001c70 	.word	0x20001c70

08007b48 <_init>:
 8007b48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b4a:	bf00      	nop
 8007b4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007b4e:	bc08      	pop	{r3}
 8007b50:	469e      	mov	lr, r3
 8007b52:	4770      	bx	lr

08007b54 <_fini>:
 8007b54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b56:	bf00      	nop
 8007b58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007b5a:	bc08      	pop	{r3}
 8007b5c:	469e      	mov	lr, r3
 8007b5e:	4770      	bx	lr
